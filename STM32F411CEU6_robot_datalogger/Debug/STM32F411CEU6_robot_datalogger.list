
STM32F411CEU6_robot_datalogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012550  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e8  080126f0  080126f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fd8  08012fd8  000141dc  2**0
                  CONTENTS
  4 .ARM          00000008  08012fd8  08012fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fe0  08012fe0  000141dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fe0  08012fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012fe4  08012fe4  00013fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08012fe8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000082fc  200001dc  080131c4  000141dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200084d8  080131c4  000144d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a6a  00000000  00000000  0001420c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000678d  00000000  00000000  0003bc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021a0  00000000  00000000  00042408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019a0  00000000  00000000  000445a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020503  00000000  00000000  00045f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e352  00000000  00000000  0006644b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5f6a  00000000  00000000  0009479d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a707  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009510  00000000  00000000  0013a74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  00143c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080126d8 	.word	0x080126d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080126d8 	.word	0x080126d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SDcard_get_queue_handle>:

TaskHandle_t SDCard_get_task_handle(void){
	return SDcard_task_handle;
}

QueueHandle_t SDcard_get_queue_handle(void){
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	return SDcard_queue_handle;
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <SDcard_get_queue_handle+0x14>)
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20002264 	.word	0x20002264

08000598 <path_select>:

static bool path_select(char* path, size_t buff_size, data_type_t data_type){
 8000598:	b5b0      	push	{r4, r5, r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	4613      	mov	r3, r2
 80005a4:	71fb      	strb	r3, [r7, #7]
	if(buff_size < 50*sizeof(char)){
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	2b31      	cmp	r3, #49	@ 0x31
 80005aa:	d815      	bhi.n	80005d8 <path_select+0x40>
		USB_PRINT("path buffer size too small\n\r");
 80005ac:	4b91      	ldr	r3, [pc, #580]	@ (80007f4 <path_select+0x25c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2101      	movs	r1, #1
 80005b2:	4618      	mov	r0, r3
 80005b4:	f00d fde8 	bl	800e188 <xQueueSemaphoreTake>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d003      	beq.n	80005c6 <path_select+0x2e>
 80005be:	211c      	movs	r1, #28
 80005c0:	488d      	ldr	r0, [pc, #564]	@ (80007f8 <path_select+0x260>)
 80005c2:	f010 f9ff 	bl	80109c4 <CDC_Transmit_FS>
 80005c6:	4b8b      	ldr	r3, [pc, #556]	@ (80007f4 <path_select+0x25c>)
 80005c8:	6818      	ldr	r0, [r3, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	f00d fb58 	bl	800dc84 <xQueueGenericSend>
		return false;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e108      	b.n	80007ea <path_select+0x252>
	}
	*path = '\0';
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
	switch(data_type){
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b10      	cmp	r3, #16
 80005e2:	f200 80eb 	bhi.w	80007bc <path_select+0x224>
 80005e6:	a201      	add	r2, pc, #4	@ (adr r2, 80005ec <path_select+0x54>)
 80005e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ec:	08000631 	.word	0x08000631
 80005f0:	08000647 	.word	0x08000647
 80005f4:	0800065f 	.word	0x0800065f
 80005f8:	08000675 	.word	0x08000675
 80005fc:	0800068d 	.word	0x0800068d
 8000600:	080006a3 	.word	0x080006a3
 8000604:	080006bb 	.word	0x080006bb
 8000608:	080006d3 	.word	0x080006d3
 800060c:	080006ef 	.word	0x080006ef
 8000610:	08000709 	.word	0x08000709
 8000614:	0800071d 	.word	0x0800071d
 8000618:	08000737 	.word	0x08000737
 800061c:	0800074f 	.word	0x0800074f
 8000620:	08000767 	.word	0x08000767
 8000624:	08000777 	.word	0x08000777
 8000628:	0800078b 	.word	0x0800078b
 800062c:	0800079f 	.word	0x0800079f
				case CORRENTE:
					strcpy(path, "CORRENTE.csv");
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4a72      	ldr	r2, [pc, #456]	@ (80007fc <path_select+0x264>)
 8000634:	461c      	mov	r4, r3
 8000636:	4613      	mov	r3, r2
 8000638:	cb07      	ldmia	r3!, {r0, r1, r2}
 800063a:	6020      	str	r0, [r4, #0]
 800063c:	6061      	str	r1, [r4, #4]
 800063e:	60a2      	str	r2, [r4, #8]
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	7323      	strb	r3, [r4, #12]
					break;
 8000644:	e0d0      	b.n	80007e8 <path_select+0x250>
				case VEL_ANG_MOTOR:
					strcpy(path, "VEL_ANG_MOTOR.csv");
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4a6d      	ldr	r2, [pc, #436]	@ (8000800 <path_select+0x268>)
 800064a:	461d      	mov	r5, r3
 800064c:	4614      	mov	r4, r2
 800064e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000650:	6028      	str	r0, [r5, #0]
 8000652:	6069      	str	r1, [r5, #4]
 8000654:	60aa      	str	r2, [r5, #8]
 8000656:	60eb      	str	r3, [r5, #12]
 8000658:	8823      	ldrh	r3, [r4, #0]
 800065a:	822b      	strh	r3, [r5, #16]
					break;
 800065c:	e0c4      	b.n	80007e8 <path_select+0x250>
				case ACEL_LIN:
					strcpy(path, "ACEL_LIN.csv");
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4a68      	ldr	r2, [pc, #416]	@ (8000804 <path_select+0x26c>)
 8000662:	461c      	mov	r4, r3
 8000664:	4613      	mov	r3, r2
 8000666:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000668:	6020      	str	r0, [r4, #0]
 800066a:	6061      	str	r1, [r4, #4]
 800066c:	60a2      	str	r2, [r4, #8]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	7323      	strb	r3, [r4, #12]
					break;
 8000672:	e0b9      	b.n	80007e8 <path_select+0x250>
				case VEL_ANG_GIRO:
					strcpy(path, "VEL_ANG_GIRO.csv");
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4a64      	ldr	r2, [pc, #400]	@ (8000808 <path_select+0x270>)
 8000678:	461d      	mov	r5, r3
 800067a:	4614      	mov	r4, r2
 800067c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800067e:	6028      	str	r0, [r5, #0]
 8000680:	6069      	str	r1, [r5, #4]
 8000682:	60aa      	str	r2, [r5, #8]
 8000684:	60eb      	str	r3, [r5, #12]
 8000686:	7823      	ldrb	r3, [r4, #0]
 8000688:	742b      	strb	r3, [r5, #16]
					break;
 800068a:	e0ad      	b.n	80007e8 <path_select+0x250>
				case CAMPO_MAG:
					strcpy(path, "CAMPO_MAG.csv");
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4a5f      	ldr	r2, [pc, #380]	@ (800080c <path_select+0x274>)
 8000690:	461c      	mov	r4, r3
 8000692:	4613      	mov	r3, r2
 8000694:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000696:	6020      	str	r0, [r4, #0]
 8000698:	6061      	str	r1, [r4, #4]
 800069a:	60a2      	str	r2, [r4, #8]
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	81a3      	strh	r3, [r4, #12]
					break;
 80006a0:	e0a2      	b.n	80007e8 <path_select+0x250>
				case A_CTRL_TRACAO:
					strcpy(path, "A_CTRL_TRACAO.csv");
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4a5a      	ldr	r2, [pc, #360]	@ (8000810 <path_select+0x278>)
 80006a6:	461d      	mov	r5, r3
 80006a8:	4614      	mov	r4, r2
 80006aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ac:	6028      	str	r0, [r5, #0]
 80006ae:	6069      	str	r1, [r5, #4]
 80006b0:	60aa      	str	r2, [r5, #8]
 80006b2:	60eb      	str	r3, [r5, #12]
 80006b4:	8823      	ldrh	r3, [r4, #0]
 80006b6:	822b      	strh	r3, [r5, #16]
					break;
 80006b8:	e096      	b.n	80007e8 <path_select+0x250>
				case G_CTRL_TRACAO:
					strcpy(path, "G_CTRL_TRACAO.csv");
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4a55      	ldr	r2, [pc, #340]	@ (8000814 <path_select+0x27c>)
 80006be:	461d      	mov	r5, r3
 80006c0:	4614      	mov	r4, r2
 80006c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c4:	6028      	str	r0, [r5, #0]
 80006c6:	6069      	str	r1, [r5, #4]
 80006c8:	60aa      	str	r2, [r5, #8]
 80006ca:	60eb      	str	r3, [r5, #12]
 80006cc:	8823      	ldrh	r3, [r4, #0]
 80006ce:	822b      	strh	r3, [r5, #16]
					break;
 80006d0:	e08a      	b.n	80007e8 <path_select+0x250>
				case G_CTRL_TRACAO_RX:
					strcpy(path, "G_CTRL_TRACAO_RX.csv");
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	4a50      	ldr	r2, [pc, #320]	@ (8000818 <path_select+0x280>)
 80006d6:	461d      	mov	r5, r3
 80006d8:	4614      	mov	r4, r2
 80006da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006dc:	6028      	str	r0, [r5, #0]
 80006de:	6069      	str	r1, [r5, #4]
 80006e0:	60aa      	str	r2, [r5, #8]
 80006e2:	60eb      	str	r3, [r5, #12]
 80006e4:	6820      	ldr	r0, [r4, #0]
 80006e6:	6128      	str	r0, [r5, #16]
 80006e8:	7923      	ldrb	r3, [r4, #4]
 80006ea:	752b      	strb	r3, [r5, #20]
					break;
 80006ec:	e07c      	b.n	80007e8 <path_select+0x250>
				case A_CTRL_VEL:
					strcpy(path, "A_CTRL_VEL.csv");
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4a4a      	ldr	r2, [pc, #296]	@ (800081c <path_select+0x284>)
 80006f2:	461c      	mov	r4, r3
 80006f4:	4613      	mov	r3, r2
 80006f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80006f8:	6020      	str	r0, [r4, #0]
 80006fa:	6061      	str	r1, [r4, #4]
 80006fc:	60a2      	str	r2, [r4, #8]
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	789b      	ldrb	r3, [r3, #2]
 8000702:	81a2      	strh	r2, [r4, #12]
 8000704:	73a3      	strb	r3, [r4, #14]
					break;
 8000706:	e06f      	b.n	80007e8 <path_select+0x250>
				case S_POINT_VEL:
					strcpy(path, "S_POINT_VEL.csv");
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4a45      	ldr	r2, [pc, #276]	@ (8000820 <path_select+0x288>)
 800070c:	461c      	mov	r4, r3
 800070e:	4615      	mov	r5, r2
 8000710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000712:	6020      	str	r0, [r4, #0]
 8000714:	6061      	str	r1, [r4, #4]
 8000716:	60a2      	str	r2, [r4, #8]
 8000718:	60e3      	str	r3, [r4, #12]
					break;
 800071a:	e065      	b.n	80007e8 <path_select+0x250>
				case G_CTRL_VEL:
					strcpy(path, "G_CTRL_VEL.csv");
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4a41      	ldr	r2, [pc, #260]	@ (8000824 <path_select+0x28c>)
 8000720:	461c      	mov	r4, r3
 8000722:	4613      	mov	r3, r2
 8000724:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000726:	6020      	str	r0, [r4, #0]
 8000728:	6061      	str	r1, [r4, #4]
 800072a:	60a2      	str	r2, [r4, #8]
 800072c:	881a      	ldrh	r2, [r3, #0]
 800072e:	789b      	ldrb	r3, [r3, #2]
 8000730:	81a2      	strh	r2, [r4, #12]
 8000732:	73a3      	strb	r3, [r4, #14]
					break;
 8000734:	e058      	b.n	80007e8 <path_select+0x250>
				case G_CTRL_VEL_RX:
					strcpy(path, "G_CTRL_VEL_RX.csv");
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	4a3b      	ldr	r2, [pc, #236]	@ (8000828 <path_select+0x290>)
 800073a:	461d      	mov	r5, r3
 800073c:	4614      	mov	r4, r2
 800073e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000740:	6028      	str	r0, [r5, #0]
 8000742:	6069      	str	r1, [r5, #4]
 8000744:	60aa      	str	r2, [r5, #8]
 8000746:	60eb      	str	r3, [r5, #12]
 8000748:	8823      	ldrh	r3, [r4, #0]
 800074a:	822b      	strh	r3, [r5, #16]
					break;
 800074c:	e04c      	b.n	80007e8 <path_select+0x250>
				case ANG_ROT_BASE:
					strcpy(path, "ANG_ROT_BASE.csv");
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	4a36      	ldr	r2, [pc, #216]	@ (800082c <path_select+0x294>)
 8000752:	461d      	mov	r5, r3
 8000754:	4614      	mov	r4, r2
 8000756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000758:	6028      	str	r0, [r5, #0]
 800075a:	6069      	str	r1, [r5, #4]
 800075c:	60aa      	str	r2, [r5, #8]
 800075e:	60eb      	str	r3, [r5, #12]
 8000760:	7823      	ldrb	r3, [r4, #0]
 8000762:	742b      	strb	r3, [r5, #16]
					break;
 8000764:	e040      	b.n	80007e8 <path_select+0x250>
				case GPS:
					strcpy(path, "GPS.csv");
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4931      	ldr	r1, [pc, #196]	@ (8000830 <path_select+0x298>)
 800076a:	461a      	mov	r2, r3
 800076c:	460b      	mov	r3, r1
 800076e:	cb03      	ldmia	r3!, {r0, r1}
 8000770:	6010      	str	r0, [r2, #0]
 8000772:	6051      	str	r1, [r2, #4]
					break;
 8000774:	e038      	b.n	80007e8 <path_select+0x250>
				case A_CTRL_POSI:
					strcpy(path, "A_CTRL_POSI.csv");
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	4a2e      	ldr	r2, [pc, #184]	@ (8000834 <path_select+0x29c>)
 800077a:	461c      	mov	r4, r3
 800077c:	4615      	mov	r5, r2
 800077e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000780:	6020      	str	r0, [r4, #0]
 8000782:	6061      	str	r1, [r4, #4]
 8000784:	60a2      	str	r2, [r4, #8]
 8000786:	60e3      	str	r3, [r4, #12]
					break;
 8000788:	e02e      	b.n	80007e8 <path_select+0x250>
				case G_CTRL_POSI:
					strcpy(path, "G_CTRL_POSI.csv");
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	4a2a      	ldr	r2, [pc, #168]	@ (8000838 <path_select+0x2a0>)
 800078e:	461c      	mov	r4, r3
 8000790:	4615      	mov	r5, r2
 8000792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000794:	6020      	str	r0, [r4, #0]
 8000796:	6061      	str	r1, [r4, #4]
 8000798:	60a2      	str	r2, [r4, #8]
 800079a:	60e3      	str	r3, [r4, #12]
					break;
 800079c:	e024      	b.n	80007e8 <path_select+0x250>
				case G_CTRL_POSI_RX:
					strcpy(path, "G_CTRL_POSI_RX.csv");
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4a26      	ldr	r2, [pc, #152]	@ (800083c <path_select+0x2a4>)
 80007a2:	461d      	mov	r5, r3
 80007a4:	4614      	mov	r4, r2
 80007a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007a8:	6028      	str	r0, [r5, #0]
 80007aa:	6069      	str	r1, [r5, #4]
 80007ac:	60aa      	str	r2, [r5, #8]
 80007ae:	60eb      	str	r3, [r5, #12]
 80007b0:	8823      	ldrh	r3, [r4, #0]
 80007b2:	78a2      	ldrb	r2, [r4, #2]
 80007b4:	822b      	strh	r3, [r5, #16]
 80007b6:	4613      	mov	r3, r2
 80007b8:	74ab      	strb	r3, [r5, #18]
					break;
 80007ba:	e015      	b.n	80007e8 <path_select+0x250>
				default:
					USB_PRINT("type not supported\n\r");
 80007bc:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <path_select+0x25c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00d fce0 	bl	800e188 <xQueueSemaphoreTake>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <path_select+0x23e>
 80007ce:	2114      	movs	r1, #20
 80007d0:	481b      	ldr	r0, [pc, #108]	@ (8000840 <path_select+0x2a8>)
 80007d2:	f010 f8f7 	bl	80109c4 <CDC_Transmit_FS>
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <path_select+0x25c>)
 80007d8:	6818      	ldr	r0, [r3, #0]
 80007da:	2300      	movs	r3, #0
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	f00d fa50 	bl	800dc84 <xQueueGenericSend>
					return false;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e000      	b.n	80007ea <path_select+0x252>
			}
	return true;
 80007e8:	2301      	movs	r3, #1
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bdb0      	pop	{r4, r5, r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20002260 	.word	0x20002260
 80007f8:	080126f0 	.word	0x080126f0
 80007fc:	08012710 	.word	0x08012710
 8000800:	08012720 	.word	0x08012720
 8000804:	08012734 	.word	0x08012734
 8000808:	08012744 	.word	0x08012744
 800080c:	08012758 	.word	0x08012758
 8000810:	08012768 	.word	0x08012768
 8000814:	0801277c 	.word	0x0801277c
 8000818:	08012790 	.word	0x08012790
 800081c:	080127a8 	.word	0x080127a8
 8000820:	080127b8 	.word	0x080127b8
 8000824:	080127c8 	.word	0x080127c8
 8000828:	080127d8 	.word	0x080127d8
 800082c:	080127ec 	.word	0x080127ec
 8000830:	08012800 	.word	0x08012800
 8000834:	08012808 	.word	0x08012808
 8000838:	08012818 	.word	0x08012818
 800083c:	08012828 	.word	0x08012828
 8000840:	0801283c 	.word	0x0801283c

08000844 <reset_files>:

static bool reset_files(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b0a8      	sub	sp, #160	@ 0xa0
 8000848:	af00      	add	r7, sp, #0
	int er = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	char path[50];
	char buffer[100];

	for(int i = 0; i < NumberOfTypes; i++){
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000856:	e090      	b.n	800097a <reset_files+0x136>
		er = path_select(path, sizeof(path), i);
 8000858:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800085c:	b2da      	uxtb	r2, r3
 800085e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000862:	2132      	movs	r1, #50	@ 0x32
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fe97 	bl	8000598 <path_select>
 800086a:	4603      	mov	r3, r0
 800086c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if(!er){
 8000870:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000874:	2b00      	cmp	r3, #0
 8000876:	d115      	bne.n	80008a4 <reset_files+0x60>
			USB_PRINT("error selecting path\n\r\r");
 8000878:	4b45      	ldr	r3, [pc, #276]	@ (8000990 <reset_files+0x14c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2101      	movs	r1, #1
 800087e:	4618      	mov	r0, r3
 8000880:	f00d fc82 	bl	800e188 <xQueueSemaphoreTake>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d003      	beq.n	8000892 <reset_files+0x4e>
 800088a:	2117      	movs	r1, #23
 800088c:	4841      	ldr	r0, [pc, #260]	@ (8000994 <reset_files+0x150>)
 800088e:	f010 f899 	bl	80109c4 <CDC_Transmit_FS>
 8000892:	4b3f      	ldr	r3, [pc, #252]	@ (8000990 <reset_files+0x14c>)
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	2300      	movs	r3, #0
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	f00d f9f2 	bl	800dc84 <xQueueGenericSend>
			return false;
 80008a0:	2300      	movs	r3, #0
 80008a2:	e070      	b.n	8000986 <reset_files+0x142>
		}

		er = f_stat(path, NULL);
 80008a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f00c f99f 	bl	800cbee <f_stat>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if(er != FR_OK){
 80008b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d027      	beq.n	800090e <reset_files+0xca>
			if(er == FR_NO_FILE) continue;
 80008be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	d053      	beq.n	800096e <reset_files+0x12a>
			sprintf(buffer, "error: %d\n\r", er);
 80008c6:	463b      	mov	r3, r7
 80008c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80008cc:	4932      	ldr	r1, [pc, #200]	@ (8000998 <reset_files+0x154>)
 80008ce:	4618      	mov	r0, r3
 80008d0:	f010 fdf8 	bl	80114c4 <siprintf>
			USB_PRINT(buffer);
 80008d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000990 <reset_files+0x14c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2101      	movs	r1, #1
 80008da:	4618      	mov	r0, r3
 80008dc:	f00d fc54 	bl	800e188 <xQueueSemaphoreTake>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00a      	beq.n	80008fc <reset_files+0xb8>
 80008e6:	463b      	mov	r3, r7
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fc79 	bl	80001e0 <strlen>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	463b      	mov	r3, r7
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f010 f864 	bl	80109c4 <CDC_Transmit_FS>
 80008fc:	4b24      	ldr	r3, [pc, #144]	@ (8000990 <reset_files+0x14c>)
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	2300      	movs	r3, #0
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	f00d f9bd 	bl	800dc84 <xQueueGenericSend>
			return false;
 800090a:	2300      	movs	r3, #0
 800090c:	e03b      	b.n	8000986 <reset_files+0x142>
		}

		er = f_unlink(path);
 800090e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000912:	4618      	mov	r0, r3
 8000914:	f00c f9a4 	bl	800cc60 <f_unlink>
 8000918:	4603      	mov	r3, r0
 800091a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if(er != FR_OK){
 800091e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000922:	2b00      	cmp	r3, #0
 8000924:	d024      	beq.n	8000970 <reset_files+0x12c>
			sprintf(buffer, "error: %d\n\r", er);
 8000926:	463b      	mov	r3, r7
 8000928:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800092c:	491a      	ldr	r1, [pc, #104]	@ (8000998 <reset_files+0x154>)
 800092e:	4618      	mov	r0, r3
 8000930:	f010 fdc8 	bl	80114c4 <siprintf>
			USB_PRINT(buffer);
 8000934:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <reset_files+0x14c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2101      	movs	r1, #1
 800093a:	4618      	mov	r0, r3
 800093c:	f00d fc24 	bl	800e188 <xQueueSemaphoreTake>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d00a      	beq.n	800095c <reset_files+0x118>
 8000946:	463b      	mov	r3, r7
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fc49 	bl	80001e0 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29a      	uxth	r2, r3
 8000952:	463b      	mov	r3, r7
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f010 f834 	bl	80109c4 <CDC_Transmit_FS>
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <reset_files+0x14c>)
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	2300      	movs	r3, #0
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	f00d f98d 	bl	800dc84 <xQueueGenericSend>
			return false;
 800096a:	2300      	movs	r3, #0
 800096c:	e00b      	b.n	8000986 <reset_files+0x142>
			if(er == FR_NO_FILE) continue;
 800096e:	bf00      	nop
	for(int i = 0; i < NumberOfTypes; i++){
 8000970:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000974:	3301      	adds	r3, #1
 8000976:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800097a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800097e:	2b10      	cmp	r3, #16
 8000980:	f77f af6a 	ble.w	8000858 <reset_files+0x14>
		}
	}
	return true;
 8000984:	2301      	movs	r3, #1
}
 8000986:	4618      	mov	r0, r3
 8000988:	37a0      	adds	r7, #160	@ 0xa0
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20002260 	.word	0x20002260
 8000994:	08012854 	.word	0x08012854
 8000998:	0801286c 	.word	0x0801286c

0800099c <SDcard_task>:

static void SDcard_task(void* arg){
 800099c:	b580      	push	{r7, lr}
 800099e:	b0b2      	sub	sp, #200	@ 0xc8
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	6078      	str	r0, [r7, #4]
	SD_data_t data = {0};
 80009a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
 80009b4:	615a      	str	r2, [r3, #20]
	char buffer[100];
	char path[50];
	int er = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	for(;;){
		if(xQueueReceive(SDcard_queue_handle, &data, portMAX_DELAY) != pdTRUE){
 80009bc:	4b9f      	ldr	r3, [pc, #636]	@ (8000c3c <SDcard_task+0x2a0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295
 80009c8:	4618      	mov	r0, r3
 80009ca:	f00d fafb 	bl	800dfc4 <xQueueReceive>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d014      	beq.n	80009fe <SDcard_task+0x62>
			USB_PRINT("error receive from queue\n\r");
 80009d4:	4b9a      	ldr	r3, [pc, #616]	@ (8000c40 <SDcard_task+0x2a4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f00d fbd4 	bl	800e188 <xQueueSemaphoreTake>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <SDcard_task+0x52>
 80009e6:	211a      	movs	r1, #26
 80009e8:	4896      	ldr	r0, [pc, #600]	@ (8000c44 <SDcard_task+0x2a8>)
 80009ea:	f00f ffeb 	bl	80109c4 <CDC_Transmit_FS>
 80009ee:	4b94      	ldr	r3, [pc, #592]	@ (8000c40 <SDcard_task+0x2a4>)
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	2300      	movs	r3, #0
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	f00d f944 	bl	800dc84 <xQueueGenericSend>
			continue;
 80009fc:	e11d      	b.n	8000c3a <SDcard_task+0x29e>
		}

		er = path_select(path, sizeof(path), data.data_type);
 80009fe:	f897 20b0 	ldrb.w	r2, [r7, #176]	@ 0xb0
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	2132      	movs	r1, #50	@ 0x32
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fdc5 	bl	8000598 <path_select>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		if(!er){
 8000a14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d114      	bne.n	8000a46 <SDcard_task+0xaa>
			USB_PRINT("error selecting path\n\r");
 8000a1c:	4b88      	ldr	r3, [pc, #544]	@ (8000c40 <SDcard_task+0x2a4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2101      	movs	r1, #1
 8000a22:	4618      	mov	r0, r3
 8000a24:	f00d fbb0 	bl	800e188 <xQueueSemaphoreTake>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <SDcard_task+0x9a>
 8000a2e:	2116      	movs	r1, #22
 8000a30:	4885      	ldr	r0, [pc, #532]	@ (8000c48 <SDcard_task+0x2ac>)
 8000a32:	f00f ffc7 	bl	80109c4 <CDC_Transmit_FS>
 8000a36:	4b82      	ldr	r3, [pc, #520]	@ (8000c40 <SDcard_task+0x2a4>)
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f00d f920 	bl	800dc84 <xQueueGenericSend>
			continue;
 8000a44:	e0f9      	b.n	8000c3a <SDcard_task+0x29e>
		}

		er = f_stat(path, NULL);
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f00c f8ce 	bl	800cbee <f_stat>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		if(er == FR_NO_FILE){
 8000a58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d137      	bne.n	8000ad0 <SDcard_task+0x134>
			f_open(&fil, path, FA_CREATE_ALWAYS | FA_WRITE);
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	220a      	movs	r2, #10
 8000a66:	4619      	mov	r1, r3
 8000a68:	4878      	ldr	r0, [pc, #480]	@ (8000c4c <SDcard_task+0x2b0>)
 8000a6a:	f00b f939 	bl	800bce0 <f_open>
			f_printf(&fil, "%s\n\r", path);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	461a      	mov	r2, r3
 8000a74:	4976      	ldr	r1, [pc, #472]	@ (8000c50 <SDcard_task+0x2b4>)
 8000a76:	4875      	ldr	r0, [pc, #468]	@ (8000c4c <SDcard_task+0x2b0>)
 8000a78:	f00c fa76 	bl	800cf68 <f_printf>
			if(data.array_size == 1){
 8000a7c:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d104      	bne.n	8000a8e <SDcard_task+0xf2>
				f_puts("timestamp,value\n\r", &fil);
 8000a84:	4971      	ldr	r1, [pc, #452]	@ (8000c4c <SDcard_task+0x2b0>)
 8000a86:	4873      	ldr	r0, [pc, #460]	@ (8000c54 <SDcard_task+0x2b8>)
 8000a88:	f00c fa4a 	bl	800cf20 <f_puts>
 8000a8c:	e01d      	b.n	8000aca <SDcard_task+0x12e>
			}
			else if(data.array_size == 3){
 8000a8e:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d104      	bne.n	8000aa0 <SDcard_task+0x104>
				f_puts("timestamp,value1,value2,value3\n\r", &fil);
 8000a96:	496d      	ldr	r1, [pc, #436]	@ (8000c4c <SDcard_task+0x2b0>)
 8000a98:	486f      	ldr	r0, [pc, #444]	@ (8000c58 <SDcard_task+0x2bc>)
 8000a9a:	f00c fa41 	bl	800cf20 <f_puts>
 8000a9e:	e014      	b.n	8000aca <SDcard_task+0x12e>
			}
			else{
				USB_PRINT("incompatible array size\n\r");
 8000aa0:	4b67      	ldr	r3, [pc, #412]	@ (8000c40 <SDcard_task+0x2a4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f00d fb6e 	bl	800e188 <xQueueSemaphoreTake>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <SDcard_task+0x11e>
 8000ab2:	2119      	movs	r1, #25
 8000ab4:	4869      	ldr	r0, [pc, #420]	@ (8000c5c <SDcard_task+0x2c0>)
 8000ab6:	f00f ff85 	bl	80109c4 <CDC_Transmit_FS>
 8000aba:	4b61      	ldr	r3, [pc, #388]	@ (8000c40 <SDcard_task+0x2a4>)
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f00d f8de 	bl	800dc84 <xQueueGenericSend>
				continue;
 8000ac8:	e0b7      	b.n	8000c3a <SDcard_task+0x29e>
			}
			f_close(&fil);
 8000aca:	4860      	ldr	r0, [pc, #384]	@ (8000c4c <SDcard_task+0x2b0>)
 8000acc:	f00b fe41 	bl	800c752 <f_close>
		}

		er = f_open(&fil, path, FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2233      	movs	r2, #51	@ 0x33
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	485c      	ldr	r0, [pc, #368]	@ (8000c4c <SDcard_task+0x2b0>)
 8000ada:	f00b f901 	bl	800bce0 <f_open>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		if(er != FR_OK){
 8000ae4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d025      	beq.n	8000b38 <SDcard_task+0x19c>
			sprintf(buffer, "error: %d\n\r", er);
 8000aec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000af0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8000af4:	495a      	ldr	r1, [pc, #360]	@ (8000c60 <SDcard_task+0x2c4>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	f010 fce4 	bl	80114c4 <siprintf>
			USB_PRINT(buffer);
 8000afc:	4b50      	ldr	r3, [pc, #320]	@ (8000c40 <SDcard_task+0x2a4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2101      	movs	r1, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f00d fb40 	bl	800e188 <xQueueSemaphoreTake>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00c      	beq.n	8000b28 <SDcard_task+0x18c>
 8000b0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fb64 	bl	80001e0 <strlen>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b20:	4611      	mov	r1, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f00f ff4e 	bl	80109c4 <CDC_Transmit_FS>
 8000b28:	4b45      	ldr	r3, [pc, #276]	@ (8000c40 <SDcard_task+0x2a4>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	f00d f8a7 	bl	800dc84 <xQueueGenericSend>
			continue;
 8000b36:	e080      	b.n	8000c3a <SDcard_task+0x29e>
		}

		if(data.array_size == 1){
 8000b38:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d108      	bne.n	8000b52 <SDcard_task+0x1b6>
			f_printf(&fil, "%u,%d\n\r", data.timestamp, data.value[0]);
 8000b40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8000b44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000b48:	4946      	ldr	r1, [pc, #280]	@ (8000c64 <SDcard_task+0x2c8>)
 8000b4a:	4840      	ldr	r0, [pc, #256]	@ (8000c4c <SDcard_task+0x2b0>)
 8000b4c:	f00c fa0c 	bl	800cf68 <f_printf>
 8000b50:	e029      	b.n	8000ba6 <SDcard_task+0x20a>
		}
		else if(data.array_size == 3){
 8000b52:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d110      	bne.n	8000b7c <SDcard_task+0x1e0>
			f_printf(&fil, "%u,%d,%d,%d\n\r", data.timestamp, data.value[0], data.value[1], data.value[2]);
 8000b5a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8000b5e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8000b62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000b66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8000b6a:	9201      	str	r2, [sp, #4]
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	4603      	mov	r3, r0
 8000b70:	460a      	mov	r2, r1
 8000b72:	493d      	ldr	r1, [pc, #244]	@ (8000c68 <SDcard_task+0x2cc>)
 8000b74:	4835      	ldr	r0, [pc, #212]	@ (8000c4c <SDcard_task+0x2b0>)
 8000b76:	f00c f9f7 	bl	800cf68 <f_printf>
 8000b7a:	e014      	b.n	8000ba6 <SDcard_task+0x20a>
		}
		else {
			USB_PRINT("incompatible array size\n\r");
 8000b7c:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <SDcard_task+0x2a4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f00d fb00 	bl	800e188 <xQueueSemaphoreTake>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <SDcard_task+0x1fa>
 8000b8e:	2119      	movs	r1, #25
 8000b90:	4832      	ldr	r0, [pc, #200]	@ (8000c5c <SDcard_task+0x2c0>)
 8000b92:	f00f ff17 	bl	80109c4 <CDC_Transmit_FS>
 8000b96:	4b2a      	ldr	r3, [pc, #168]	@ (8000c40 <SDcard_task+0x2a4>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f00d f870 	bl	800dc84 <xQueueGenericSend>
			continue;
 8000ba4:	e049      	b.n	8000c3a <SDcard_task+0x29e>
		}


		f_lseek(&fil, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4828      	ldr	r0, [pc, #160]	@ (8000c4c <SDcard_task+0x2b0>)
 8000baa:	f00b fdfc 	bl	800c7a6 <f_lseek>
		while(f_gets(buffer, sizeof(buffer), &fil))
 8000bae:	e023      	b.n	8000bf8 <SDcard_task+0x25c>
		{
			USB_PRINT(buffer);
 8000bb0:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <SDcard_task+0x2a4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f00d fae6 	bl	800e188 <xQueueSemaphoreTake>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00c      	beq.n	8000bdc <SDcard_task+0x240>
 8000bc2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fb0a 	bl	80001e0 <strlen>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f00f fef4 	bl	80109c4 <CDC_Transmit_FS>
 8000bdc:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <SDcard_task+0x2a4>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	2300      	movs	r3, #0
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	f00d f84d 	bl	800dc84 <xQueueGenericSend>
			memset(buffer,0,sizeof(buffer));
 8000bea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bee:	2264      	movs	r2, #100	@ 0x64
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f010 fcc9 	bl	801158a <memset>
		while(f_gets(buffer, sizeof(buffer), &fil))
 8000bf8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bfc:	4a13      	ldr	r2, [pc, #76]	@ (8000c4c <SDcard_task+0x2b0>)
 8000bfe:	2164      	movs	r1, #100	@ 0x64
 8000c00:	4618      	mov	r0, r3
 8000c02:	f00c f8d8 	bl	800cdb6 <f_gets>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1d1      	bne.n	8000bb0 <SDcard_task+0x214>
		}
		USB_PRINT("\n\r");
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <SDcard_task+0x2a4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2101      	movs	r1, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	f00d fab8 	bl	800e188 <xQueueSemaphoreTake>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <SDcard_task+0x28a>
 8000c1e:	2102      	movs	r1, #2
 8000c20:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <SDcard_task+0x2d0>)
 8000c22:	f00f fecf 	bl	80109c4 <CDC_Transmit_FS>
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <SDcard_task+0x2a4>)
 8000c28:	6818      	ldr	r0, [r3, #0]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	f00d f828 	bl	800dc84 <xQueueGenericSend>
		f_close(&fil);
 8000c34:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <SDcard_task+0x2b0>)
 8000c36:	f00b fd8c 	bl	800c752 <f_close>
		if(xQueueReceive(SDcard_queue_handle, &data, portMAX_DELAY) != pdTRUE){
 8000c3a:	e6bf      	b.n	80009bc <SDcard_task+0x20>
 8000c3c:	20002264 	.word	0x20002264
 8000c40:	20002260 	.word	0x20002260
 8000c44:	08012878 	.word	0x08012878
 8000c48:	08012894 	.word	0x08012894
 8000c4c:	20001230 	.word	0x20001230
 8000c50:	080128ac 	.word	0x080128ac
 8000c54:	080128b4 	.word	0x080128b4
 8000c58:	080128c8 	.word	0x080128c8
 8000c5c:	080128ec 	.word	0x080128ec
 8000c60:	0801286c 	.word	0x0801286c
 8000c64:	08012908 	.word	0x08012908
 8000c68:	08012910 	.word	0x08012910
 8000c6c:	08012920 	.word	0x08012920

08000c70 <SDcard_start>:

	}
}

int SDcard_start(void){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af02      	add	r7, sp, #8
	print_smpr_handle = xSemaphoreCreateBinary();
 8000c76:	2203      	movs	r2, #3
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f00c ffa3 	bl	800dbc6 <xQueueGenericCreate>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4a2d      	ldr	r2, [pc, #180]	@ (8000d38 <SDcard_start+0xc8>)
 8000c84:	6013      	str	r3, [r2, #0]
	SDcard_queue_handle = xQueueCreate(20, sizeof(SD_data_t));
 8000c86:	2200      	movs	r2, #0
 8000c88:	2118      	movs	r1, #24
 8000c8a:	2014      	movs	r0, #20
 8000c8c:	f00c ff9b 	bl	800dbc6 <xQueueGenericCreate>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a2a      	ldr	r2, [pc, #168]	@ (8000d3c <SDcard_start+0xcc>)
 8000c94:	6013      	str	r3, [r2, #0]
	if(f_mount(&fs, "", 0) != FR_OK){
 8000c96:	2200      	movs	r2, #0
 8000c98:	4929      	ldr	r1, [pc, #164]	@ (8000d40 <SDcard_start+0xd0>)
 8000c9a:	482a      	ldr	r0, [pc, #168]	@ (8000d44 <SDcard_start+0xd4>)
 8000c9c:	f00a ffda 	bl	800bc54 <f_mount>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d015      	beq.n	8000cd2 <SDcard_start+0x62>
		USB_PRINT("fail mount sd card\n\r");
 8000ca6:	4b24      	ldr	r3, [pc, #144]	@ (8000d38 <SDcard_start+0xc8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2101      	movs	r1, #1
 8000cac:	4618      	mov	r0, r3
 8000cae:	f00d fa6b 	bl	800e188 <xQueueSemaphoreTake>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <SDcard_start+0x50>
 8000cb8:	2114      	movs	r1, #20
 8000cba:	4823      	ldr	r0, [pc, #140]	@ (8000d48 <SDcard_start+0xd8>)
 8000cbc:	f00f fe82 	bl	80109c4 <CDC_Transmit_FS>
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <SDcard_start+0xc8>)
 8000cc2:	6818      	ldr	r0, [r3, #0]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f00c ffdb 	bl	800dc84 <xQueueGenericSend>
		return false;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e02e      	b.n	8000d30 <SDcard_start+0xc0>
	}
	if(reset_files() != true){
 8000cd2:	f7ff fdb7 	bl	8000844 <reset_files>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f083 0301 	eor.w	r3, r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d015      	beq.n	8000d0e <SDcard_start+0x9e>
		USB_PRINT("fail reseting files\n\r");
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <SDcard_start+0xc8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00d fa4d 	bl	800e188 <xQueueSemaphoreTake>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <SDcard_start+0x8c>
 8000cf4:	2115      	movs	r1, #21
 8000cf6:	4815      	ldr	r0, [pc, #84]	@ (8000d4c <SDcard_start+0xdc>)
 8000cf8:	f00f fe64 	bl	80109c4 <CDC_Transmit_FS>
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <SDcard_start+0xc8>)
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	2300      	movs	r3, #0
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	f00c ffbd 	bl	800dc84 <xQueueGenericSend>
		return false;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e010      	b.n	8000d30 <SDcard_start+0xc0>
	}
	if(xTaskCreate(SDcard_task, "SDcard_task", 128*5, NULL, 26, NULL) != pdPASS) return false;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	231a      	movs	r3, #26
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2300      	movs	r3, #0
 8000d18:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000d1c:	490c      	ldr	r1, [pc, #48]	@ (8000d50 <SDcard_start+0xe0>)
 8000d1e:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <SDcard_start+0xe4>)
 8000d20:	f00d fd28 	bl	800e774 <xTaskCreate>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d001      	beq.n	8000d2e <SDcard_start+0xbe>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <SDcard_start+0xc0>
	return true;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20002260 	.word	0x20002260
 8000d3c:	20002264 	.word	0x20002264
 8000d40:	08012924 	.word	0x08012924
 8000d44:	200001f8 	.word	0x200001f8
 8000d48:	08012928 	.word	0x08012928
 8000d4c:	08012940 	.word	0x08012940
 8000d50:	08012958 	.word	0x08012958
 8000d54:	0800099d 	.word	0x0800099d

08000d58 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2110      	movs	r1, #16
 8000d60:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <SELECT+0x18>)
 8000d62:	f001 fd4d 	bl	8002800 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f001 fac0 	bl	80022ec <HAL_Delay>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40020000 	.word	0x40020000

08000d74 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	4803      	ldr	r0, [pc, #12]	@ (8000d8c <DESELECT+0x18>)
 8000d7e:	f001 fd3f 	bl	8002800 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f001 fab2 	bl	80022ec <HAL_Delay>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40020000 	.word	0x40020000

08000d90 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d9a:	bf00      	nop
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <SPI_TxByte+0x30>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d1f8      	bne.n	8000d9c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000daa:	1df9      	adds	r1, r7, #7
 8000dac:	2364      	movs	r3, #100	@ 0x64
 8000dae:	2201      	movs	r2, #1
 8000db0:	4803      	ldr	r0, [pc, #12]	@ (8000dc0 <SPI_TxByte+0x30>)
 8000db2:	f003 ffc0 	bl	8004d36 <HAL_SPI_Transmit>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20002294 	.word	0x20002294

08000dc4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000dd0:	bf00      	nop
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <SPI_TxBuffer+0x30>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d1f8      	bne.n	8000dd2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000de0:	887a      	ldrh	r2, [r7, #2]
 8000de2:	2364      	movs	r3, #100	@ 0x64
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <SPI_TxBuffer+0x30>)
 8000de8:	f003 ffa5 	bl	8004d36 <HAL_SPI_Transmit>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20002294 	.word	0x20002294

08000df8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000dfe:	23ff      	movs	r3, #255	@ 0xff
 8000e00:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e02:	bf00      	nop
 8000e04:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <SPI_RxByte+0x34>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d1f8      	bne.n	8000e04 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000e12:	1dba      	adds	r2, r7, #6
 8000e14:	1df9      	adds	r1, r7, #7
 8000e16:	2364      	movs	r3, #100	@ 0x64
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	4803      	ldr	r0, [pc, #12]	@ (8000e2c <SPI_RxByte+0x34>)
 8000e1e:	f004 f8cd 	bl	8004fbc <HAL_SPI_TransmitReceive>

	return data;
 8000e22:	79bb      	ldrb	r3, [r7, #6]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20002294 	.word	0x20002294

08000e30 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000e38:	f7ff ffde 	bl	8000df8 <SPI_RxByte>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	701a      	strb	r2, [r3, #0]
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <SD_ReadyWait+0x30>)
 8000e54:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e58:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000e5a:	f7ff ffcd 	bl	8000df8 <SPI_RxByte>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2bff      	cmp	r3, #255	@ 0xff
 8000e66:	d003      	beq.n	8000e70 <SD_ReadyWait+0x24>
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <SD_ReadyWait+0x30>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1f4      	bne.n	8000e5a <SD_ReadyWait+0xe>

	return res;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000226a 	.word	0x2000226a

08000e80 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000e86:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000e8a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000e8c:	f7ff ff72 	bl	8000d74 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	e005      	b.n	8000ea2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000e96:	20ff      	movs	r0, #255	@ 0xff
 8000e98:	f7ff ff7a 	bl	8000d90 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	2b09      	cmp	r3, #9
 8000ea6:	ddf6      	ble.n	8000e96 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000ea8:	f7ff ff56 	bl	8000d58 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000eac:	2340      	movs	r3, #64	@ 0x40
 8000eae:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ec0:	2395      	movs	r3, #149	@ 0x95
 8000ec2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2106      	movs	r1, #6
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff7b 	bl	8000dc4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000ece:	e002      	b.n	8000ed6 <SD_PowerOn+0x56>
	{
		cnt--;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000ed6:	f7ff ff8f 	bl	8000df8 <SPI_RxByte>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d002      	beq.n	8000ee6 <SD_PowerOn+0x66>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f4      	bne.n	8000ed0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000ee6:	f7ff ff45 	bl	8000d74 <DESELECT>
	SPI_TxByte(0XFF);
 8000eea:	20ff      	movs	r0, #255	@ 0xff
 8000eec:	f7ff ff50 	bl	8000d90 <SPI_TxByte>

	PowerFlag = 1;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <SD_PowerOn+0x80>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000226d 	.word	0x2000226d

08000f04 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <SD_PowerOff+0x14>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	2000226d 	.word	0x2000226d

08000f1c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000f20:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <SD_CheckPower+0x14>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	2000226d 	.word	0x2000226d

08000f34 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <SD_RxDataBlock+0x58>)
 8000f40:	22c8      	movs	r2, #200	@ 0xc8
 8000f42:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000f44:	f7ff ff58 	bl	8000df8 <SPI_RxByte>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2bff      	cmp	r3, #255	@ 0xff
 8000f50:	d103      	bne.n	8000f5a <SD_RxDataBlock+0x26>
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <SD_RxDataBlock+0x58>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f4      	bne.n	8000f44 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f5e:	d001      	beq.n	8000f64 <SD_RxDataBlock+0x30>
 8000f60:	2300      	movs	r3, #0
 8000f62:	e00f      	b.n	8000f84 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff60 	bl	8000e30 <SPI_RxBytePtr>
	} while(len--);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	1e5a      	subs	r2, r3, #1
 8000f74:	603a      	str	r2, [r7, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f4      	bne.n	8000f64 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000f7a:	f7ff ff3d 	bl	8000df8 <SPI_RxByte>
	SPI_RxByte();
 8000f7e:	f7ff ff3b 	bl	8000df8 <SPI_RxByte>

	return TRUE;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20002268 	.word	0x20002268

08000f90 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000fa0:	f7ff ff54 	bl	8000e4c <SD_ReadyWait>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2bff      	cmp	r3, #255	@ 0xff
 8000fa8:	d001      	beq.n	8000fae <SD_TxDataBlock+0x1e>
 8000faa:	2300      	movs	r3, #0
 8000fac:	e02f      	b.n	800100e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff feed 	bl	8000d90 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	2bfd      	cmp	r3, #253	@ 0xfd
 8000fba:	d020      	beq.n	8000ffe <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000fbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff feff 	bl	8000dc4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000fc6:	f7ff ff17 	bl	8000df8 <SPI_RxByte>
		SPI_RxByte();
 8000fca:	f7ff ff15 	bl	8000df8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000fce:	e00b      	b.n	8000fe8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000fd0:	f7ff ff12 	bl	8000df8 <SPI_RxByte>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	2b05      	cmp	r3, #5
 8000fe0:	d006      	beq.n	8000ff0 <SD_TxDataBlock+0x60>
			i++;
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	2b40      	cmp	r3, #64	@ 0x40
 8000fec:	d9f0      	bls.n	8000fd0 <SD_TxDataBlock+0x40>
 8000fee:	e000      	b.n	8000ff2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000ff0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ff00 	bl	8000df8 <SPI_RxByte>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0fa      	beq.n	8000ff4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	f003 031f 	and.w	r3, r3, #31
 8001004:	2b05      	cmp	r3, #5
 8001006:	d101      	bne.n	800100c <SD_TxDataBlock+0x7c>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <SD_TxDataBlock+0x7e>

	return FALSE;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	6039      	str	r1, [r7, #0]
 8001020:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001022:	f7ff ff13 	bl	8000e4c <SD_ReadyWait>
 8001026:	4603      	mov	r3, r0
 8001028:	2bff      	cmp	r3, #255	@ 0xff
 800102a:	d001      	beq.n	8001030 <SD_SendCmd+0x1a>
 800102c:	23ff      	movs	r3, #255	@ 0xff
 800102e:	e042      	b.n	80010b6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff feac 	bl	8000d90 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	0e1b      	lsrs	r3, r3, #24
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fea6 	bl	8000d90 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	0c1b      	lsrs	r3, r3, #16
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fea0 	bl	8000d90 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	b2db      	uxtb	r3, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fe9a 	bl	8000d90 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe95 	bl	8000d90 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b40      	cmp	r3, #64	@ 0x40
 800106a:	d102      	bne.n	8001072 <SD_SendCmd+0x5c>
 800106c:	2395      	movs	r3, #149	@ 0x95
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	e007      	b.n	8001082 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b48      	cmp	r3, #72	@ 0x48
 8001076:	d102      	bne.n	800107e <SD_SendCmd+0x68>
 8001078:	2387      	movs	r3, #135	@ 0x87
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e001      	b.n	8001082 <SD_SendCmd+0x6c>
	else crc = 1;
 800107e:	2301      	movs	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fe83 	bl	8000d90 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b4c      	cmp	r3, #76	@ 0x4c
 800108e:	d101      	bne.n	8001094 <SD_SendCmd+0x7e>
 8001090:	f7ff feb2 	bl	8000df8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001094:	230a      	movs	r3, #10
 8001096:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001098:	f7ff feae 	bl	8000df8 <SPI_RxByte>
 800109c:	4603      	mov	r3, r0
 800109e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80010a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	da05      	bge.n	80010b4 <SD_SendCmd+0x9e>
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	73bb      	strb	r3, [r7, #14]
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f1      	bne.n	8001098 <SD_SendCmd+0x82>

	return res;
 80010b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SD_disk_initialize+0x14>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e0d1      	b.n	8001278 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80010d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001280 <SD_disk_initialize+0x1c0>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <SD_disk_initialize+0x2a>
 80010e2:	4b67      	ldr	r3, [pc, #412]	@ (8001280 <SD_disk_initialize+0x1c0>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	e0c6      	b.n	8001278 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80010ea:	f7ff fec9 	bl	8000e80 <SD_PowerOn>

	/* slave select */
	SELECT();
 80010ee:	f7ff fe33 	bl	8000d58 <SELECT>

	/* check disk type */
	type = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80010f6:	2100      	movs	r1, #0
 80010f8:	2040      	movs	r0, #64	@ 0x40
 80010fa:	f7ff ff8c 	bl	8001016 <SD_SendCmd>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b01      	cmp	r3, #1
 8001102:	f040 80a1 	bne.w	8001248 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001106:	4b5f      	ldr	r3, [pc, #380]	@ (8001284 <SD_disk_initialize+0x1c4>)
 8001108:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800110c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800110e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001112:	2048      	movs	r0, #72	@ 0x48
 8001114:	f7ff ff7f 	bl	8001016 <SD_SendCmd>
 8001118:	4603      	mov	r3, r0
 800111a:	2b01      	cmp	r3, #1
 800111c:	d155      	bne.n	80011ca <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e00c      	b.n	800113e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001124:	7bfc      	ldrb	r4, [r7, #15]
 8001126:	f7ff fe67 	bl	8000df8 <SPI_RxByte>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	f104 0310 	add.w	r3, r4, #16
 8001132:	443b      	add	r3, r7
 8001134:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	3301      	adds	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2b03      	cmp	r3, #3
 8001142:	d9ef      	bls.n	8001124 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001144:	7abb      	ldrb	r3, [r7, #10]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d17e      	bne.n	8001248 <SD_disk_initialize+0x188>
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	2baa      	cmp	r3, #170	@ 0xaa
 800114e:	d17b      	bne.n	8001248 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001150:	2100      	movs	r1, #0
 8001152:	2077      	movs	r0, #119	@ 0x77
 8001154:	f7ff ff5f 	bl	8001016 <SD_SendCmd>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d807      	bhi.n	800116e <SD_disk_initialize+0xae>
 800115e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001162:	2069      	movs	r0, #105	@ 0x69
 8001164:	f7ff ff57 	bl	8001016 <SD_SendCmd>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800116e:	4b45      	ldr	r3, [pc, #276]	@ (8001284 <SD_disk_initialize+0x1c4>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1ec      	bne.n	8001150 <SD_disk_initialize+0x90>
 8001176:	e000      	b.n	800117a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001178:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800117a:	4b42      	ldr	r3, [pc, #264]	@ (8001284 <SD_disk_initialize+0x1c4>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d062      	beq.n	8001248 <SD_disk_initialize+0x188>
 8001182:	2100      	movs	r1, #0
 8001184:	207a      	movs	r0, #122	@ 0x7a
 8001186:	f7ff ff46 	bl	8001016 <SD_SendCmd>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d15b      	bne.n	8001248 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e00c      	b.n	80011b0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001196:	7bfc      	ldrb	r4, [r7, #15]
 8001198:	f7ff fe2e 	bl	8000df8 <SPI_RxByte>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	f104 0310 	add.w	r3, r4, #16
 80011a4:	443b      	add	r3, r7
 80011a6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	3301      	adds	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d9ef      	bls.n	8001196 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80011b6:	7a3b      	ldrb	r3, [r7, #8]
 80011b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SD_disk_initialize+0x104>
 80011c0:	230c      	movs	r3, #12
 80011c2:	e000      	b.n	80011c6 <SD_disk_initialize+0x106>
 80011c4:	2304      	movs	r3, #4
 80011c6:	73bb      	strb	r3, [r7, #14]
 80011c8:	e03e      	b.n	8001248 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80011ca:	2100      	movs	r1, #0
 80011cc:	2077      	movs	r0, #119	@ 0x77
 80011ce:	f7ff ff22 	bl	8001016 <SD_SendCmd>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d808      	bhi.n	80011ea <SD_disk_initialize+0x12a>
 80011d8:	2100      	movs	r1, #0
 80011da:	2069      	movs	r0, #105	@ 0x69
 80011dc:	f7ff ff1b 	bl	8001016 <SD_SendCmd>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d801      	bhi.n	80011ea <SD_disk_initialize+0x12a>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e000      	b.n	80011ec <SD_disk_initialize+0x12c>
 80011ea:	2301      	movs	r3, #1
 80011ec:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80011ee:	7bbb      	ldrb	r3, [r7, #14]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d10e      	bne.n	8001212 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80011f4:	2100      	movs	r1, #0
 80011f6:	2077      	movs	r0, #119	@ 0x77
 80011f8:	f7ff ff0d 	bl	8001016 <SD_SendCmd>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d80e      	bhi.n	8001220 <SD_disk_initialize+0x160>
 8001202:	2100      	movs	r1, #0
 8001204:	2069      	movs	r0, #105	@ 0x69
 8001206:	f7ff ff06 	bl	8001016 <SD_SendCmd>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d107      	bne.n	8001220 <SD_disk_initialize+0x160>
 8001210:	e00c      	b.n	800122c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001212:	2100      	movs	r1, #0
 8001214:	2041      	movs	r0, #65	@ 0x41
 8001216:	f7ff fefe 	bl	8001016 <SD_SendCmd>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <SD_disk_initialize+0x1c4>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e2      	bne.n	80011ee <SD_disk_initialize+0x12e>
 8001228:	e000      	b.n	800122c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800122a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <SD_disk_initialize+0x1c4>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <SD_disk_initialize+0x184>
 8001234:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001238:	2050      	movs	r0, #80	@ 0x50
 800123a:	f7ff feec 	bl	8001016 <SD_SendCmd>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SD_disk_initialize+0x188>
 8001244:	2300      	movs	r3, #0
 8001246:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001248:	4a0f      	ldr	r2, [pc, #60]	@ (8001288 <SD_disk_initialize+0x1c8>)
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800124e:	f7ff fd91 	bl	8000d74 <DESELECT>
	SPI_RxByte();
 8001252:	f7ff fdd1 	bl	8000df8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d008      	beq.n	800126e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800125c:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <SD_disk_initialize+0x1c0>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <SD_disk_initialize+0x1c0>)
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	e001      	b.n	8001272 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800126e:	f7ff fe49 	bl	8000f04 <SD_PowerOff>
	}

	return Stat;
 8001272:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <SD_disk_initialize+0x1c0>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	bd90      	pop	{r4, r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	20002268 	.word	0x20002268
 8001288:	2000226c 	.word	0x2000226c

0800128c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SD_disk_status+0x14>
 800129c:	2301      	movs	r3, #1
 800129e:	e002      	b.n	80012a6 <SD_disk_status+0x1a>
	return Stat;
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <SD_disk_status+0x28>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b2db      	uxtb	r3, r3
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000000 	.word	0x20000000

080012b8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	4603      	mov	r3, r0
 80012c6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <SD_disk_read+0x1c>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <SD_disk_read+0x20>
 80012d4:	2304      	movs	r3, #4
 80012d6:	e051      	b.n	800137c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <SD_disk_read+0xcc>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SD_disk_read+0x32>
 80012e6:	2303      	movs	r3, #3
 80012e8:	e048      	b.n	800137c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80012ea:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <SD_disk_read+0xd0>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <SD_disk_read+0x44>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	025b      	lsls	r3, r3, #9
 80012fa:	607b      	str	r3, [r7, #4]

	SELECT();
 80012fc:	f7ff fd2c 	bl	8000d58 <SELECT>

	if (count == 1)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d111      	bne.n	800132a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	2051      	movs	r0, #81	@ 0x51
 800130a:	f7ff fe84 	bl	8001016 <SD_SendCmd>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d129      	bne.n	8001368 <SD_disk_read+0xb0>
 8001314:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001318:	68b8      	ldr	r0, [r7, #8]
 800131a:	f7ff fe0b 	bl	8000f34 <SD_RxDataBlock>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d021      	beq.n	8001368 <SD_disk_read+0xb0>
 8001324:	2300      	movs	r3, #0
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	e01e      	b.n	8001368 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	2052      	movs	r0, #82	@ 0x52
 800132e:	f7ff fe72 	bl	8001016 <SD_SendCmd>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d117      	bne.n	8001368 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001338:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800133c:	68b8      	ldr	r0, [r7, #8]
 800133e:	f7ff fdf9 	bl	8000f34 <SD_RxDataBlock>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00a      	beq.n	800135e <SD_disk_read+0xa6>
				buff += 512;
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800134e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	3b01      	subs	r3, #1
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ed      	bne.n	8001338 <SD_disk_read+0x80>
 800135c:	e000      	b.n	8001360 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800135e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001360:	2100      	movs	r1, #0
 8001362:	204c      	movs	r0, #76	@ 0x4c
 8001364:	f7ff fe57 	bl	8001016 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001368:	f7ff fd04 	bl	8000d74 <DESELECT>
	SPI_RxByte();
 800136c:	f7ff fd44 	bl	8000df8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	2000226c 	.word	0x2000226c

0800138c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	4603      	mov	r3, r0
 800139a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <SD_disk_write+0x1c>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <SD_disk_write+0x20>
 80013a8:	2304      	movs	r3, #4
 80013aa:	e06b      	b.n	8001484 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80013ac:	4b37      	ldr	r3, [pc, #220]	@ (800148c <SD_disk_write+0x100>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SD_disk_write+0x32>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e062      	b.n	8001484 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80013be:	4b33      	ldr	r3, [pc, #204]	@ (800148c <SD_disk_write+0x100>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SD_disk_write+0x44>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e059      	b.n	8001484 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80013d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <SD_disk_write+0x104>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <SD_disk_write+0x56>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	025b      	lsls	r3, r3, #9
 80013e0:	607b      	str	r3, [r7, #4]

	SELECT();
 80013e2:	f7ff fcb9 	bl	8000d58 <SELECT>

	if (count == 1)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d110      	bne.n	800140e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	2058      	movs	r0, #88	@ 0x58
 80013f0:	f7ff fe11 	bl	8001016 <SD_SendCmd>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d13a      	bne.n	8001470 <SD_disk_write+0xe4>
 80013fa:	21fe      	movs	r1, #254	@ 0xfe
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f7ff fdc7 	bl	8000f90 <SD_TxDataBlock>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d033      	beq.n	8001470 <SD_disk_write+0xe4>
			count = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	e030      	b.n	8001470 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800140e:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <SD_disk_write+0x104>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800141a:	2100      	movs	r1, #0
 800141c:	2077      	movs	r0, #119	@ 0x77
 800141e:	f7ff fdfa 	bl	8001016 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001422:	6839      	ldr	r1, [r7, #0]
 8001424:	2057      	movs	r0, #87	@ 0x57
 8001426:	f7ff fdf6 	bl	8001016 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	2059      	movs	r0, #89	@ 0x59
 800142e:	f7ff fdf2 	bl	8001016 <SD_SendCmd>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d11b      	bne.n	8001470 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001438:	21fc      	movs	r1, #252	@ 0xfc
 800143a:	68b8      	ldr	r0, [r7, #8]
 800143c:	f7ff fda8 	bl	8000f90 <SD_TxDataBlock>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00a      	beq.n	800145c <SD_disk_write+0xd0>
				buff += 512;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800144c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	3b01      	subs	r3, #1
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1ee      	bne.n	8001438 <SD_disk_write+0xac>
 800145a:	e000      	b.n	800145e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800145c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800145e:	21fd      	movs	r1, #253	@ 0xfd
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff fd95 	bl	8000f90 <SD_TxDataBlock>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <SD_disk_write+0xe4>
			{
				count = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001470:	f7ff fc80 	bl	8000d74 <DESELECT>
	SPI_RxByte();
 8001474:	f7ff fcc0 	bl	8000df8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000000 	.word	0x20000000
 8001490:	2000226c 	.word	0x2000226c

08001494 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b08b      	sub	sp, #44	@ 0x2c
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	603a      	str	r2, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
 80014a0:	460b      	mov	r3, r1
 80014a2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SD_disk_ioctl+0x1e>
 80014ae:	2304      	movs	r3, #4
 80014b0:	e113      	b.n	80016da <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80014b8:	79bb      	ldrb	r3, [r7, #6]
 80014ba:	2b05      	cmp	r3, #5
 80014bc:	d124      	bne.n	8001508 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d012      	beq.n	80014ec <SD_disk_ioctl+0x58>
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	dc1a      	bgt.n	8001500 <SD_disk_ioctl+0x6c>
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <SD_disk_ioctl+0x40>
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d006      	beq.n	80014e0 <SD_disk_ioctl+0x4c>
 80014d2:	e015      	b.n	8001500 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80014d4:	f7ff fd16 	bl	8000f04 <SD_PowerOff>
			res = RES_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014de:	e0fa      	b.n	80016d6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80014e0:	f7ff fcce 	bl	8000e80 <SD_PowerOn>
			res = RES_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014ea:	e0f4      	b.n	80016d6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	1c5c      	adds	r4, r3, #1
 80014f0:	f7ff fd14 	bl	8000f1c <SD_CheckPower>
 80014f4:	4603      	mov	r3, r0
 80014f6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80014f8:	2300      	movs	r3, #0
 80014fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014fe:	e0ea      	b.n	80016d6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001500:	2304      	movs	r3, #4
 8001502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001506:	e0e6      	b.n	80016d6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001508:	4b76      	ldr	r3, [pc, #472]	@ (80016e4 <SD_disk_ioctl+0x250>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SD_disk_ioctl+0x86>
 8001516:	2303      	movs	r3, #3
 8001518:	e0df      	b.n	80016da <SD_disk_ioctl+0x246>

		SELECT();
 800151a:	f7ff fc1d 	bl	8000d58 <SELECT>

		switch (ctrl)
 800151e:	79bb      	ldrb	r3, [r7, #6]
 8001520:	2b0d      	cmp	r3, #13
 8001522:	f200 80c9 	bhi.w	80016b8 <SD_disk_ioctl+0x224>
 8001526:	a201      	add	r2, pc, #4	@ (adr r2, 800152c <SD_disk_ioctl+0x98>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	08001623 	.word	0x08001623
 8001530:	08001565 	.word	0x08001565
 8001534:	08001613 	.word	0x08001613
 8001538:	080016b9 	.word	0x080016b9
 800153c:	080016b9 	.word	0x080016b9
 8001540:	080016b9 	.word	0x080016b9
 8001544:	080016b9 	.word	0x080016b9
 8001548:	080016b9 	.word	0x080016b9
 800154c:	080016b9 	.word	0x080016b9
 8001550:	080016b9 	.word	0x080016b9
 8001554:	080016b9 	.word	0x080016b9
 8001558:	08001635 	.word	0x08001635
 800155c:	08001659 	.word	0x08001659
 8001560:	0800167d 	.word	0x0800167d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001564:	2100      	movs	r1, #0
 8001566:	2049      	movs	r0, #73	@ 0x49
 8001568:	f7ff fd55 	bl	8001016 <SD_SendCmd>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 80a6 	bne.w	80016c0 <SD_disk_ioctl+0x22c>
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2110      	movs	r1, #16
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fcda 	bl	8000f34 <SD_RxDataBlock>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 809c 	beq.w	80016c0 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001588:	7b3b      	ldrb	r3, [r7, #12]
 800158a:	099b      	lsrs	r3, r3, #6
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d10d      	bne.n	80015ae <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001592:	7d7b      	ldrb	r3, [r7, #21]
 8001594:	461a      	mov	r2, r3
 8001596:	7d3b      	ldrb	r3, [r7, #20]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b29b      	uxth	r3, r3
 800159c:	4413      	add	r3, r2
 800159e:	b29b      	uxth	r3, r3
 80015a0:	3301      	adds	r3, #1
 80015a2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80015a4:	8bfb      	ldrh	r3, [r7, #30]
 80015a6:	029a      	lsls	r2, r3, #10
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e02d      	b.n	800160a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80015ae:	7c7b      	ldrb	r3, [r7, #17]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	7dbb      	ldrb	r3, [r7, #22]
 80015b8:	09db      	lsrs	r3, r3, #7
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4413      	add	r3, r2
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	7d7b      	ldrb	r3, [r7, #21]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f003 0306 	and.w	r3, r3, #6
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4413      	add	r3, r2
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	3302      	adds	r3, #2
 80015d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80015d6:	7d3b      	ldrb	r3, [r7, #20]
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	7cfb      	ldrb	r3, [r7, #19]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	7cbb      	ldrb	r3, [r7, #18]
 80015ea:	029b      	lsls	r3, r3, #10
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80015fc:	8bfa      	ldrh	r2, [r7, #30]
 80015fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001602:	3b09      	subs	r3, #9
 8001604:	409a      	lsls	r2, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001610:	e056      	b.n	80016c0 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001618:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001620:	e055      	b.n	80016ce <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001622:	f7ff fc13 	bl	8000e4c <SD_ReadyWait>
 8001626:	4603      	mov	r3, r0
 8001628:	2bff      	cmp	r3, #255	@ 0xff
 800162a:	d14b      	bne.n	80016c4 <SD_disk_ioctl+0x230>
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001632:	e047      	b.n	80016c4 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001634:	2100      	movs	r1, #0
 8001636:	2049      	movs	r0, #73	@ 0x49
 8001638:	f7ff fced 	bl	8001016 <SD_SendCmd>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d142      	bne.n	80016c8 <SD_disk_ioctl+0x234>
 8001642:	2110      	movs	r1, #16
 8001644:	6a38      	ldr	r0, [r7, #32]
 8001646:	f7ff fc75 	bl	8000f34 <SD_RxDataBlock>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d03b      	beq.n	80016c8 <SD_disk_ioctl+0x234>
 8001650:	2300      	movs	r3, #0
 8001652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001656:	e037      	b.n	80016c8 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001658:	2100      	movs	r1, #0
 800165a:	204a      	movs	r0, #74	@ 0x4a
 800165c:	f7ff fcdb 	bl	8001016 <SD_SendCmd>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d132      	bne.n	80016cc <SD_disk_ioctl+0x238>
 8001666:	2110      	movs	r1, #16
 8001668:	6a38      	ldr	r0, [r7, #32]
 800166a:	f7ff fc63 	bl	8000f34 <SD_RxDataBlock>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d02b      	beq.n	80016cc <SD_disk_ioctl+0x238>
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800167a:	e027      	b.n	80016cc <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800167c:	2100      	movs	r1, #0
 800167e:	207a      	movs	r0, #122	@ 0x7a
 8001680:	f7ff fcc9 	bl	8001016 <SD_SendCmd>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d116      	bne.n	80016b8 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001690:	e00b      	b.n	80016aa <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001692:	6a3c      	ldr	r4, [r7, #32]
 8001694:	1c63      	adds	r3, r4, #1
 8001696:	623b      	str	r3, [r7, #32]
 8001698:	f7ff fbae 	bl	8000df8 <SPI_RxByte>
 800169c:	4603      	mov	r3, r0
 800169e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80016a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016a4:	3301      	adds	r3, #1
 80016a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80016aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d9ef      	bls.n	8001692 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80016b8:	2304      	movs	r3, #4
 80016ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80016be:	e006      	b.n	80016ce <SD_disk_ioctl+0x23a>
			break;
 80016c0:	bf00      	nop
 80016c2:	e004      	b.n	80016ce <SD_disk_ioctl+0x23a>
			break;
 80016c4:	bf00      	nop
 80016c6:	e002      	b.n	80016ce <SD_disk_ioctl+0x23a>
			break;
 80016c8:	bf00      	nop
 80016ca:	e000      	b.n	80016ce <SD_disk_ioctl+0x23a>
			break;
 80016cc:	bf00      	nop
		}

		DESELECT();
 80016ce:	f7ff fb51 	bl	8000d74 <DESELECT>
		SPI_RxByte();
 80016d2:	f7ff fb91 	bl	8000df8 <SPI_RxByte>
	}

	return res;
 80016d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80016da:	4618      	mov	r0, r3
 80016dc:	372c      	adds	r7, #44	@ 0x2c
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000000 	.word	0x20000000

080016e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80016ec:	4a04      	ldr	r2, [pc, #16]	@ (8001700 <MX_FREERTOS_Init+0x18>)
 80016ee:	2100      	movs	r1, #0
 80016f0:	4804      	ldr	r0, [pc, #16]	@ (8001704 <MX_FREERTOS_Init+0x1c>)
 80016f2:	f00c f807 	bl	800d704 <osThreadNew>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a03      	ldr	r2, [pc, #12]	@ (8001708 <MX_FREERTOS_Init+0x20>)
 80016fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	08012a7c 	.word	0x08012a7c
 8001704:	0800170d 	.word	0x0800170d
 8001708:	20002270 	.word	0x20002270

0800170c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001714:	f00f f898 	bl	8010848 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  vTaskDelay(3000);
 8001718:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800171c:	f00d fa7c 	bl	800ec18 <vTaskDelay>
  if(!SDcard_start()){
 8001720:	f7ff faa6 	bl	8000c70 <SDcard_start>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d114      	bne.n	8001754 <StartDefaultTask+0x48>
	  USB_PRINT("error starting sd card\n");
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <StartDefaultTask+0x90>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2101      	movs	r1, #1
 8001730:	4618      	mov	r0, r3
 8001732:	f00c fd29 	bl	800e188 <xQueueSemaphoreTake>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <StartDefaultTask+0x38>
 800173c:	2117      	movs	r1, #23
 800173e:	4818      	ldr	r0, [pc, #96]	@ (80017a0 <StartDefaultTask+0x94>)
 8001740:	f00f f940 	bl	80109c4 <CDC_Transmit_FS>
 8001744:	4b15      	ldr	r3, [pc, #84]	@ (800179c <StartDefaultTask+0x90>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	2300      	movs	r3, #0
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	f00c fa99 	bl	800dc84 <xQueueGenericSend>
	  return;
 8001752:	e020      	b.n	8001796 <StartDefaultTask+0x8a>
  }
  if(!start_send_data_tasks()){
 8001754:	f000 f910 	bl	8001978 <start_send_data_tasks>
 8001758:	4603      	mov	r3, r0
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d013      	beq.n	800178c <StartDefaultTask+0x80>
	  USB_PRINT("error starting send data tasks\n");
 8001764:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <StartDefaultTask+0x90>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	4618      	mov	r0, r3
 800176c:	f00c fd0c 	bl	800e188 <xQueueSemaphoreTake>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <StartDefaultTask+0x72>
 8001776:	211f      	movs	r1, #31
 8001778:	480a      	ldr	r0, [pc, #40]	@ (80017a4 <StartDefaultTask+0x98>)
 800177a:	f00f f923 	bl	80109c4 <CDC_Transmit_FS>
 800177e:	4b07      	ldr	r3, [pc, #28]	@ (800179c <StartDefaultTask+0x90>)
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	2300      	movs	r3, #0
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	f00c fa7c 	bl	800dc84 <xQueueGenericSend>


  /* Infinite loop */
  for(;;)
  {
    vTaskDelay(1000);
 800178c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001790:	f00d fa42 	bl	800ec18 <vTaskDelay>
 8001794:	e7fa      	b.n	800178c <StartDefaultTask+0x80>
  }
  /* USER CODE END StartDefaultTask */
}
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20002260 	.word	0x20002260
 80017a0:	08012970 	.word	0x08012970
 80017a4:	08012988 	.word	0x08012988

080017a8 <send_data>:
    {G_CTRL_POSI, 3, 3, 100},
    {G_CTRL_POSI_RX, 3, 3, 0}
};


void send_data(void* arg){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b098      	sub	sp, #96	@ 0x60
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	DataParameter *params = (DataParameter *)arg;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	657b      	str	r3, [r7, #84]	@ 0x54
	QueueHandle_t SDcard_queue = SDcard_get_queue_handle();
 80017b4:	f7fe fee4 	bl	8000580 <SDcard_get_queue_handle>
 80017b8:	6538      	str	r0, [r7, #80]	@ 0x50
	uint16_t period_ms = params->period_ms;
 80017ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017bc:	889b      	ldrh	r3, [r3, #4]
 80017be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint8_t array_size = (params->dimensions == 3) ? 3 : 1;
 80017c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c4:	785b      	ldrb	r3, [r3, #1]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d101      	bne.n	80017ce <send_data+0x26>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e000      	b.n	80017d0 <send_data+0x28>
 80017ce:	2301      	movs	r3, #1
 80017d0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	uint8_t data_quantity = params->data_quantity;
 80017d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017d6:	789b      	ldrb	r3, [r3, #2]
 80017d8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	data_type_t type = params->type;
 80017dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	char buf[35];
	int n = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int i;

	srand(type);
 80017e8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00f fd3b 	bl	8011268 <srand>
	TickType_t LastWakeTime = xTaskGetTickCount();
 80017f2:	f00d fb63 	bl	800eebc <xTaskGetTickCount>
 80017f6:	4603      	mov	r3, r0
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24

	for (;;) {
		if (n == 3) break;
 80017fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d103      	bne.n	8001808 <send_data+0x60>
				USB_PRINT(buf);
			}
		}
		n++;
	}
	vTaskDelete(NULL);
 8001800:	2000      	movs	r0, #0
 8001802:	f00d f915 	bl	800ea30 <vTaskDelete>
}
 8001806:	e0ac      	b.n	8001962 <send_data+0x1ba>
		if (period_ms > 0) {
 8001808:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800180c:	2b00      	cmp	r3, #0
 800180e:	d010      	beq.n	8001832 <send_data+0x8a>
		            vTaskDelayUntil(&LastWakeTime, pdMS_TO_TICKS(period_ms));
 8001810:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001814:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001818:	fb02 f303 	mul.w	r3, r2, r3
 800181c:	4a52      	ldr	r2, [pc, #328]	@ (8001968 <send_data+0x1c0>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	099a      	lsrs	r2, r3, #6
 8001824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f00d f974 	bl	800eb18 <vTaskDelayUntil>
 8001830:	e01d      	b.n	800186e <send_data+0xc6>
			vTaskDelayUntil(&LastWakeTime, pdMS_TO_TICKS(rand() % 1000 + 1));
 8001832:	f00f fd47 	bl	80112c4 <rand>
 8001836:	4602      	mov	r2, r0
 8001838:	4b4b      	ldr	r3, [pc, #300]	@ (8001968 <send_data+0x1c0>)
 800183a:	fb83 1302 	smull	r1, r3, r3, r2
 800183e:	1199      	asrs	r1, r3, #6
 8001840:	17d3      	asrs	r3, r2, #31
 8001842:	1acb      	subs	r3, r1, r3
 8001844:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	3301      	adds	r3, #1
 8001850:	461a      	mov	r2, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	4a43      	ldr	r2, [pc, #268]	@ (8001968 <send_data+0x1c0>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	099a      	lsrs	r2, r3, #6
 8001862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f00d f955 	bl	800eb18 <vTaskDelayUntil>
			.value = {rand() % 100, rand() % 100, rand() % 100},
 800186e:	f00f fd29 	bl	80112c4 <rand>
 8001872:	4602      	mov	r2, r0
 8001874:	4b3d      	ldr	r3, [pc, #244]	@ (800196c <send_data+0x1c4>)
 8001876:	fb83 1302 	smull	r1, r3, r3, r2
 800187a:	1159      	asrs	r1, r3, #5
 800187c:	17d3      	asrs	r3, r2, #31
 800187e:	1acb      	subs	r3, r1, r3
 8001880:	2164      	movs	r1, #100	@ 0x64
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	1ad3      	subs	r3, r2, r3
		SD_data_t data = {
 8001888:	60fb      	str	r3, [r7, #12]
			.value = {rand() % 100, rand() % 100, rand() % 100},
 800188a:	f00f fd1b 	bl	80112c4 <rand>
 800188e:	4602      	mov	r2, r0
 8001890:	4b36      	ldr	r3, [pc, #216]	@ (800196c <send_data+0x1c4>)
 8001892:	fb83 1302 	smull	r1, r3, r3, r2
 8001896:	1159      	asrs	r1, r3, #5
 8001898:	17d3      	asrs	r3, r2, #31
 800189a:	1acb      	subs	r3, r1, r3
 800189c:	2164      	movs	r1, #100	@ 0x64
 800189e:	fb01 f303 	mul.w	r3, r1, r3
 80018a2:	1ad3      	subs	r3, r2, r3
		SD_data_t data = {
 80018a4:	613b      	str	r3, [r7, #16]
			.value = {rand() % 100, rand() % 100, rand() % 100},
 80018a6:	f00f fd0d 	bl	80112c4 <rand>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b2f      	ldr	r3, [pc, #188]	@ (800196c <send_data+0x1c4>)
 80018ae:	fb83 1302 	smull	r1, r3, r3, r2
 80018b2:	1159      	asrs	r1, r3, #5
 80018b4:	17d3      	asrs	r3, r2, #31
 80018b6:	1acb      	subs	r3, r1, r3
 80018b8:	2164      	movs	r1, #100	@ 0x64
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	1ad3      	subs	r3, r2, r3
		SD_data_t data = {
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80018c6:	763b      	strb	r3, [r7, #24]
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80018d0:	f887 3020 	strb.w	r3, [r7, #32]
		for (i = 0; i < data_quantity; i++) {
 80018d4:	2300      	movs	r3, #0
 80018d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018d8:	e03a      	b.n	8001950 <send_data+0x1a8>
			if (xQueueSend(SDcard_queue, (void*)&data, pdMS_TO_TICKS(period_ms) / 2) != pdTRUE) {
 80018da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80018de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018e2:	fb02 f303 	mul.w	r3, r2, r3
 80018e6:	4a20      	ldr	r2, [pc, #128]	@ (8001968 <send_data+0x1c0>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	09da      	lsrs	r2, r3, #7
 80018ee:	f107 010c 	add.w	r1, r7, #12
 80018f2:	2300      	movs	r3, #0
 80018f4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80018f6:	f00c f9c5 	bl	800dc84 <xQueueGenericSend>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d024      	beq.n	800194a <send_data+0x1a2>
				sprintf(buf, "fail send data to queue - %d\n", data.data_type);
 8001900:	7e3b      	ldrb	r3, [r7, #24]
 8001902:	461a      	mov	r2, r3
 8001904:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001908:	4919      	ldr	r1, [pc, #100]	@ (8001970 <send_data+0x1c8>)
 800190a:	4618      	mov	r0, r3
 800190c:	f00f fdda 	bl	80114c4 <siprintf>
				USB_PRINT(buf);
 8001910:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <send_data+0x1cc>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	4618      	mov	r0, r3
 8001918:	f00c fc36 	bl	800e188 <xQueueSemaphoreTake>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00c      	beq.n	800193c <send_data+0x194>
 8001922:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fc5a 	bl	80001e0 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	b29a      	uxth	r2, r3
 8001930:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f00f f844 	bl	80109c4 <CDC_Transmit_FS>
 800193c:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <send_data+0x1cc>)
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	2300      	movs	r3, #0
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	f00c f99d 	bl	800dc84 <xQueueGenericSend>
		for (i = 0; i < data_quantity; i++) {
 800194a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800194c:	3301      	adds	r3, #1
 800194e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001950:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001954:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001956:	429a      	cmp	r2, r3
 8001958:	dbbf      	blt.n	80018da <send_data+0x132>
		n++;
 800195a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800195c:	3301      	adds	r3, #1
 800195e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	for (;;) {
 8001960:	e74b      	b.n	80017fa <send_data+0x52>
}
 8001962:	3760      	adds	r7, #96	@ 0x60
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	10624dd3 	.word	0x10624dd3
 800196c:	51eb851f 	.word	0x51eb851f
 8001970:	080129a8 	.word	0x080129a8
 8001974:	20002260 	.word	0x20002260

08001978 <start_send_data_tasks>:


static bool start_send_data_tasks(void){
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af02      	add	r7, sp, #8
	BaseType_t ret = pdTRUE;
 800197e:	2301      	movs	r3, #1
 8001980:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < sizeof(data_parameters) / sizeof(DataParameter); i++) {
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	e019      	b.n	80019bc <start_send_data_tasks+0x44>
	    ret = xTaskCreate(send_data,
				"send_data",
				128 * 2,
				(void *) &data_parameters[i],
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4a0e      	ldr	r2, [pc, #56]	@ (80019cc <start_send_data_tasks+0x54>)
 8001994:	4413      	add	r3, r2
	    ret = xTaskCreate(send_data,
 8001996:	2200      	movs	r2, #0
 8001998:	9201      	str	r2, [sp, #4]
 800199a:	2219      	movs	r2, #25
 800199c:	9200      	str	r2, [sp, #0]
 800199e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019a2:	490b      	ldr	r1, [pc, #44]	@ (80019d0 <start_send_data_tasks+0x58>)
 80019a4:	480b      	ldr	r0, [pc, #44]	@ (80019d4 <start_send_data_tasks+0x5c>)
 80019a6:	f00c fee5 	bl	800e774 <xTaskCreate>
 80019aa:	6038      	str	r0, [r7, #0]
				25,
				NULL);
	    if (ret != pdPASS) return false;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d001      	beq.n	80019b6 <start_send_data_tasks+0x3e>
 80019b2:	2300      	movs	r3, #0
 80019b4:	e006      	b.n	80019c4 <start_send_data_tasks+0x4c>
	for (int i = 0; i < sizeof(data_parameters) / sizeof(DataParameter); i++) {
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3301      	adds	r3, #1
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d9e2      	bls.n	8001988 <start_send_data_tasks+0x10>
	}

	return true;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000004 	.word	0x20000004
 80019d0:	080129c8 	.word	0x080129c8
 80019d4:	080017a9 	.word	0x080017a9

080019d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a70 <MX_GPIO_Init+0x98>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a70 <MX_GPIO_Init+0x98>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001a70 <MX_GPIO_Init+0x98>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <MX_GPIO_Init+0x98>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a17      	ldr	r2, [pc, #92]	@ (8001a70 <MX_GPIO_Init+0x98>)
 8001a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <MX_GPIO_Init+0x98>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <MX_GPIO_Init+0x98>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a10      	ldr	r2, [pc, #64]	@ (8001a70 <MX_GPIO_Init+0x98>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <MX_GPIO_Init+0x98>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2110      	movs	r1, #16
 8001a46:	480b      	ldr	r0, [pc, #44]	@ (8001a74 <MX_GPIO_Init+0x9c>)
 8001a48:	f000 feda 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4619      	mov	r1, r3
 8001a62:	4804      	ldr	r0, [pc, #16]	@ (8001a74 <MX_GPIO_Init+0x9c>)
 8001a64:	f000 fd48 	bl	80024f8 <HAL_GPIO_Init>

}
 8001a68:	bf00      	nop
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40020000 	.word	0x40020000

08001a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a7c:	f000 fbf4 	bl	8002268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a80:	f000 f812 	bl	8001aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a84:	f7ff ffa8 	bl	80019d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a88:	f000 f91c 	bl	8001cc4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001a8c:	f005 fc9e 	bl	80073cc <MX_FATFS_Init>
  MX_RTC_Init();
 8001a90:	f000 f892 	bl	8001bb8 <MX_RTC_Init>
  MX_TIM2_Init();
 8001a94:	f000 fb52 	bl	800213c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a98:	f00b fdea 	bl	800d670 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001a9c:	f7ff fe24 	bl	80016e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001aa0:	f00b fe0a 	bl	800d6b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <main+0x2c>

08001aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b094      	sub	sp, #80	@ 0x50
 8001aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aae:	f107 0320 	add.w	r3, r7, #32
 8001ab2:	2230      	movs	r2, #48	@ 0x30
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f00f fd67 	bl	801158a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b80 <SystemClock_Config+0xd8>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8001b80 <SystemClock_Config+0xd8>)
 8001ad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ada:	6413      	str	r3, [r2, #64]	@ 0x40
 8001adc:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <SystemClock_Config+0xd8>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <SystemClock_Config+0xdc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001af4:	4a23      	ldr	r2, [pc, #140]	@ (8001b84 <SystemClock_Config+0xdc>)
 8001af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <SystemClock_Config+0xdc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001b08:	2307      	movs	r3, #7
 8001b0a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b12:	2301      	movs	r3, #1
 8001b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b16:	2301      	movs	r3, #1
 8001b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001b28:	230f      	movs	r3, #15
 8001b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001b2c:	2390      	movs	r3, #144	@ 0x90
 8001b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001b34:	2305      	movs	r3, #5
 8001b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b38:	f107 0320 	add.w	r3, r7, #32
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 f8c9 	bl	8003cd4 <HAL_RCC_OscConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001b48:	f000 f830 	bl	8001bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 fb2c 	bl	80041c4 <HAL_RCC_ClockConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001b72:	f000 f81b 	bl	8001bac <Error_Handler>
  }
}
 8001b76:	bf00      	nop
 8001b78:	3750      	adds	r7, #80	@ 0x50
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40007000 	.word	0x40007000

08001b88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b9a:	f000 fb87 	bl	80022ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40010000 	.word	0x40010000

08001bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <Error_Handler+0x8>

08001bb8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bcc:	2300      	movs	r3, #0
 8001bce:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bd0:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <MX_RTC_Init+0xac>)
 8001bd2:	4a25      	ldr	r2, [pc, #148]	@ (8001c68 <MX_RTC_Init+0xb0>)
 8001bd4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bd6:	4b23      	ldr	r3, [pc, #140]	@ (8001c64 <MX_RTC_Init+0xac>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bdc:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <MX_RTC_Init+0xac>)
 8001bde:	227f      	movs	r2, #127	@ 0x7f
 8001be0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001be2:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <MX_RTC_Init+0xac>)
 8001be4:	22ff      	movs	r2, #255	@ 0xff
 8001be6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001be8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <MX_RTC_Init+0xac>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bee:	4b1d      	ldr	r3, [pc, #116]	@ (8001c64 <MX_RTC_Init+0xac>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <MX_RTC_Init+0xac>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bfa:	481a      	ldr	r0, [pc, #104]	@ (8001c64 <MX_RTC_Init+0xac>)
 8001bfc:	f002 fdd0 	bl	80047a0 <HAL_RTC_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001c06:	f7ff ffd1 	bl	8001bac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2201      	movs	r2, #1
 8001c22:	4619      	mov	r1, r3
 8001c24:	480f      	ldr	r0, [pc, #60]	@ (8001c64 <MX_RTC_Init+0xac>)
 8001c26:	f002 fe3e 	bl	80048a6 <HAL_RTC_SetTime>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001c30:	f7ff ffbc 	bl	8001bac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c34:	2301      	movs	r3, #1
 8001c36:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c44:	463b      	mov	r3, r7
 8001c46:	2201      	movs	r2, #1
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4806      	ldr	r0, [pc, #24]	@ (8001c64 <MX_RTC_Init+0xac>)
 8001c4c:	f002 fec5 	bl	80049da <HAL_RTC_SetDate>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001c56:	f7ff ffa9 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20002274 	.word	0x20002274
 8001c68:	40002800 	.word	0x40002800

08001c6c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
 8001c84:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001cbc <HAL_RTC_MspInit+0x50>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d111      	bne.n	8001cb4 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c90:	2302      	movs	r3, #2
 8001c92:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c98:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 fc8e 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001caa:	f7ff ff7f 	bl	8001bac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cae:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <HAL_RTC_MspInit+0x54>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40002800 	.word	0x40002800
 8001cc0:	42470e3c 	.word	0x42470e3c

08001cc4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cc8:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <MX_SPI1_Init+0x64>)
 8001cca:	4a18      	ldr	r2, [pc, #96]	@ (8001d2c <MX_SPI1_Init+0x68>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cce:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <MX_SPI1_Init+0x64>)
 8001cd0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd6:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <MX_SPI1_Init+0x64>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cdc:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <MX_SPI1_Init+0x64>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <MX_SPI1_Init+0x64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <MX_SPI1_Init+0x64>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_SPI1_Init+0x64>)
 8001cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cf4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <MX_SPI1_Init+0x64>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <MX_SPI1_Init+0x64>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <MX_SPI1_Init+0x64>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d08:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <MX_SPI1_Init+0x64>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <MX_SPI1_Init+0x64>)
 8001d10:	220a      	movs	r2, #10
 8001d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d14:	4804      	ldr	r0, [pc, #16]	@ (8001d28 <MX_SPI1_Init+0x64>)
 8001d16:	f002 ff85 	bl	8004c24 <HAL_SPI_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d20:	f7ff ff44 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20002294 	.word	0x20002294
 8001d2c:	40013000 	.word	0x40013000

08001d30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	@ (8001db4 <HAL_SPI_MspInit+0x84>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12b      	bne.n	8001daa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b18      	ldr	r3, [pc, #96]	@ (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	4a17      	ldr	r2, [pc, #92]	@ (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	4a10      	ldr	r2, [pc, #64]	@ (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d8a:	23e0      	movs	r3, #224	@ 0xe0
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <HAL_SPI_MspInit+0x8c>)
 8001da6:	f000 fba7 	bl	80024f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001daa:	bf00      	nop
 8001dac:	3728      	adds	r7, #40	@ 0x28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40013000 	.word	0x40013000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_MspInit+0x54>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	4a11      	ldr	r2, [pc, #68]	@ (8001e14 <HAL_MspInit+0x54>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <HAL_MspInit+0x54>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <HAL_MspInit+0x54>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <HAL_MspInit+0x54>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df2:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <HAL_MspInit+0x54>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	210f      	movs	r1, #15
 8001e02:	f06f 0001 	mvn.w	r0, #1
 8001e06:	f000 fb4d 	bl	80024a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800

08001e18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	@ 0x30
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee8 <HAL_InitTick+0xd0>)
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e30:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee8 <HAL_InitTick+0xd0>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee8 <HAL_InitTick+0xd0>)
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e44:	f107 020c 	add.w	r2, r7, #12
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 fb84 	bl	800455c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e54:	f002 fb6e 	bl	8004534 <HAL_RCC_GetPCLK2Freq>
 8001e58:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5c:	4a23      	ldr	r2, [pc, #140]	@ (8001eec <HAL_InitTick+0xd4>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	0c9b      	lsrs	r3, r3, #18
 8001e64:	3b01      	subs	r3, #1
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e68:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <HAL_InitTick+0xd8>)
 8001e6a:	4a22      	ldr	r2, [pc, #136]	@ (8001ef4 <HAL_InitTick+0xdc>)
 8001e6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <HAL_InitTick+0xd8>)
 8001e70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e76:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef0 <HAL_InitTick+0xd8>)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <HAL_InitTick+0xd8>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <HAL_InitTick+0xd8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e88:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <HAL_InitTick+0xd8>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001e8e:	4818      	ldr	r0, [pc, #96]	@ (8001ef0 <HAL_InitTick+0xd8>)
 8001e90:	f003 fb20 	bl	80054d4 <HAL_TIM_Base_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d11b      	bne.n	8001eda <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001ea2:	4813      	ldr	r0, [pc, #76]	@ (8001ef0 <HAL_InitTick+0xd8>)
 8001ea4:	f003 fb66 	bl	8005574 <HAL_TIM_Base_Start_IT>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001eae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d111      	bne.n	8001eda <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001eb6:	2019      	movs	r0, #25
 8001eb8:	f000 fb10 	bl	80024dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b0f      	cmp	r3, #15
 8001ec0:	d808      	bhi.n	8001ed4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	2019      	movs	r0, #25
 8001ec8:	f000 faec 	bl	80024a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <HAL_InitTick+0xe0>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e002      	b.n	8001eda <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001eda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3730      	adds	r7, #48	@ 0x30
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	431bde83 	.word	0x431bde83
 8001ef0:	200022ec 	.word	0x200022ec
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	20000070 	.word	0x20000070

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <NMI_Handler+0x4>

08001f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <HardFault_Handler+0x4>

08001f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <MemManage_Handler+0x4>

08001f14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <BusFault_Handler+0x4>

08001f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <UsageFault_Handler+0x4>

08001f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(Timer1 > 0)
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <TIM1_UP_TIM10_IRQHandler+0x38>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <TIM1_UP_TIM10_IRQHandler+0x18>
		Timer1--;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <TIM1_UP_TIM10_IRQHandler+0x38>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <TIM1_UP_TIM10_IRQHandler+0x38>)
 8001f4a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <TIM1_UP_TIM10_IRQHandler+0x2c>
		Timer2--;
 8001f54:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001f5e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f60:	4804      	ldr	r0, [pc, #16]	@ (8001f74 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8001f62:	f003 fb69 	bl	8005638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20002268 	.word	0x20002268
 8001f70:	2000226a 	.word	0x2000226a
 8001f74:	200022ec 	.word	0x200022ec

08001f78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <OTG_FS_IRQHandler+0x10>)
 8001f7e:	f000 fd9c 	bl	8002aba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20007c88 	.word	0x20007c88

08001f8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return 1;
 8001f90:	2301      	movs	r3, #1
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_kill>:

int _kill(int pid, int sig)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fa6:	f00f fb95 	bl	80116d4 <__errno>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2216      	movs	r2, #22
 8001fae:	601a      	str	r2, [r3, #0]
  return -1;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_exit>:

void _exit (int status)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ffe7 	bl	8001f9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fce:	bf00      	nop
 8001fd0:	e7fd      	b.n	8001fce <_exit+0x12>

08001fd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e00a      	b.n	8001ffa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	4601      	mov	r1, r0
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	60ba      	str	r2, [r7, #8]
 8001ff0:	b2ca      	uxtb	r2, r1
 8001ff2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	dbf0      	blt.n	8001fe4 <_read+0x12>
  }

  return len;
 8002002:	687b      	ldr	r3, [r7, #4]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	e009      	b.n	8002032 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	60ba      	str	r2, [r7, #8]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	3301      	adds	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	429a      	cmp	r2, r3
 8002038:	dbf1      	blt.n	800201e <_write+0x12>
  }
  return len;
 800203a:	687b      	ldr	r3, [r7, #4]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_close>:

int _close(int file)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800206c:	605a      	str	r2, [r3, #4]
  return 0;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_isatty>:

int _isatty(int file)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002084:	2301      	movs	r3, #1
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002092:	b480      	push	{r7}
 8002094:	b085      	sub	sp, #20
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b4:	4a14      	ldr	r2, [pc, #80]	@ (8002108 <_sbrk+0x5c>)
 80020b6:	4b15      	ldr	r3, [pc, #84]	@ (800210c <_sbrk+0x60>)
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c0:	4b13      	ldr	r3, [pc, #76]	@ (8002110 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c8:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <_sbrk+0x64>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	@ (8002114 <_sbrk+0x68>)
 80020cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d207      	bcs.n	80020ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020dc:	f00f fafa 	bl	80116d4 <__errno>
 80020e0:	4603      	mov	r3, r0
 80020e2:	220c      	movs	r2, #12
 80020e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	e009      	b.n	8002100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ec:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <_sbrk+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020f2:	4b07      	ldr	r3, [pc, #28]	@ (8002110 <_sbrk+0x64>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	4a05      	ldr	r2, [pc, #20]	@ (8002110 <_sbrk+0x64>)
 80020fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20020000 	.word	0x20020000
 800210c:	00000400 	.word	0x00000400
 8002110:	20002334 	.word	0x20002334
 8002114:	200084d8 	.word	0x200084d8

08002118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800211c:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <SystemInit+0x20>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002122:	4a05      	ldr	r2, [pc, #20]	@ (8002138 <SystemInit+0x20>)
 8002124:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002128:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002150:	463b      	mov	r3, r7
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002158:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <MX_TIM2_Init+0x94>)
 800215a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800215e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002160:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <MX_TIM2_Init+0x94>)
 8002162:	2200      	movs	r2, #0
 8002164:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002166:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <MX_TIM2_Init+0x94>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800216c:	4b18      	ldr	r3, [pc, #96]	@ (80021d0 <MX_TIM2_Init+0x94>)
 800216e:	f04f 32ff 	mov.w	r2, #4294967295
 8002172:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002174:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <MX_TIM2_Init+0x94>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217a:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <MX_TIM2_Init+0x94>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002180:	4813      	ldr	r0, [pc, #76]	@ (80021d0 <MX_TIM2_Init+0x94>)
 8002182:	f003 f9a7 	bl	80054d4 <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800218c:	f7ff fd0e 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002194:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002196:	f107 0308 	add.w	r3, r7, #8
 800219a:	4619      	mov	r1, r3
 800219c:	480c      	ldr	r0, [pc, #48]	@ (80021d0 <MX_TIM2_Init+0x94>)
 800219e:	f003 fb3b 	bl	8005818 <HAL_TIM_ConfigClockSource>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80021a8:	f7ff fd00 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021b4:	463b      	mov	r3, r7
 80021b6:	4619      	mov	r1, r3
 80021b8:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <MX_TIM2_Init+0x94>)
 80021ba:	f003 fd43 	bl	8005c44 <HAL_TIMEx_MasterConfigSynchronization>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80021c4:	f7ff fcf2 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20002338 	.word	0x20002338

080021d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021e4:	d10d      	bne.n	8002202 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_TIM_Base_MspInit+0x3c>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	4a08      	ldr	r2, [pc, #32]	@ (8002210 <HAL_TIM_Base_MspInit+0x3c>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021f6:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_TIM_Base_MspInit+0x3c>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800

08002214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002214:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800224c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002218:	f7ff ff7e 	bl	8002118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800221c:	480c      	ldr	r0, [pc, #48]	@ (8002250 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800221e:	490d      	ldr	r1, [pc, #52]	@ (8002254 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002220:	4a0d      	ldr	r2, [pc, #52]	@ (8002258 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002224:	e002      	b.n	800222c <LoopCopyDataInit>

08002226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222a:	3304      	adds	r3, #4

0800222c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800222c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002230:	d3f9      	bcc.n	8002226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002234:	4c0a      	ldr	r4, [pc, #40]	@ (8002260 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002238:	e001      	b.n	800223e <LoopFillZerobss>

0800223a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800223c:	3204      	adds	r2, #4

0800223e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002240:	d3fb      	bcc.n	800223a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002242:	f00f fa4d 	bl	80116e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002246:	f7ff fc17 	bl	8001a78 <main>
  bx  lr    
 800224a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800224c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002254:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002258:	08012fe8 	.word	0x08012fe8
  ldr r2, =_sbss
 800225c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002260:	200084d8 	.word	0x200084d8

08002264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC_IRQHandler>
	...

08002268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800226c:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0d      	ldr	r2, [pc, #52]	@ (80022a8 <HAL_Init+0x40>)
 8002272:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0a      	ldr	r2, [pc, #40]	@ (80022a8 <HAL_Init+0x40>)
 800227e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002284:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a07      	ldr	r2, [pc, #28]	@ (80022a8 <HAL_Init+0x40>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002290:	2003      	movs	r0, #3
 8002292:	f000 f8fc 	bl	800248e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002296:	200f      	movs	r0, #15
 8002298:	f7ff fdbe 	bl	8001e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800229c:	f7ff fd90 	bl	8001dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023c00 	.word	0x40023c00

080022ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b0:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_IncTick+0x20>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_IncTick+0x24>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <HAL_IncTick+0x24>)
 80022be:	6013      	str	r3, [r2, #0]
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000074 	.word	0x20000074
 80022d0:	20002380 	.word	0x20002380

080022d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return uwTick;
 80022d8:	4b03      	ldr	r3, [pc, #12]	@ (80022e8 <HAL_GetTick+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20002380 	.word	0x20002380

080022ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff ffee 	bl	80022d4 <HAL_GetTick>
 80022f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d005      	beq.n	8002312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002306:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <HAL_Delay+0x44>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002312:	bf00      	nop
 8002314:	f7ff ffde 	bl	80022d4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	429a      	cmp	r2, r3
 8002322:	d8f7      	bhi.n	8002314 <HAL_Delay+0x28>
  {
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000074 	.word	0x20000074

08002334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800235c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002366:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <__NVIC_GetPriorityGrouping+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 0307 	and.w	r3, r3, #7
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db0b      	blt.n	80023c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4907      	ldr	r1, [pc, #28]	@ (80023d0 <__NVIC_EnableIRQ+0x38>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2001      	movs	r0, #1
 80023ba:	fa00 f202 	lsl.w	r2, r0, r2
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db0a      	blt.n	80023fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	490c      	ldr	r1, [pc, #48]	@ (8002420 <__NVIC_SetPriority+0x4c>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023fc:	e00a      	b.n	8002414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4908      	ldr	r1, [pc, #32]	@ (8002424 <__NVIC_SetPriority+0x50>)
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3b04      	subs	r3, #4
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	440b      	add	r3, r1
 8002412:	761a      	strb	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	@ 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	2b04      	cmp	r3, #4
 8002444:	bf28      	it	cs
 8002446:	2304      	movcs	r3, #4
 8002448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3304      	adds	r3, #4
 800244e:	2b06      	cmp	r3, #6
 8002450:	d902      	bls.n	8002458 <NVIC_EncodePriority+0x30>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b03      	subs	r3, #3
 8002456:	e000      	b.n	800245a <NVIC_EncodePriority+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	f04f 32ff 	mov.w	r2, #4294967295
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43d9      	mvns	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	4313      	orrs	r3, r2
         );
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	@ 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ff4c 	bl	8002334 <__NVIC_SetPriorityGrouping>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b6:	f7ff ff61 	bl	800237c <__NVIC_GetPriorityGrouping>
 80024ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	6978      	ldr	r0, [r7, #20]
 80024c2:	f7ff ffb1 	bl	8002428 <NVIC_EncodePriority>
 80024c6:	4602      	mov	r2, r0
 80024c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff80 	bl	80023d4 <__NVIC_SetPriority>
}
 80024d4:	bf00      	nop
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ff54 	bl	8002398 <__NVIC_EnableIRQ>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	@ 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	e159      	b.n	80027c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002514:	2201      	movs	r2, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	429a      	cmp	r2, r3
 800252e:	f040 8148 	bne.w	80027c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d005      	beq.n	800254a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002546:	2b02      	cmp	r3, #2
 8002548:	d130      	bne.n	80025ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	2203      	movs	r2, #3
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 0201 	and.w	r2, r3, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d017      	beq.n	80025e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d123      	bne.n	800263c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3208      	adds	r2, #8
 80025fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	220f      	movs	r2, #15
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	08da      	lsrs	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3208      	adds	r2, #8
 8002636:	69b9      	ldr	r1, [r7, #24]
 8002638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0203 	and.w	r2, r3, #3
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80a2 	beq.w	80027c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b57      	ldr	r3, [pc, #348]	@ (80027e0 <HAL_GPIO_Init+0x2e8>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	4a56      	ldr	r2, [pc, #344]	@ (80027e0 <HAL_GPIO_Init+0x2e8>)
 8002688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800268c:	6453      	str	r3, [r2, #68]	@ 0x44
 800268e:	4b54      	ldr	r3, [pc, #336]	@ (80027e0 <HAL_GPIO_Init+0x2e8>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800269a:	4a52      	ldr	r2, [pc, #328]	@ (80027e4 <HAL_GPIO_Init+0x2ec>)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	3302      	adds	r3, #2
 80026a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	220f      	movs	r2, #15
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a49      	ldr	r2, [pc, #292]	@ (80027e8 <HAL_GPIO_Init+0x2f0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d019      	beq.n	80026fa <HAL_GPIO_Init+0x202>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a48      	ldr	r2, [pc, #288]	@ (80027ec <HAL_GPIO_Init+0x2f4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d013      	beq.n	80026f6 <HAL_GPIO_Init+0x1fe>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a47      	ldr	r2, [pc, #284]	@ (80027f0 <HAL_GPIO_Init+0x2f8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00d      	beq.n	80026f2 <HAL_GPIO_Init+0x1fa>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a46      	ldr	r2, [pc, #280]	@ (80027f4 <HAL_GPIO_Init+0x2fc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <HAL_GPIO_Init+0x1f6>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a45      	ldr	r2, [pc, #276]	@ (80027f8 <HAL_GPIO_Init+0x300>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d101      	bne.n	80026ea <HAL_GPIO_Init+0x1f2>
 80026e6:	2304      	movs	r3, #4
 80026e8:	e008      	b.n	80026fc <HAL_GPIO_Init+0x204>
 80026ea:	2307      	movs	r3, #7
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x204>
 80026ee:	2303      	movs	r3, #3
 80026f0:	e004      	b.n	80026fc <HAL_GPIO_Init+0x204>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e002      	b.n	80026fc <HAL_GPIO_Init+0x204>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_GPIO_Init+0x204>
 80026fa:	2300      	movs	r3, #0
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	f002 0203 	and.w	r2, r2, #3
 8002702:	0092      	lsls	r2, r2, #2
 8002704:	4093      	lsls	r3, r2
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800270c:	4935      	ldr	r1, [pc, #212]	@ (80027e4 <HAL_GPIO_Init+0x2ec>)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	3302      	adds	r3, #2
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271a:	4b38      	ldr	r3, [pc, #224]	@ (80027fc <HAL_GPIO_Init+0x304>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273e:	4a2f      	ldr	r2, [pc, #188]	@ (80027fc <HAL_GPIO_Init+0x304>)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002744:	4b2d      	ldr	r3, [pc, #180]	@ (80027fc <HAL_GPIO_Init+0x304>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002768:	4a24      	ldr	r2, [pc, #144]	@ (80027fc <HAL_GPIO_Init+0x304>)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800276e:	4b23      	ldr	r3, [pc, #140]	@ (80027fc <HAL_GPIO_Init+0x304>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002792:	4a1a      	ldr	r2, [pc, #104]	@ (80027fc <HAL_GPIO_Init+0x304>)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002798:	4b18      	ldr	r3, [pc, #96]	@ (80027fc <HAL_GPIO_Init+0x304>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027bc:	4a0f      	ldr	r2, [pc, #60]	@ (80027fc <HAL_GPIO_Init+0x304>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3301      	adds	r3, #1
 80027c6:	61fb      	str	r3, [r7, #28]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b0f      	cmp	r3, #15
 80027cc:	f67f aea2 	bls.w	8002514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3724      	adds	r7, #36	@ 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40013800 	.word	0x40013800
 80027e8:	40020000 	.word	0x40020000
 80027ec:	40020400 	.word	0x40020400
 80027f0:	40020800 	.word	0x40020800
 80027f4:	40020c00 	.word	0x40020c00
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40013c00 	.word	0x40013c00

08002800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
 800280c:	4613      	mov	r3, r2
 800280e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002810:	787b      	ldrb	r3, [r7, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800281c:	e003      	b.n	8002826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	041a      	lsls	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	619a      	str	r2, [r3, #24]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af02      	add	r7, sp, #8
 8002838:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e101      	b.n	8002a48 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f00e f9f8 	bl	8010c54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2203      	movs	r2, #3
 8002868:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002872:	d102      	bne.n	800287a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f003 fb79 	bl	8005f76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	7c1a      	ldrb	r2, [r3, #16]
 800288c:	f88d 2000 	strb.w	r2, [sp]
 8002890:	3304      	adds	r3, #4
 8002892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002894:	f003 fa58 	bl	8005d48 <USB_CoreInit>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0ce      	b.n	8002a48 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 fb71 	bl	8005f98 <USB_SetCurrentMode>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0bf      	b.n	8002a48 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	e04a      	b.n	8002964 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3315      	adds	r3, #21
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3314      	adds	r3, #20
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	b298      	uxth	r0, r3
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	332e      	adds	r3, #46	@ 0x2e
 800290a:	4602      	mov	r2, r0
 800290c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3318      	adds	r3, #24
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	331c      	adds	r3, #28
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	3320      	adds	r3, #32
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	3324      	adds	r3, #36	@ 0x24
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	3301      	adds	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	791b      	ldrb	r3, [r3, #4]
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	429a      	cmp	r2, r3
 800296c:	d3af      	bcc.n	80028ce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e044      	b.n	80029fe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800299c:	7bfa      	ldrb	r2, [r7, #15]
 800299e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	3301      	adds	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	791b      	ldrb	r3, [r3, #4]
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d3b5      	bcc.n	8002974 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	7c1a      	ldrb	r2, [r3, #16]
 8002a10:	f88d 2000 	strb.w	r2, [sp]
 8002a14:	3304      	adds	r3, #4
 8002a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a18:	f003 fb0a 	bl	8006030 <USB_DevInit>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00c      	b.n	8002a48 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 fb4e 	bl	80070e2 <USB_DevDisconnect>

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_PCD_Start+0x1c>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e022      	b.n	8002ab2 <HAL_PCD_Start+0x62>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d009      	beq.n	8002a94 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 fa5b 	bl	8005f54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 fafc 	bl	80070a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002aba:	b590      	push	{r4, r7, lr}
 8002abc:	b08d      	sub	sp, #52	@ 0x34
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f004 fbba 	bl	800724a <USB_GetMode>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f040 848c 	bne.w	80033f6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 fb1e 	bl	8007124 <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8482 	beq.w	80033f4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f004 fb0b 	bl	8007124 <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d107      	bne.n	8002b28 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f002 0202 	and.w	r2, r2, #2
 8002b26:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f004 faf9 	bl	8007124 <USB_ReadInterrupts>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d161      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0210 	bic.w	r2, r2, #16
 8002b4a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f003 020f 	and.w	r2, r3, #15
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	3304      	adds	r3, #4
 8002b6a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	0c5b      	lsrs	r3, r3, #17
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d124      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d035      	beq.n	8002bf0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	6a38      	ldr	r0, [r7, #32]
 8002b98:	f004 f930 	bl	8006dfc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ba8:	441a      	add	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bba:	441a      	add	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	615a      	str	r2, [r3, #20]
 8002bc0:	e016      	b.n	8002bf0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	0c5b      	lsrs	r3, r3, #17
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d110      	bne.n	8002bf0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6a38      	ldr	r0, [r7, #32]
 8002bda:	f004 f90f 	bl	8006dfc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bea:	441a      	add	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0210 	orr.w	r2, r2, #16
 8002bfe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f004 fa8d 	bl	8007124 <USB_ReadInterrupts>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c10:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c14:	f040 80a7 	bne.w	8002d66 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f004 fa92 	bl	800714a <USB_ReadDevAllOutEpInterrupt>
 8002c26:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002c28:	e099      	b.n	8002d5e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 808e 	beq.w	8002d52 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f004 fab6 	bl	80071b2 <USB_ReadDevOutEPInterrupt>
 8002c46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00c      	beq.n	8002c6c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2301      	movs	r3, #1
 8002c62:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fea2 	bl	80039b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00c      	beq.n	8002c90 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c82:	461a      	mov	r2, r3
 8002c84:	2308      	movs	r3, #8
 8002c86:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 ff78 	bl	8003b80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2310      	movs	r3, #16
 8002caa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d030      	beq.n	8002d18 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cbe:	2b80      	cmp	r3, #128	@ 0x80
 8002cc0:	d109      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cd0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cd4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3304      	adds	r3, #4
 8002cea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	78db      	ldrb	r3, [r3, #3]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d108      	bne.n	8002d06 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f00e f8a3 	bl	8010e4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d12:	461a      	mov	r2, r3
 8002d14:	2302      	movs	r3, #2
 8002d16:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2320      	movs	r3, #32
 8002d32:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d50:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	3301      	adds	r3, #1
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f47f af62 	bne.w	8002c2a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f004 f9da 	bl	8007124 <USB_ReadInterrupts>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d7a:	f040 80db 	bne.w	8002f34 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 f9fb 	bl	800717e <USB_ReadDevAllInEpInterrupt>
 8002d88:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002d8e:	e0cd      	b.n	8002f2c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80c2 	beq.w	8002f20 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f004 fa21 	bl	80071ee <USB_ReadDevInEPInterrupt>
 8002dac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d057      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69f9      	ldr	r1, [r7, #28]
 8002dd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002dd8:	4013      	ands	r3, r2
 8002dda:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002de8:	461a      	mov	r2, r3
 8002dea:	2301      	movs	r3, #1
 8002dec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	799b      	ldrb	r3, [r3, #6]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d132      	bne.n	8002e5c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3320      	adds	r3, #32
 8002e06:	6819      	ldr	r1, [r3, #0]
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4403      	add	r3, r0
 8002e16:	331c      	adds	r3, #28
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4419      	add	r1, r3
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4403      	add	r3, r0
 8002e2a:	3320      	adds	r3, #32
 8002e2c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d113      	bne.n	8002e5c <HAL_PCD_IRQHandler+0x3a2>
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	3324      	adds	r3, #36	@ 0x24
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d108      	bne.n	8002e5c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e54:	461a      	mov	r2, r3
 8002e56:	2101      	movs	r1, #1
 8002e58:	f004 fa28 	bl	80072ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4619      	mov	r1, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f00d ff77 	bl	8010d56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2308      	movs	r3, #8
 8002e82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2340      	movs	r3, #64	@ 0x40
 8002eba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d023      	beq.n	8002f0e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ec6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ec8:	6a38      	ldr	r0, [r7, #32]
 8002eca:	f003 fa15 	bl	80062f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	3310      	adds	r3, #16
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	3304      	adds	r3, #4
 8002ee0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	78db      	ldrb	r3, [r3, #3]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d108      	bne.n	8002efc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f00d ffba 	bl	8010e70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fcbb 	bl	8003896 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	3301      	adds	r3, #1
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f47f af2e 	bne.w	8002d90 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f004 f8f3 	bl	8007124 <USB_ReadInterrupts>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f48:	d122      	bne.n	8002f90 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d108      	bne.n	8002f7a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f70:	2100      	movs	r1, #0
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fea2 	bl	8003cbc <HAL_PCDEx_LPM_Callback>
 8002f78:	e002      	b.n	8002f80 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f00d ff58 	bl	8010e30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002f8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f004 f8c5 	bl	8007124 <USB_ReadInterrupts>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fa4:	d112      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d102      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f00d ff14 	bl	8010de4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002fca:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f004 f8a7 	bl	8007124 <USB_ReadInterrupts>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fe0:	f040 80b7 	bne.w	8003152 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2110      	movs	r1, #16
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 f97a 	bl	80062f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003008:	e046      	b.n	8003098 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800300a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	4413      	add	r3, r2
 8003012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003016:	461a      	mov	r2, r3
 8003018:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800301c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800301e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800302e:	0151      	lsls	r1, r2, #5
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	440a      	add	r2, r1
 8003034:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003038:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800303c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800303e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800304a:	461a      	mov	r2, r3
 800304c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003050:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003062:	0151      	lsls	r1, r2, #5
 8003064:	69fa      	ldr	r2, [r7, #28]
 8003066:	440a      	add	r2, r1
 8003068:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800306c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003070:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003082:	0151      	lsls	r1, r2, #5
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	440a      	add	r2, r1
 8003088:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800308c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003090:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003094:	3301      	adds	r3, #1
 8003096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	791b      	ldrb	r3, [r3, #4]
 800309c:	461a      	mov	r2, r3
 800309e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d3b2      	bcc.n	800300a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030b2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80030b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	7bdb      	ldrb	r3, [r3, #15]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d016      	beq.n	80030ee <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030d0:	f043 030b 	orr.w	r3, r3, #11
 80030d4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030e6:	f043 030b 	orr.w	r3, r3, #11
 80030ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ec:	e015      	b.n	800311a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003100:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003104:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003114:	f043 030b 	orr.w	r3, r3, #11
 8003118:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003128:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800312c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800313c:	461a      	mov	r2, r3
 800313e:	f004 f8b5 	bl	80072ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f003 ffe4 	bl	8007124 <USB_ReadInterrupts>
 800315c:	4603      	mov	r3, r0
 800315e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003166:	d123      	bne.n	80031b0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f004 f87a 	bl	8007266 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f003 f937 	bl	80063ea <USB_GetDevSpeed>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681c      	ldr	r4, [r3, #0]
 8003188:	f001 f9c8 	bl	800451c <HAL_RCC_GetHCLKFreq>
 800318c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003192:	461a      	mov	r2, r3
 8003194:	4620      	mov	r0, r4
 8003196:	f002 fe3b 	bl	8005e10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f00d fe03 	bl	8010da6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80031ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f003 ffb5 	bl	8007124 <USB_ReadInterrupts>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d10a      	bne.n	80031da <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f00d fde0 	bl	8010d8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f002 0208 	and.w	r2, r2, #8
 80031d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 ffa0 	bl	8007124 <USB_ReadInterrupts>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ea:	2b80      	cmp	r3, #128	@ 0x80
 80031ec:	d123      	bne.n	8003236 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031fa:	2301      	movs	r3, #1
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fe:	e014      	b.n	800322a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d105      	bne.n	8003224 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321a:	b2db      	uxtb	r3, r3
 800321c:	4619      	mov	r1, r3
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fb08 	bl	8003834 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	3301      	adds	r3, #1
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	791b      	ldrb	r3, [r3, #4]
 800322e:	461a      	mov	r2, r3
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	4293      	cmp	r3, r2
 8003234:	d3e4      	bcc.n	8003200 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f003 ff72 	bl	8007124 <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003246:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800324a:	d13c      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800324c:	2301      	movs	r3, #1
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003250:	e02b      	b.n	80032aa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	3318      	adds	r3, #24
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d115      	bne.n	80032a4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003278:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800327a:	2b00      	cmp	r3, #0
 800327c:	da12      	bge.n	80032a4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	3317      	adds	r3, #23
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800329a:	b2db      	uxtb	r3, r3
 800329c:	4619      	mov	r1, r3
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fac8 	bl	8003834 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	3301      	adds	r3, #1
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	791b      	ldrb	r3, [r3, #4]
 80032ae:	461a      	mov	r2, r3
 80032b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d3cd      	bcc.n	8003252 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80032c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 ff2a 	bl	8007124 <USB_ReadInterrupts>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032da:	d156      	bne.n	800338a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032dc:	2301      	movs	r3, #1
 80032de:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e0:	e045      	b.n	800336e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d12e      	bne.n	8003368 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800330a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800330c:	2b00      	cmp	r3, #0
 800330e:	da2b      	bge.n	8003368 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800331c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003320:	429a      	cmp	r2, r3
 8003322:	d121      	bne.n	8003368 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003360:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003364:	6053      	str	r3, [r2, #4]
            break;
 8003366:	e008      	b.n	800337a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	3301      	adds	r3, #1
 800336c:	627b      	str	r3, [r7, #36]	@ 0x24
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	791b      	ldrb	r3, [r3, #4]
 8003372:	461a      	mov	r2, r3
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	4293      	cmp	r3, r2
 8003378:	d3b3      	bcc.n	80032e2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f003 fec8 	bl	8007124 <USB_ReadInterrupts>
 8003394:	4603      	mov	r3, r0
 8003396:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800339e:	d10a      	bne.n	80033b6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f00d fd77 	bl	8010e94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80033b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 feb2 	bl	8007124 <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d115      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f00d fd67 	bl	8010eb0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	e000      	b.n	80033f6 <HAL_PCD_IRQHandler+0x93c>
      return;
 80033f4:	bf00      	nop
    }
  }
}
 80033f6:	3734      	adds	r7, #52	@ 0x34
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd90      	pop	{r4, r7, pc}

080033fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_PCD_SetAddress+0x1a>
 8003412:	2302      	movs	r3, #2
 8003414:	e012      	b.n	800343c <HAL_PCD_SetAddress+0x40>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f003 fe11 	bl	8007054 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	461a      	mov	r2, r3
 8003452:	4603      	mov	r3, r0
 8003454:	70fb      	strb	r3, [r7, #3]
 8003456:	460b      	mov	r3, r1
 8003458:	803b      	strh	r3, [r7, #0]
 800345a:	4613      	mov	r3, r2
 800345c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003466:	2b00      	cmp	r3, #0
 8003468:	da0f      	bge.n	800348a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	f003 020f 	and.w	r2, r3, #15
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	3310      	adds	r3, #16
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	3304      	adds	r3, #4
 8003480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	705a      	strb	r2, [r3, #1]
 8003488:	e00f      	b.n	80034aa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	f003 020f 	and.w	r2, r3, #15
 8003490:	4613      	mov	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	4413      	add	r3, r2
 80034a0:	3304      	adds	r3, #4
 80034a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034b6:	883a      	ldrh	r2, [r7, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	78ba      	ldrb	r2, [r7, #2]
 80034c0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	785b      	ldrb	r3, [r3, #1]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034d4:	78bb      	ldrb	r3, [r7, #2]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d102      	bne.n	80034e0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_PCD_EP_Open+0xaa>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e00e      	b.n	800350c <HAL_PCD_EP_Open+0xc8>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68f9      	ldr	r1, [r7, #12]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f002 ff99 	bl	8006434 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800350a:	7afb      	ldrb	r3, [r7, #11]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003524:	2b00      	cmp	r3, #0
 8003526:	da0f      	bge.n	8003548 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	f003 020f 	and.w	r2, r3, #15
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	3310      	adds	r3, #16
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4413      	add	r3, r2
 800353c:	3304      	adds	r3, #4
 800353e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	705a      	strb	r2, [r3, #1]
 8003546:	e00f      	b.n	8003568 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f003 020f 	and.w	r2, r3, #15
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	b2da      	uxtb	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_PCD_EP_Close+0x6e>
 800357e:	2302      	movs	r3, #2
 8003580:	e00e      	b.n	80035a0 <HAL_PCD_EP_Close+0x8c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68f9      	ldr	r1, [r7, #12]
 8003590:	4618      	mov	r0, r3
 8003592:	f002 ffd7 	bl	8006544 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	460b      	mov	r3, r1
 80035b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035b8:	7afb      	ldrb	r3, [r7, #11]
 80035ba:	f003 020f 	and.w	r2, r3, #15
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	3304      	adds	r3, #4
 80035d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2200      	movs	r2, #0
 80035e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2200      	movs	r2, #0
 80035e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ea:	7afb      	ldrb	r3, [r7, #11]
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	799b      	ldrb	r3, [r3, #6]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d102      	bne.n	8003604 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	799b      	ldrb	r3, [r3, #6]
 800360c:	461a      	mov	r2, r3
 800360e:	6979      	ldr	r1, [r7, #20]
 8003610:	f003 f874 	bl	80066fc <USB_EPStartXfer>

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	f003 020f 	and.w	r2, r3, #15
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003640:	681b      	ldr	r3, [r3, #0]
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	460b      	mov	r3, r1
 800365c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800365e:	7afb      	ldrb	r3, [r7, #11]
 8003660:	f003 020f 	and.w	r2, r3, #15
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	3310      	adds	r3, #16
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4413      	add	r3, r2
 8003672:	3304      	adds	r3, #4
 8003674:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2200      	movs	r2, #0
 8003686:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2201      	movs	r2, #1
 800368c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800368e:	7afb      	ldrb	r3, [r7, #11]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	b2da      	uxtb	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	799b      	ldrb	r3, [r3, #6]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d102      	bne.n	80036a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	799b      	ldrb	r3, [r3, #6]
 80036b0:	461a      	mov	r2, r3
 80036b2:	6979      	ldr	r1, [r7, #20]
 80036b4:	f003 f822 	bl	80066fc <USB_EPStartXfer>

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	7912      	ldrb	r2, [r2, #4]
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e04f      	b.n	8003780 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	da0f      	bge.n	8003708 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 020f 	and.w	r2, r3, #15
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	3310      	adds	r3, #16
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	3304      	adds	r3, #4
 80036fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	705a      	strb	r2, [r3, #1]
 8003706:	e00d      	b.n	8003724 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	3304      	adds	r3, #4
 800371c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_PCD_EP_SetStall+0x82>
 8003740:	2302      	movs	r3, #2
 8003742:	e01d      	b.n	8003780 <HAL_PCD_EP_SetStall+0xbe>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68f9      	ldr	r1, [r7, #12]
 8003752:	4618      	mov	r0, r3
 8003754:	f003 fbaa 	bl	8006eac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7999      	ldrb	r1, [r3, #6]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003770:	461a      	mov	r2, r3
 8003772:	f003 fd9b 	bl	80072ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	7912      	ldrb	r2, [r2, #4]
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e042      	b.n	800382c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	da0f      	bge.n	80037ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	3310      	adds	r3, #16
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	3304      	adds	r3, #4
 80037c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	705a      	strb	r2, [r3, #1]
 80037cc:	e00f      	b.n	80037ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	f003 020f 	and.w	r2, r3, #15
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	3304      	adds	r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_PCD_EP_ClrStall+0x86>
 800380a:	2302      	movs	r3, #2
 800380c:	e00e      	b.n	800382c <HAL_PCD_EP_ClrStall+0xa4>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	4618      	mov	r0, r3
 800381e:	f003 fbb3 	bl	8006f88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003844:	2b00      	cmp	r3, #0
 8003846:	da0c      	bge.n	8003862 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	f003 020f 	and.w	r2, r3, #15
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	3310      	adds	r3, #16
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	3304      	adds	r3, #4
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e00c      	b.n	800387c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	f003 020f 	and.w	r2, r3, #15
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	4413      	add	r3, r2
 8003878:	3304      	adds	r3, #4
 800387a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68f9      	ldr	r1, [r7, #12]
 8003882:	4618      	mov	r0, r3
 8003884:	f003 f9d2 	bl	8006c2c <USB_EPStopXfer>
 8003888:	4603      	mov	r3, r0
 800388a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800388c:	7afb      	ldrb	r3, [r7, #11]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b08a      	sub	sp, #40	@ 0x28
 800389a:	af02      	add	r7, sp, #8
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	3310      	adds	r3, #16
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	3304      	adds	r3, #4
 80038bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d901      	bls.n	80038ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e06b      	b.n	80039a6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d902      	bls.n	80038ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3303      	adds	r3, #3
 80038ee:	089b      	lsrs	r3, r3, #2
 80038f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038f2:	e02a      	b.n	800394a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	429a      	cmp	r2, r3
 8003908:	d902      	bls.n	8003910 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3303      	adds	r3, #3
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	68d9      	ldr	r1, [r3, #12]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	4603      	mov	r3, r0
 800392c:	6978      	ldr	r0, [r7, #20]
 800392e:	f003 fa27 	bl	8006d80 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	441a      	add	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	441a      	add	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	429a      	cmp	r2, r3
 800395e:	d809      	bhi.n	8003974 <PCD_WriteEmptyTxFifo+0xde>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003968:	429a      	cmp	r2, r3
 800396a:	d203      	bcs.n	8003974 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1bf      	bne.n	80038f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	429a      	cmp	r2, r3
 800397e:	d811      	bhi.n	80039a4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	2201      	movs	r2, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	43db      	mvns	r3, r3
 800399a:	6939      	ldr	r1, [r7, #16]
 800399c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039a0:	4013      	ands	r3, r2
 80039a2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	333c      	adds	r3, #60	@ 0x3c
 80039c8:	3304      	adds	r3, #4
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	799b      	ldrb	r3, [r3, #6]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d17b      	bne.n	8003ade <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d015      	beq.n	8003a1c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4a61      	ldr	r2, [pc, #388]	@ (8003b78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	f240 80b9 	bls.w	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80b3 	beq.w	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a12:	461a      	mov	r2, r3
 8003a14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a18:	6093      	str	r3, [r2, #8]
 8003a1a:	e0a7      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a32:	461a      	mov	r2, r3
 8003a34:	2320      	movs	r3, #32
 8003a36:	6093      	str	r3, [r2, #8]
 8003a38:	e098      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f040 8093 	bne.w	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	4a4b      	ldr	r2, [pc, #300]	@ (8003b78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d90f      	bls.n	8003a6e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a64:	461a      	mov	r2, r3
 8003a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a6a:	6093      	str	r3, [r2, #8]
 8003a6c:	e07e      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4413      	add	r3, r2
 8003a80:	3304      	adds	r3, #4
 8003a82:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a1a      	ldr	r2, [r3, #32]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	0159      	lsls	r1, r3, #5
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	440b      	add	r3, r1
 8003a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d114      	bne.n	8003ad0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2101      	movs	r1, #1
 8003abc:	f003 fbf6 	bl	80072ac <USB_EP0_OutStart>
 8003ac0:	e006      	b.n	8003ad0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	441a      	add	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f00d f922 	bl	8010d20 <HAL_PCD_DataOutStageCallback>
 8003adc:	e046      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	4a26      	ldr	r2, [pc, #152]	@ (8003b7c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d124      	bne.n	8003b30 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003afc:	461a      	mov	r2, r3
 8003afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b02:	6093      	str	r3, [r2, #8]
 8003b04:	e032      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2320      	movs	r3, #32
 8003b20:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f00d f8f9 	bl	8010d20 <HAL_PCD_DataOutStageCallback>
 8003b2e:	e01d      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d114      	bne.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d108      	bne.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b58:	461a      	mov	r2, r3
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	f003 fba6 	bl	80072ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f00d f8da 	bl	8010d20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	4f54300a 	.word	0x4f54300a
 8003b7c:	4f54310a 	.word	0x4f54310a

08003b80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	333c      	adds	r3, #60	@ 0x3c
 8003b98:	3304      	adds	r3, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4a15      	ldr	r2, [pc, #84]	@ (8003c08 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d90e      	bls.n	8003bd4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d009      	beq.n	8003bd4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bd2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f00d f891 	bl	8010cfc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8003c08 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d90c      	bls.n	8003bfc <PCD_EP_OutSetupPacket_int+0x7c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	799b      	ldrb	r3, [r3, #6]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d108      	bne.n	8003bfc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	f003 fb58 	bl	80072ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	4f54300a 	.word	0x4f54300a

08003c0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	70fb      	strb	r3, [r7, #3]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d107      	bne.n	8003c3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c2a:	883b      	ldrh	r3, [r7, #0]
 8003c2c:	0419      	lsls	r1, r3, #16
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c38:	e028      	b.n	8003c8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	4413      	add	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	e00d      	b.n	8003c6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	3340      	adds	r3, #64	@ 0x40
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	4413      	add	r3, r2
 8003c62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	3301      	adds	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
 8003c6a:	7bfa      	ldrb	r2, [r7, #15]
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d3ec      	bcc.n	8003c4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c74:	883b      	ldrh	r3, [r7, #0]
 8003c76:	0418      	lsls	r0, r3, #16
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6819      	ldr	r1, [r3, #0]
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	4302      	orrs	r2, r0
 8003c84:	3340      	adds	r3, #64	@ 0x40
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e267      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d075      	beq.n	8003dde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cf2:	4b88      	ldr	r3, [pc, #544]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d00c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfe:	4b85      	ldr	r3, [pc, #532]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d112      	bne.n	8003d30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d0a:	4b82      	ldr	r3, [pc, #520]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d16:	d10b      	bne.n	8003d30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d18:	4b7e      	ldr	r3, [pc, #504]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d05b      	beq.n	8003ddc <HAL_RCC_OscConfig+0x108>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d157      	bne.n	8003ddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e242      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d38:	d106      	bne.n	8003d48 <HAL_RCC_OscConfig+0x74>
 8003d3a:	4b76      	ldr	r3, [pc, #472]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a75      	ldr	r2, [pc, #468]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e01d      	b.n	8003d84 <HAL_RCC_OscConfig+0xb0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x98>
 8003d52:	4b70      	ldr	r3, [pc, #448]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a6f      	ldr	r2, [pc, #444]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a6c      	ldr	r2, [pc, #432]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCC_OscConfig+0xb0>
 8003d6c:	4b69      	ldr	r3, [pc, #420]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a68      	ldr	r2, [pc, #416]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	4b66      	ldr	r3, [pc, #408]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a65      	ldr	r2, [pc, #404]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d013      	beq.n	8003db4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fe faa2 	bl	80022d4 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d94:	f7fe fa9e 	bl	80022d4 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b64      	cmp	r3, #100	@ 0x64
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e207      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0xc0>
 8003db2:	e014      	b.n	8003dde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fe fa8e 	bl	80022d4 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fe fa8a 	bl	80022d4 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	@ 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e1f3      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	4b51      	ldr	r3, [pc, #324]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0xe8>
 8003dda:	e000      	b.n	8003dde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d063      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dea:	4b4a      	ldr	r3, [pc, #296]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df6:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d11c      	bne.n	8003e3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e02:	4b44      	ldr	r3, [pc, #272]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d116      	bne.n	8003e3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0e:	4b41      	ldr	r3, [pc, #260]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_RCC_OscConfig+0x152>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d001      	beq.n	8003e26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e1c7      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e26:	4b3b      	ldr	r3, [pc, #236]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4937      	ldr	r1, [pc, #220]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3a:	e03a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e44:	4b34      	ldr	r3, [pc, #208]	@ (8003f18 <HAL_RCC_OscConfig+0x244>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fe fa43 	bl	80022d4 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e52:	f7fe fa3f 	bl	80022d4 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e1a8      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e64:	4b2b      	ldr	r3, [pc, #172]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e70:	4b28      	ldr	r3, [pc, #160]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4925      	ldr	r1, [pc, #148]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]
 8003e84:	e015      	b.n	8003eb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e86:	4b24      	ldr	r3, [pc, #144]	@ (8003f18 <HAL_RCC_OscConfig+0x244>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fe fa22 	bl	80022d4 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e94:	f7fe fa1e 	bl	80022d4 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e187      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d036      	beq.n	8003f2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec6:	4b15      	ldr	r3, [pc, #84]	@ (8003f1c <HAL_RCC_OscConfig+0x248>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fe fa02 	bl	80022d4 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed4:	f7fe f9fe 	bl	80022d4 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e167      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x200>
 8003ef2:	e01b      	b.n	8003f2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef4:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <HAL_RCC_OscConfig+0x248>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efa:	f7fe f9eb 	bl	80022d4 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	e00e      	b.n	8003f20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f02:	f7fe f9e7 	bl	80022d4 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d907      	bls.n	8003f20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e150      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
 8003f14:	40023800 	.word	0x40023800
 8003f18:	42470000 	.word	0x42470000
 8003f1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f20:	4b88      	ldr	r3, [pc, #544]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ea      	bne.n	8003f02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8097 	beq.w	8004068 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3e:	4b81      	ldr	r3, [pc, #516]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10f      	bne.n	8003f6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	4a7c      	ldr	r2, [pc, #496]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f5a:	4b7a      	ldr	r3, [pc, #488]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6a:	4b77      	ldr	r3, [pc, #476]	@ (8004148 <HAL_RCC_OscConfig+0x474>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d118      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f76:	4b74      	ldr	r3, [pc, #464]	@ (8004148 <HAL_RCC_OscConfig+0x474>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a73      	ldr	r2, [pc, #460]	@ (8004148 <HAL_RCC_OscConfig+0x474>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f82:	f7fe f9a7 	bl	80022d4 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8a:	f7fe f9a3 	bl	80022d4 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e10c      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8004148 <HAL_RCC_OscConfig+0x474>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x2ea>
 8003fb0:	4b64      	ldr	r3, [pc, #400]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	4a63      	ldr	r2, [pc, #396]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fbc:	e01c      	b.n	8003ff8 <HAL_RCC_OscConfig+0x324>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x30c>
 8003fc6:	4b5f      	ldr	r3, [pc, #380]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fca:	4a5e      	ldr	r2, [pc, #376]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	f043 0304 	orr.w	r3, r3, #4
 8003fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd2:	4b5c      	ldr	r3, [pc, #368]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd6:	4a5b      	ldr	r2, [pc, #364]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x324>
 8003fe0:	4b58      	ldr	r3, [pc, #352]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe4:	4a57      	ldr	r2, [pc, #348]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fec:	4b55      	ldr	r3, [pc, #340]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff0:	4a54      	ldr	r2, [pc, #336]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003ff2:	f023 0304 	bic.w	r3, r3, #4
 8003ff6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d015      	beq.n	800402c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004000:	f7fe f968 	bl	80022d4 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004006:	e00a      	b.n	800401e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004008:	f7fe f964 	bl	80022d4 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0cb      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401e:	4b49      	ldr	r3, [pc, #292]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0ee      	beq.n	8004008 <HAL_RCC_OscConfig+0x334>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402c:	f7fe f952 	bl	80022d4 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004032:	e00a      	b.n	800404a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004034:	f7fe f94e 	bl	80022d4 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e0b5      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404a:	4b3e      	ldr	r3, [pc, #248]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1ee      	bne.n	8004034 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004056:	7dfb      	ldrb	r3, [r7, #23]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405c:	4b39      	ldr	r3, [pc, #228]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 800405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004060:	4a38      	ldr	r2, [pc, #224]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8004062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004066:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80a1 	beq.w	80041b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004072:	4b34      	ldr	r3, [pc, #208]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b08      	cmp	r3, #8
 800407c:	d05c      	beq.n	8004138 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d141      	bne.n	800410a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004086:	4b31      	ldr	r3, [pc, #196]	@ (800414c <HAL_RCC_OscConfig+0x478>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fe f922 	bl	80022d4 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004094:	f7fe f91e 	bl	80022d4 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e087      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	4b27      	ldr	r3, [pc, #156]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	019b      	lsls	r3, r3, #6
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	3b01      	subs	r3, #1
 80040cc:	041b      	lsls	r3, r3, #16
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	491b      	ldr	r1, [pc, #108]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040dc:	4b1b      	ldr	r3, [pc, #108]	@ (800414c <HAL_RCC_OscConfig+0x478>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e2:	f7fe f8f7 	bl	80022d4 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ea:	f7fe f8f3 	bl	80022d4 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e05c      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fc:	4b11      	ldr	r3, [pc, #68]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x416>
 8004108:	e054      	b.n	80041b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410a:	4b10      	ldr	r3, [pc, #64]	@ (800414c <HAL_RCC_OscConfig+0x478>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004110:	f7fe f8e0 	bl	80022d4 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004118:	f7fe f8dc 	bl	80022d4 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e045      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x444>
 8004136:	e03d      	b.n	80041b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d107      	bne.n	8004150 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e038      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
 8004144:	40023800 	.word	0x40023800
 8004148:	40007000 	.word	0x40007000
 800414c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004150:	4b1b      	ldr	r3, [pc, #108]	@ (80041c0 <HAL_RCC_OscConfig+0x4ec>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d028      	beq.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d121      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d11a      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004180:	4013      	ands	r3, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004188:	4293      	cmp	r3, r2
 800418a:	d111      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	3b01      	subs	r3, #1
 800419a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d107      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800

080041c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0cc      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d8:	4b68      	ldr	r3, [pc, #416]	@ (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d90c      	bls.n	8004200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b65      	ldr	r3, [pc, #404]	@ (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b63      	ldr	r3, [pc, #396]	@ (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0b8      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004218:	4b59      	ldr	r3, [pc, #356]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a58      	ldr	r2, [pc, #352]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004230:	4b53      	ldr	r3, [pc, #332]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a52      	ldr	r2, [pc, #328]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800423a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b50      	ldr	r3, [pc, #320]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	494d      	ldr	r1, [pc, #308]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d044      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b47      	ldr	r3, [pc, #284]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d119      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e07f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d003      	beq.n	8004282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427e:	2b03      	cmp	r3, #3
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	4b3f      	ldr	r3, [pc, #252]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e06f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004292:	4b3b      	ldr	r3, [pc, #236]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e067      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042a2:	4b37      	ldr	r3, [pc, #220]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f023 0203 	bic.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4934      	ldr	r1, [pc, #208]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b4:	f7fe f80e 	bl	80022d4 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fe f80a 	bl	80022d4 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e04f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 020c 	and.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1eb      	bne.n	80042bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b25      	ldr	r3, [pc, #148]	@ (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d20c      	bcs.n	800430c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b22      	ldr	r3, [pc, #136]	@ (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b20      	ldr	r3, [pc, #128]	@ (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e032      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004318:	4b19      	ldr	r3, [pc, #100]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4916      	ldr	r1, [pc, #88]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004336:	4b12      	ldr	r3, [pc, #72]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	490e      	ldr	r1, [pc, #56]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800434a:	f000 f821 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 800434e:	4602      	mov	r2, r0
 8004350:	4b0b      	ldr	r3, [pc, #44]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	490a      	ldr	r1, [pc, #40]	@ (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 800435c:	5ccb      	ldrb	r3, [r1, r3]
 800435e:	fa22 f303 	lsr.w	r3, r2, r3
 8004362:	4a09      	ldr	r2, [pc, #36]	@ (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004366:	4b09      	ldr	r3, [pc, #36]	@ (800438c <HAL_RCC_ClockConfig+0x1c8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd fd54 	bl	8001e18 <HAL_InitTick>

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40023c00 	.word	0x40023c00
 8004380:	40023800 	.word	0x40023800
 8004384:	08012aa0 	.word	0x08012aa0
 8004388:	2000006c 	.word	0x2000006c
 800438c:	20000070 	.word	0x20000070

08004390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004394:	b090      	sub	sp, #64	@ 0x40
 8004396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	637b      	str	r3, [r7, #52]	@ 0x34
 800439c:	2300      	movs	r3, #0
 800439e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043a0:	2300      	movs	r3, #0
 80043a2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043a8:	4b59      	ldr	r3, [pc, #356]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x180>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d00d      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0x40>
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	f200 80a1 	bhi.w	80044fc <HAL_RCC_GetSysClockFreq+0x16c>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x34>
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d003      	beq.n	80043ca <HAL_RCC_GetSysClockFreq+0x3a>
 80043c2:	e09b      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043c4:	4b53      	ldr	r3, [pc, #332]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x184>)
 80043c6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80043c8:	e09b      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ca:	4b53      	ldr	r3, [pc, #332]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x188>)
 80043cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043ce:	e098      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x180>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043da:	4b4d      	ldr	r3, [pc, #308]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x180>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d028      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x180>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	099b      	lsrs	r3, r3, #6
 80043ec:	2200      	movs	r2, #0
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043f8:	2100      	movs	r1, #0
 80043fa:	4b47      	ldr	r3, [pc, #284]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x188>)
 80043fc:	fb03 f201 	mul.w	r2, r3, r1
 8004400:	2300      	movs	r3, #0
 8004402:	fb00 f303 	mul.w	r3, r0, r3
 8004406:	4413      	add	r3, r2
 8004408:	4a43      	ldr	r2, [pc, #268]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x188>)
 800440a:	fba0 1202 	umull	r1, r2, r0, r2
 800440e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004410:	460a      	mov	r2, r1
 8004412:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004414:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004416:	4413      	add	r3, r2
 8004418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800441a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800441c:	2200      	movs	r2, #0
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	61fa      	str	r2, [r7, #28]
 8004422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004426:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800442a:	f7fb ff31 	bl	8000290 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4613      	mov	r3, r2
 8004434:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004436:	e053      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004438:	4b35      	ldr	r3, [pc, #212]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x180>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	2200      	movs	r2, #0
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	617a      	str	r2, [r7, #20]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800444a:	f04f 0b00 	mov.w	fp, #0
 800444e:	4652      	mov	r2, sl
 8004450:	465b      	mov	r3, fp
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f04f 0100 	mov.w	r1, #0
 800445a:	0159      	lsls	r1, r3, #5
 800445c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004460:	0150      	lsls	r0, r2, #5
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	ebb2 080a 	subs.w	r8, r2, sl
 800446a:	eb63 090b 	sbc.w	r9, r3, fp
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800447a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800447e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004482:	ebb2 0408 	subs.w	r4, r2, r8
 8004486:	eb63 0509 	sbc.w	r5, r3, r9
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	00eb      	lsls	r3, r5, #3
 8004494:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004498:	00e2      	lsls	r2, r4, #3
 800449a:	4614      	mov	r4, r2
 800449c:	461d      	mov	r5, r3
 800449e:	eb14 030a 	adds.w	r3, r4, sl
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	eb45 030b 	adc.w	r3, r5, fp
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044b6:	4629      	mov	r1, r5
 80044b8:	028b      	lsls	r3, r1, #10
 80044ba:	4621      	mov	r1, r4
 80044bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044c0:	4621      	mov	r1, r4
 80044c2:	028a      	lsls	r2, r1, #10
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ca:	2200      	movs	r2, #0
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	60fa      	str	r2, [r7, #12]
 80044d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d4:	f7fb fedc 	bl	8000290 <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4613      	mov	r3, r2
 80044de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x180>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	3301      	adds	r3, #1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80044f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044fa:	e002      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044fc:	4b05      	ldr	r3, [pc, #20]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x184>)
 80044fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004504:	4618      	mov	r0, r3
 8004506:	3740      	adds	r7, #64	@ 0x40
 8004508:	46bd      	mov	sp, r7
 800450a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800450e:	bf00      	nop
 8004510:	40023800 	.word	0x40023800
 8004514:	00f42400 	.word	0x00f42400
 8004518:	017d7840 	.word	0x017d7840

0800451c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004520:	4b03      	ldr	r3, [pc, #12]	@ (8004530 <HAL_RCC_GetHCLKFreq+0x14>)
 8004522:	681b      	ldr	r3, [r3, #0]
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	2000006c 	.word	0x2000006c

08004534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004538:	f7ff fff0 	bl	800451c <HAL_RCC_GetHCLKFreq>
 800453c:	4602      	mov	r2, r0
 800453e:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	0b5b      	lsrs	r3, r3, #13
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4903      	ldr	r1, [pc, #12]	@ (8004558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40023800 	.word	0x40023800
 8004558:	08012ab0 	.word	0x08012ab0

0800455c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	220f      	movs	r2, #15
 800456a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800456c:	4b12      	ldr	r3, [pc, #72]	@ (80045b8 <HAL_RCC_GetClockConfig+0x5c>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0203 	and.w	r2, r3, #3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004578:	4b0f      	ldr	r3, [pc, #60]	@ (80045b8 <HAL_RCC_GetClockConfig+0x5c>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004584:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004590:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	08db      	lsrs	r3, r3, #3
 8004596:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800459e:	4b07      	ldr	r3, [pc, #28]	@ (80045bc <HAL_RCC_GetClockConfig+0x60>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0207 	and.w	r2, r3, #7
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	601a      	str	r2, [r3, #0]
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40023c00 	.word	0x40023c00

080045c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d105      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d038      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045e8:	4b68      	ldr	r3, [pc, #416]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045ee:	f7fd fe71 	bl	80022d4 <HAL_GetTick>
 80045f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045f6:	f7fd fe6d 	bl	80022d4 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e0bd      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004608:	4b61      	ldr	r3, [pc, #388]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	071b      	lsls	r3, r3, #28
 8004626:	495a      	ldr	r1, [pc, #360]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800462e:	4b57      	ldr	r3, [pc, #348]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004630:	2201      	movs	r2, #1
 8004632:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004634:	f7fd fe4e 	bl	80022d4 <HAL_GetTick>
 8004638:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800463a:	e008      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800463c:	f7fd fe4a 	bl	80022d4 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e09a      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800464e:	4b50      	ldr	r3, [pc, #320]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8083 	beq.w	800476e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	4b48      	ldr	r3, [pc, #288]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	4a47      	ldr	r2, [pc, #284]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004676:	6413      	str	r3, [r2, #64]	@ 0x40
 8004678:	4b45      	ldr	r3, [pc, #276]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004684:	4b43      	ldr	r3, [pc, #268]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a42      	ldr	r2, [pc, #264]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800468a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800468e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004690:	f7fd fe20 	bl	80022d4 <HAL_GetTick>
 8004694:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004698:	f7fd fe1c 	bl	80022d4 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e06c      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b6:	4b36      	ldr	r3, [pc, #216]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046be:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d02f      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d028      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046dc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046de:	4b2e      	ldr	r3, [pc, #184]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046ea:	4a29      	ldr	r2, [pc, #164]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046f0:	4b27      	ldr	r3, [pc, #156]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d114      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fd fdea 	bl	80022d4 <HAL_GetTick>
 8004700:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004702:	e00a      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004704:	f7fd fde6 	bl	80022d4 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e034      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471a:	4b1d      	ldr	r3, [pc, #116]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0ee      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800472e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004732:	d10d      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004734:	4b16      	ldr	r3, [pc, #88]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004744:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004748:	4911      	ldr	r1, [pc, #68]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474a:	4313      	orrs	r3, r2
 800474c:	608b      	str	r3, [r1, #8]
 800474e:	e005      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004750:	4b0f      	ldr	r3, [pc, #60]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4a0e      	ldr	r2, [pc, #56]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004756:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800475a:	6093      	str	r3, [r2, #8]
 800475c:	4b0c      	ldr	r3, [pc, #48]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004768:	4909      	ldr	r1, [pc, #36]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476a:	4313      	orrs	r3, r2
 800476c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	7d1a      	ldrb	r2, [r3, #20]
 800477e:	4b07      	ldr	r3, [pc, #28]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004780:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	42470068 	.word	0x42470068
 8004790:	40023800 	.word	0x40023800
 8004794:	40007000 	.word	0x40007000
 8004798:	42470e40 	.word	0x42470e40
 800479c:	424711e0 	.word	0x424711e0

080047a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e073      	b.n	800489e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	7f5b      	ldrb	r3, [r3, #29]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d105      	bne.n	80047cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fd fa50 	bl	8001c6c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b10      	cmp	r3, #16
 80047de:	d055      	beq.n	800488c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	22ca      	movs	r2, #202	@ 0xca
 80047e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2253      	movs	r2, #83	@ 0x53
 80047ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f99d 	bl	8004b30 <RTC_EnterInitMode>
 80047f6:	4603      	mov	r3, r0
 80047f8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d12c      	bne.n	800485a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800480e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004812:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6899      	ldr	r1, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68d2      	ldr	r2, [r2, #12]
 800483a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6919      	ldr	r1, [r3, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	041a      	lsls	r2, r3, #16
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f9a4 	bl	8004b9e <RTC_ExitInitMode>
 8004856:	4603      	mov	r3, r0
 8004858:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d110      	bne.n	8004882 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800486e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	22ff      	movs	r2, #255	@ 0xff
 8004888:	625a      	str	r2, [r3, #36]	@ 0x24
 800488a:	e001      	b.n	8004890 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d102      	bne.n	800489c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800489c:	7bfb      	ldrb	r3, [r7, #15]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048a6:	b590      	push	{r4, r7, lr}
 80048a8:	b087      	sub	sp, #28
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	7f1b      	ldrb	r3, [r3, #28]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_RTC_SetTime+0x1c>
 80048be:	2302      	movs	r3, #2
 80048c0:	e087      	b.n	80049d2 <HAL_RTC_SetTime+0x12c>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2202      	movs	r2, #2
 80048cc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d126      	bne.n	8004922 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2200      	movs	r2, #0
 80048e6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 f97b 	bl	8004be8 <RTC_ByteToBcd2>
 80048f2:	4603      	mov	r3, r0
 80048f4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	785b      	ldrb	r3, [r3, #1]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f974 	bl	8004be8 <RTC_ByteToBcd2>
 8004900:	4603      	mov	r3, r0
 8004902:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004904:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	789b      	ldrb	r3, [r3, #2]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 f96c 	bl	8004be8 <RTC_ByteToBcd2>
 8004910:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004912:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	78db      	ldrb	r3, [r3, #3]
 800491a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	e018      	b.n	8004954 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2200      	movs	r2, #0
 8004934:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	785b      	ldrb	r3, [r3, #1]
 8004940:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004942:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004948:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	78db      	ldrb	r3, [r3, #3]
 800494e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	22ca      	movs	r2, #202	@ 0xca
 800495a:	625a      	str	r2, [r3, #36]	@ 0x24
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2253      	movs	r2, #83	@ 0x53
 8004962:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f8e3 	bl	8004b30 <RTC_EnterInitMode>
 800496a:	4603      	mov	r3, r0
 800496c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800496e:	7cfb      	ldrb	r3, [r7, #19]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d120      	bne.n	80049b6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800497e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004982:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004992:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6899      	ldr	r1, [r3, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f8f6 	bl	8004b9e <RTC_ExitInitMode>
 80049b2:	4603      	mov	r3, r0
 80049b4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d102      	bne.n	80049c2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	22ff      	movs	r2, #255	@ 0xff
 80049c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]

  return status;
 80049d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd90      	pop	{r4, r7, pc}

080049da <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049da:	b590      	push	{r4, r7, lr}
 80049dc:	b087      	sub	sp, #28
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	7f1b      	ldrb	r3, [r3, #28]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_RTC_SetDate+0x1c>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e071      	b.n	8004ada <HAL_RTC_SetDate+0x100>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2202      	movs	r2, #2
 8004a00:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10e      	bne.n	8004a26 <HAL_RTC_SetDate+0x4c>
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	785b      	ldrb	r3, [r3, #1]
 8004a18:	f023 0310 	bic.w	r3, r3, #16
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	330a      	adds	r3, #10
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11c      	bne.n	8004a66 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	78db      	ldrb	r3, [r3, #3]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 f8d9 	bl	8004be8 <RTC_ByteToBcd2>
 8004a36:	4603      	mov	r3, r0
 8004a38:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f8d2 	bl	8004be8 <RTC_ByteToBcd2>
 8004a44:	4603      	mov	r3, r0
 8004a46:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a48:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	789b      	ldrb	r3, [r3, #2]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f8ca 	bl	8004be8 <RTC_ByteToBcd2>
 8004a54:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a56:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	e00e      	b.n	8004a84 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	78db      	ldrb	r3, [r3, #3]
 8004a6a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	785b      	ldrb	r3, [r3, #1]
 8004a70:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a72:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a78:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	22ca      	movs	r2, #202	@ 0xca
 8004a8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2253      	movs	r2, #83	@ 0x53
 8004a92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f84b 	bl	8004b30 <RTC_EnterInitMode>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004a9e:	7cfb      	ldrb	r3, [r7, #19]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10c      	bne.n	8004abe <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004aae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004ab2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f872 	bl	8004b9e <RTC_ExitInitMode>
 8004aba:	4603      	mov	r3, r0
 8004abc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004abe:	7cfb      	ldrb	r3, [r7, #19]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d102      	bne.n	8004aca <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	22ff      	movs	r2, #255	@ 0xff
 8004ad0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]

  return status;
 8004ad8:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd90      	pop	{r4, r7, pc}
	...

08004ae4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a0d      	ldr	r2, [pc, #52]	@ (8004b2c <HAL_RTC_WaitForSynchro+0x48>)
 8004af6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004af8:	f7fd fbec 	bl	80022d4 <HAL_GetTick>
 8004afc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004afe:	e009      	b.n	8004b14 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b00:	f7fd fbe8 	bl	80022d4 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b0e:	d901      	bls.n	8004b14 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e007      	b.n	8004b24 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0ee      	beq.n	8004b00 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	00013f5f 	.word	0x00013f5f

08004b30 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d122      	bne.n	8004b94 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b5c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b5e:	f7fd fbb9 	bl	80022d4 <HAL_GetTick>
 8004b62:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b64:	e00c      	b.n	8004b80 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b66:	f7fd fbb5 	bl	80022d4 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b74:	d904      	bls.n	8004b80 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2204      	movs	r2, #4
 8004b7a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <RTC_EnterInitMode+0x64>
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d1e8      	bne.n	8004b66 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bb8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff ff8b 	bl	8004ae4 <HAL_RTC_WaitForSynchro>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d004      	beq.n	8004bde <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004bf6:	e005      	b.n	8004c04 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	3b0a      	subs	r3, #10
 8004c02:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	2b09      	cmp	r3, #9
 8004c08:	d8f6      	bhi.n	8004bf8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	b2db      	uxtb	r3, r3
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e07b      	b.n	8004d2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d108      	bne.n	8004c50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c46:	d009      	beq.n	8004c5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	61da      	str	r2, [r3, #28]
 8004c4e:	e005      	b.n	8004c5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fd f85a 	bl	8001d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce0:	ea42 0103 	orr.w	r1, r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	0c1b      	lsrs	r3, r3, #16
 8004cfa:	f003 0104 	and.w	r1, r3, #4
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	f003 0210 	and.w	r2, r3, #16
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b088      	sub	sp, #32
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	603b      	str	r3, [r7, #0]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_SPI_Transmit+0x22>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e12d      	b.n	8004fb4 <HAL_SPI_Transmit+0x27e>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d60:	f7fd fab8 	bl	80022d4 <HAL_GetTick>
 8004d64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d002      	beq.n	8004d7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d76:	2302      	movs	r3, #2
 8004d78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d7a:	e116      	b.n	8004faa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_SPI_Transmit+0x52>
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d8c:	e10d      	b.n	8004faa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2203      	movs	r2, #3
 8004d92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	88fa      	ldrh	r2, [r7, #6]
 8004da6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	88fa      	ldrh	r2, [r7, #6]
 8004dac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dd4:	d10f      	bne.n	8004df6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004de4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004df4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e00:	2b40      	cmp	r3, #64	@ 0x40
 8004e02:	d007      	beq.n	8004e14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e1c:	d14f      	bne.n	8004ebe <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <HAL_SPI_Transmit+0xf6>
 8004e26:	8afb      	ldrh	r3, [r7, #22]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d142      	bne.n	8004eb2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e30:	881a      	ldrh	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3c:	1c9a      	adds	r2, r3, #2
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e50:	e02f      	b.n	8004eb2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d112      	bne.n	8004e86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e64:	881a      	ldrh	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e70:	1c9a      	adds	r2, r3, #2
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e84:	e015      	b.n	8004eb2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e86:	f7fd fa25 	bl	80022d4 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d803      	bhi.n	8004e9e <HAL_SPI_Transmit+0x168>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d102      	bne.n	8004ea4 <HAL_SPI_Transmit+0x16e>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004eb0:	e07b      	b.n	8004faa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ca      	bne.n	8004e52 <HAL_SPI_Transmit+0x11c>
 8004ebc:	e050      	b.n	8004f60 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_SPI_Transmit+0x196>
 8004ec6:	8afb      	ldrh	r3, [r7, #22]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d144      	bne.n	8004f56 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	7812      	ldrb	r2, [r2, #0]
 8004ed8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ef2:	e030      	b.n	8004f56 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d113      	bne.n	8004f2a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	330c      	adds	r3, #12
 8004f0c:	7812      	ldrb	r2, [r2, #0]
 8004f0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f28:	e015      	b.n	8004f56 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f2a:	f7fd f9d3 	bl	80022d4 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d803      	bhi.n	8004f42 <HAL_SPI_Transmit+0x20c>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d102      	bne.n	8004f48 <HAL_SPI_Transmit+0x212>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004f54:	e029      	b.n	8004faa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1c9      	bne.n	8004ef4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 fa61 	bl	800542c <SPI_EndRxTxTransaction>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e003      	b.n	8004faa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004fb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08c      	sub	sp, #48	@ 0x30
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_SPI_TransmitReceive+0x26>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e198      	b.n	8005314 <HAL_SPI_TransmitReceive+0x358>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fea:	f7fd f973 	bl	80022d4 <HAL_GetTick>
 8004fee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005000:	887b      	ldrh	r3, [r7, #2]
 8005002:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005004:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005008:	2b01      	cmp	r3, #1
 800500a:	d00f      	beq.n	800502c <HAL_SPI_TransmitReceive+0x70>
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005012:	d107      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d103      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x68>
 800501c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005020:	2b04      	cmp	r3, #4
 8005022:	d003      	beq.n	800502c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005024:	2302      	movs	r3, #2
 8005026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800502a:	e16d      	b.n	8005308 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_SPI_TransmitReceive+0x82>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_SPI_TransmitReceive+0x82>
 8005038:	887b      	ldrh	r3, [r7, #2]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d103      	bne.n	8005046 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005044:	e160      	b.n	8005308 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b04      	cmp	r3, #4
 8005050:	d003      	beq.n	800505a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2205      	movs	r2, #5
 8005056:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	887a      	ldrh	r2, [r7, #2]
 800506a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	887a      	ldrh	r2, [r7, #2]
 8005070:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	887a      	ldrh	r2, [r7, #2]
 800507c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	887a      	ldrh	r2, [r7, #2]
 8005082:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509a:	2b40      	cmp	r3, #64	@ 0x40
 800509c:	d007      	beq.n	80050ae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050b6:	d17c      	bne.n	80051b2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x10a>
 80050c0:	8b7b      	ldrh	r3, [r7, #26]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d16a      	bne.n	800519c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	881a      	ldrh	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d6:	1c9a      	adds	r2, r3, #2
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ea:	e057      	b.n	800519c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d11b      	bne.n	8005132 <HAL_SPI_TransmitReceive+0x176>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d016      	beq.n	8005132 <HAL_SPI_TransmitReceive+0x176>
 8005104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d113      	bne.n	8005132 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510e:	881a      	ldrh	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511a:	1c9a      	adds	r2, r3, #2
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b01      	cmp	r3, #1
 800513e:	d119      	bne.n	8005174 <HAL_SPI_TransmitReceive+0x1b8>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d014      	beq.n	8005174 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005154:	b292      	uxth	r2, r2
 8005156:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	1c9a      	adds	r2, r3, #2
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005170:	2301      	movs	r3, #1
 8005172:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005174:	f7fd f8ae 	bl	80022d4 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005180:	429a      	cmp	r2, r3
 8005182:	d80b      	bhi.n	800519c <HAL_SPI_TransmitReceive+0x1e0>
 8005184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d007      	beq.n	800519c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800519a:	e0b5      	b.n	8005308 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1a2      	bne.n	80050ec <HAL_SPI_TransmitReceive+0x130>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d19d      	bne.n	80050ec <HAL_SPI_TransmitReceive+0x130>
 80051b0:	e080      	b.n	80052b4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_SPI_TransmitReceive+0x204>
 80051ba:	8b7b      	ldrh	r3, [r7, #26]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d16f      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	330c      	adds	r3, #12
 80051ca:	7812      	ldrb	r2, [r2, #0]
 80051cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e6:	e05b      	b.n	80052a0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d11c      	bne.n	8005230 <HAL_SPI_TransmitReceive+0x274>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d017      	beq.n	8005230 <HAL_SPI_TransmitReceive+0x274>
 8005200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005202:	2b01      	cmp	r3, #1
 8005204:	d114      	bne.n	8005230 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b01      	cmp	r3, #1
 800523c:	d119      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x2b6>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d014      	beq.n	8005272 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800526e:	2301      	movs	r3, #1
 8005270:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005272:	f7fd f82f 	bl	80022d4 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800527e:	429a      	cmp	r2, r3
 8005280:	d803      	bhi.n	800528a <HAL_SPI_TransmitReceive+0x2ce>
 8005282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d102      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x2d4>
 800528a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528c:	2b00      	cmp	r3, #0
 800528e:	d107      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800529e:	e033      	b.n	8005308 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d19e      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x22c>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d199      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f8b7 	bl	800542c <SPI_EndRxTxTransaction>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d006      	beq.n	80052d2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80052d0:	e01a      	b.n	8005308 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10a      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052fe:	e003      	b.n	8005308 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005310:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005314:	4618      	mov	r0, r3
 8005316:	3730      	adds	r7, #48	@ 0x30
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b088      	sub	sp, #32
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800532c:	f7fc ffd2 	bl	80022d4 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	4413      	add	r3, r2
 800533a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800533c:	f7fc ffca 	bl	80022d4 <HAL_GetTick>
 8005340:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005342:	4b39      	ldr	r3, [pc, #228]	@ (8005428 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	015b      	lsls	r3, r3, #5
 8005348:	0d1b      	lsrs	r3, r3, #20
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	fb02 f303 	mul.w	r3, r2, r3
 8005350:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005352:	e054      	b.n	80053fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535a:	d050      	beq.n	80053fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800535c:	f7fc ffba 	bl	80022d4 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	429a      	cmp	r2, r3
 800536a:	d902      	bls.n	8005372 <SPI_WaitFlagStateUntilTimeout+0x56>
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d13d      	bne.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800538a:	d111      	bne.n	80053b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005394:	d004      	beq.n	80053a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800539e:	d107      	bne.n	80053b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053b8:	d10f      	bne.n	80053da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e017      	b.n	800541e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4013      	ands	r3, r2
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	bf0c      	ite	eq
 800540e:	2301      	moveq	r3, #1
 8005410:	2300      	movne	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	429a      	cmp	r2, r3
 800541a:	d19b      	bne.n	8005354 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3720      	adds	r7, #32
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	2000006c 	.word	0x2000006c

0800542c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af02      	add	r7, sp, #8
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2201      	movs	r2, #1
 8005440:	2102      	movs	r1, #2
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff ff6a 	bl	800531c <SPI_WaitFlagStateUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005452:	f043 0220 	orr.w	r2, r3, #32
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e032      	b.n	80054c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800545e:	4b1b      	ldr	r3, [pc, #108]	@ (80054cc <SPI_EndRxTxTransaction+0xa0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1b      	ldr	r2, [pc, #108]	@ (80054d0 <SPI_EndRxTxTransaction+0xa4>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	0d5b      	lsrs	r3, r3, #21
 800546a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800546e:	fb02 f303 	mul.w	r3, r2, r3
 8005472:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800547c:	d112      	bne.n	80054a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2200      	movs	r2, #0
 8005486:	2180      	movs	r1, #128	@ 0x80
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f7ff ff47 	bl	800531c <SPI_WaitFlagStateUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d016      	beq.n	80054c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005498:	f043 0220 	orr.w	r2, r3, #32
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e00f      	b.n	80054c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ba:	2b80      	cmp	r3, #128	@ 0x80
 80054bc:	d0f2      	beq.n	80054a4 <SPI_EndRxTxTransaction+0x78>
 80054be:	e000      	b.n	80054c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80054c0:	bf00      	nop
  }

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	2000006c 	.word	0x2000006c
 80054d0:	165e9f81 	.word	0x165e9f81

080054d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e041      	b.n	800556a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fc fe6a 	bl	80021d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f000 fa70 	bl	80059f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d001      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e044      	b.n	8005616 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005624 <HAL_TIM_Base_Start_IT+0xb0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d018      	beq.n	80055e0 <HAL_TIM_Base_Start_IT+0x6c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055b6:	d013      	beq.n	80055e0 <HAL_TIM_Base_Start_IT+0x6c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005628 <HAL_TIM_Base_Start_IT+0xb4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00e      	beq.n	80055e0 <HAL_TIM_Base_Start_IT+0x6c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a19      	ldr	r2, [pc, #100]	@ (800562c <HAL_TIM_Base_Start_IT+0xb8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d009      	beq.n	80055e0 <HAL_TIM_Base_Start_IT+0x6c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a17      	ldr	r2, [pc, #92]	@ (8005630 <HAL_TIM_Base_Start_IT+0xbc>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d004      	beq.n	80055e0 <HAL_TIM_Base_Start_IT+0x6c>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a16      	ldr	r2, [pc, #88]	@ (8005634 <HAL_TIM_Base_Start_IT+0xc0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d111      	bne.n	8005604 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b06      	cmp	r3, #6
 80055f0:	d010      	beq.n	8005614 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005602:	e007      	b.n	8005614 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40010000 	.word	0x40010000
 8005628:	40000400 	.word	0x40000400
 800562c:	40000800 	.word	0x40000800
 8005630:	40000c00 	.word	0x40000c00
 8005634:	40014000 	.word	0x40014000

08005638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d020      	beq.n	800569c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01b      	beq.n	800569c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0202 	mvn.w	r2, #2
 800566c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f999 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 8005688:	e005      	b.n	8005696 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f98b 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f99c 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d020      	beq.n	80056e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01b      	beq.n	80056e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0204 	mvn.w	r2, #4
 80056b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2202      	movs	r2, #2
 80056be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f973 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f965 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f976 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d020      	beq.n	8005734 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01b      	beq.n	8005734 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0208 	mvn.w	r2, #8
 8005704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2204      	movs	r2, #4
 800570a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f94d 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f93f 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f950 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	2b00      	cmp	r3, #0
 800573c:	d020      	beq.n	8005780 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01b      	beq.n	8005780 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0210 	mvn.w	r2, #16
 8005750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2208      	movs	r2, #8
 8005756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f927 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 800576c:	e005      	b.n	800577a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f919 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f92a 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00c      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d007      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0201 	mvn.w	r2, #1
 800579c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fc f9f2 	bl	8001b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00c      	beq.n	80057c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fab6 	bl	8005d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00c      	beq.n	80057ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d007      	beq.n	80057ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f8fb 	bl	80059e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00c      	beq.n	8005810 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d007      	beq.n	8005810 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0220 	mvn.w	r2, #32
 8005808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa88 	bl	8005d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_TIM_ConfigClockSource+0x1c>
 8005830:	2302      	movs	r3, #2
 8005832:	e0b4      	b.n	800599e <HAL_TIM_ConfigClockSource+0x186>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800585a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800586c:	d03e      	beq.n	80058ec <HAL_TIM_ConfigClockSource+0xd4>
 800586e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005872:	f200 8087 	bhi.w	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800587a:	f000 8086 	beq.w	800598a <HAL_TIM_ConfigClockSource+0x172>
 800587e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005882:	d87f      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b70      	cmp	r3, #112	@ 0x70
 8005886:	d01a      	beq.n	80058be <HAL_TIM_ConfigClockSource+0xa6>
 8005888:	2b70      	cmp	r3, #112	@ 0x70
 800588a:	d87b      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b60      	cmp	r3, #96	@ 0x60
 800588e:	d050      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x11a>
 8005890:	2b60      	cmp	r3, #96	@ 0x60
 8005892:	d877      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b50      	cmp	r3, #80	@ 0x50
 8005896:	d03c      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0xfa>
 8005898:	2b50      	cmp	r3, #80	@ 0x50
 800589a:	d873      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b40      	cmp	r3, #64	@ 0x40
 800589e:	d058      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x13a>
 80058a0:	2b40      	cmp	r3, #64	@ 0x40
 80058a2:	d86f      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b30      	cmp	r3, #48	@ 0x30
 80058a6:	d064      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15a>
 80058a8:	2b30      	cmp	r3, #48	@ 0x30
 80058aa:	d86b      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d060      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15a>
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d867      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d05c      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15a>
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	d05a      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15a>
 80058bc:	e062      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058ce:	f000 f999 	bl	8005c04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	609a      	str	r2, [r3, #8]
      break;
 80058ea:	e04f      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058fc:	f000 f982 	bl	8005c04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800590e:	609a      	str	r2, [r3, #8]
      break;
 8005910:	e03c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	461a      	mov	r2, r3
 8005920:	f000 f8f6 	bl	8005b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2150      	movs	r1, #80	@ 0x50
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f94f 	bl	8005bce <TIM_ITRx_SetConfig>
      break;
 8005930:	e02c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800593e:	461a      	mov	r2, r3
 8005940:	f000 f915 	bl	8005b6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2160      	movs	r1, #96	@ 0x60
 800594a:	4618      	mov	r0, r3
 800594c:	f000 f93f 	bl	8005bce <TIM_ITRx_SetConfig>
      break;
 8005950:	e01c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	461a      	mov	r2, r3
 8005960:	f000 f8d6 	bl	8005b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2140      	movs	r1, #64	@ 0x40
 800596a:	4618      	mov	r0, r3
 800596c:	f000 f92f 	bl	8005bce <TIM_ITRx_SetConfig>
      break;
 8005970:	e00c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f000 f926 	bl	8005bce <TIM_ITRx_SetConfig>
      break;
 8005982:	e003      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
      break;
 8005988:	e000      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800598a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a3a      	ldr	r2, [pc, #232]	@ (8005af4 <TIM_Base_SetConfig+0xfc>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00f      	beq.n	8005a30 <TIM_Base_SetConfig+0x38>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a16:	d00b      	beq.n	8005a30 <TIM_Base_SetConfig+0x38>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a37      	ldr	r2, [pc, #220]	@ (8005af8 <TIM_Base_SetConfig+0x100>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_Base_SetConfig+0x38>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a36      	ldr	r2, [pc, #216]	@ (8005afc <TIM_Base_SetConfig+0x104>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0x38>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a35      	ldr	r2, [pc, #212]	@ (8005b00 <TIM_Base_SetConfig+0x108>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d108      	bne.n	8005a42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2b      	ldr	r2, [pc, #172]	@ (8005af4 <TIM_Base_SetConfig+0xfc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01b      	beq.n	8005a82 <TIM_Base_SetConfig+0x8a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a50:	d017      	beq.n	8005a82 <TIM_Base_SetConfig+0x8a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a28      	ldr	r2, [pc, #160]	@ (8005af8 <TIM_Base_SetConfig+0x100>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <TIM_Base_SetConfig+0x8a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a27      	ldr	r2, [pc, #156]	@ (8005afc <TIM_Base_SetConfig+0x104>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00f      	beq.n	8005a82 <TIM_Base_SetConfig+0x8a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a26      	ldr	r2, [pc, #152]	@ (8005b00 <TIM_Base_SetConfig+0x108>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00b      	beq.n	8005a82 <TIM_Base_SetConfig+0x8a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a25      	ldr	r2, [pc, #148]	@ (8005b04 <TIM_Base_SetConfig+0x10c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d007      	beq.n	8005a82 <TIM_Base_SetConfig+0x8a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a24      	ldr	r2, [pc, #144]	@ (8005b08 <TIM_Base_SetConfig+0x110>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_Base_SetConfig+0x8a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a23      	ldr	r2, [pc, #140]	@ (8005b0c <TIM_Base_SetConfig+0x114>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d108      	bne.n	8005a94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a0e      	ldr	r2, [pc, #56]	@ (8005af4 <TIM_Base_SetConfig+0xfc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d103      	bne.n	8005ac8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d105      	bne.n	8005ae6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f023 0201 	bic.w	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	611a      	str	r2, [r3, #16]
  }
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40010000 	.word	0x40010000
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	40000c00 	.word	0x40000c00
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40014400 	.word	0x40014400
 8005b0c:	40014800 	.word	0x40014800

08005b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f023 0201 	bic.w	r2, r3, #1
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f023 030a 	bic.w	r3, r3, #10
 8005b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b087      	sub	sp, #28
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f023 0210 	bic.w	r2, r3, #16
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	031b      	lsls	r3, r3, #12
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005baa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f043 0307 	orr.w	r3, r3, #7
 8005bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	609a      	str	r2, [r3, #8]
}
 8005bf8:	bf00      	nop
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	021a      	lsls	r2, r3, #8
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	609a      	str	r2, [r3, #8]
}
 8005c38:	bf00      	nop
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e050      	b.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d018      	beq.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca8:	d013      	beq.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a18      	ldr	r2, [pc, #96]	@ (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a16      	ldr	r2, [pc, #88]	@ (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d009      	beq.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a15      	ldr	r2, [pc, #84]	@ (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d004      	beq.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a13      	ldr	r2, [pc, #76]	@ (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d10c      	bne.n	8005cec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40010000 	.word	0x40010000
 8005d10:	40000400 	.word	0x40000400
 8005d14:	40000800 	.word	0x40000800
 8005d18:	40000c00 	.word	0x40000c00
 8005d1c:	40014000 	.word	0x40014000

08005d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d48:	b084      	sub	sp, #16
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	f107 001c 	add.w	r0, r7, #28
 8005d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d123      	bne.n	8005daa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d105      	bne.n	8005d9e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f001 fae2 	bl	8007368 <USB_CoreReset>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]
 8005da8:	e01b      	b.n	8005de2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f001 fad6 	bl	8007368 <USB_CoreReset>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005dc0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dcc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005dd4:	e005      	b.n	8005de2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005de2:	7fbb      	ldrb	r3, [r7, #30]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d10b      	bne.n	8005e00 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f043 0206 	orr.w	r2, r3, #6
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f043 0220 	orr.w	r2, r3, #32
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e0c:	b004      	add	sp, #16
 8005e0e:	4770      	bx	lr

08005e10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d165      	bne.n	8005ef0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4a41      	ldr	r2, [pc, #260]	@ (8005f2c <USB_SetTurnaroundTime+0x11c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d906      	bls.n	8005e3a <USB_SetTurnaroundTime+0x2a>
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4a40      	ldr	r2, [pc, #256]	@ (8005f30 <USB_SetTurnaroundTime+0x120>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d202      	bcs.n	8005e3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e34:	230f      	movs	r3, #15
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	e062      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f30 <USB_SetTurnaroundTime+0x120>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d306      	bcc.n	8005e50 <USB_SetTurnaroundTime+0x40>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4a3b      	ldr	r2, [pc, #236]	@ (8005f34 <USB_SetTurnaroundTime+0x124>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d202      	bcs.n	8005e50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e4a:	230e      	movs	r3, #14
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	e057      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4a38      	ldr	r2, [pc, #224]	@ (8005f34 <USB_SetTurnaroundTime+0x124>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d306      	bcc.n	8005e66 <USB_SetTurnaroundTime+0x56>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4a37      	ldr	r2, [pc, #220]	@ (8005f38 <USB_SetTurnaroundTime+0x128>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d202      	bcs.n	8005e66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e60:	230d      	movs	r3, #13
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	e04c      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4a33      	ldr	r2, [pc, #204]	@ (8005f38 <USB_SetTurnaroundTime+0x128>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d306      	bcc.n	8005e7c <USB_SetTurnaroundTime+0x6c>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4a32      	ldr	r2, [pc, #200]	@ (8005f3c <USB_SetTurnaroundTime+0x12c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d802      	bhi.n	8005e7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e76:	230c      	movs	r3, #12
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	e041      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8005f3c <USB_SetTurnaroundTime+0x12c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d906      	bls.n	8005e92 <USB_SetTurnaroundTime+0x82>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4a2e      	ldr	r2, [pc, #184]	@ (8005f40 <USB_SetTurnaroundTime+0x130>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d802      	bhi.n	8005e92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e8c:	230b      	movs	r3, #11
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e036      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	4a2a      	ldr	r2, [pc, #168]	@ (8005f40 <USB_SetTurnaroundTime+0x130>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d906      	bls.n	8005ea8 <USB_SetTurnaroundTime+0x98>
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4a29      	ldr	r2, [pc, #164]	@ (8005f44 <USB_SetTurnaroundTime+0x134>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d802      	bhi.n	8005ea8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ea2:	230a      	movs	r3, #10
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e02b      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4a26      	ldr	r2, [pc, #152]	@ (8005f44 <USB_SetTurnaroundTime+0x134>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d906      	bls.n	8005ebe <USB_SetTurnaroundTime+0xae>
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4a25      	ldr	r2, [pc, #148]	@ (8005f48 <USB_SetTurnaroundTime+0x138>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d202      	bcs.n	8005ebe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005eb8:	2309      	movs	r3, #9
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	e020      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4a21      	ldr	r2, [pc, #132]	@ (8005f48 <USB_SetTurnaroundTime+0x138>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d306      	bcc.n	8005ed4 <USB_SetTurnaroundTime+0xc4>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	4a20      	ldr	r2, [pc, #128]	@ (8005f4c <USB_SetTurnaroundTime+0x13c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d802      	bhi.n	8005ed4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005ece:	2308      	movs	r3, #8
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	e015      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8005f4c <USB_SetTurnaroundTime+0x13c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d906      	bls.n	8005eea <USB_SetTurnaroundTime+0xda>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4a1c      	ldr	r2, [pc, #112]	@ (8005f50 <USB_SetTurnaroundTime+0x140>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d202      	bcs.n	8005eea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ee4:	2307      	movs	r3, #7
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	e00a      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005eea:	2306      	movs	r3, #6
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	e007      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ef6:	2309      	movs	r3, #9
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e001      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005efc:	2309      	movs	r3, #9
 8005efe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	029b      	lsls	r3, r3, #10
 8005f14:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	00d8acbf 	.word	0x00d8acbf
 8005f30:	00e4e1c0 	.word	0x00e4e1c0
 8005f34:	00f42400 	.word	0x00f42400
 8005f38:	01067380 	.word	0x01067380
 8005f3c:	011a499f 	.word	0x011a499f
 8005f40:	01312cff 	.word	0x01312cff
 8005f44:	014ca43f 	.word	0x014ca43f
 8005f48:	016e3600 	.word	0x016e3600
 8005f4c:	01a6ab1f 	.word	0x01a6ab1f
 8005f50:	01e84800 	.word	0x01e84800

08005f54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f043 0201 	orr.w	r2, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d115      	bne.n	8005fe6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fc6:	200a      	movs	r0, #10
 8005fc8:	f7fc f990 	bl	80022ec <HAL_Delay>
      ms += 10U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	330a      	adds	r3, #10
 8005fd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 f939 	bl	800724a <USB_GetMode>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d01e      	beq.n	800601c <USB_SetCurrentMode+0x84>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fe2:	d9f0      	bls.n	8005fc6 <USB_SetCurrentMode+0x2e>
 8005fe4:	e01a      	b.n	800601c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d115      	bne.n	8006018 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ff8:	200a      	movs	r0, #10
 8005ffa:	f7fc f977 	bl	80022ec <HAL_Delay>
      ms += 10U;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	330a      	adds	r3, #10
 8006002:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 f920 	bl	800724a <USB_GetMode>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <USB_SetCurrentMode+0x84>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2bc7      	cmp	r3, #199	@ 0xc7
 8006014:	d9f0      	bls.n	8005ff8 <USB_SetCurrentMode+0x60>
 8006016:	e001      	b.n	800601c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e005      	b.n	8006028 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006020:	d101      	bne.n	8006026 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006030:	b084      	sub	sp, #16
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800603e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800604a:	2300      	movs	r3, #0
 800604c:	613b      	str	r3, [r7, #16]
 800604e:	e009      	b.n	8006064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	3340      	adds	r3, #64	@ 0x40
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	2200      	movs	r2, #0
 800605c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	3301      	adds	r3, #1
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b0e      	cmp	r3, #14
 8006068:	d9f2      	bls.n	8006050 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800606a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800606e:	2b00      	cmp	r3, #0
 8006070:	d11c      	bne.n	80060ac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006080:	f043 0302 	orr.w	r3, r3, #2
 8006084:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006096:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80060aa:	e00b      	b.n	80060c4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060ca:	461a      	mov	r2, r3
 80060cc:	2300      	movs	r3, #0
 80060ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d10d      	bne.n	80060f4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060e0:	2100      	movs	r1, #0
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f968 	bl	80063b8 <USB_SetDevSpeed>
 80060e8:	e008      	b.n	80060fc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060ea:	2101      	movs	r1, #1
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f963 	bl	80063b8 <USB_SetDevSpeed>
 80060f2:	e003      	b.n	80060fc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060f4:	2103      	movs	r1, #3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f95e 	bl	80063b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060fc:	2110      	movs	r1, #16
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f8fa 	bl	80062f8 <USB_FlushTxFifo>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f924 	bl	800635c <USB_FlushRxFifo>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006124:	461a      	mov	r2, r3
 8006126:	2300      	movs	r3, #0
 8006128:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006130:	461a      	mov	r2, r3
 8006132:	2300      	movs	r3, #0
 8006134:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800613c:	461a      	mov	r2, r3
 800613e:	2300      	movs	r3, #0
 8006140:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006142:	2300      	movs	r3, #0
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	e043      	b.n	80061d0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800615a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800615e:	d118      	bne.n	8006192 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006172:	461a      	mov	r2, r3
 8006174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	e013      	b.n	80061a4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006188:	461a      	mov	r2, r3
 800618a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	e008      	b.n	80061a4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800619e:	461a      	mov	r2, r3
 80061a0:	2300      	movs	r3, #0
 80061a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b0:	461a      	mov	r2, r3
 80061b2:	2300      	movs	r3, #0
 80061b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c2:	461a      	mov	r2, r3
 80061c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80061c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	3301      	adds	r3, #1
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80061d4:	461a      	mov	r2, r3
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4293      	cmp	r3, r2
 80061da:	d3b5      	bcc.n	8006148 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061dc:	2300      	movs	r3, #0
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	e043      	b.n	800626a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061f8:	d118      	bne.n	800622c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10a      	bne.n	8006216 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800620c:	461a      	mov	r2, r3
 800620e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	e013      	b.n	800623e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006222:	461a      	mov	r2, r3
 8006224:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	e008      	b.n	800623e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006238:	461a      	mov	r2, r3
 800623a:	2300      	movs	r3, #0
 800623c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624a:	461a      	mov	r2, r3
 800624c:	2300      	movs	r3, #0
 800624e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800625c:	461a      	mov	r2, r3
 800625e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006262:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	3301      	adds	r3, #1
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800626e:	461a      	mov	r2, r3
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	4293      	cmp	r3, r2
 8006274:	d3b5      	bcc.n	80061e2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006288:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006296:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006298:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800629c:	2b00      	cmp	r3, #0
 800629e:	d105      	bne.n	80062ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f043 0210 	orr.w	r2, r3, #16
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	4b10      	ldr	r3, [pc, #64]	@ (80062f4 <USB_DevInit+0x2c4>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f043 0208 	orr.w	r2, r3, #8
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d107      	bne.n	80062e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062dc:	f043 0304 	orr.w	r3, r3, #4
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062f0:	b004      	add	sp, #16
 80062f2:	4770      	bx	lr
 80062f4:	803c3800 	.word	0x803c3800

080062f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006312:	d901      	bls.n	8006318 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e01b      	b.n	8006350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	daf2      	bge.n	8006306 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	019b      	lsls	r3, r3, #6
 8006328:	f043 0220 	orr.w	r2, r3, #32
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800633c:	d901      	bls.n	8006342 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e006      	b.n	8006350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b20      	cmp	r3, #32
 800634c:	d0f0      	beq.n	8006330 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3301      	adds	r3, #1
 800636c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006374:	d901      	bls.n	800637a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e018      	b.n	80063ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	daf2      	bge.n	8006368 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2210      	movs	r2, #16
 800638a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3301      	adds	r3, #1
 8006390:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006398:	d901      	bls.n	800639e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e006      	b.n	80063ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b10      	cmp	r3, #16
 80063a8:	d0f0      	beq.n	800638c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	68f9      	ldr	r1, [r7, #12]
 80063d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063d8:	4313      	orrs	r3, r2
 80063da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b087      	sub	sp, #28
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 0306 	and.w	r3, r3, #6
 8006402:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d102      	bne.n	8006410 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800640a:	2300      	movs	r3, #0
 800640c:	75fb      	strb	r3, [r7, #23]
 800640e:	e00a      	b.n	8006426 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d002      	beq.n	800641c <USB_GetDevSpeed+0x32>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b06      	cmp	r3, #6
 800641a:	d102      	bne.n	8006422 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800641c:	2302      	movs	r3, #2
 800641e:	75fb      	strb	r3, [r7, #23]
 8006420:	e001      	b.n	8006426 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006422:	230f      	movs	r3, #15
 8006424:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006426:	7dfb      	ldrb	r3, [r7, #23]
}
 8006428:	4618      	mov	r0, r3
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d13a      	bne.n	80064c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006456:	69da      	ldr	r2, [r3, #28]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	f003 030f 	and.w	r3, r3, #15
 8006460:	2101      	movs	r1, #1
 8006462:	fa01 f303 	lsl.w	r3, r1, r3
 8006466:	b29b      	uxth	r3, r3
 8006468:	68f9      	ldr	r1, [r7, #12]
 800646a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800646e:	4313      	orrs	r3, r2
 8006470:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d155      	bne.n	8006534 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	791b      	ldrb	r3, [r3, #4]
 80064a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	059b      	lsls	r3, r3, #22
 80064aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064ac:	4313      	orrs	r3, r2
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	e036      	b.n	8006534 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064cc:	69da      	ldr	r2, [r3, #28]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	2101      	movs	r1, #1
 80064d8:	fa01 f303 	lsl.w	r3, r1, r3
 80064dc:	041b      	lsls	r3, r3, #16
 80064de:	68f9      	ldr	r1, [r7, #12]
 80064e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064e4:	4313      	orrs	r3, r2
 80064e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d11a      	bne.n	8006534 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	791b      	ldrb	r3, [r3, #4]
 8006518:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800651a:	430b      	orrs	r3, r1
 800651c:	4313      	orrs	r3, r2
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	440a      	add	r2, r1
 8006526:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800652a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800652e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006532:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d161      	bne.n	8006624 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006572:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006576:	d11f      	bne.n	80065b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	440a      	add	r2, r1
 800658e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006592:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006596:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	0151      	lsls	r1, r2, #5
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	440a      	add	r2, r1
 80065ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	2101      	movs	r1, #1
 80065ca:	fa01 f303 	lsl.w	r3, r1, r3
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	43db      	mvns	r3, r3
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065d8:	4013      	ands	r3, r2
 80065da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065e2:	69da      	ldr	r2, [r3, #28]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	2101      	movs	r1, #1
 80065ee:	fa01 f303 	lsl.w	r3, r1, r3
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	43db      	mvns	r3, r3
 80065f6:	68f9      	ldr	r1, [r7, #12]
 80065f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065fc:	4013      	ands	r3, r2
 80065fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	0159      	lsls	r1, r3, #5
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	440b      	add	r3, r1
 8006616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661a:	4619      	mov	r1, r3
 800661c:	4b35      	ldr	r3, [pc, #212]	@ (80066f4 <USB_DeactivateEndpoint+0x1b0>)
 800661e:	4013      	ands	r3, r2
 8006620:	600b      	str	r3, [r1, #0]
 8006622:	e060      	b.n	80066e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006636:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800663a:	d11f      	bne.n	800667c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006656:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800665a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	440a      	add	r2, r1
 8006672:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006676:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800667a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	2101      	movs	r1, #1
 800668e:	fa01 f303 	lsl.w	r3, r1, r3
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	43db      	mvns	r3, r3
 8006696:	68f9      	ldr	r1, [r7, #12]
 8006698:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800669c:	4013      	ands	r3, r2
 800669e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a6:	69da      	ldr	r2, [r3, #28]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	f003 030f 	and.w	r3, r3, #15
 80066b0:	2101      	movs	r1, #1
 80066b2:	fa01 f303 	lsl.w	r3, r1, r3
 80066b6:	041b      	lsls	r3, r3, #16
 80066b8:	43db      	mvns	r3, r3
 80066ba:	68f9      	ldr	r1, [r7, #12]
 80066bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066c0:	4013      	ands	r3, r2
 80066c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	0159      	lsls	r1, r3, #5
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	440b      	add	r3, r1
 80066da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066de:	4619      	mov	r1, r3
 80066e0:	4b05      	ldr	r3, [pc, #20]	@ (80066f8 <USB_DeactivateEndpoint+0x1b4>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	ec337800 	.word	0xec337800
 80066f8:	eff37800 	.word	0xeff37800

080066fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	@ 0x28
 8006700:	af02      	add	r7, sp, #8
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	785b      	ldrb	r3, [r3, #1]
 8006718:	2b01      	cmp	r3, #1
 800671a:	f040 817a 	bne.w	8006a12 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d132      	bne.n	800678c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006740:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006744:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006748:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	0151      	lsls	r1, r2, #5
 800675c:	69fa      	ldr	r2, [r7, #28]
 800675e:	440a      	add	r2, r1
 8006760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006764:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006768:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	440a      	add	r2, r1
 8006780:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006784:	0cdb      	lsrs	r3, r3, #19
 8006786:	04db      	lsls	r3, r3, #19
 8006788:	6113      	str	r3, [r2, #16]
 800678a:	e092      	b.n	80068b2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	0151      	lsls	r1, r2, #5
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	440a      	add	r2, r1
 80067a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067a6:	0cdb      	lsrs	r3, r3, #19
 80067a8:	04db      	lsls	r3, r3, #19
 80067aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	0151      	lsls	r1, r2, #5
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	440a      	add	r2, r1
 80067c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067c6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80067ca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067ce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d11a      	bne.n	800680c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d903      	bls.n	80067ea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006804:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006808:	6113      	str	r3, [r2, #16]
 800680a:	e01b      	b.n	8006844 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006818:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6919      	ldr	r1, [r3, #16]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	440b      	add	r3, r1
 8006824:	1e59      	subs	r1, r3, #1
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	fbb1 f3f3 	udiv	r3, r1, r3
 800682e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006830:	4ba2      	ldr	r3, [pc, #648]	@ (8006abc <USB_EPStartXfer+0x3c0>)
 8006832:	400b      	ands	r3, r1
 8006834:	69b9      	ldr	r1, [r7, #24]
 8006836:	0148      	lsls	r0, r1, #5
 8006838:	69f9      	ldr	r1, [r7, #28]
 800683a:	4401      	add	r1, r0
 800683c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006840:	4313      	orrs	r3, r2
 8006842:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006850:	691a      	ldr	r2, [r3, #16]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800685a:	69b9      	ldr	r1, [r7, #24]
 800685c:	0148      	lsls	r0, r1, #5
 800685e:	69f9      	ldr	r1, [r7, #28]
 8006860:	4401      	add	r1, r0
 8006862:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006866:	4313      	orrs	r3, r2
 8006868:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	791b      	ldrb	r3, [r3, #4]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d11f      	bne.n	80068b2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	440a      	add	r2, r1
 8006888:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800688c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006890:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	0151      	lsls	r1, r2, #5
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	440a      	add	r2, r1
 80068a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80068b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d14b      	bne.n	8006950 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d009      	beq.n	80068d4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068cc:	461a      	mov	r2, r3
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	791b      	ldrb	r3, [r3, #4]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d128      	bne.n	800692e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d110      	bne.n	800690e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	440a      	add	r2, r1
 8006902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006906:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	e00f      	b.n	800692e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	440a      	add	r2, r1
 8006924:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800692c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	69fa      	ldr	r2, [r7, #28]
 8006942:	440a      	add	r2, r1
 8006944:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006948:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e165      	b.n	8006c1c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	0151      	lsls	r1, r2, #5
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	440a      	add	r2, r1
 8006966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800696a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800696e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	791b      	ldrb	r3, [r3, #4]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d015      	beq.n	80069a4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 814d 	beq.w	8006c1c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	f003 030f 	and.w	r3, r3, #15
 8006992:	2101      	movs	r1, #1
 8006994:	fa01 f303 	lsl.w	r3, r1, r3
 8006998:	69f9      	ldr	r1, [r7, #28]
 800699a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800699e:	4313      	orrs	r3, r2
 80069a0:	634b      	str	r3, [r1, #52]	@ 0x34
 80069a2:	e13b      	b.n	8006c1c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d110      	bne.n	80069d6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	0151      	lsls	r1, r2, #5
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	440a      	add	r2, r1
 80069ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	e00f      	b.n	80069f6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	0151      	lsls	r1, r2, #5
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	440a      	add	r2, r1
 80069ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	68d9      	ldr	r1, [r3, #12]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	781a      	ldrb	r2, [r3, #0]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	b298      	uxth	r0, r3
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	4603      	mov	r3, r0
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f9b8 	bl	8006d80 <USB_WritePacket>
 8006a10:	e104      	b.n	8006c1c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	0151      	lsls	r1, r2, #5
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	440a      	add	r2, r1
 8006a28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a2c:	0cdb      	lsrs	r3, r3, #19
 8006a2e:	04db      	lsls	r3, r3, #19
 8006a30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	0151      	lsls	r1, r2, #5
 8006a44:	69fa      	ldr	r2, [r7, #28]
 8006a46:	440a      	add	r2, r1
 8006a48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a4c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006a50:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a54:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d131      	bne.n	8006ac0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a8a:	69b9      	ldr	r1, [r7, #24]
 8006a8c:	0148      	lsls	r0, r1, #5
 8006a8e:	69f9      	ldr	r1, [r7, #28]
 8006a90:	4401      	add	r1, r0
 8006a92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006a96:	4313      	orrs	r3, r2
 8006a98:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ab4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ab8:	6113      	str	r3, [r2, #16]
 8006aba:	e061      	b.n	8006b80 <USB_EPStartXfer+0x484>
 8006abc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d123      	bne.n	8006b10 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ade:	69b9      	ldr	r1, [r7, #24]
 8006ae0:	0148      	lsls	r0, r1, #5
 8006ae2:	69f9      	ldr	r1, [r7, #28]
 8006ae4:	4401      	add	r1, r0
 8006ae6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006aea:	4313      	orrs	r3, r2
 8006aec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	0151      	lsls	r1, r2, #5
 8006b00:	69fa      	ldr	r2, [r7, #28]
 8006b02:	440a      	add	r2, r1
 8006b04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b0c:	6113      	str	r3, [r2, #16]
 8006b0e:	e037      	b.n	8006b80 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	691a      	ldr	r2, [r3, #16]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	4413      	add	r3, r2
 8006b1a:	1e5a      	subs	r2, r3, #1
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b24:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	8afa      	ldrh	r2, [r7, #22]
 8006b2c:	fb03 f202 	mul.w	r2, r3, r2
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b40:	691a      	ldr	r2, [r3, #16]
 8006b42:	8afb      	ldrh	r3, [r7, #22]
 8006b44:	04d9      	lsls	r1, r3, #19
 8006b46:	4b38      	ldr	r3, [pc, #224]	@ (8006c28 <USB_EPStartXfer+0x52c>)
 8006b48:	400b      	ands	r3, r1
 8006b4a:	69b9      	ldr	r1, [r7, #24]
 8006b4c:	0148      	lsls	r0, r1, #5
 8006b4e:	69f9      	ldr	r1, [r7, #28]
 8006b50:	4401      	add	r1, r0
 8006b52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b56:	4313      	orrs	r3, r2
 8006b58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b70:	69b9      	ldr	r1, [r7, #24]
 8006b72:	0148      	lsls	r0, r1, #5
 8006b74:	69f9      	ldr	r1, [r7, #28]
 8006b76:	4401      	add	r1, r0
 8006b78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006b80:	79fb      	ldrb	r3, [r7, #7]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d10d      	bne.n	8006ba2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d009      	beq.n	8006ba2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	68d9      	ldr	r1, [r3, #12]
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b9e:	460a      	mov	r2, r1
 8006ba0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	791b      	ldrb	r3, [r3, #4]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d128      	bne.n	8006bfc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d110      	bne.n	8006bdc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	e00f      	b.n	8006bfc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bfa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	1ff80000 	.word	0x1ff80000

08006c2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	785b      	ldrb	r3, [r3, #1]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d14a      	bne.n	8006ce0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c62:	f040 8086 	bne.w	8006d72 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	7812      	ldrb	r2, [r2, #0]
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	7812      	ldrb	r2, [r2, #0]
 8006c9e:	0151      	lsls	r1, r2, #5
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	440a      	add	r2, r1
 8006ca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ca8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d902      	bls.n	8006cc4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8006cc2:	e056      	b.n	8006d72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cdc:	d0e7      	beq.n	8006cae <USB_EPStopXfer+0x82>
 8006cde:	e048      	b.n	8006d72 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cf8:	d13b      	bne.n	8006d72 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	7812      	ldrb	r2, [r2, #0]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d18:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d1c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	7812      	ldrb	r2, [r2, #0]
 8006d32:	0151      	lsls	r1, r2, #5
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	440a      	add	r2, r1
 8006d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3301      	adds	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d902      	bls.n	8006d58 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	75fb      	strb	r3, [r7, #23]
          break;
 8006d56:	e00c      	b.n	8006d72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d70:	d0e7      	beq.n	8006d42 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b089      	sub	sp, #36	@ 0x24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	460b      	mov	r3, r1
 8006d90:	71fb      	strb	r3, [r7, #7]
 8006d92:	4613      	mov	r3, r2
 8006d94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d123      	bne.n	8006dee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006da6:	88bb      	ldrh	r3, [r7, #4]
 8006da8:	3303      	adds	r3, #3
 8006daa:	089b      	lsrs	r3, r3, #2
 8006dac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006dae:	2300      	movs	r3, #0
 8006db0:	61bb      	str	r3, [r7, #24]
 8006db2:	e018      	b.n	8006de6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006db4:	79fb      	ldrb	r3, [r7, #7]
 8006db6:	031a      	lsls	r2, r3, #12
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	3301      	adds	r3, #1
 8006de4:	61bb      	str	r3, [r7, #24]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d3e2      	bcc.n	8006db4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3724      	adds	r7, #36	@ 0x24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b08b      	sub	sp, #44	@ 0x2c
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	4613      	mov	r3, r2
 8006e08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e12:	88fb      	ldrh	r3, [r7, #6]
 8006e14:	089b      	lsrs	r3, r3, #2
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e22:	2300      	movs	r3, #0
 8006e24:	623b      	str	r3, [r7, #32]
 8006e26:	e014      	b.n	8006e52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e36:	3301      	adds	r3, #1
 8006e38:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e42:	3301      	adds	r3, #1
 8006e44:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e48:	3301      	adds	r3, #1
 8006e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	623b      	str	r3, [r7, #32]
 8006e52:	6a3a      	ldr	r2, [r7, #32]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d3e6      	bcc.n	8006e28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e5a:	8bfb      	ldrh	r3, [r7, #30]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01e      	beq.n	8006e9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f107 0310 	add.w	r3, r7, #16
 8006e70:	6812      	ldr	r2, [r2, #0]
 8006e72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	701a      	strb	r2, [r3, #0]
      i++;
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8e:	3301      	adds	r3, #1
 8006e90:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006e92:	8bfb      	ldrh	r3, [r7, #30]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e98:	8bfb      	ldrh	r3, [r7, #30]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1ea      	bne.n	8006e74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	372c      	adds	r7, #44	@ 0x2c
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d12c      	bne.n	8006f22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	db12      	blt.n	8006f00 <USB_EPSetStall+0x54>
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00f      	beq.n	8006f00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	0151      	lsls	r1, r2, #5
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	440a      	add	r2, r1
 8006ef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006efa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006efe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	0151      	lsls	r1, r2, #5
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	440a      	add	r2, r1
 8006f16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	e02b      	b.n	8006f7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	db12      	blt.n	8006f5a <USB_EPSetStall+0xae>
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00f      	beq.n	8006f5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	0151      	lsls	r1, r2, #5
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	440a      	add	r2, r1
 8006f70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d128      	bne.n	8006ff6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	0151      	lsls	r1, r2, #5
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	440a      	add	r2, r1
 8006fba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006fc2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	791b      	ldrb	r3, [r3, #4]
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d003      	beq.n	8006fd4 <USB_EPClearStall+0x4c>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	791b      	ldrb	r3, [r3, #4]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d138      	bne.n	8007046 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	0151      	lsls	r1, r2, #5
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	440a      	add	r2, r1
 8006fea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	e027      	b.n	8007046 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	0151      	lsls	r1, r2, #5
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	440a      	add	r2, r1
 800700c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007010:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007014:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	791b      	ldrb	r3, [r3, #4]
 800701a:	2b03      	cmp	r3, #3
 800701c:	d003      	beq.n	8007026 <USB_EPClearStall+0x9e>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	791b      	ldrb	r3, [r3, #4]
 8007022:	2b02      	cmp	r3, #2
 8007024:	d10f      	bne.n	8007046 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	0151      	lsls	r1, r2, #5
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	440a      	add	r2, r1
 800703c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007044:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007072:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007076:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007088:	68f9      	ldr	r1, [r7, #12]
 800708a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800708e:	4313      	orrs	r3, r2
 8007090:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80070ba:	f023 0303 	bic.w	r3, r3, #3
 80070be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070ce:	f023 0302 	bic.w	r3, r3, #2
 80070d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b085      	sub	sp, #20
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80070fc:	f023 0303 	bic.w	r3, r3, #3
 8007100:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007110:	f043 0302 	orr.w	r3, r3, #2
 8007114:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4013      	ands	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800713c:	68fb      	ldr	r3, [r7, #12]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	4013      	ands	r3, r2
 800716c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	0c1b      	lsrs	r3, r3, #16
}
 8007172:	4618      	mov	r0, r3
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800717e:	b480      	push	{r7}
 8007180:	b085      	sub	sp, #20
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	4013      	ands	r3, r2
 80071a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	b29b      	uxth	r3, r3
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b085      	sub	sp, #20
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	460b      	mov	r3, r1
 80071bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80071c2:	78fb      	ldrb	r3, [r7, #3]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	4013      	ands	r3, r2
 80071de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071e0:	68bb      	ldr	r3, [r7, #8]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b087      	sub	sp, #28
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800720e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007210:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	f003 030f 	and.w	r3, r3, #15
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	fa22 f303 	lsr.w	r3, r2, r3
 800721e:	01db      	lsls	r3, r3, #7
 8007220:	b2db      	uxtb	r3, r3
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4013      	ands	r3, r2
 800723a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800723c:	68bb      	ldr	r3, [r7, #8]
}
 800723e:	4618      	mov	r0, r3
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	f003 0301 	and.w	r3, r3, #1
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007280:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007284:	f023 0307 	bic.w	r3, r3, #7
 8007288:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800729c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	460b      	mov	r3, r1
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	333c      	adds	r3, #60	@ 0x3c
 80072c2:	3304      	adds	r3, #4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	4a26      	ldr	r2, [pc, #152]	@ (8007364 <USB_EP0_OutStart+0xb8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d90a      	bls.n	80072e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072e0:	d101      	bne.n	80072e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e037      	b.n	8007356 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ec:	461a      	mov	r2, r3
 80072ee:	2300      	movs	r3, #0
 80072f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007300:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007304:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007314:	f043 0318 	orr.w	r3, r3, #24
 8007318:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007328:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800732c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d10f      	bne.n	8007354 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800733a:	461a      	mov	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800734e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007352:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	4f54300a 	.word	0x4f54300a

08007368 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3301      	adds	r3, #1
 8007378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007380:	d901      	bls.n	8007386 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e01b      	b.n	80073be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	daf2      	bge.n	8007374 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f043 0201 	orr.w	r2, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3301      	adds	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073aa:	d901      	bls.n	80073b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e006      	b.n	80073be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d0f0      	beq.n	800739e <USB_CoreReset+0x36>

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
	...

080073cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80073d0:	4904      	ldr	r1, [pc, #16]	@ (80073e4 <MX_FATFS_Init+0x18>)
 80073d2:	4805      	ldr	r0, [pc, #20]	@ (80073e8 <MX_FATFS_Init+0x1c>)
 80073d4:	f006 f832 	bl	800d43c <FATFS_LinkDriver>
 80073d8:	4603      	mov	r3, r0
 80073da:	461a      	mov	r2, r3
 80073dc:	4b03      	ldr	r3, [pc, #12]	@ (80073ec <MX_FATFS_Init+0x20>)
 80073de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80073e0:	bf00      	nop
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	20002388 	.word	0x20002388
 80073e8:	20000078 	.word	0x20000078
 80073ec:	20002384 	.word	0x20002384

080073f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80073f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	4603      	mov	r3, r0
 8007408:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	4618      	mov	r0, r3
 800740e:	f7f9 fe57 	bl	80010c0 <SD_disk_initialize>
 8007412:	4603      	mov	r3, r0
 8007414:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	4603      	mov	r3, r0
 8007426:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	4618      	mov	r0, r3
 800742c:	f7f9 ff2e 	bl	800128c <SD_disk_status>
 8007430:	4603      	mov	r3, r0
 8007432:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	607a      	str	r2, [r7, #4]
 8007446:	603b      	str	r3, [r7, #0]
 8007448:	4603      	mov	r3, r0
 800744a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 800744c:	7bf8      	ldrb	r0, [r7, #15]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	f7f9 ff30 	bl	80012b8 <SD_disk_read>
 8007458:	4603      	mov	r3, r0
 800745a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60b9      	str	r1, [r7, #8]
 800746c:	607a      	str	r2, [r7, #4]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	4603      	mov	r3, r0
 8007472:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8007474:	7bf8      	ldrb	r0, [r7, #15]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	68b9      	ldr	r1, [r7, #8]
 800747c:	f7f9 ff86 	bl	800138c <SD_disk_write>
 8007480:	4603      	mov	r3, r0
 8007482:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	4603      	mov	r3, r0
 8007494:	603a      	str	r2, [r7, #0]
 8007496:	71fb      	strb	r3, [r7, #7]
 8007498:	460b      	mov	r3, r1
 800749a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	79b9      	ldrb	r1, [r7, #6]
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7f9 fff6 	bl	8001494 <SD_disk_ioctl>
 80074a8:	4603      	mov	r3, r0
 80074aa:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80074c0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80074c4:	f009 fe8c 	bl	80111e0 <USBD_static_malloc>
 80074c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d109      	bne.n	80074e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	32b0      	adds	r2, #176	@ 0xb0
 80074da:	2100      	movs	r1, #0
 80074dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80074e0:	2302      	movs	r3, #2
 80074e2:	e0d4      	b.n	800768e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80074e4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80074e8:	2100      	movs	r1, #0
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f00a f84d 	bl	801158a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	32b0      	adds	r2, #176	@ 0xb0
 80074fa:	68f9      	ldr	r1, [r7, #12]
 80074fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	32b0      	adds	r2, #176	@ 0xb0
 800750a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	7c1b      	ldrb	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d138      	bne.n	800758e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800751c:	4b5e      	ldr	r3, [pc, #376]	@ (8007698 <USBD_CDC_Init+0x1e4>)
 800751e:	7819      	ldrb	r1, [r3, #0]
 8007520:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007524:	2202      	movs	r2, #2
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f009 fd37 	bl	8010f9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800752c:	4b5a      	ldr	r3, [pc, #360]	@ (8007698 <USBD_CDC_Init+0x1e4>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	f003 020f 	and.w	r2, r3, #15
 8007534:	6879      	ldr	r1, [r7, #4]
 8007536:	4613      	mov	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	440b      	add	r3, r1
 8007540:	3324      	adds	r3, #36	@ 0x24
 8007542:	2201      	movs	r2, #1
 8007544:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007546:	4b55      	ldr	r3, [pc, #340]	@ (800769c <USBD_CDC_Init+0x1e8>)
 8007548:	7819      	ldrb	r1, [r3, #0]
 800754a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800754e:	2202      	movs	r2, #2
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f009 fd22 	bl	8010f9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007556:	4b51      	ldr	r3, [pc, #324]	@ (800769c <USBD_CDC_Init+0x1e8>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f003 020f 	and.w	r2, r3, #15
 800755e:	6879      	ldr	r1, [r7, #4]
 8007560:	4613      	mov	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	440b      	add	r3, r1
 800756a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800756e:	2201      	movs	r2, #1
 8007570:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007572:	4b4b      	ldr	r3, [pc, #300]	@ (80076a0 <USBD_CDC_Init+0x1ec>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	f003 020f 	and.w	r2, r3, #15
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	4613      	mov	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	440b      	add	r3, r1
 8007586:	3326      	adds	r3, #38	@ 0x26
 8007588:	2210      	movs	r2, #16
 800758a:	801a      	strh	r2, [r3, #0]
 800758c:	e035      	b.n	80075fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800758e:	4b42      	ldr	r3, [pc, #264]	@ (8007698 <USBD_CDC_Init+0x1e4>)
 8007590:	7819      	ldrb	r1, [r3, #0]
 8007592:	2340      	movs	r3, #64	@ 0x40
 8007594:	2202      	movs	r2, #2
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f009 fcff 	bl	8010f9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800759c:	4b3e      	ldr	r3, [pc, #248]	@ (8007698 <USBD_CDC_Init+0x1e4>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	f003 020f 	and.w	r2, r3, #15
 80075a4:	6879      	ldr	r1, [r7, #4]
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	440b      	add	r3, r1
 80075b0:	3324      	adds	r3, #36	@ 0x24
 80075b2:	2201      	movs	r2, #1
 80075b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80075b6:	4b39      	ldr	r3, [pc, #228]	@ (800769c <USBD_CDC_Init+0x1e8>)
 80075b8:	7819      	ldrb	r1, [r3, #0]
 80075ba:	2340      	movs	r3, #64	@ 0x40
 80075bc:	2202      	movs	r2, #2
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f009 fceb 	bl	8010f9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80075c4:	4b35      	ldr	r3, [pc, #212]	@ (800769c <USBD_CDC_Init+0x1e8>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	f003 020f 	and.w	r2, r3, #15
 80075cc:	6879      	ldr	r1, [r7, #4]
 80075ce:	4613      	mov	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	440b      	add	r3, r1
 80075d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80075dc:	2201      	movs	r2, #1
 80075de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80075e0:	4b2f      	ldr	r3, [pc, #188]	@ (80076a0 <USBD_CDC_Init+0x1ec>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	f003 020f 	and.w	r2, r3, #15
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	4613      	mov	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	440b      	add	r3, r1
 80075f4:	3326      	adds	r3, #38	@ 0x26
 80075f6:	2210      	movs	r2, #16
 80075f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80075fa:	4b29      	ldr	r3, [pc, #164]	@ (80076a0 <USBD_CDC_Init+0x1ec>)
 80075fc:	7819      	ldrb	r1, [r3, #0]
 80075fe:	2308      	movs	r3, #8
 8007600:	2203      	movs	r2, #3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f009 fcc9 	bl	8010f9a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007608:	4b25      	ldr	r3, [pc, #148]	@ (80076a0 <USBD_CDC_Init+0x1ec>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	f003 020f 	and.w	r2, r3, #15
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	440b      	add	r3, r1
 800761c:	3324      	adds	r3, #36	@ 0x24
 800761e:	2201      	movs	r2, #1
 8007620:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	33b0      	adds	r3, #176	@ 0xb0
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007658:	2302      	movs	r3, #2
 800765a:	e018      	b.n	800768e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	7c1b      	ldrb	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10a      	bne.n	800767a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007664:	4b0d      	ldr	r3, [pc, #52]	@ (800769c <USBD_CDC_Init+0x1e8>)
 8007666:	7819      	ldrb	r1, [r3, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800766e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f009 fd80 	bl	8011178 <USBD_LL_PrepareReceive>
 8007678:	e008      	b.n	800768c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800767a:	4b08      	ldr	r3, [pc, #32]	@ (800769c <USBD_CDC_Init+0x1e8>)
 800767c:	7819      	ldrb	r1, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007684:	2340      	movs	r3, #64	@ 0x40
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f009 fd76 	bl	8011178 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20000113 	.word	0x20000113
 800769c:	20000114 	.word	0x20000114
 80076a0:	20000115 	.word	0x20000115

080076a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80076b0:	4b3a      	ldr	r3, [pc, #232]	@ (800779c <USBD_CDC_DeInit+0xf8>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f009 fc95 	bl	8010fe6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80076bc:	4b37      	ldr	r3, [pc, #220]	@ (800779c <USBD_CDC_DeInit+0xf8>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	f003 020f 	and.w	r2, r3, #15
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	440b      	add	r3, r1
 80076d0:	3324      	adds	r3, #36	@ 0x24
 80076d2:	2200      	movs	r2, #0
 80076d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80076d6:	4b32      	ldr	r3, [pc, #200]	@ (80077a0 <USBD_CDC_DeInit+0xfc>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f009 fc82 	bl	8010fe6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80076e2:	4b2f      	ldr	r3, [pc, #188]	@ (80077a0 <USBD_CDC_DeInit+0xfc>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	f003 020f 	and.w	r2, r3, #15
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	4613      	mov	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80076fa:	2200      	movs	r2, #0
 80076fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80076fe:	4b29      	ldr	r3, [pc, #164]	@ (80077a4 <USBD_CDC_DeInit+0x100>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f009 fc6e 	bl	8010fe6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800770a:	4b26      	ldr	r3, [pc, #152]	@ (80077a4 <USBD_CDC_DeInit+0x100>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	f003 020f 	and.w	r2, r3, #15
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	4613      	mov	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	440b      	add	r3, r1
 800771e:	3324      	adds	r3, #36	@ 0x24
 8007720:	2200      	movs	r2, #0
 8007722:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007724:	4b1f      	ldr	r3, [pc, #124]	@ (80077a4 <USBD_CDC_DeInit+0x100>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	f003 020f 	and.w	r2, r3, #15
 800772c:	6879      	ldr	r1, [r7, #4]
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	440b      	add	r3, r1
 8007738:	3326      	adds	r3, #38	@ 0x26
 800773a:	2200      	movs	r2, #0
 800773c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	32b0      	adds	r2, #176	@ 0xb0
 8007748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d01f      	beq.n	8007790 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	33b0      	adds	r3, #176	@ 0xb0
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	32b0      	adds	r2, #176	@ 0xb0
 800776e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007772:	4618      	mov	r0, r3
 8007774:	f009 fd42 	bl	80111fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	32b0      	adds	r2, #176	@ 0xb0
 8007782:	2100      	movs	r1, #0
 8007784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000113 	.word	0x20000113
 80077a0:	20000114 	.word	0x20000114
 80077a4:	20000115 	.word	0x20000115

080077a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	32b0      	adds	r2, #176	@ 0xb0
 80077bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e0bf      	b.n	8007958 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d050      	beq.n	8007886 <USBD_CDC_Setup+0xde>
 80077e4:	2b20      	cmp	r3, #32
 80077e6:	f040 80af 	bne.w	8007948 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	88db      	ldrh	r3, [r3, #6]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d03a      	beq.n	8007868 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b25b      	sxtb	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	da1b      	bge.n	8007834 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	33b0      	adds	r3, #176	@ 0xb0
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007812:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	88d2      	ldrh	r2, [r2, #6]
 8007818:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	88db      	ldrh	r3, [r3, #6]
 800781e:	2b07      	cmp	r3, #7
 8007820:	bf28      	it	cs
 8007822:	2307      	movcs	r3, #7
 8007824:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	89fa      	ldrh	r2, [r7, #14]
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 fd87 	bl	8009340 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007832:	e090      	b.n	8007956 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	785a      	ldrb	r2, [r3, #1]
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	88db      	ldrh	r3, [r3, #6]
 8007842:	2b3f      	cmp	r3, #63	@ 0x3f
 8007844:	d803      	bhi.n	800784e <USBD_CDC_Setup+0xa6>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	88db      	ldrh	r3, [r3, #6]
 800784a:	b2da      	uxtb	r2, r3
 800784c:	e000      	b.n	8007850 <USBD_CDC_Setup+0xa8>
 800784e:	2240      	movs	r2, #64	@ 0x40
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007856:	6939      	ldr	r1, [r7, #16]
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800785e:	461a      	mov	r2, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 fd99 	bl	8009398 <USBD_CtlPrepareRx>
      break;
 8007866:	e076      	b.n	8007956 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	33b0      	adds	r3, #176	@ 0xb0
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	7850      	ldrb	r0, [r2, #1]
 800787e:	2200      	movs	r2, #0
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	4798      	blx	r3
      break;
 8007884:	e067      	b.n	8007956 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	785b      	ldrb	r3, [r3, #1]
 800788a:	2b0b      	cmp	r3, #11
 800788c:	d851      	bhi.n	8007932 <USBD_CDC_Setup+0x18a>
 800788e:	a201      	add	r2, pc, #4	@ (adr r2, 8007894 <USBD_CDC_Setup+0xec>)
 8007890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007894:	080078c5 	.word	0x080078c5
 8007898:	08007941 	.word	0x08007941
 800789c:	08007933 	.word	0x08007933
 80078a0:	08007933 	.word	0x08007933
 80078a4:	08007933 	.word	0x08007933
 80078a8:	08007933 	.word	0x08007933
 80078ac:	08007933 	.word	0x08007933
 80078b0:	08007933 	.word	0x08007933
 80078b4:	08007933 	.word	0x08007933
 80078b8:	08007933 	.word	0x08007933
 80078bc:	080078ef 	.word	0x080078ef
 80078c0:	08007919 	.word	0x08007919
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d107      	bne.n	80078e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80078d0:	f107 030a 	add.w	r3, r7, #10
 80078d4:	2202      	movs	r2, #2
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f001 fd31 	bl	8009340 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078de:	e032      	b.n	8007946 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 fcbb 	bl	800925e <USBD_CtlError>
            ret = USBD_FAIL;
 80078e8:	2303      	movs	r3, #3
 80078ea:	75fb      	strb	r3, [r7, #23]
          break;
 80078ec:	e02b      	b.n	8007946 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d107      	bne.n	800790a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80078fa:	f107 030d 	add.w	r3, r7, #13
 80078fe:	2201      	movs	r2, #1
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f001 fd1c 	bl	8009340 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007908:	e01d      	b.n	8007946 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 fca6 	bl	800925e <USBD_CtlError>
            ret = USBD_FAIL;
 8007912:	2303      	movs	r3, #3
 8007914:	75fb      	strb	r3, [r7, #23]
          break;
 8007916:	e016      	b.n	8007946 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b03      	cmp	r3, #3
 8007922:	d00f      	beq.n	8007944 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 fc99 	bl	800925e <USBD_CtlError>
            ret = USBD_FAIL;
 800792c:	2303      	movs	r3, #3
 800792e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007930:	e008      	b.n	8007944 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 fc92 	bl	800925e <USBD_CtlError>
          ret = USBD_FAIL;
 800793a:	2303      	movs	r3, #3
 800793c:	75fb      	strb	r3, [r7, #23]
          break;
 800793e:	e002      	b.n	8007946 <USBD_CDC_Setup+0x19e>
          break;
 8007940:	bf00      	nop
 8007942:	e008      	b.n	8007956 <USBD_CDC_Setup+0x1ae>
          break;
 8007944:	bf00      	nop
      }
      break;
 8007946:	e006      	b.n	8007956 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 fc87 	bl	800925e <USBD_CtlError>
      ret = USBD_FAIL;
 8007950:	2303      	movs	r3, #3
 8007952:	75fb      	strb	r3, [r7, #23]
      break;
 8007954:	bf00      	nop
  }

  return (uint8_t)ret;
 8007956:	7dfb      	ldrb	r3, [r7, #23]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3718      	adds	r7, #24
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007972:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	32b0      	adds	r2, #176	@ 0xb0
 800797e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007986:	2303      	movs	r3, #3
 8007988:	e065      	b.n	8007a56 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	32b0      	adds	r2, #176	@ 0xb0
 8007994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007998:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	f003 020f 	and.w	r2, r3, #15
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	440b      	add	r3, r1
 80079ac:	3318      	adds	r3, #24
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d02f      	beq.n	8007a14 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	f003 020f 	and.w	r2, r3, #15
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	440b      	add	r3, r1
 80079c6:	3318      	adds	r3, #24
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	78fb      	ldrb	r3, [r7, #3]
 80079cc:	f003 010f 	and.w	r1, r3, #15
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	460b      	mov	r3, r1
 80079d4:	00db      	lsls	r3, r3, #3
 80079d6:	440b      	add	r3, r1
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4403      	add	r3, r0
 80079dc:	331c      	adds	r3, #28
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80079e4:	fb01 f303 	mul.w	r3, r1, r3
 80079e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d112      	bne.n	8007a14 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	f003 020f 	and.w	r2, r3, #15
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	3318      	adds	r3, #24
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a06:	78f9      	ldrb	r1, [r7, #3]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f009 fb92 	bl	8011136 <USBD_LL_Transmit>
 8007a12:	e01f      	b.n	8007a54 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	33b0      	adds	r3, #176	@ 0xb0
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d010      	beq.n	8007a54 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	33b0      	adds	r3, #176	@ 0xb0
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007a50:	78fa      	ldrb	r2, [r7, #3]
 8007a52:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	460b      	mov	r3, r1
 8007a68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	32b0      	adds	r2, #176	@ 0xb0
 8007a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	32b0      	adds	r2, #176	@ 0xb0
 8007a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e01a      	b.n	8007ac6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f009 fb90 	bl	80111ba <USBD_LL_GetRxDataSize>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	33b0      	adds	r3, #176	@ 0xb0
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	32b0      	adds	r2, #176	@ 0xb0
 8007ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e024      	b.n	8007b3a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	33b0      	adds	r3, #176	@ 0xb0
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d019      	beq.n	8007b38 <USBD_CDC_EP0_RxReady+0x6a>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007b0a:	2bff      	cmp	r3, #255	@ 0xff
 8007b0c:	d014      	beq.n	8007b38 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	33b0      	adds	r3, #176	@ 0xb0
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007b26:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007b2e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	22ff      	movs	r2, #255	@ 0xff
 8007b34:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
	...

08007b44 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b4c:	2182      	movs	r1, #130	@ 0x82
 8007b4e:	4818      	ldr	r0, [pc, #96]	@ (8007bb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b50:	f000 fd4f 	bl	80085f2 <USBD_GetEpDesc>
 8007b54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b56:	2101      	movs	r1, #1
 8007b58:	4815      	ldr	r0, [pc, #84]	@ (8007bb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b5a:	f000 fd4a 	bl	80085f2 <USBD_GetEpDesc>
 8007b5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b60:	2181      	movs	r1, #129	@ 0x81
 8007b62:	4813      	ldr	r0, [pc, #76]	@ (8007bb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b64:	f000 fd45 	bl	80085f2 <USBD_GetEpDesc>
 8007b68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	2210      	movs	r2, #16
 8007b74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d006      	beq.n	8007b8a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b84:	711a      	strb	r2, [r3, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d006      	beq.n	8007b9e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b98:	711a      	strb	r2, [r3, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2243      	movs	r2, #67	@ 0x43
 8007ba2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ba4:	4b02      	ldr	r3, [pc, #8]	@ (8007bb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	200000d0 	.word	0x200000d0

08007bb4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007bbc:	2182      	movs	r1, #130	@ 0x82
 8007bbe:	4818      	ldr	r0, [pc, #96]	@ (8007c20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007bc0:	f000 fd17 	bl	80085f2 <USBD_GetEpDesc>
 8007bc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	4815      	ldr	r0, [pc, #84]	@ (8007c20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007bca:	f000 fd12 	bl	80085f2 <USBD_GetEpDesc>
 8007bce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007bd0:	2181      	movs	r1, #129	@ 0x81
 8007bd2:	4813      	ldr	r0, [pc, #76]	@ (8007c20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007bd4:	f000 fd0d 	bl	80085f2 <USBD_GetEpDesc>
 8007bd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	2210      	movs	r2, #16
 8007be4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d006      	beq.n	8007bfa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	711a      	strb	r2, [r3, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f042 0202 	orr.w	r2, r2, #2
 8007bf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	711a      	strb	r2, [r3, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f042 0202 	orr.w	r2, r2, #2
 8007c0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2243      	movs	r2, #67	@ 0x43
 8007c12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c14:	4b02      	ldr	r3, [pc, #8]	@ (8007c20 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	200000d0 	.word	0x200000d0

08007c24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c2c:	2182      	movs	r1, #130	@ 0x82
 8007c2e:	4818      	ldr	r0, [pc, #96]	@ (8007c90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c30:	f000 fcdf 	bl	80085f2 <USBD_GetEpDesc>
 8007c34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c36:	2101      	movs	r1, #1
 8007c38:	4815      	ldr	r0, [pc, #84]	@ (8007c90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c3a:	f000 fcda 	bl	80085f2 <USBD_GetEpDesc>
 8007c3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c40:	2181      	movs	r1, #129	@ 0x81
 8007c42:	4813      	ldr	r0, [pc, #76]	@ (8007c90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c44:	f000 fcd5 	bl	80085f2 <USBD_GetEpDesc>
 8007c48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2210      	movs	r2, #16
 8007c54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d006      	beq.n	8007c6a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c64:	711a      	strb	r2, [r3, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d006      	beq.n	8007c7e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c78:	711a      	strb	r2, [r3, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2243      	movs	r2, #67	@ 0x43
 8007c82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c84:	4b02      	ldr	r3, [pc, #8]	@ (8007c90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	200000d0 	.word	0x200000d0

08007c94 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	220a      	movs	r2, #10
 8007ca0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ca2:	4b03      	ldr	r3, [pc, #12]	@ (8007cb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	2000008c 	.word	0x2000008c

08007cb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e009      	b.n	8007cdc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	33b0      	adds	r3, #176	@ 0xb0
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	32b0      	adds	r2, #176	@ 0xb0
 8007cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d02:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e008      	b.n	8007d20 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	371c      	adds	r7, #28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	32b0      	adds	r2, #176	@ 0xb0
 8007d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e004      	b.n	8007d5a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
	...

08007d68 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	32b0      	adds	r2, #176	@ 0xb0
 8007d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d80:	2301      	movs	r3, #1
 8007d82:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e025      	b.n	8007dda <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d11f      	bne.n	8007dd8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007da0:	4b10      	ldr	r3, [pc, #64]	@ (8007de4 <USBD_CDC_TransmitPacket+0x7c>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	f003 020f 	and.w	r2, r3, #15
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4403      	add	r3, r0
 8007dba:	3318      	adds	r3, #24
 8007dbc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007dbe:	4b09      	ldr	r3, [pc, #36]	@ (8007de4 <USBD_CDC_TransmitPacket+0x7c>)
 8007dc0:	7819      	ldrb	r1, [r3, #0]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f009 f9b1 	bl	8011136 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20000113 	.word	0x20000113

08007de8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	32b0      	adds	r2, #176	@ 0xb0
 8007dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	32b0      	adds	r2, #176	@ 0xb0
 8007e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e018      	b.n	8007e48 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	7c1b      	ldrb	r3, [r3, #16]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10a      	bne.n	8007e34 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e50 <USBD_CDC_ReceivePacket+0x68>)
 8007e20:	7819      	ldrb	r1, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f009 f9a3 	bl	8011178 <USBD_LL_PrepareReceive>
 8007e32:	e008      	b.n	8007e46 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e34:	4b06      	ldr	r3, [pc, #24]	@ (8007e50 <USBD_CDC_ReceivePacket+0x68>)
 8007e36:	7819      	ldrb	r1, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e3e:	2340      	movs	r3, #64	@ 0x40
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f009 f999 	bl	8011178 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20000114 	.word	0x20000114

08007e54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e01f      	b.n	8007eac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	79fa      	ldrb	r2, [r7, #7]
 8007e9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f009 f813 	bl	8010ecc <USBD_LL_Init>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e025      	b.n	8007f18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	32ae      	adds	r2, #174	@ 0xae
 8007ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00f      	beq.n	8007f08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	32ae      	adds	r2, #174	@ 0xae
 8007ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef8:	f107 020e 	add.w	r2, r7, #14
 8007efc:	4610      	mov	r0, r2
 8007efe:	4798      	blx	r3
 8007f00:	4602      	mov	r2, r0
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f009 f81b 	bl	8010f64 <USBD_LL_Start>
 8007f2e:	4603      	mov	r3, r0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d009      	beq.n	8007f7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	4611      	mov	r1, r2
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	78fa      	ldrb	r2, [r7, #3]
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	4798      	blx	r3
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007fac:	2303      	movs	r3, #3
 8007fae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 f90c 	bl	80091ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007fee:	f003 031f 	and.w	r3, r3, #31
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d01a      	beq.n	800802c <USBD_LL_SetupStage+0x72>
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d822      	bhi.n	8008040 <USBD_LL_SetupStage+0x86>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <USBD_LL_SetupStage+0x4a>
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d00a      	beq.n	8008018 <USBD_LL_SetupStage+0x5e>
 8008002:	e01d      	b.n	8008040 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fb63 	bl	80086d8 <USBD_StdDevReq>
 8008012:	4603      	mov	r3, r0
 8008014:	73fb      	strb	r3, [r7, #15]
      break;
 8008016:	e020      	b.n	800805a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fbcb 	bl	80087bc <USBD_StdItfReq>
 8008026:	4603      	mov	r3, r0
 8008028:	73fb      	strb	r3, [r7, #15]
      break;
 800802a:	e016      	b.n	800805a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fc2d 	bl	8008894 <USBD_StdEPReq>
 800803a:	4603      	mov	r3, r0
 800803c:	73fb      	strb	r3, [r7, #15]
      break;
 800803e:	e00c      	b.n	800805a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008046:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800804a:	b2db      	uxtb	r3, r3
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f008 ffe8 	bl	8011024 <USBD_LL_StallEP>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]
      break;
 8008058:	bf00      	nop
  }

  return ret;
 800805a:	7bfb      	ldrb	r3, [r7, #15]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	460b      	mov	r3, r1
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008076:	7afb      	ldrb	r3, [r7, #11]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d16e      	bne.n	800815a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008082:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800808a:	2b03      	cmp	r3, #3
 800808c:	f040 8098 	bne.w	80081c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	689a      	ldr	r2, [r3, #8]
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	429a      	cmp	r2, r3
 800809a:	d913      	bls.n	80080c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	1ad2      	subs	r2, r2, r3
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	4293      	cmp	r3, r2
 80080b4:	bf28      	it	cs
 80080b6:	4613      	movcs	r3, r2
 80080b8:	461a      	mov	r2, r3
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f001 f988 	bl	80093d2 <USBD_CtlContinueRx>
 80080c2:	e07d      	b.n	80081c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80080ca:	f003 031f 	and.w	r3, r3, #31
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d014      	beq.n	80080fc <USBD_LL_DataOutStage+0x98>
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d81d      	bhi.n	8008112 <USBD_LL_DataOutStage+0xae>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <USBD_LL_DataOutStage+0x7c>
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d003      	beq.n	80080e6 <USBD_LL_DataOutStage+0x82>
 80080de:	e018      	b.n	8008112 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	75bb      	strb	r3, [r7, #22]
            break;
 80080e4:	e018      	b.n	8008118 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	4619      	mov	r1, r3
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 fa64 	bl	80085be <USBD_CoreFindIF>
 80080f6:	4603      	mov	r3, r0
 80080f8:	75bb      	strb	r3, [r7, #22]
            break;
 80080fa:	e00d      	b.n	8008118 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008102:	b2db      	uxtb	r3, r3
 8008104:	4619      	mov	r1, r3
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 fa66 	bl	80085d8 <USBD_CoreFindEP>
 800810c:	4603      	mov	r3, r0
 800810e:	75bb      	strb	r3, [r7, #22]
            break;
 8008110:	e002      	b.n	8008118 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	75bb      	strb	r3, [r7, #22]
            break;
 8008116:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008118:	7dbb      	ldrb	r3, [r7, #22]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d119      	bne.n	8008152 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b03      	cmp	r3, #3
 8008128:	d113      	bne.n	8008152 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800812a:	7dba      	ldrb	r2, [r7, #22]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	32ae      	adds	r2, #174	@ 0xae
 8008130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00b      	beq.n	8008152 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800813a:	7dba      	ldrb	r2, [r7, #22]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008142:	7dba      	ldrb	r2, [r7, #22]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	32ae      	adds	r2, #174	@ 0xae
 8008148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f001 f94e 	bl	80093f4 <USBD_CtlSendStatus>
 8008158:	e032      	b.n	80081c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800815a:	7afb      	ldrb	r3, [r7, #11]
 800815c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008160:	b2db      	uxtb	r3, r3
 8008162:	4619      	mov	r1, r3
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 fa37 	bl	80085d8 <USBD_CoreFindEP>
 800816a:	4603      	mov	r3, r0
 800816c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800816e:	7dbb      	ldrb	r3, [r7, #22]
 8008170:	2bff      	cmp	r3, #255	@ 0xff
 8008172:	d025      	beq.n	80081c0 <USBD_LL_DataOutStage+0x15c>
 8008174:	7dbb      	ldrb	r3, [r7, #22]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d122      	bne.n	80081c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b03      	cmp	r3, #3
 8008184:	d117      	bne.n	80081b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008186:	7dba      	ldrb	r2, [r7, #22]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	32ae      	adds	r2, #174	@ 0xae
 800818c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00f      	beq.n	80081b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008196:	7dba      	ldrb	r2, [r7, #22]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800819e:	7dba      	ldrb	r2, [r7, #22]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	32ae      	adds	r2, #174	@ 0xae
 80081a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	7afa      	ldrb	r2, [r7, #11]
 80081ac:	4611      	mov	r1, r2
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	4798      	blx	r3
 80081b2:	4603      	mov	r3, r0
 80081b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	e000      	b.n	80081c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b086      	sub	sp, #24
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	60f8      	str	r0, [r7, #12]
 80081d2:	460b      	mov	r3, r1
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d16f      	bne.n	80082be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3314      	adds	r3, #20
 80081e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d15a      	bne.n	80082a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d914      	bls.n	8008224 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	689a      	ldr	r2, [r3, #8]
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	1ad2      	subs	r2, r2, r3
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	461a      	mov	r2, r3
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f001 f8b0 	bl	8009376 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008216:	2300      	movs	r3, #0
 8008218:	2200      	movs	r2, #0
 800821a:	2100      	movs	r1, #0
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f008 ffab 	bl	8011178 <USBD_LL_PrepareReceive>
 8008222:	e03f      	b.n	80082a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	429a      	cmp	r2, r3
 800822e:	d11c      	bne.n	800826a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008238:	429a      	cmp	r2, r3
 800823a:	d316      	bcc.n	800826a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008246:	429a      	cmp	r2, r3
 8008248:	d20f      	bcs.n	800826a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800824a:	2200      	movs	r2, #0
 800824c:	2100      	movs	r1, #0
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f001 f891 	bl	8009376 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800825c:	2300      	movs	r3, #0
 800825e:	2200      	movs	r2, #0
 8008260:	2100      	movs	r1, #0
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f008 ff88 	bl	8011178 <USBD_LL_PrepareReceive>
 8008268:	e01c      	b.n	80082a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b03      	cmp	r3, #3
 8008274:	d10f      	bne.n	8008296 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d009      	beq.n	8008296 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008296:	2180      	movs	r1, #128	@ 0x80
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f008 fec3 	bl	8011024 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f001 f8bb 	bl	800941a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d03a      	beq.n	8008324 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f7ff fe42 	bl	8007f38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80082bc:	e032      	b.n	8008324 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	4619      	mov	r1, r3
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f985 	bl	80085d8 <USBD_CoreFindEP>
 80082ce:	4603      	mov	r3, r0
 80082d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	2bff      	cmp	r3, #255	@ 0xff
 80082d6:	d025      	beq.n	8008324 <USBD_LL_DataInStage+0x15a>
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d122      	bne.n	8008324 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d11c      	bne.n	8008324 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80082ea:	7dfa      	ldrb	r2, [r7, #23]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	32ae      	adds	r2, #174	@ 0xae
 80082f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d014      	beq.n	8008324 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80082fa:	7dfa      	ldrb	r2, [r7, #23]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008302:	7dfa      	ldrb	r2, [r7, #23]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	32ae      	adds	r2, #174	@ 0xae
 8008308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	7afa      	ldrb	r2, [r7, #11]
 8008310:	4611      	mov	r1, r2
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	4798      	blx	r3
 8008316:	4603      	mov	r3, r0
 8008318:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800831a:	7dbb      	ldrb	r3, [r7, #22]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008320:	7dbb      	ldrb	r3, [r7, #22]
 8008322:	e000      	b.n	8008326 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008366:	2b00      	cmp	r3, #0
 8008368:	d014      	beq.n	8008394 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00e      	beq.n	8008394 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6852      	ldr	r2, [r2, #4]
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	4611      	mov	r1, r2
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008390:	2303      	movs	r3, #3
 8008392:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008394:	2340      	movs	r3, #64	@ 0x40
 8008396:	2200      	movs	r2, #0
 8008398:	2100      	movs	r1, #0
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f008 fdfd 	bl	8010f9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2240      	movs	r2, #64	@ 0x40
 80083ac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083b0:	2340      	movs	r3, #64	@ 0x40
 80083b2:	2200      	movs	r2, #0
 80083b4:	2180      	movs	r1, #128	@ 0x80
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f008 fdef 	bl	8010f9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2240      	movs	r2, #64	@ 0x40
 80083c6:	621a      	str	r2, [r3, #32]

  return ret;
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	460b      	mov	r3, r1
 80083dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	78fa      	ldrb	r2, [r7, #3]
 80083e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b04      	cmp	r3, #4
 8008404:	d006      	beq.n	8008414 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800840c:	b2da      	uxtb	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2204      	movs	r2, #4
 8008418:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b04      	cmp	r3, #4
 800843c:	d106      	bne.n	800844c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008444:	b2da      	uxtb	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b082      	sub	sp, #8
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b03      	cmp	r3, #3
 800846c:	d110      	bne.n	8008490 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00b      	beq.n	8008490 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d005      	beq.n	8008490 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800848a:	69db      	ldr	r3, [r3, #28]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b082      	sub	sp, #8
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	32ae      	adds	r2, #174	@ 0xae
 80084b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e01c      	b.n	80084f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d115      	bne.n	80084f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	32ae      	adds	r2, #174	@ 0xae
 80084d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	32ae      	adds	r2, #174	@ 0xae
 80084e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	78fa      	ldrb	r2, [r7, #3]
 80084ee:	4611      	mov	r1, r2
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	32ae      	adds	r2, #174	@ 0xae
 8008514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800851c:	2303      	movs	r3, #3
 800851e:	e01c      	b.n	800855a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b03      	cmp	r3, #3
 800852a:	d115      	bne.n	8008558 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	32ae      	adds	r2, #174	@ 0xae
 8008536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	32ae      	adds	r2, #174	@ 0xae
 800854a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008550:	78fa      	ldrb	r2, [r7, #3]
 8008552:	4611      	mov	r1, r2
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00e      	beq.n	80085b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6852      	ldr	r2, [r2, #4]
 80085a2:	b2d2      	uxtb	r2, r2
 80085a4:	4611      	mov	r1, r2
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	4798      	blx	r3
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80085b0:	2303      	movs	r3, #3
 80085b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	460b      	mov	r3, r1
 80085c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80085ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80085e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b086      	sub	sp, #24
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	460b      	mov	r3, r1
 80085fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008606:	2300      	movs	r3, #0
 8008608:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	885b      	ldrh	r3, [r3, #2]
 800860e:	b29b      	uxth	r3, r3
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	7812      	ldrb	r2, [r2, #0]
 8008614:	4293      	cmp	r3, r2
 8008616:	d91f      	bls.n	8008658 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800861e:	e013      	b.n	8008648 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008620:	f107 030a 	add.w	r3, r7, #10
 8008624:	4619      	mov	r1, r3
 8008626:	6978      	ldr	r0, [r7, #20]
 8008628:	f000 f81b 	bl	8008662 <USBD_GetNextDesc>
 800862c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	2b05      	cmp	r3, #5
 8008634:	d108      	bne.n	8008648 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	789b      	ldrb	r3, [r3, #2]
 800863e:	78fa      	ldrb	r2, [r7, #3]
 8008640:	429a      	cmp	r2, r3
 8008642:	d008      	beq.n	8008656 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008644:	2300      	movs	r3, #0
 8008646:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	885b      	ldrh	r3, [r3, #2]
 800864c:	b29a      	uxth	r2, r3
 800864e:	897b      	ldrh	r3, [r7, #10]
 8008650:	429a      	cmp	r2, r3
 8008652:	d8e5      	bhi.n	8008620 <USBD_GetEpDesc+0x2e>
 8008654:	e000      	b.n	8008658 <USBD_GetEpDesc+0x66>
          break;
 8008656:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008658:	693b      	ldr	r3, [r7, #16]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008662:	b480      	push	{r7}
 8008664:	b085      	sub	sp, #20
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	7812      	ldrb	r2, [r2, #0]
 8008678:	4413      	add	r3, r2
 800867a:	b29a      	uxth	r2, r3
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	461a      	mov	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4413      	add	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800868c:	68fb      	ldr	r3, [r7, #12]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800869a:	b480      	push	{r7}
 800869c:	b087      	sub	sp, #28
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	3301      	adds	r3, #1
 80086b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086b8:	8a3b      	ldrh	r3, [r7, #16]
 80086ba:	021b      	lsls	r3, r3, #8
 80086bc:	b21a      	sxth	r2, r3
 80086be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	b21b      	sxth	r3, r3
 80086c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086c8:	89fb      	ldrh	r3, [r7, #14]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
	...

080086d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086ee:	2b40      	cmp	r3, #64	@ 0x40
 80086f0:	d005      	beq.n	80086fe <USBD_StdDevReq+0x26>
 80086f2:	2b40      	cmp	r3, #64	@ 0x40
 80086f4:	d857      	bhi.n	80087a6 <USBD_StdDevReq+0xce>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00f      	beq.n	800871a <USBD_StdDevReq+0x42>
 80086fa:	2b20      	cmp	r3, #32
 80086fc:	d153      	bne.n	80087a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	32ae      	adds	r2, #174	@ 0xae
 8008708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	4798      	blx	r3
 8008714:	4603      	mov	r3, r0
 8008716:	73fb      	strb	r3, [r7, #15]
      break;
 8008718:	e04a      	b.n	80087b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	2b09      	cmp	r3, #9
 8008720:	d83b      	bhi.n	800879a <USBD_StdDevReq+0xc2>
 8008722:	a201      	add	r2, pc, #4	@ (adr r2, 8008728 <USBD_StdDevReq+0x50>)
 8008724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008728:	0800877d 	.word	0x0800877d
 800872c:	08008791 	.word	0x08008791
 8008730:	0800879b 	.word	0x0800879b
 8008734:	08008787 	.word	0x08008787
 8008738:	0800879b 	.word	0x0800879b
 800873c:	0800875b 	.word	0x0800875b
 8008740:	08008751 	.word	0x08008751
 8008744:	0800879b 	.word	0x0800879b
 8008748:	08008773 	.word	0x08008773
 800874c:	08008765 	.word	0x08008765
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fa3c 	bl	8008bd0 <USBD_GetDescriptor>
          break;
 8008758:	e024      	b.n	80087a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fba1 	bl	8008ea4 <USBD_SetAddress>
          break;
 8008762:	e01f      	b.n	80087a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fbe0 	bl	8008f2c <USBD_SetConfig>
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]
          break;
 8008770:	e018      	b.n	80087a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fc83 	bl	8009080 <USBD_GetConfig>
          break;
 800877a:	e013      	b.n	80087a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fcb4 	bl	80090ec <USBD_GetStatus>
          break;
 8008784:	e00e      	b.n	80087a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fce3 	bl	8009154 <USBD_SetFeature>
          break;
 800878e:	e009      	b.n	80087a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fd07 	bl	80091a6 <USBD_ClrFeature>
          break;
 8008798:	e004      	b.n	80087a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fd5e 	bl	800925e <USBD_CtlError>
          break;
 80087a2:	bf00      	nop
      }
      break;
 80087a4:	e004      	b.n	80087b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fd58 	bl	800925e <USBD_CtlError>
      break;
 80087ae:	bf00      	nop
  }

  return ret;
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop

080087bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087d2:	2b40      	cmp	r3, #64	@ 0x40
 80087d4:	d005      	beq.n	80087e2 <USBD_StdItfReq+0x26>
 80087d6:	2b40      	cmp	r3, #64	@ 0x40
 80087d8:	d852      	bhi.n	8008880 <USBD_StdItfReq+0xc4>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d001      	beq.n	80087e2 <USBD_StdItfReq+0x26>
 80087de:	2b20      	cmp	r3, #32
 80087e0:	d14e      	bne.n	8008880 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d840      	bhi.n	8008872 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	889b      	ldrh	r3, [r3, #4]
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d836      	bhi.n	8008868 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	889b      	ldrh	r3, [r3, #4]
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7ff fedb 	bl	80085be <USBD_CoreFindIF>
 8008808:	4603      	mov	r3, r0
 800880a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	2bff      	cmp	r3, #255	@ 0xff
 8008810:	d01d      	beq.n	800884e <USBD_StdItfReq+0x92>
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d11a      	bne.n	800884e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008818:	7bba      	ldrb	r2, [r7, #14]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	32ae      	adds	r2, #174	@ 0xae
 800881e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00f      	beq.n	8008848 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008828:	7bba      	ldrb	r2, [r7, #14]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008830:	7bba      	ldrb	r2, [r7, #14]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	32ae      	adds	r2, #174	@ 0xae
 8008836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	4798      	blx	r3
 8008842:	4603      	mov	r3, r0
 8008844:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008846:	e004      	b.n	8008852 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008848:	2303      	movs	r3, #3
 800884a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800884c:	e001      	b.n	8008852 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800884e:	2303      	movs	r3, #3
 8008850:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	88db      	ldrh	r3, [r3, #6]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d110      	bne.n	800887c <USBD_StdItfReq+0xc0>
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10d      	bne.n	800887c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fdc7 	bl	80093f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008866:	e009      	b.n	800887c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fcf7 	bl	800925e <USBD_CtlError>
          break;
 8008870:	e004      	b.n	800887c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fcf2 	bl	800925e <USBD_CtlError>
          break;
 800887a:	e000      	b.n	800887e <USBD_StdItfReq+0xc2>
          break;
 800887c:	bf00      	nop
      }
      break;
 800887e:	e004      	b.n	800888a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fceb 	bl	800925e <USBD_CtlError>
      break;
 8008888:	bf00      	nop
  }

  return ret;
 800888a:	7bfb      	ldrb	r3, [r7, #15]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	889b      	ldrh	r3, [r3, #4]
 80088a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088b0:	2b40      	cmp	r3, #64	@ 0x40
 80088b2:	d007      	beq.n	80088c4 <USBD_StdEPReq+0x30>
 80088b4:	2b40      	cmp	r3, #64	@ 0x40
 80088b6:	f200 817f 	bhi.w	8008bb8 <USBD_StdEPReq+0x324>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d02a      	beq.n	8008914 <USBD_StdEPReq+0x80>
 80088be:	2b20      	cmp	r3, #32
 80088c0:	f040 817a 	bne.w	8008bb8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff fe85 	bl	80085d8 <USBD_CoreFindEP>
 80088ce:	4603      	mov	r3, r0
 80088d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088d2:	7b7b      	ldrb	r3, [r7, #13]
 80088d4:	2bff      	cmp	r3, #255	@ 0xff
 80088d6:	f000 8174 	beq.w	8008bc2 <USBD_StdEPReq+0x32e>
 80088da:	7b7b      	ldrb	r3, [r7, #13]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f040 8170 	bne.w	8008bc2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80088e2:	7b7a      	ldrb	r2, [r7, #13]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80088ea:	7b7a      	ldrb	r2, [r7, #13]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	32ae      	adds	r2, #174	@ 0xae
 80088f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 8163 	beq.w	8008bc2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80088fc:	7b7a      	ldrb	r2, [r7, #13]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	32ae      	adds	r2, #174	@ 0xae
 8008902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4798      	blx	r3
 800890e:	4603      	mov	r3, r0
 8008910:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008912:	e156      	b.n	8008bc2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	785b      	ldrb	r3, [r3, #1]
 8008918:	2b03      	cmp	r3, #3
 800891a:	d008      	beq.n	800892e <USBD_StdEPReq+0x9a>
 800891c:	2b03      	cmp	r3, #3
 800891e:	f300 8145 	bgt.w	8008bac <USBD_StdEPReq+0x318>
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 809b 	beq.w	8008a5e <USBD_StdEPReq+0x1ca>
 8008928:	2b01      	cmp	r3, #1
 800892a:	d03c      	beq.n	80089a6 <USBD_StdEPReq+0x112>
 800892c:	e13e      	b.n	8008bac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b02      	cmp	r3, #2
 8008938:	d002      	beq.n	8008940 <USBD_StdEPReq+0xac>
 800893a:	2b03      	cmp	r3, #3
 800893c:	d016      	beq.n	800896c <USBD_StdEPReq+0xd8>
 800893e:	e02c      	b.n	800899a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00d      	beq.n	8008962 <USBD_StdEPReq+0xce>
 8008946:	7bbb      	ldrb	r3, [r7, #14]
 8008948:	2b80      	cmp	r3, #128	@ 0x80
 800894a:	d00a      	beq.n	8008962 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f008 fb67 	bl	8011024 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008956:	2180      	movs	r1, #128	@ 0x80
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f008 fb63 	bl	8011024 <USBD_LL_StallEP>
 800895e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008960:	e020      	b.n	80089a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fc7a 	bl	800925e <USBD_CtlError>
              break;
 800896a:	e01b      	b.n	80089a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	885b      	ldrh	r3, [r3, #2]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10e      	bne.n	8008992 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00b      	beq.n	8008992 <USBD_StdEPReq+0xfe>
 800897a:	7bbb      	ldrb	r3, [r7, #14]
 800897c:	2b80      	cmp	r3, #128	@ 0x80
 800897e:	d008      	beq.n	8008992 <USBD_StdEPReq+0xfe>
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	88db      	ldrh	r3, [r3, #6]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d104      	bne.n	8008992 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f008 fb49 	bl	8011024 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fd2e 	bl	80093f4 <USBD_CtlSendStatus>

              break;
 8008998:	e004      	b.n	80089a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fc5e 	bl	800925e <USBD_CtlError>
              break;
 80089a2:	bf00      	nop
          }
          break;
 80089a4:	e107      	b.n	8008bb6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d002      	beq.n	80089b8 <USBD_StdEPReq+0x124>
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d016      	beq.n	80089e4 <USBD_StdEPReq+0x150>
 80089b6:	e04b      	b.n	8008a50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00d      	beq.n	80089da <USBD_StdEPReq+0x146>
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	2b80      	cmp	r3, #128	@ 0x80
 80089c2:	d00a      	beq.n	80089da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089c4:	7bbb      	ldrb	r3, [r7, #14]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f008 fb2b 	bl	8011024 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ce:	2180      	movs	r1, #128	@ 0x80
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f008 fb27 	bl	8011024 <USBD_LL_StallEP>
 80089d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089d8:	e040      	b.n	8008a5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fc3e 	bl	800925e <USBD_CtlError>
              break;
 80089e2:	e03b      	b.n	8008a5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	885b      	ldrh	r3, [r3, #2]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d136      	bne.n	8008a5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d004      	beq.n	8008a00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f008 fb31 	bl	8011062 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fcf7 	bl	80093f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff fde4 	bl	80085d8 <USBD_CoreFindEP>
 8008a10:	4603      	mov	r3, r0
 8008a12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a14:	7b7b      	ldrb	r3, [r7, #13]
 8008a16:	2bff      	cmp	r3, #255	@ 0xff
 8008a18:	d01f      	beq.n	8008a5a <USBD_StdEPReq+0x1c6>
 8008a1a:	7b7b      	ldrb	r3, [r7, #13]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d11c      	bne.n	8008a5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008a20:	7b7a      	ldrb	r2, [r7, #13]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008a28:	7b7a      	ldrb	r2, [r7, #13]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	32ae      	adds	r2, #174	@ 0xae
 8008a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d010      	beq.n	8008a5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a38:	7b7a      	ldrb	r2, [r7, #13]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	32ae      	adds	r2, #174	@ 0xae
 8008a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	4798      	blx	r3
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008a4e:	e004      	b.n	8008a5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fc03 	bl	800925e <USBD_CtlError>
              break;
 8008a58:	e000      	b.n	8008a5c <USBD_StdEPReq+0x1c8>
              break;
 8008a5a:	bf00      	nop
          }
          break;
 8008a5c:	e0ab      	b.n	8008bb6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d002      	beq.n	8008a70 <USBD_StdEPReq+0x1dc>
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d032      	beq.n	8008ad4 <USBD_StdEPReq+0x240>
 8008a6e:	e097      	b.n	8008ba0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d007      	beq.n	8008a86 <USBD_StdEPReq+0x1f2>
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	2b80      	cmp	r3, #128	@ 0x80
 8008a7a:	d004      	beq.n	8008a86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fbed 	bl	800925e <USBD_CtlError>
                break;
 8008a84:	e091      	b.n	8008baa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	da0b      	bge.n	8008aa6 <USBD_StdEPReq+0x212>
 8008a8e:	7bbb      	ldrb	r3, [r7, #14]
 8008a90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a94:	4613      	mov	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	3310      	adds	r3, #16
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	e00b      	b.n	8008abe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
 8008aa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	4413      	add	r3, r2
 8008abc:	3304      	adds	r3, #4
 8008abe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2202      	movs	r2, #2
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fc37 	bl	8009340 <USBD_CtlSendData>
              break;
 8008ad2:	e06a      	b.n	8008baa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	da11      	bge.n	8008b00 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	f003 020f 	and.w	r2, r3, #15
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	3324      	adds	r3, #36	@ 0x24
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d117      	bne.n	8008b26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fbb0 	bl	800925e <USBD_CtlError>
                  break;
 8008afe:	e054      	b.n	8008baa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	f003 020f 	and.w	r2, r3, #15
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	440b      	add	r3, r1
 8008b12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d104      	bne.n	8008b26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fb9d 	bl	800925e <USBD_CtlError>
                  break;
 8008b24:	e041      	b.n	8008baa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	da0b      	bge.n	8008b46 <USBD_StdEPReq+0x2b2>
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	3310      	adds	r3, #16
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	4413      	add	r3, r2
 8008b42:	3304      	adds	r3, #4
 8008b44:	e00b      	b.n	8008b5e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	3304      	adds	r3, #4
 8008b5e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <USBD_StdEPReq+0x2d8>
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	2b80      	cmp	r3, #128	@ 0x80
 8008b6a:	d103      	bne.n	8008b74 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	e00e      	b.n	8008b92 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f008 fa91 	bl	80110a0 <USBD_LL_IsStallEP>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2201      	movs	r2, #1
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	e002      	b.n	8008b92 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	2202      	movs	r2, #2
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fbd1 	bl	8009340 <USBD_CtlSendData>
              break;
 8008b9e:	e004      	b.n	8008baa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fb5b 	bl	800925e <USBD_CtlError>
              break;
 8008ba8:	bf00      	nop
          }
          break;
 8008baa:	e004      	b.n	8008bb6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fb55 	bl	800925e <USBD_CtlError>
          break;
 8008bb4:	bf00      	nop
      }
      break;
 8008bb6:	e005      	b.n	8008bc4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fb4f 	bl	800925e <USBD_CtlError>
      break;
 8008bc0:	e000      	b.n	8008bc4 <USBD_StdEPReq+0x330>
      break;
 8008bc2:	bf00      	nop
  }

  return ret;
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	885b      	ldrh	r3, [r3, #2]
 8008bea:	0a1b      	lsrs	r3, r3, #8
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	2b06      	cmp	r3, #6
 8008bf2:	f200 8128 	bhi.w	8008e46 <USBD_GetDescriptor+0x276>
 8008bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bfc <USBD_GetDescriptor+0x2c>)
 8008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfc:	08008c19 	.word	0x08008c19
 8008c00:	08008c31 	.word	0x08008c31
 8008c04:	08008c71 	.word	0x08008c71
 8008c08:	08008e47 	.word	0x08008e47
 8008c0c:	08008e47 	.word	0x08008e47
 8008c10:	08008de7 	.word	0x08008de7
 8008c14:	08008e13 	.word	0x08008e13
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	7c12      	ldrb	r2, [r2, #16]
 8008c24:	f107 0108 	add.w	r1, r7, #8
 8008c28:	4610      	mov	r0, r2
 8008c2a:	4798      	blx	r3
 8008c2c:	60f8      	str	r0, [r7, #12]
      break;
 8008c2e:	e112      	b.n	8008e56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	7c1b      	ldrb	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10d      	bne.n	8008c54 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c40:	f107 0208 	add.w	r2, r7, #8
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
 8008c48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	2202      	movs	r2, #2
 8008c50:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c52:	e100      	b.n	8008e56 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5c:	f107 0208 	add.w	r2, r7, #8
 8008c60:	4610      	mov	r0, r2
 8008c62:	4798      	blx	r3
 8008c64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	701a      	strb	r2, [r3, #0]
      break;
 8008c6e:	e0f2      	b.n	8008e56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	885b      	ldrh	r3, [r3, #2]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b05      	cmp	r3, #5
 8008c78:	f200 80ac 	bhi.w	8008dd4 <USBD_GetDescriptor+0x204>
 8008c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c84 <USBD_GetDescriptor+0xb4>)
 8008c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c82:	bf00      	nop
 8008c84:	08008c9d 	.word	0x08008c9d
 8008c88:	08008cd1 	.word	0x08008cd1
 8008c8c:	08008d05 	.word	0x08008d05
 8008c90:	08008d39 	.word	0x08008d39
 8008c94:	08008d6d 	.word	0x08008d6d
 8008c98:	08008da1 	.word	0x08008da1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00b      	beq.n	8008cc0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	7c12      	ldrb	r2, [r2, #16]
 8008cb4:	f107 0108 	add.w	r1, r7, #8
 8008cb8:	4610      	mov	r0, r2
 8008cba:	4798      	blx	r3
 8008cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cbe:	e091      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 facb 	bl	800925e <USBD_CtlError>
            err++;
 8008cc8:	7afb      	ldrb	r3, [r7, #11]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cce:	e089      	b.n	8008de4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00b      	beq.n	8008cf4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	7c12      	ldrb	r2, [r2, #16]
 8008ce8:	f107 0108 	add.w	r1, r7, #8
 8008cec:	4610      	mov	r0, r2
 8008cee:	4798      	blx	r3
 8008cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cf2:	e077      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fab1 	bl	800925e <USBD_CtlError>
            err++;
 8008cfc:	7afb      	ldrb	r3, [r7, #11]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	72fb      	strb	r3, [r7, #11]
          break;
 8008d02:	e06f      	b.n	8008de4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00b      	beq.n	8008d28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	7c12      	ldrb	r2, [r2, #16]
 8008d1c:	f107 0108 	add.w	r1, r7, #8
 8008d20:	4610      	mov	r0, r2
 8008d22:	4798      	blx	r3
 8008d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d26:	e05d      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fa97 	bl	800925e <USBD_CtlError>
            err++;
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	3301      	adds	r3, #1
 8008d34:	72fb      	strb	r3, [r7, #11]
          break;
 8008d36:	e055      	b.n	8008de4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	7c12      	ldrb	r2, [r2, #16]
 8008d50:	f107 0108 	add.w	r1, r7, #8
 8008d54:	4610      	mov	r0, r2
 8008d56:	4798      	blx	r3
 8008d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d5a:	e043      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa7d 	bl	800925e <USBD_CtlError>
            err++;
 8008d64:	7afb      	ldrb	r3, [r7, #11]
 8008d66:	3301      	adds	r3, #1
 8008d68:	72fb      	strb	r3, [r7, #11]
          break;
 8008d6a:	e03b      	b.n	8008de4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00b      	beq.n	8008d90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	7c12      	ldrb	r2, [r2, #16]
 8008d84:	f107 0108 	add.w	r1, r7, #8
 8008d88:	4610      	mov	r0, r2
 8008d8a:	4798      	blx	r3
 8008d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d8e:	e029      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa63 	bl	800925e <USBD_CtlError>
            err++;
 8008d98:	7afb      	ldrb	r3, [r7, #11]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d9e:	e021      	b.n	8008de4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00b      	beq.n	8008dc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	7c12      	ldrb	r2, [r2, #16]
 8008db8:	f107 0108 	add.w	r1, r7, #8
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4798      	blx	r3
 8008dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dc2:	e00f      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fa49 	bl	800925e <USBD_CtlError>
            err++;
 8008dcc:	7afb      	ldrb	r3, [r7, #11]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008dd2:	e007      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa41 	bl	800925e <USBD_CtlError>
          err++;
 8008ddc:	7afb      	ldrb	r3, [r7, #11]
 8008dde:	3301      	adds	r3, #1
 8008de0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008de2:	bf00      	nop
      }
      break;
 8008de4:	e037      	b.n	8008e56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	7c1b      	ldrb	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d109      	bne.n	8008e02 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008df6:	f107 0208 	add.w	r2, r7, #8
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	4798      	blx	r3
 8008dfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e00:	e029      	b.n	8008e56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fa2a 	bl	800925e <USBD_CtlError>
        err++;
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008e10:	e021      	b.n	8008e56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	7c1b      	ldrb	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10d      	bne.n	8008e36 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e22:	f107 0208 	add.w	r2, r7, #8
 8008e26:	4610      	mov	r0, r2
 8008e28:	4798      	blx	r3
 8008e2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	2207      	movs	r2, #7
 8008e32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e34:	e00f      	b.n	8008e56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fa10 	bl	800925e <USBD_CtlError>
        err++;
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
 8008e40:	3301      	adds	r3, #1
 8008e42:	72fb      	strb	r3, [r7, #11]
      break;
 8008e44:	e007      	b.n	8008e56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fa08 	bl	800925e <USBD_CtlError>
      err++;
 8008e4e:	7afb      	ldrb	r3, [r7, #11]
 8008e50:	3301      	adds	r3, #1
 8008e52:	72fb      	strb	r3, [r7, #11]
      break;
 8008e54:	bf00      	nop
  }

  if (err != 0U)
 8008e56:	7afb      	ldrb	r3, [r7, #11]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d11e      	bne.n	8008e9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	88db      	ldrh	r3, [r3, #6]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d016      	beq.n	8008e92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008e64:	893b      	ldrh	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00e      	beq.n	8008e88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	88da      	ldrh	r2, [r3, #6]
 8008e6e:	893b      	ldrh	r3, [r7, #8]
 8008e70:	4293      	cmp	r3, r2
 8008e72:	bf28      	it	cs
 8008e74:	4613      	movcs	r3, r2
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e7a:	893b      	ldrh	r3, [r7, #8]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	68f9      	ldr	r1, [r7, #12]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fa5d 	bl	8009340 <USBD_CtlSendData>
 8008e86:	e009      	b.n	8008e9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f9e7 	bl	800925e <USBD_CtlError>
 8008e90:	e004      	b.n	8008e9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 faae 	bl	80093f4 <USBD_CtlSendStatus>
 8008e98:	e000      	b.n	8008e9c <USBD_GetDescriptor+0x2cc>
    return;
 8008e9a:	bf00      	nop
  }
}
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop

08008ea4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	889b      	ldrh	r3, [r3, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d131      	bne.n	8008f1a <USBD_SetAddress+0x76>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	88db      	ldrh	r3, [r3, #6]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d12d      	bne.n	8008f1a <USBD_SetAddress+0x76>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	885b      	ldrh	r3, [r3, #2]
 8008ec2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ec4:	d829      	bhi.n	8008f1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	885b      	ldrh	r3, [r3, #2]
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ed0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d104      	bne.n	8008ee8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f9bc 	bl	800925e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee6:	e01d      	b.n	8008f24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	7bfa      	ldrb	r2, [r7, #15]
 8008eec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f008 f8ff 	bl	80110f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fa7a 	bl	80093f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d004      	beq.n	8008f10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f0e:	e009      	b.n	8008f24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f18:	e004      	b.n	8008f24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f99e 	bl	800925e <USBD_CtlError>
  }
}
 8008f22:	bf00      	nop
 8008f24:	bf00      	nop
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	885b      	ldrh	r3, [r3, #2]
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	4b4e      	ldr	r3, [pc, #312]	@ (800907c <USBD_SetConfig+0x150>)
 8008f42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f44:	4b4d      	ldr	r3, [pc, #308]	@ (800907c <USBD_SetConfig+0x150>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d905      	bls.n	8008f58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f985 	bl	800925e <USBD_CtlError>
    return USBD_FAIL;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e08c      	b.n	8009072 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d002      	beq.n	8008f6a <USBD_SetConfig+0x3e>
 8008f64:	2b03      	cmp	r3, #3
 8008f66:	d029      	beq.n	8008fbc <USBD_SetConfig+0x90>
 8008f68:	e075      	b.n	8009056 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008f6a:	4b44      	ldr	r3, [pc, #272]	@ (800907c <USBD_SetConfig+0x150>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d020      	beq.n	8008fb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008f72:	4b42      	ldr	r3, [pc, #264]	@ (800907c <USBD_SetConfig+0x150>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800907c <USBD_SetConfig+0x150>)
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7fe ffe3 	bl	8007f4e <USBD_SetClassConfig>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d008      	beq.n	8008fa4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f962 	bl	800925e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008fa2:	e065      	b.n	8009070 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fa25 	bl	80093f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2203      	movs	r2, #3
 8008fae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008fb2:	e05d      	b.n	8009070 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fa1d 	bl	80093f4 <USBD_CtlSendStatus>
      break;
 8008fba:	e059      	b.n	8009070 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008fbc:	4b2f      	ldr	r3, [pc, #188]	@ (800907c <USBD_SetConfig+0x150>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d112      	bne.n	8008fea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800907c <USBD_SetConfig+0x150>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fd6:	4b29      	ldr	r3, [pc, #164]	@ (800907c <USBD_SetConfig+0x150>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7fe ffd2 	bl	8007f86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fa06 	bl	80093f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008fe8:	e042      	b.n	8009070 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008fea:	4b24      	ldr	r3, [pc, #144]	@ (800907c <USBD_SetConfig+0x150>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d02a      	beq.n	800904e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7fe ffc0 	bl	8007f86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009006:	4b1d      	ldr	r3, [pc, #116]	@ (800907c <USBD_SetConfig+0x150>)
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009010:	4b1a      	ldr	r3, [pc, #104]	@ (800907c <USBD_SetConfig+0x150>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7fe ff99 	bl	8007f4e <USBD_SetClassConfig>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00f      	beq.n	8009046 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f918 	bl	800925e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7fe ffa5 	bl	8007f86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009044:	e014      	b.n	8009070 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f9d4 	bl	80093f4 <USBD_CtlSendStatus>
      break;
 800904c:	e010      	b.n	8009070 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f9d0 	bl	80093f4 <USBD_CtlSendStatus>
      break;
 8009054:	e00c      	b.n	8009070 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f900 	bl	800925e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800905e:	4b07      	ldr	r3, [pc, #28]	@ (800907c <USBD_SetConfig+0x150>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7fe ff8e 	bl	8007f86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800906a:	2303      	movs	r3, #3
 800906c:	73fb      	strb	r3, [r7, #15]
      break;
 800906e:	bf00      	nop
  }

  return ret;
 8009070:	7bfb      	ldrb	r3, [r7, #15]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	2000238c 	.word	0x2000238c

08009080 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	88db      	ldrh	r3, [r3, #6]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d004      	beq.n	800909c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f8e2 	bl	800925e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800909a:	e023      	b.n	80090e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	dc02      	bgt.n	80090ae <USBD_GetConfig+0x2e>
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	dc03      	bgt.n	80090b4 <USBD_GetConfig+0x34>
 80090ac:	e015      	b.n	80090da <USBD_GetConfig+0x5a>
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d00b      	beq.n	80090ca <USBD_GetConfig+0x4a>
 80090b2:	e012      	b.n	80090da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3308      	adds	r3, #8
 80090be:	2201      	movs	r2, #1
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f93c 	bl	8009340 <USBD_CtlSendData>
        break;
 80090c8:	e00c      	b.n	80090e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3304      	adds	r3, #4
 80090ce:	2201      	movs	r2, #1
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f934 	bl	8009340 <USBD_CtlSendData>
        break;
 80090d8:	e004      	b.n	80090e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f8be 	bl	800925e <USBD_CtlError>
        break;
 80090e2:	bf00      	nop
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	3b01      	subs	r3, #1
 8009100:	2b02      	cmp	r3, #2
 8009102:	d81e      	bhi.n	8009142 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	88db      	ldrh	r3, [r3, #6]
 8009108:	2b02      	cmp	r3, #2
 800910a:	d004      	beq.n	8009116 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f8a5 	bl	800925e <USBD_CtlError>
        break;
 8009114:	e01a      	b.n	800914c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009122:	2b00      	cmp	r3, #0
 8009124:	d005      	beq.n	8009132 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	f043 0202 	orr.w	r2, r3, #2
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	330c      	adds	r3, #12
 8009136:	2202      	movs	r2, #2
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f900 	bl	8009340 <USBD_CtlSendData>
      break;
 8009140:	e004      	b.n	800914c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f88a 	bl	800925e <USBD_CtlError>
      break;
 800914a:	bf00      	nop
  }
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	885b      	ldrh	r3, [r3, #2]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d107      	bne.n	8009176 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f940 	bl	80093f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009174:	e013      	b.n	800919e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	885b      	ldrh	r3, [r3, #2]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d10b      	bne.n	8009196 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	889b      	ldrh	r3, [r3, #4]
 8009182:	0a1b      	lsrs	r3, r3, #8
 8009184:	b29b      	uxth	r3, r3
 8009186:	b2da      	uxtb	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f930 	bl	80093f4 <USBD_CtlSendStatus>
}
 8009194:	e003      	b.n	800919e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f860 	bl	800925e <USBD_CtlError>
}
 800919e:	bf00      	nop
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b082      	sub	sp, #8
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	3b01      	subs	r3, #1
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d80b      	bhi.n	80091d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	885b      	ldrh	r3, [r3, #2]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d10c      	bne.n	80091e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f910 	bl	80093f4 <USBD_CtlSendStatus>
      }
      break;
 80091d4:	e004      	b.n	80091e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f840 	bl	800925e <USBD_CtlError>
      break;
 80091de:	e000      	b.n	80091e2 <USBD_ClrFeature+0x3c>
      break;
 80091e0:	bf00      	nop
  }
}
 80091e2:	bf00      	nop
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	781a      	ldrb	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3301      	adds	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	781a      	ldrb	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3301      	adds	r3, #1
 8009212:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f7ff fa40 	bl	800869a <SWAPBYTE>
 800921a:	4603      	mov	r3, r0
 800921c:	461a      	mov	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3301      	adds	r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3301      	adds	r3, #1
 800922c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f7ff fa33 	bl	800869a <SWAPBYTE>
 8009234:	4603      	mov	r3, r0
 8009236:	461a      	mov	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	3301      	adds	r3, #1
 8009240:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3301      	adds	r3, #1
 8009246:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f7ff fa26 	bl	800869a <SWAPBYTE>
 800924e:	4603      	mov	r3, r0
 8009250:	461a      	mov	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	80da      	strh	r2, [r3, #6]
}
 8009256:	bf00      	nop
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009268:	2180      	movs	r1, #128	@ 0x80
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f007 feda 	bl	8011024 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009270:	2100      	movs	r1, #0
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f007 fed6 	bl	8011024 <USBD_LL_StallEP>
}
 8009278:	bf00      	nop
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d036      	beq.n	8009304 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800929a:	6938      	ldr	r0, [r7, #16]
 800929c:	f000 f836 	bl	800930c <USBD_GetLen>
 80092a0:	4603      	mov	r3, r0
 80092a2:	3301      	adds	r3, #1
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	4413      	add	r3, r2
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	7812      	ldrb	r2, [r2, #0]
 80092b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
 80092bc:	3301      	adds	r3, #1
 80092be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	4413      	add	r3, r2
 80092c6:	2203      	movs	r2, #3
 80092c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
 80092cc:	3301      	adds	r3, #1
 80092ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80092d0:	e013      	b.n	80092fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	4413      	add	r3, r2
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	7812      	ldrb	r2, [r2, #0]
 80092dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	3301      	adds	r3, #1
 80092e2:	613b      	str	r3, [r7, #16]
    idx++;
 80092e4:	7dfb      	ldrb	r3, [r7, #23]
 80092e6:	3301      	adds	r3, #1
 80092e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	4413      	add	r3, r2
 80092f0:	2200      	movs	r2, #0
 80092f2:	701a      	strb	r2, [r3, #0]
    idx++;
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
 80092f6:	3301      	adds	r3, #1
 80092f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e7      	bne.n	80092d2 <USBD_GetString+0x52>
 8009302:	e000      	b.n	8009306 <USBD_GetString+0x86>
    return;
 8009304:	bf00      	nop
  }
}
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009314:	2300      	movs	r3, #0
 8009316:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800931c:	e005      	b.n	800932a <USBD_GetLen+0x1e>
  {
    len++;
 800931e:	7bfb      	ldrb	r3, [r7, #15]
 8009320:	3301      	adds	r3, #1
 8009322:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	3301      	adds	r3, #1
 8009328:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1f5      	bne.n	800931e <USBD_GetLen+0x12>
  }

  return len;
 8009332:	7bfb      	ldrb	r3, [r7, #15]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2202      	movs	r2, #2
 8009350:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	2100      	movs	r1, #0
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f007 fee5 	bl	8011136 <USBD_LL_Transmit>

  return USBD_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	2100      	movs	r1, #0
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f007 fed4 	bl	8011136 <USBD_LL_Transmit>

  return USBD_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2203      	movs	r2, #3
 80093a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	2100      	movs	r1, #0
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f007 fed8 	bl	8011178 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	60f8      	str	r0, [r7, #12]
 80093da:	60b9      	str	r1, [r7, #8]
 80093dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	2100      	movs	r1, #0
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f007 fec7 	bl	8011178 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2204      	movs	r2, #4
 8009400:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009404:	2300      	movs	r3, #0
 8009406:	2200      	movs	r2, #0
 8009408:	2100      	movs	r1, #0
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f007 fe93 	bl	8011136 <USBD_LL_Transmit>

  return USBD_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b082      	sub	sp, #8
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2205      	movs	r2, #5
 8009426:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800942a:	2300      	movs	r3, #0
 800942c:	2200      	movs	r2, #0
 800942e:	2100      	movs	r1, #0
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f007 fea1 	bl	8011178 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800944a:	79fb      	ldrb	r3, [r7, #7]
 800944c:	4a08      	ldr	r2, [pc, #32]	@ (8009470 <disk_status+0x30>)
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	79fa      	ldrb	r2, [r7, #7]
 8009458:	4905      	ldr	r1, [pc, #20]	@ (8009470 <disk_status+0x30>)
 800945a:	440a      	add	r2, r1
 800945c:	7a12      	ldrb	r2, [r2, #8]
 800945e:	4610      	mov	r0, r2
 8009460:	4798      	blx	r3
 8009462:	4603      	mov	r3, r0
 8009464:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009466:	7bfb      	ldrb	r3, [r7, #15]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	200025b8 	.word	0x200025b8

08009474 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	4603      	mov	r3, r0
 800947c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009482:	79fb      	ldrb	r3, [r7, #7]
 8009484:	4a0e      	ldr	r2, [pc, #56]	@ (80094c0 <disk_initialize+0x4c>)
 8009486:	5cd3      	ldrb	r3, [r2, r3]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d114      	bne.n	80094b6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800948c:	79fb      	ldrb	r3, [r7, #7]
 800948e:	4a0c      	ldr	r2, [pc, #48]	@ (80094c0 <disk_initialize+0x4c>)
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	79fa      	ldrb	r2, [r7, #7]
 800949a:	4909      	ldr	r1, [pc, #36]	@ (80094c0 <disk_initialize+0x4c>)
 800949c:	440a      	add	r2, r1
 800949e:	7a12      	ldrb	r2, [r2, #8]
 80094a0:	4610      	mov	r0, r2
 80094a2:	4798      	blx	r3
 80094a4:	4603      	mov	r3, r0
 80094a6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d103      	bne.n	80094b6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	4a03      	ldr	r2, [pc, #12]	@ (80094c0 <disk_initialize+0x4c>)
 80094b2:	2101      	movs	r1, #1
 80094b4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	200025b8 	.word	0x200025b8

080094c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80094c4:	b590      	push	{r4, r7, lr}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60b9      	str	r1, [r7, #8]
 80094cc:	607a      	str	r2, [r7, #4]
 80094ce:	603b      	str	r3, [r7, #0]
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009500 <disk_read+0x3c>)
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	689c      	ldr	r4, [r3, #8]
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	4a07      	ldr	r2, [pc, #28]	@ (8009500 <disk_read+0x3c>)
 80094e4:	4413      	add	r3, r2
 80094e6:	7a18      	ldrb	r0, [r3, #8]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	68b9      	ldr	r1, [r7, #8]
 80094ee:	47a0      	blx	r4
 80094f0:	4603      	mov	r3, r0
 80094f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd90      	pop	{r4, r7, pc}
 80094fe:	bf00      	nop
 8009500:	200025b8 	.word	0x200025b8

08009504 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009504:	b590      	push	{r4, r7, lr}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	607a      	str	r2, [r7, #4]
 800950e:	603b      	str	r3, [r7, #0]
 8009510:	4603      	mov	r3, r0
 8009512:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4a0a      	ldr	r2, [pc, #40]	@ (8009540 <disk_write+0x3c>)
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	68dc      	ldr	r4, [r3, #12]
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	4a07      	ldr	r2, [pc, #28]	@ (8009540 <disk_write+0x3c>)
 8009524:	4413      	add	r3, r2
 8009526:	7a18      	ldrb	r0, [r3, #8]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	68b9      	ldr	r1, [r7, #8]
 800952e:	47a0      	blx	r4
 8009530:	4603      	mov	r3, r0
 8009532:	75fb      	strb	r3, [r7, #23]
  return res;
 8009534:	7dfb      	ldrb	r3, [r7, #23]
}
 8009536:	4618      	mov	r0, r3
 8009538:	371c      	adds	r7, #28
 800953a:	46bd      	mov	sp, r7
 800953c:	bd90      	pop	{r4, r7, pc}
 800953e:	bf00      	nop
 8009540:	200025b8 	.word	0x200025b8

08009544 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	4603      	mov	r3, r0
 800954c:	603a      	str	r2, [r7, #0]
 800954e:	71fb      	strb	r3, [r7, #7]
 8009550:	460b      	mov	r3, r1
 8009552:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	4a09      	ldr	r2, [pc, #36]	@ (800957c <disk_ioctl+0x38>)
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	79fa      	ldrb	r2, [r7, #7]
 8009562:	4906      	ldr	r1, [pc, #24]	@ (800957c <disk_ioctl+0x38>)
 8009564:	440a      	add	r2, r1
 8009566:	7a10      	ldrb	r0, [r2, #8]
 8009568:	79b9      	ldrb	r1, [r7, #6]
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	4798      	blx	r3
 800956e:	4603      	mov	r3, r0
 8009570:	73fb      	strb	r3, [r7, #15]
  return res;
 8009572:	7bfb      	ldrb	r3, [r7, #15]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	200025b8 	.word	0x200025b8

08009580 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3301      	adds	r3, #1
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009590:	89fb      	ldrh	r3, [r7, #14]
 8009592:	021b      	lsls	r3, r3, #8
 8009594:	b21a      	sxth	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	b21b      	sxth	r3, r3
 800959c:	4313      	orrs	r3, r2
 800959e:	b21b      	sxth	r3, r3
 80095a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80095a2:	89fb      	ldrh	r3, [r7, #14]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3714      	adds	r7, #20
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3303      	adds	r3, #3
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	3202      	adds	r2, #2
 80095c8:	7812      	ldrb	r2, [r2, #0]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	021b      	lsls	r3, r3, #8
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	3201      	adds	r2, #1
 80095d6:	7812      	ldrb	r2, [r2, #0]
 80095d8:	4313      	orrs	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	021b      	lsls	r3, r3, #8
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	7812      	ldrb	r2, [r2, #0]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80095e8:	68fb      	ldr	r3, [r7, #12]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3714      	adds	r7, #20
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80095f6:	b480      	push	{r7}
 80095f8:	b083      	sub	sp, #12
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	1c5a      	adds	r2, r3, #1
 8009606:	607a      	str	r2, [r7, #4]
 8009608:	887a      	ldrh	r2, [r7, #2]
 800960a:	b2d2      	uxtb	r2, r2
 800960c:	701a      	strb	r2, [r3, #0]
 800960e:	887b      	ldrh	r3, [r7, #2]
 8009610:	0a1b      	lsrs	r3, r3, #8
 8009612:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	607a      	str	r2, [r7, #4]
 800961a:	887a      	ldrh	r2, [r7, #2]
 800961c:	b2d2      	uxtb	r2, r2
 800961e:	701a      	strb	r2, [r3, #0]
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	683a      	ldr	r2, [r7, #0]
 800963e:	b2d2      	uxtb	r2, r2
 8009640:	701a      	strb	r2, [r3, #0]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	0a1b      	lsrs	r3, r3, #8
 8009646:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	607a      	str	r2, [r7, #4]
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	b2d2      	uxtb	r2, r2
 8009652:	701a      	strb	r2, [r3, #0]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	0a1b      	lsrs	r3, r3, #8
 8009658:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	b2d2      	uxtb	r2, r2
 8009664:	701a      	strb	r2, [r3, #0]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	0a1b      	lsrs	r3, r3, #8
 800966a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	607a      	str	r2, [r7, #4]
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	b2d2      	uxtb	r2, r2
 8009676:	701a      	strb	r2, [r3, #0]
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009684:	b480      	push	{r7}
 8009686:	b087      	sub	sp, #28
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00d      	beq.n	80096ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	1c53      	adds	r3, r2, #1
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	1c59      	adds	r1, r3, #1
 80096a8:	6179      	str	r1, [r7, #20]
 80096aa:	7812      	ldrb	r2, [r2, #0]
 80096ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	607b      	str	r3, [r7, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1f1      	bne.n	800969e <mem_cpy+0x1a>
	}
}
 80096ba:	bf00      	nop
 80096bc:	371c      	adds	r7, #28
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80096c6:	b480      	push	{r7}
 80096c8:	b087      	sub	sp, #28
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	60f8      	str	r0, [r7, #12]
 80096ce:	60b9      	str	r1, [r7, #8]
 80096d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	1c5a      	adds	r2, r3, #1
 80096da:	617a      	str	r2, [r7, #20]
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	b2d2      	uxtb	r2, r2
 80096e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	607b      	str	r3, [r7, #4]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1f3      	bne.n	80096d6 <mem_set+0x10>
}
 80096ee:	bf00      	nop
 80096f0:	bf00      	nop
 80096f2:	371c      	adds	r7, #28
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80096fc:	b480      	push	{r7}
 80096fe:	b089      	sub	sp, #36	@ 0x24
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	61fb      	str	r3, [r7, #28]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009710:	2300      	movs	r3, #0
 8009712:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	61fa      	str	r2, [r7, #28]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	4619      	mov	r1, r3
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	1c5a      	adds	r2, r3, #1
 8009722:	61ba      	str	r2, [r7, #24]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	1acb      	subs	r3, r1, r3
 8009728:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3b01      	subs	r3, #1
 800972e:	607b      	str	r3, [r7, #4]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d002      	beq.n	800973c <mem_cmp+0x40>
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d0eb      	beq.n	8009714 <mem_cmp+0x18>

	return r;
 800973c:	697b      	ldr	r3, [r7, #20]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3724      	adds	r7, #36	@ 0x24
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800974a:	b480      	push	{r7}
 800974c:	b083      	sub	sp, #12
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009754:	e002      	b.n	800975c <chk_chr+0x12>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	3301      	adds	r3, #1
 800975a:	607b      	str	r3, [r7, #4]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d005      	beq.n	8009770 <chk_chr+0x26>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	461a      	mov	r2, r3
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	4293      	cmp	r3, r2
 800976e:	d1f2      	bne.n	8009756 <chk_chr+0xc>
	return *str;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	781b      	ldrb	r3, [r3, #0]
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800978a:	2300      	movs	r3, #0
 800978c:	60bb      	str	r3, [r7, #8]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	e029      	b.n	80097e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009794:	4a27      	ldr	r2, [pc, #156]	@ (8009834 <chk_lock+0xb4>)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	011b      	lsls	r3, r3, #4
 800979a:	4413      	add	r3, r2
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d01d      	beq.n	80097de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80097a2:	4a24      	ldr	r2, [pc, #144]	@ (8009834 <chk_lock+0xb4>)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	4413      	add	r3, r2
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d116      	bne.n	80097e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80097b4:	4a1f      	ldr	r2, [pc, #124]	@ (8009834 <chk_lock+0xb4>)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	011b      	lsls	r3, r3, #4
 80097ba:	4413      	add	r3, r2
 80097bc:	3304      	adds	r3, #4
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d10c      	bne.n	80097e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80097c8:	4a1a      	ldr	r2, [pc, #104]	@ (8009834 <chk_lock+0xb4>)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	011b      	lsls	r3, r3, #4
 80097ce:	4413      	add	r3, r2
 80097d0:	3308      	adds	r3, #8
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80097d8:	429a      	cmp	r2, r3
 80097da:	d102      	bne.n	80097e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80097dc:	e007      	b.n	80097ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80097de:	2301      	movs	r3, #1
 80097e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3301      	adds	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d9d2      	bls.n	8009794 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d109      	bne.n	8009808 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d102      	bne.n	8009800 <chk_lock+0x80>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d101      	bne.n	8009804 <chk_lock+0x84>
 8009800:	2300      	movs	r3, #0
 8009802:	e010      	b.n	8009826 <chk_lock+0xa6>
 8009804:	2312      	movs	r3, #18
 8009806:	e00e      	b.n	8009826 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d108      	bne.n	8009820 <chk_lock+0xa0>
 800980e:	4a09      	ldr	r2, [pc, #36]	@ (8009834 <chk_lock+0xb4>)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	011b      	lsls	r3, r3, #4
 8009814:	4413      	add	r3, r2
 8009816:	330c      	adds	r3, #12
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800981e:	d101      	bne.n	8009824 <chk_lock+0xa4>
 8009820:	2310      	movs	r3, #16
 8009822:	e000      	b.n	8009826 <chk_lock+0xa6>
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	20002398 	.word	0x20002398

08009838 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800983e:	2300      	movs	r3, #0
 8009840:	607b      	str	r3, [r7, #4]
 8009842:	e002      	b.n	800984a <enq_lock+0x12>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	3301      	adds	r3, #1
 8009848:	607b      	str	r3, [r7, #4]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d806      	bhi.n	800985e <enq_lock+0x26>
 8009850:	4a09      	ldr	r2, [pc, #36]	@ (8009878 <enq_lock+0x40>)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	011b      	lsls	r3, r3, #4
 8009856:	4413      	add	r3, r2
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1f2      	bne.n	8009844 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b02      	cmp	r3, #2
 8009862:	bf14      	ite	ne
 8009864:	2301      	movne	r3, #1
 8009866:	2300      	moveq	r3, #0
 8009868:	b2db      	uxtb	r3, r3
}
 800986a:	4618      	mov	r0, r3
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	20002398 	.word	0x20002398

0800987c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009886:	2300      	movs	r3, #0
 8009888:	60fb      	str	r3, [r7, #12]
 800988a:	e01f      	b.n	80098cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800988c:	4a41      	ldr	r2, [pc, #260]	@ (8009994 <inc_lock+0x118>)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	011b      	lsls	r3, r3, #4
 8009892:	4413      	add	r3, r2
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	429a      	cmp	r2, r3
 800989c:	d113      	bne.n	80098c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800989e:	4a3d      	ldr	r2, [pc, #244]	@ (8009994 <inc_lock+0x118>)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	011b      	lsls	r3, r3, #4
 80098a4:	4413      	add	r3, r2
 80098a6:	3304      	adds	r3, #4
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d109      	bne.n	80098c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80098b2:	4a38      	ldr	r2, [pc, #224]	@ (8009994 <inc_lock+0x118>)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	011b      	lsls	r3, r3, #4
 80098b8:	4413      	add	r3, r2
 80098ba:	3308      	adds	r3, #8
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d006      	beq.n	80098d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3301      	adds	r3, #1
 80098ca:	60fb      	str	r3, [r7, #12]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d9dc      	bls.n	800988c <inc_lock+0x10>
 80098d2:	e000      	b.n	80098d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80098d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d132      	bne.n	8009942 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80098dc:	2300      	movs	r3, #0
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	e002      	b.n	80098e8 <inc_lock+0x6c>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3301      	adds	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d806      	bhi.n	80098fc <inc_lock+0x80>
 80098ee:	4a29      	ldr	r2, [pc, #164]	@ (8009994 <inc_lock+0x118>)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	011b      	lsls	r3, r3, #4
 80098f4:	4413      	add	r3, r2
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1f2      	bne.n	80098e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d101      	bne.n	8009906 <inc_lock+0x8a>
 8009902:	2300      	movs	r3, #0
 8009904:	e040      	b.n	8009988 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	4922      	ldr	r1, [pc, #136]	@ (8009994 <inc_lock+0x118>)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	440b      	add	r3, r1
 8009912:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689a      	ldr	r2, [r3, #8]
 8009918:	491e      	ldr	r1, [pc, #120]	@ (8009994 <inc_lock+0x118>)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	011b      	lsls	r3, r3, #4
 800991e:	440b      	add	r3, r1
 8009920:	3304      	adds	r3, #4
 8009922:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	695a      	ldr	r2, [r3, #20]
 8009928:	491a      	ldr	r1, [pc, #104]	@ (8009994 <inc_lock+0x118>)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	011b      	lsls	r3, r3, #4
 800992e:	440b      	add	r3, r1
 8009930:	3308      	adds	r3, #8
 8009932:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009934:	4a17      	ldr	r2, [pc, #92]	@ (8009994 <inc_lock+0x118>)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	011b      	lsls	r3, r3, #4
 800993a:	4413      	add	r3, r2
 800993c:	330c      	adds	r3, #12
 800993e:	2200      	movs	r2, #0
 8009940:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d009      	beq.n	800995c <inc_lock+0xe0>
 8009948:	4a12      	ldr	r2, [pc, #72]	@ (8009994 <inc_lock+0x118>)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	4413      	add	r3, r2
 8009950:	330c      	adds	r3, #12
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <inc_lock+0xe0>
 8009958:	2300      	movs	r3, #0
 800995a:	e015      	b.n	8009988 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d108      	bne.n	8009974 <inc_lock+0xf8>
 8009962:	4a0c      	ldr	r2, [pc, #48]	@ (8009994 <inc_lock+0x118>)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	011b      	lsls	r3, r3, #4
 8009968:	4413      	add	r3, r2
 800996a:	330c      	adds	r3, #12
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	3301      	adds	r3, #1
 8009970:	b29a      	uxth	r2, r3
 8009972:	e001      	b.n	8009978 <inc_lock+0xfc>
 8009974:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009978:	4906      	ldr	r1, [pc, #24]	@ (8009994 <inc_lock+0x118>)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	011b      	lsls	r3, r3, #4
 800997e:	440b      	add	r3, r1
 8009980:	330c      	adds	r3, #12
 8009982:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3301      	adds	r3, #1
}
 8009988:	4618      	mov	r0, r3
 800998a:	3714      	adds	r7, #20
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	20002398 	.word	0x20002398

08009998 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	3b01      	subs	r3, #1
 80099a4:	607b      	str	r3, [r7, #4]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d825      	bhi.n	80099f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80099ac:	4a17      	ldr	r2, [pc, #92]	@ (8009a0c <dec_lock+0x74>)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	011b      	lsls	r3, r3, #4
 80099b2:	4413      	add	r3, r2
 80099b4:	330c      	adds	r3, #12
 80099b6:	881b      	ldrh	r3, [r3, #0]
 80099b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80099ba:	89fb      	ldrh	r3, [r7, #14]
 80099bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099c0:	d101      	bne.n	80099c6 <dec_lock+0x2e>
 80099c2:	2300      	movs	r3, #0
 80099c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80099c6:	89fb      	ldrh	r3, [r7, #14]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <dec_lock+0x3a>
 80099cc:	89fb      	ldrh	r3, [r7, #14]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80099d2:	4a0e      	ldr	r2, [pc, #56]	@ (8009a0c <dec_lock+0x74>)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	011b      	lsls	r3, r3, #4
 80099d8:	4413      	add	r3, r2
 80099da:	330c      	adds	r3, #12
 80099dc:	89fa      	ldrh	r2, [r7, #14]
 80099de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80099e0:	89fb      	ldrh	r3, [r7, #14]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d105      	bne.n	80099f2 <dec_lock+0x5a>
 80099e6:	4a09      	ldr	r2, [pc, #36]	@ (8009a0c <dec_lock+0x74>)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	011b      	lsls	r3, r3, #4
 80099ec:	4413      	add	r3, r2
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	737b      	strb	r3, [r7, #13]
 80099f6:	e001      	b.n	80099fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80099f8:	2302      	movs	r3, #2
 80099fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80099fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3714      	adds	r7, #20
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	20002398 	.word	0x20002398

08009a10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009a18:	2300      	movs	r3, #0
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	e010      	b.n	8009a40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8009a54 <clear_lock+0x44>)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	011b      	lsls	r3, r3, #4
 8009a24:	4413      	add	r3, r2
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d105      	bne.n	8009a3a <clear_lock+0x2a>
 8009a2e:	4a09      	ldr	r2, [pc, #36]	@ (8009a54 <clear_lock+0x44>)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	011b      	lsls	r3, r3, #4
 8009a34:	4413      	add	r3, r2
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d9eb      	bls.n	8009a1e <clear_lock+0xe>
	}
}
 8009a46:	bf00      	nop
 8009a48:	bf00      	nop
 8009a4a:	3714      	adds	r7, #20
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	20002398 	.word	0x20002398

08009a58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	78db      	ldrb	r3, [r3, #3]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d034      	beq.n	8009ad6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	7858      	ldrb	r0, [r3, #1]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	f7ff fd40 	bl	8009504 <disk_write>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d002      	beq.n	8009a90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	73fb      	strb	r3, [r7, #15]
 8009a8e:	e022      	b.n	8009ad6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	1ad2      	subs	r2, r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d217      	bcs.n	8009ad6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	789b      	ldrb	r3, [r3, #2]
 8009aaa:	613b      	str	r3, [r7, #16]
 8009aac:	e010      	b.n	8009ad0 <sync_window+0x78>
					wsect += fs->fsize;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	7858      	ldrb	r0, [r3, #1]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	f7ff fd1d 	bl	8009504 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	3b01      	subs	r3, #1
 8009ace:	613b      	str	r3, [r7, #16]
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d8eb      	bhi.n	8009aae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d01b      	beq.n	8009b30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7ff ffad 	bl	8009a58 <sync_window>
 8009afe:	4603      	mov	r3, r0
 8009b00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d113      	bne.n	8009b30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	7858      	ldrb	r0, [r3, #1]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009b12:	2301      	movs	r3, #1
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	f7ff fcd5 	bl	80094c4 <disk_read>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d004      	beq.n	8009b2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009b20:	f04f 33ff 	mov.w	r3, #4294967295
 8009b24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	683a      	ldr	r2, [r7, #0]
 8009b2e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7ff ff87 	bl	8009a58 <sync_window>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d159      	bne.n	8009c08 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	2b03      	cmp	r3, #3
 8009b5a:	d149      	bne.n	8009bf0 <sync_fs+0xb4>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	791b      	ldrb	r3, [r3, #4]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d145      	bne.n	8009bf0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	899b      	ldrh	r3, [r3, #12]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	2100      	movs	r1, #0
 8009b72:	f7ff fda8 	bl	80096c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	3338      	adds	r3, #56	@ 0x38
 8009b7a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009b7e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7ff fd37 	bl	80095f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3338      	adds	r3, #56	@ 0x38
 8009b8c:	4921      	ldr	r1, [pc, #132]	@ (8009c14 <sync_fs+0xd8>)
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7ff fd4c 	bl	800962c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	3338      	adds	r3, #56	@ 0x38
 8009b98:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b9c:	491e      	ldr	r1, [pc, #120]	@ (8009c18 <sync_fs+0xdc>)
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff fd44 	bl	800962c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3338      	adds	r3, #56	@ 0x38
 8009ba8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	f7ff fd3a 	bl	800962c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	3338      	adds	r3, #56	@ 0x38
 8009bbc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	f7ff fd30 	bl	800962c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd0:	1c5a      	adds	r2, r3, #1
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	7858      	ldrb	r0, [r3, #1]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009be4:	2301      	movs	r3, #1
 8009be6:	f7ff fc8d 	bl	8009504 <disk_write>
			fs->fsi_flag = 0;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	785b      	ldrb	r3, [r3, #1]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff fca3 	bl	8009544 <disk_ioctl>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <sync_fs+0xcc>
 8009c04:	2301      	movs	r3, #1
 8009c06:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	41615252 	.word	0x41615252
 8009c18:	61417272 	.word	0x61417272

08009c1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	3b02      	subs	r3, #2
 8009c2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	69db      	ldr	r3, [r3, #28]
 8009c30:	3b02      	subs	r3, #2
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d301      	bcc.n	8009c3c <clust2sect+0x20>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	e008      	b.n	8009c4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	895b      	ldrh	r3, [r3, #10]
 8009c40:	461a      	mov	r2, r3
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	fb03 f202 	mul.w	r2, r3, r2
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c4c:	4413      	add	r3, r2
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b086      	sub	sp, #24
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d904      	bls.n	8009c7a <get_fat+0x20>
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d302      	bcc.n	8009c80 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	617b      	str	r3, [r7, #20]
 8009c7e:	e0ba      	b.n	8009df6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009c80:	f04f 33ff 	mov.w	r3, #4294967295
 8009c84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	f000 8082 	beq.w	8009d94 <get_fat+0x13a>
 8009c90:	2b03      	cmp	r3, #3
 8009c92:	f300 80a6 	bgt.w	8009de2 <get_fat+0x188>
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d002      	beq.n	8009ca0 <get_fat+0x46>
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d055      	beq.n	8009d4a <get_fat+0xf0>
 8009c9e:	e0a0      	b.n	8009de2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	085b      	lsrs	r3, r3, #1
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	4413      	add	r3, r2
 8009cac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	899b      	ldrh	r3, [r3, #12]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cbe:	4413      	add	r3, r2
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6938      	ldr	r0, [r7, #16]
 8009cc4:	f7ff ff0c 	bl	8009ae0 <move_window>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f040 808c 	bne.w	8009de8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	60fa      	str	r2, [r7, #12]
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	8992      	ldrh	r2, [r2, #12]
 8009cda:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cde:	fb01 f202 	mul.w	r2, r1, r2
 8009ce2:	1a9b      	subs	r3, r3, r2
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009cec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	899b      	ldrh	r3, [r3, #12]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cfe:	4413      	add	r3, r2
 8009d00:	4619      	mov	r1, r3
 8009d02:	6938      	ldr	r0, [r7, #16]
 8009d04:	f7ff feec 	bl	8009ae0 <move_window>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d16e      	bne.n	8009dec <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	899b      	ldrh	r3, [r3, #12]
 8009d12:	461a      	mov	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d1a:	fb01 f202 	mul.w	r2, r1, r2
 8009d1e:	1a9b      	subs	r3, r3, r2
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	4413      	add	r3, r2
 8009d24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009d28:	021b      	lsls	r3, r3, #8
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d002      	beq.n	8009d40 <get_fat+0xe6>
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	091b      	lsrs	r3, r3, #4
 8009d3e:	e002      	b.n	8009d46 <get_fat+0xec>
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d46:	617b      	str	r3, [r7, #20]
			break;
 8009d48:	e055      	b.n	8009df6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	899b      	ldrh	r3, [r3, #12]
 8009d52:	085b      	lsrs	r3, r3, #1
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	4619      	mov	r1, r3
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d5e:	4413      	add	r3, r2
 8009d60:	4619      	mov	r1, r3
 8009d62:	6938      	ldr	r0, [r7, #16]
 8009d64:	f7ff febc 	bl	8009ae0 <move_window>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d140      	bne.n	8009df0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	8992      	ldrh	r2, [r2, #12]
 8009d7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d80:	fb00 f202 	mul.w	r2, r0, r2
 8009d84:	1a9b      	subs	r3, r3, r2
 8009d86:	440b      	add	r3, r1
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7ff fbf9 	bl	8009580 <ld_word>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	617b      	str	r3, [r7, #20]
			break;
 8009d92:	e030      	b.n	8009df6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	899b      	ldrh	r3, [r3, #12]
 8009d9c:	089b      	lsrs	r3, r3, #2
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	4619      	mov	r1, r3
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	fbb3 f3f1 	udiv	r3, r3, r1
 8009da8:	4413      	add	r3, r2
 8009daa:	4619      	mov	r1, r3
 8009dac:	6938      	ldr	r0, [r7, #16]
 8009dae:	f7ff fe97 	bl	8009ae0 <move_window>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d11d      	bne.n	8009df4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	693a      	ldr	r2, [r7, #16]
 8009dc4:	8992      	ldrh	r2, [r2, #12]
 8009dc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8009dca:	fb00 f202 	mul.w	r2, r0, r2
 8009dce:	1a9b      	subs	r3, r3, r2
 8009dd0:	440b      	add	r3, r1
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7ff fbec 	bl	80095b0 <ld_dword>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009dde:	617b      	str	r3, [r7, #20]
			break;
 8009de0:	e009      	b.n	8009df6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009de2:	2301      	movs	r3, #1
 8009de4:	617b      	str	r3, [r7, #20]
 8009de6:	e006      	b.n	8009df6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009de8:	bf00      	nop
 8009dea:	e004      	b.n	8009df6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009dec:	bf00      	nop
 8009dee:	e002      	b.n	8009df6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009df0:	bf00      	nop
 8009df2:	e000      	b.n	8009df6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009df4:	bf00      	nop
		}
	}

	return val;
 8009df6:	697b      	ldr	r3, [r7, #20]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009e00:	b590      	push	{r4, r7, lr}
 8009e02:	b089      	sub	sp, #36	@ 0x24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	f240 8109 	bls.w	800a02a <put_fat+0x22a>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	69db      	ldr	r3, [r3, #28]
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	f080 8103 	bcs.w	800a02a <put_fat+0x22a>
		switch (fs->fs_type) {
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	f000 80b6 	beq.w	8009f9a <put_fat+0x19a>
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	f300 80fb 	bgt.w	800a02a <put_fat+0x22a>
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d003      	beq.n	8009e40 <put_fat+0x40>
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	f000 8083 	beq.w	8009f44 <put_fat+0x144>
 8009e3e:	e0f4      	b.n	800a02a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	61bb      	str	r3, [r7, #24]
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	085b      	lsrs	r3, r3, #1
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	899b      	ldrh	r3, [r3, #12]
 8009e56:	4619      	mov	r1, r3
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e5e:	4413      	add	r3, r2
 8009e60:	4619      	mov	r1, r3
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f7ff fe3c 	bl	8009ae0 <move_window>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e6c:	7ffb      	ldrb	r3, [r7, #31]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f040 80d4 	bne.w	800a01c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	1c5a      	adds	r2, r3, #1
 8009e7e:	61ba      	str	r2, [r7, #24]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	8992      	ldrh	r2, [r2, #12]
 8009e84:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e88:	fb00 f202 	mul.w	r2, r0, r2
 8009e8c:	1a9b      	subs	r3, r3, r2
 8009e8e:	440b      	add	r3, r1
 8009e90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	f003 0301 	and.w	r3, r3, #1
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00d      	beq.n	8009eb8 <put_fat+0xb8>
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	b25b      	sxtb	r3, r3
 8009ea2:	f003 030f 	and.w	r3, r3, #15
 8009ea6:	b25a      	sxtb	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	011b      	lsls	r3, r3, #4
 8009eae:	b25b      	sxtb	r3, r3
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	b25b      	sxtb	r3, r3
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	e001      	b.n	8009ebc <put_fat+0xbc>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	899b      	ldrh	r3, [r3, #12]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ed6:	4413      	add	r3, r2
 8009ed8:	4619      	mov	r1, r3
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f7ff fe00 	bl	8009ae0 <move_window>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ee4:	7ffb      	ldrb	r3, [r7, #31]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f040 809a 	bne.w	800a020 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	899b      	ldrh	r3, [r3, #12]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	fbb3 f0f2 	udiv	r0, r3, r2
 8009efe:	fb00 f202 	mul.w	r2, r0, r2
 8009f02:	1a9b      	subs	r3, r3, r2
 8009f04:	440b      	add	r3, r1
 8009f06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <put_fat+0x11a>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	091b      	lsrs	r3, r3, #4
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	e00e      	b.n	8009f38 <put_fat+0x138>
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	b25b      	sxtb	r3, r3
 8009f20:	f023 030f 	bic.w	r3, r3, #15
 8009f24:	b25a      	sxtb	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	0a1b      	lsrs	r3, r3, #8
 8009f2a:	b25b      	sxtb	r3, r3
 8009f2c:	f003 030f 	and.w	r3, r3, #15
 8009f30:	b25b      	sxtb	r3, r3
 8009f32:	4313      	orrs	r3, r2
 8009f34:	b25b      	sxtb	r3, r3
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	70da      	strb	r2, [r3, #3]
			break;
 8009f42:	e072      	b.n	800a02a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	899b      	ldrh	r3, [r3, #12]
 8009f4c:	085b      	lsrs	r3, r3, #1
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	4619      	mov	r1, r3
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f58:	4413      	add	r3, r2
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7ff fdbf 	bl	8009ae0 <move_window>
 8009f62:	4603      	mov	r3, r0
 8009f64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f66:	7ffb      	ldrb	r3, [r7, #31]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d15b      	bne.n	800a024 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	005b      	lsls	r3, r3, #1
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	8992      	ldrh	r2, [r2, #12]
 8009f7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f7e:	fb00 f202 	mul.w	r2, r0, r2
 8009f82:	1a9b      	subs	r3, r3, r2
 8009f84:	440b      	add	r3, r1
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	b292      	uxth	r2, r2
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7ff fb32 	bl	80095f6 <st_word>
			fs->wflag = 1;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2201      	movs	r2, #1
 8009f96:	70da      	strb	r2, [r3, #3]
			break;
 8009f98:	e047      	b.n	800a02a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	899b      	ldrh	r3, [r3, #12]
 8009fa2:	089b      	lsrs	r3, r3, #2
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fae:	4413      	add	r3, r2
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f7ff fd94 	bl	8009ae0 <move_window>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009fbc:	7ffb      	ldrb	r3, [r7, #31]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d132      	bne.n	800a028 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	8992      	ldrh	r2, [r2, #12]
 8009fd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fda:	fb00 f202 	mul.w	r2, r0, r2
 8009fde:	1a9b      	subs	r3, r3, r2
 8009fe0:	440b      	add	r3, r1
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7ff fae4 	bl	80095b0 <ld_dword>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009fee:	4323      	orrs	r3, r4
 8009ff0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	8992      	ldrh	r2, [r2, #12]
 800a000:	fbb3 f0f2 	udiv	r0, r3, r2
 800a004:	fb00 f202 	mul.w	r2, r0, r2
 800a008:	1a9b      	subs	r3, r3, r2
 800a00a:	440b      	add	r3, r1
 800a00c:	6879      	ldr	r1, [r7, #4]
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff fb0c 	bl	800962c <st_dword>
			fs->wflag = 1;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2201      	movs	r2, #1
 800a018:	70da      	strb	r2, [r3, #3]
			break;
 800a01a:	e006      	b.n	800a02a <put_fat+0x22a>
			if (res != FR_OK) break;
 800a01c:	bf00      	nop
 800a01e:	e004      	b.n	800a02a <put_fat+0x22a>
			if (res != FR_OK) break;
 800a020:	bf00      	nop
 800a022:	e002      	b.n	800a02a <put_fat+0x22a>
			if (res != FR_OK) break;
 800a024:	bf00      	nop
 800a026:	e000      	b.n	800a02a <put_fat+0x22a>
			if (res != FR_OK) break;
 800a028:	bf00      	nop
		}
	}
	return res;
 800a02a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3724      	adds	r7, #36	@ 0x24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd90      	pop	{r4, r7, pc}

0800a034 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b088      	sub	sp, #32
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d904      	bls.n	800a05a <remove_chain+0x26>
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	429a      	cmp	r2, r3
 800a058:	d301      	bcc.n	800a05e <remove_chain+0x2a>
 800a05a:	2302      	movs	r3, #2
 800a05c:	e04b      	b.n	800a0f6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00c      	beq.n	800a07e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a064:	f04f 32ff 	mov.w	r2, #4294967295
 800a068:	6879      	ldr	r1, [r7, #4]
 800a06a:	69b8      	ldr	r0, [r7, #24]
 800a06c:	f7ff fec8 	bl	8009e00 <put_fat>
 800a070:	4603      	mov	r3, r0
 800a072:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a074:	7ffb      	ldrb	r3, [r7, #31]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <remove_chain+0x4a>
 800a07a:	7ffb      	ldrb	r3, [r7, #31]
 800a07c:	e03b      	b.n	800a0f6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a07e:	68b9      	ldr	r1, [r7, #8]
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7ff fdea 	bl	8009c5a <get_fat>
 800a086:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d031      	beq.n	800a0f2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d101      	bne.n	800a098 <remove_chain+0x64>
 800a094:	2302      	movs	r3, #2
 800a096:	e02e      	b.n	800a0f6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a09e:	d101      	bne.n	800a0a4 <remove_chain+0x70>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e028      	b.n	800a0f6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	68b9      	ldr	r1, [r7, #8]
 800a0a8:	69b8      	ldr	r0, [r7, #24]
 800a0aa:	f7ff fea9 	bl	8009e00 <put_fat>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a0b2:	7ffb      	ldrb	r3, [r7, #31]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <remove_chain+0x88>
 800a0b8:	7ffb      	ldrb	r3, [r7, #31]
 800a0ba:	e01c      	b.n	800a0f6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	699a      	ldr	r2, [r3, #24]
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	69db      	ldr	r3, [r3, #28]
 800a0c4:	3b02      	subs	r3, #2
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d20b      	bcs.n	800a0e2 <remove_chain+0xae>
			fs->free_clst++;
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	1c5a      	adds	r2, r3, #1
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	791b      	ldrb	r3, [r3, #4]
 800a0d8:	f043 0301 	orr.w	r3, r3, #1
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d3c6      	bcc.n	800a07e <remove_chain+0x4a>
 800a0f0:	e000      	b.n	800a0f4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a0f2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3720      	adds	r7, #32
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b088      	sub	sp, #32
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10d      	bne.n	800a130 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d004      	beq.n	800a12a <create_chain+0x2c>
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	69db      	ldr	r3, [r3, #28]
 800a124:	69ba      	ldr	r2, [r7, #24]
 800a126:	429a      	cmp	r2, r3
 800a128:	d31b      	bcc.n	800a162 <create_chain+0x64>
 800a12a:	2301      	movs	r3, #1
 800a12c:	61bb      	str	r3, [r7, #24]
 800a12e:	e018      	b.n	800a162 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7ff fd91 	bl	8009c5a <get_fat>
 800a138:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d801      	bhi.n	800a144 <create_chain+0x46>
 800a140:	2301      	movs	r3, #1
 800a142:	e070      	b.n	800a226 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a14a:	d101      	bne.n	800a150 <create_chain+0x52>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	e06a      	b.n	800a226 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	69db      	ldr	r3, [r3, #28]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	429a      	cmp	r2, r3
 800a158:	d201      	bcs.n	800a15e <create_chain+0x60>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	e063      	b.n	800a226 <create_chain+0x128>
		scl = clst;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	3301      	adds	r3, #1
 800a16a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	69db      	ldr	r3, [r3, #28]
 800a170:	69fa      	ldr	r2, [r7, #28]
 800a172:	429a      	cmp	r2, r3
 800a174:	d307      	bcc.n	800a186 <create_chain+0x88>
				ncl = 2;
 800a176:	2302      	movs	r3, #2
 800a178:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a17a:	69fa      	ldr	r2, [r7, #28]
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d901      	bls.n	800a186 <create_chain+0x88>
 800a182:	2300      	movs	r3, #0
 800a184:	e04f      	b.n	800a226 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a186:	69f9      	ldr	r1, [r7, #28]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f7ff fd66 	bl	8009c5a <get_fat>
 800a18e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00e      	beq.n	800a1b4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d003      	beq.n	800a1a4 <create_chain+0xa6>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a2:	d101      	bne.n	800a1a8 <create_chain+0xaa>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	e03e      	b.n	800a226 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a1a8:	69fa      	ldr	r2, [r7, #28]
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d1da      	bne.n	800a166 <create_chain+0x68>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	e038      	b.n	800a226 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a1b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ba:	69f9      	ldr	r1, [r7, #28]
 800a1bc:	6938      	ldr	r0, [r7, #16]
 800a1be:	f7ff fe1f 	bl	8009e00 <put_fat>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a1c6:	7dfb      	ldrb	r3, [r7, #23]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d109      	bne.n	800a1e0 <create_chain+0xe2>
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d006      	beq.n	800a1e0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a1d2:	69fa      	ldr	r2, [r7, #28]
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6938      	ldr	r0, [r7, #16]
 800a1d8:	f7ff fe12 	bl	8009e00 <put_fat>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d116      	bne.n	800a214 <create_chain+0x116>
		fs->last_clst = ncl;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	69fa      	ldr	r2, [r7, #28]
 800a1ea:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	699a      	ldr	r2, [r3, #24]
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	69db      	ldr	r3, [r3, #28]
 800a1f4:	3b02      	subs	r3, #2
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d804      	bhi.n	800a204 <create_chain+0x106>
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	1e5a      	subs	r2, r3, #1
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	791b      	ldrb	r3, [r3, #4]
 800a208:	f043 0301 	orr.w	r3, r3, #1
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	711a      	strb	r2, [r3, #4]
 800a212:	e007      	b.n	800a224 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a214:	7dfb      	ldrb	r3, [r7, #23]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d102      	bne.n	800a220 <create_chain+0x122>
 800a21a:	f04f 33ff 	mov.w	r3, #4294967295
 800a21e:	e000      	b.n	800a222 <create_chain+0x124>
 800a220:	2301      	movs	r3, #1
 800a222:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a224:	69fb      	ldr	r3, [r7, #28]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3720      	adds	r7, #32
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a22e:	b480      	push	{r7}
 800a230:	b087      	sub	sp, #28
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a242:	3304      	adds	r3, #4
 800a244:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	899b      	ldrh	r3, [r3, #12]
 800a24a:	461a      	mov	r2, r3
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	8952      	ldrh	r2, [r2, #10]
 800a256:	fbb3 f3f2 	udiv	r3, r3, r2
 800a25a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	1d1a      	adds	r2, r3, #4
 800a260:	613a      	str	r2, [r7, #16]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <clmt_clust+0x42>
 800a26c:	2300      	movs	r3, #0
 800a26e:	e010      	b.n	800a292 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	429a      	cmp	r2, r3
 800a276:	d307      	bcc.n	800a288 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a278:	697a      	ldr	r2, [r7, #20]
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	617b      	str	r3, [r7, #20]
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	3304      	adds	r3, #4
 800a284:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a286:	e7e9      	b.n	800a25c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a288:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	4413      	add	r3, r2
}
 800a292:	4618      	mov	r0, r3
 800a294:	371c      	adds	r7, #28
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b086      	sub	sp, #24
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2b4:	d204      	bcs.n	800a2c0 <dir_sdi+0x22>
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	f003 031f 	and.w	r3, r3, #31
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	e071      	b.n	800a3a8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d106      	bne.n	800a2e4 <dir_sdi+0x46>
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d902      	bls.n	800a2e4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10c      	bne.n	800a304 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	095b      	lsrs	r3, r3, #5
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	8912      	ldrh	r2, [r2, #8]
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d301      	bcc.n	800a2fa <dir_sdi+0x5c>
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	e056      	b.n	800a3a8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	61da      	str	r2, [r3, #28]
 800a302:	e02d      	b.n	800a360 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	895b      	ldrh	r3, [r3, #10]
 800a308:	461a      	mov	r2, r3
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	899b      	ldrh	r3, [r3, #12]
 800a30e:	fb02 f303 	mul.w	r3, r2, r3
 800a312:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a314:	e019      	b.n	800a34a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6979      	ldr	r1, [r7, #20]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7ff fc9d 	bl	8009c5a <get_fat>
 800a320:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a328:	d101      	bne.n	800a32e <dir_sdi+0x90>
 800a32a:	2301      	movs	r3, #1
 800a32c:	e03c      	b.n	800a3a8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d904      	bls.n	800a33e <dir_sdi+0xa0>
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	69db      	ldr	r3, [r3, #28]
 800a338:	697a      	ldr	r2, [r7, #20]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d301      	bcc.n	800a342 <dir_sdi+0xa4>
 800a33e:	2302      	movs	r3, #2
 800a340:	e032      	b.n	800a3a8 <dir_sdi+0x10a>
			ofs -= csz;
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d2e1      	bcs.n	800a316 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a352:	6979      	ldr	r1, [r7, #20]
 800a354:	6938      	ldr	r0, [r7, #16]
 800a356:	f7ff fc61 	bl	8009c1c <clust2sect>
 800a35a:	4602      	mov	r2, r0
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d101      	bne.n	800a372 <dir_sdi+0xd4>
 800a36e:	2302      	movs	r3, #2
 800a370:	e01a      	b.n	800a3a8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	69da      	ldr	r2, [r3, #28]
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	899b      	ldrh	r3, [r3, #12]
 800a37a:	4619      	mov	r1, r3
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a382:	441a      	add	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	899b      	ldrh	r3, [r3, #12]
 800a392:	461a      	mov	r2, r3
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	fbb3 f0f2 	udiv	r0, r3, r2
 800a39a:	fb00 f202 	mul.w	r2, r0, r2
 800a39e:	1a9b      	subs	r3, r3, r2
 800a3a0:	18ca      	adds	r2, r1, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3718      	adds	r7, #24
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	695b      	ldr	r3, [r3, #20]
 800a3c4:	3320      	adds	r3, #32
 800a3c6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	69db      	ldr	r3, [r3, #28]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <dir_next+0x28>
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a3d6:	d301      	bcc.n	800a3dc <dir_next+0x2c>
 800a3d8:	2304      	movs	r3, #4
 800a3da:	e0bb      	b.n	800a554 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	899b      	ldrh	r3, [r3, #12]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3e8:	fb01 f202 	mul.w	r2, r1, r2
 800a3ec:	1a9b      	subs	r3, r3, r2
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f040 809d 	bne.w	800a52e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	69db      	ldr	r3, [r3, #28]
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10b      	bne.n	800a41e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	095b      	lsrs	r3, r3, #5
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	8912      	ldrh	r2, [r2, #8]
 800a40e:	4293      	cmp	r3, r2
 800a410:	f0c0 808d 	bcc.w	800a52e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	61da      	str	r2, [r3, #28]
 800a41a:	2304      	movs	r3, #4
 800a41c:	e09a      	b.n	800a554 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	899b      	ldrh	r3, [r3, #12]
 800a422:	461a      	mov	r2, r3
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	fbb3 f3f2 	udiv	r3, r3, r2
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	8952      	ldrh	r2, [r2, #10]
 800a42e:	3a01      	subs	r2, #1
 800a430:	4013      	ands	r3, r2
 800a432:	2b00      	cmp	r3, #0
 800a434:	d17b      	bne.n	800a52e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	4619      	mov	r1, r3
 800a43e:	4610      	mov	r0, r2
 800a440:	f7ff fc0b 	bl	8009c5a <get_fat>
 800a444:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d801      	bhi.n	800a450 <dir_next+0xa0>
 800a44c:	2302      	movs	r3, #2
 800a44e:	e081      	b.n	800a554 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a456:	d101      	bne.n	800a45c <dir_next+0xac>
 800a458:	2301      	movs	r3, #1
 800a45a:	e07b      	b.n	800a554 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	429a      	cmp	r2, r3
 800a464:	d359      	bcc.n	800a51a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d104      	bne.n	800a476 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	61da      	str	r2, [r3, #28]
 800a472:	2304      	movs	r3, #4
 800a474:	e06e      	b.n	800a554 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	4619      	mov	r1, r3
 800a47e:	4610      	mov	r0, r2
 800a480:	f7ff fe3d 	bl	800a0fe <create_chain>
 800a484:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <dir_next+0xe0>
 800a48c:	2307      	movs	r3, #7
 800a48e:	e061      	b.n	800a554 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d101      	bne.n	800a49a <dir_next+0xea>
 800a496:	2302      	movs	r3, #2
 800a498:	e05c      	b.n	800a554 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a0:	d101      	bne.n	800a4a6 <dir_next+0xf6>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e056      	b.n	800a554 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f7ff fad6 	bl	8009a58 <sync_window>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <dir_next+0x106>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e04e      	b.n	800a554 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	899b      	ldrh	r3, [r3, #12]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	f7ff f8ff 	bl	80096c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	613b      	str	r3, [r7, #16]
 800a4cc:	6979      	ldr	r1, [r7, #20]
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f7ff fba4 	bl	8009c1c <clust2sect>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	635a      	str	r2, [r3, #52]	@ 0x34
 800a4da:	e012      	b.n	800a502 <dir_next+0x152>
						fs->wflag = 1;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f7ff fab8 	bl	8009a58 <sync_window>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <dir_next+0x142>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e030      	b.n	800a554 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	613b      	str	r3, [r7, #16]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4fc:	1c5a      	adds	r2, r3, #1
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	635a      	str	r2, [r3, #52]	@ 0x34
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	895b      	ldrh	r3, [r3, #10]
 800a506:	461a      	mov	r2, r3
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d3e6      	bcc.n	800a4dc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	1ad2      	subs	r2, r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	697a      	ldr	r2, [r7, #20]
 800a51e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a520:	6979      	ldr	r1, [r7, #20]
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f7ff fb7a 	bl	8009c1c <clust2sect>
 800a528:	4602      	mov	r2, r0
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	899b      	ldrh	r3, [r3, #12]
 800a53e:	461a      	mov	r2, r3
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	fbb3 f0f2 	udiv	r0, r3, r2
 800a546:	fb00 f202 	mul.w	r2, r0, r2
 800a54a:	1a9b      	subs	r3, r3, r2
 800a54c:	18ca      	adds	r2, r1, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3718      	adds	r7, #24
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a56c:	2100      	movs	r1, #0
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7ff fe95 	bl	800a29e <dir_sdi>
 800a574:	4603      	mov	r3, r0
 800a576:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a578:	7dfb      	ldrb	r3, [r7, #23]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d12b      	bne.n	800a5d6 <dir_alloc+0x7a>
		n = 0;
 800a57e:	2300      	movs	r3, #0
 800a580:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	4619      	mov	r1, r3
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f7ff faa9 	bl	8009ae0 <move_window>
 800a58e:	4603      	mov	r3, r0
 800a590:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a592:	7dfb      	ldrb	r3, [r7, #23]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d11d      	bne.n	800a5d4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6a1b      	ldr	r3, [r3, #32]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	2be5      	cmp	r3, #229	@ 0xe5
 800a5a0:	d004      	beq.n	800a5ac <dir_alloc+0x50>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d107      	bne.n	800a5bc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	613b      	str	r3, [r7, #16]
 800a5b2:	693a      	ldr	r2, [r7, #16]
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d102      	bne.n	800a5c0 <dir_alloc+0x64>
 800a5ba:	e00c      	b.n	800a5d6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a5bc:	2300      	movs	r3, #0
 800a5be:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a5c0:	2101      	movs	r1, #1
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7ff fef4 	bl	800a3b0 <dir_next>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a5cc:	7dfb      	ldrb	r3, [r7, #23]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d0d7      	beq.n	800a582 <dir_alloc+0x26>
 800a5d2:	e000      	b.n	800a5d6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a5d4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
 800a5d8:	2b04      	cmp	r3, #4
 800a5da:	d101      	bne.n	800a5e0 <dir_alloc+0x84>
 800a5dc:	2307      	movs	r3, #7
 800a5de:	75fb      	strb	r3, [r7, #23]
	return res;
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	331a      	adds	r3, #26
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe ffc1 	bl	8009580 <ld_word>
 800a5fe:	4603      	mov	r3, r0
 800a600:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	2b03      	cmp	r3, #3
 800a608:	d109      	bne.n	800a61e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	3314      	adds	r3, #20
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe ffb6 	bl	8009580 <ld_word>
 800a614:	4603      	mov	r3, r0
 800a616:	041b      	lsls	r3, r3, #16
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a61e:	68fb      	ldr	r3, [r7, #12]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	331a      	adds	r3, #26
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	b292      	uxth	r2, r2
 800a63c:	4611      	mov	r1, r2
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe ffd9 	bl	80095f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d109      	bne.n	800a660 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f103 0214 	add.w	r2, r3, #20
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	0c1b      	lsrs	r3, r3, #16
 800a656:	b29b      	uxth	r3, r3
 800a658:	4619      	mov	r1, r3
 800a65a:	4610      	mov	r0, r2
 800a65c:	f7fe ffcb 	bl	80095f6 <st_word>
	}
}
 800a660:	bf00      	nop
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a668:	b590      	push	{r4, r7, lr}
 800a66a:	b087      	sub	sp, #28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	331a      	adds	r3, #26
 800a676:	4618      	mov	r0, r3
 800a678:	f7fe ff82 	bl	8009580 <ld_word>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d001      	beq.n	800a686 <cmp_lfn+0x1e>
 800a682:	2300      	movs	r3, #0
 800a684:	e059      	b.n	800a73a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a68e:	1e5a      	subs	r2, r3, #1
 800a690:	4613      	mov	r3, r2
 800a692:	005b      	lsls	r3, r3, #1
 800a694:	4413      	add	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a69c:	2301      	movs	r3, #1
 800a69e:	81fb      	strh	r3, [r7, #14]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	613b      	str	r3, [r7, #16]
 800a6a4:	e033      	b.n	800a70e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a6a6:	4a27      	ldr	r2, [pc, #156]	@ (800a744 <cmp_lfn+0xdc>)
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fe ff63 	bl	8009580 <ld_word>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a6be:	89fb      	ldrh	r3, [r7, #14]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d01a      	beq.n	800a6fa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	2bfe      	cmp	r3, #254	@ 0xfe
 800a6c8:	d812      	bhi.n	800a6f0 <cmp_lfn+0x88>
 800a6ca:	89bb      	ldrh	r3, [r7, #12]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f002 ff01 	bl	800d4d4 <ff_wtoupper>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	461c      	mov	r4, r3
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	617a      	str	r2, [r7, #20]
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f002 fef5 	bl	800d4d4 <ff_wtoupper>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	429c      	cmp	r4, r3
 800a6ee:	d001      	beq.n	800a6f4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	e022      	b.n	800a73a <cmp_lfn+0xd2>
			}
			wc = uc;
 800a6f4:	89bb      	ldrh	r3, [r7, #12]
 800a6f6:	81fb      	strh	r3, [r7, #14]
 800a6f8:	e006      	b.n	800a708 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a6fa:	89bb      	ldrh	r3, [r7, #12]
 800a6fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a700:	4293      	cmp	r3, r2
 800a702:	d001      	beq.n	800a708 <cmp_lfn+0xa0>
 800a704:	2300      	movs	r3, #0
 800a706:	e018      	b.n	800a73a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	3301      	adds	r3, #1
 800a70c:	613b      	str	r3, [r7, #16]
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	2b0c      	cmp	r3, #12
 800a712:	d9c8      	bls.n	800a6a6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00b      	beq.n	800a738 <cmp_lfn+0xd0>
 800a720:	89fb      	ldrh	r3, [r7, #14]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d008      	beq.n	800a738 <cmp_lfn+0xd0>
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	4413      	add	r3, r2
 800a72e:	881b      	ldrh	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <cmp_lfn+0xd0>
 800a734:	2300      	movs	r3, #0
 800a736:	e000      	b.n	800a73a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a738:	2301      	movs	r3, #1
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	371c      	adds	r7, #28
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd90      	pop	{r4, r7, pc}
 800a742:	bf00      	nop
 800a744:	08012b38 	.word	0x08012b38

0800a748 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	331a      	adds	r3, #26
 800a756:	4618      	mov	r0, r3
 800a758:	f7fe ff12 	bl	8009580 <ld_word>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <pick_lfn+0x1e>
 800a762:	2300      	movs	r3, #0
 800a764:	e04d      	b.n	800a802 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a76e:	1e5a      	subs	r2, r3, #1
 800a770:	4613      	mov	r3, r2
 800a772:	005b      	lsls	r3, r3, #1
 800a774:	4413      	add	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a77c:	2301      	movs	r3, #1
 800a77e:	81fb      	strh	r3, [r7, #14]
 800a780:	2300      	movs	r3, #0
 800a782:	613b      	str	r3, [r7, #16]
 800a784:	e028      	b.n	800a7d8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a786:	4a21      	ldr	r2, [pc, #132]	@ (800a80c <pick_lfn+0xc4>)
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	4413      	add	r3, r2
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	4413      	add	r3, r2
 800a794:	4618      	mov	r0, r3
 800a796:	f7fe fef3 	bl	8009580 <ld_word>
 800a79a:	4603      	mov	r3, r0
 800a79c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a79e:	89fb      	ldrh	r3, [r7, #14]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00f      	beq.n	800a7c4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2bfe      	cmp	r3, #254	@ 0xfe
 800a7a8:	d901      	bls.n	800a7ae <pick_lfn+0x66>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e029      	b.n	800a802 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a7ae:	89bb      	ldrh	r3, [r7, #12]
 800a7b0:	81fb      	strh	r3, [r7, #14]
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	617a      	str	r2, [r7, #20]
 800a7b8:	005b      	lsls	r3, r3, #1
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	4413      	add	r3, r2
 800a7be:	89fa      	ldrh	r2, [r7, #14]
 800a7c0:	801a      	strh	r2, [r3, #0]
 800a7c2:	e006      	b.n	800a7d2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a7c4:	89bb      	ldrh	r3, [r7, #12]
 800a7c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d001      	beq.n	800a7d2 <pick_lfn+0x8a>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	e017      	b.n	800a802 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	613b      	str	r3, [r7, #16]
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	2b0c      	cmp	r3, #12
 800a7dc:	d9d3      	bls.n	800a786 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00a      	beq.n	800a800 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2bfe      	cmp	r3, #254	@ 0xfe
 800a7ee:	d901      	bls.n	800a7f4 <pick_lfn+0xac>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	e006      	b.n	800a802 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	005b      	lsls	r3, r3, #1
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a800:	2301      	movs	r3, #1
}
 800a802:	4618      	mov	r0, r3
 800a804:	3718      	adds	r7, #24
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	08012b38 	.word	0x08012b38

0800a810 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b088      	sub	sp, #32
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	4611      	mov	r1, r2
 800a81c:	461a      	mov	r2, r3
 800a81e:	460b      	mov	r3, r1
 800a820:	71fb      	strb	r3, [r7, #7]
 800a822:	4613      	mov	r3, r2
 800a824:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	330d      	adds	r3, #13
 800a82a:	79ba      	ldrb	r2, [r7, #6]
 800a82c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	330b      	adds	r3, #11
 800a832:	220f      	movs	r2, #15
 800a834:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	330c      	adds	r3, #12
 800a83a:	2200      	movs	r2, #0
 800a83c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	331a      	adds	r3, #26
 800a842:	2100      	movs	r1, #0
 800a844:	4618      	mov	r0, r3
 800a846:	f7fe fed6 	bl	80095f6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a84a:	79fb      	ldrb	r3, [r7, #7]
 800a84c:	1e5a      	subs	r2, r3, #1
 800a84e:	4613      	mov	r3, r2
 800a850:	005b      	lsls	r3, r3, #1
 800a852:	4413      	add	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	82fb      	strh	r3, [r7, #22]
 800a85e:	2300      	movs	r3, #0
 800a860:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a862:	8afb      	ldrh	r3, [r7, #22]
 800a864:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a868:	4293      	cmp	r3, r2
 800a86a:	d007      	beq.n	800a87c <put_lfn+0x6c>
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	1c5a      	adds	r2, r3, #1
 800a870:	61fa      	str	r2, [r7, #28]
 800a872:	005b      	lsls	r3, r3, #1
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4413      	add	r3, r2
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a87c:	4a17      	ldr	r2, [pc, #92]	@ (800a8dc <put_lfn+0xcc>)
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	4413      	add	r3, r2
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	461a      	mov	r2, r3
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	4413      	add	r3, r2
 800a88a:	8afa      	ldrh	r2, [r7, #22]
 800a88c:	4611      	mov	r1, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fe feb1 	bl	80095f6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a894:	8afb      	ldrh	r3, [r7, #22]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d102      	bne.n	800a8a0 <put_lfn+0x90>
 800a89a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a89e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	61bb      	str	r3, [r7, #24]
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	2b0c      	cmp	r3, #12
 800a8aa:	d9da      	bls.n	800a862 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a8ac:	8afb      	ldrh	r3, [r7, #22]
 800a8ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d006      	beq.n	800a8c4 <put_lfn+0xb4>
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	005b      	lsls	r3, r3, #1
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	4413      	add	r3, r2
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d103      	bne.n	800a8cc <put_lfn+0xbc>
 800a8c4:	79fb      	ldrb	r3, [r7, #7]
 800a8c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ca:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	79fa      	ldrb	r2, [r7, #7]
 800a8d0:	701a      	strb	r2, [r3, #0]
}
 800a8d2:	bf00      	nop
 800a8d4:	3720      	adds	r7, #32
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	08012b38 	.word	0x08012b38

0800a8e0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08c      	sub	sp, #48	@ 0x30
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
 800a8ec:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a8ee:	220b      	movs	r2, #11
 800a8f0:	68b9      	ldr	r1, [r7, #8]
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f7fe fec6 	bl	8009684 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	2b05      	cmp	r3, #5
 800a8fc:	d92b      	bls.n	800a956 <gen_numname+0x76>
		sr = seq;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a902:	e022      	b.n	800a94a <gen_numname+0x6a>
			wc = *lfn++;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	1c9a      	adds	r2, r3, #2
 800a908:	607a      	str	r2, [r7, #4]
 800a90a:	881b      	ldrh	r3, [r3, #0]
 800a90c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800a90e:	2300      	movs	r3, #0
 800a910:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a912:	e017      	b.n	800a944 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	005a      	lsls	r2, r3, #1
 800a918:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	4413      	add	r3, r2
 800a920:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a922:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a924:	085b      	lsrs	r3, r3, #1
 800a926:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d005      	beq.n	800a93e <gen_numname+0x5e>
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800a938:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800a93c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a940:	3301      	adds	r3, #1
 800a942:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a946:	2b0f      	cmp	r3, #15
 800a948:	d9e4      	bls.n	800a914 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	881b      	ldrh	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1d8      	bne.n	800a904 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a956:	2307      	movs	r3, #7
 800a958:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	f003 030f 	and.w	r3, r3, #15
 800a962:	b2db      	uxtb	r3, r3
 800a964:	3330      	adds	r3, #48	@ 0x30
 800a966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800a96a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a96e:	2b39      	cmp	r3, #57	@ 0x39
 800a970:	d904      	bls.n	800a97c <gen_numname+0x9c>
 800a972:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a976:	3307      	adds	r3, #7
 800a978:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800a97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97e:	1e5a      	subs	r2, r3, #1
 800a980:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a982:	3330      	adds	r3, #48	@ 0x30
 800a984:	443b      	add	r3, r7
 800a986:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a98a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	091b      	lsrs	r3, r3, #4
 800a992:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1df      	bne.n	800a95a <gen_numname+0x7a>
	ns[i] = '~';
 800a99a:	f107 0214 	add.w	r2, r7, #20
 800a99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a0:	4413      	add	r3, r2
 800a9a2:	227e      	movs	r2, #126	@ 0x7e
 800a9a4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9aa:	e002      	b.n	800a9b2 <gen_numname+0xd2>
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d205      	bcs.n	800a9c6 <gen_numname+0xe6>
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9be:	4413      	add	r3, r2
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	2b20      	cmp	r3, #32
 800a9c4:	d1f2      	bne.n	800a9ac <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c8:	2b07      	cmp	r3, #7
 800a9ca:	d807      	bhi.n	800a9dc <gen_numname+0xfc>
 800a9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a9d2:	3330      	adds	r3, #48	@ 0x30
 800a9d4:	443b      	add	r3, r7
 800a9d6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a9da:	e000      	b.n	800a9de <gen_numname+0xfe>
 800a9dc:	2120      	movs	r1, #32
 800a9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	627a      	str	r2, [r7, #36]	@ 0x24
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	460a      	mov	r2, r1
 800a9ea:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ee:	2b07      	cmp	r3, #7
 800a9f0:	d9e9      	bls.n	800a9c6 <gen_numname+0xe6>
}
 800a9f2:	bf00      	nop
 800a9f4:	bf00      	nop
 800a9f6:	3730      	adds	r7, #48	@ 0x30
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800aa08:	230b      	movs	r3, #11
 800aa0a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	0852      	lsrs	r2, r2, #1
 800aa12:	01db      	lsls	r3, r3, #7
 800aa14:	4313      	orrs	r3, r2
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	1c59      	adds	r1, r3, #1
 800aa1c:	6079      	str	r1, [r7, #4]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	4413      	add	r3, r2
 800aa22:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	3b01      	subs	r3, #1
 800aa28:	60bb      	str	r3, [r7, #8]
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1ed      	bne.n	800aa0c <sum_sfn+0x10>
	return sum;
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b086      	sub	sp, #24
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800aa48:	2304      	movs	r3, #4
 800aa4a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800aa52:	23ff      	movs	r3, #255	@ 0xff
 800aa54:	757b      	strb	r3, [r7, #21]
 800aa56:	23ff      	movs	r3, #255	@ 0xff
 800aa58:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800aa5a:	e081      	b.n	800ab60 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	4619      	mov	r1, r3
 800aa62:	6938      	ldr	r0, [r7, #16]
 800aa64:	f7ff f83c 	bl	8009ae0 <move_window>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d17c      	bne.n	800ab6c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800aa7a:	7dbb      	ldrb	r3, [r7, #22]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d102      	bne.n	800aa86 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800aa80:	2304      	movs	r3, #4
 800aa82:	75fb      	strb	r3, [r7, #23]
 800aa84:	e077      	b.n	800ab76 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	330b      	adds	r3, #11
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa92:	73fb      	strb	r3, [r7, #15]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	7bfa      	ldrb	r2, [r7, #15]
 800aa98:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800aa9a:	7dbb      	ldrb	r3, [r7, #22]
 800aa9c:	2be5      	cmp	r3, #229	@ 0xe5
 800aa9e:	d00e      	beq.n	800aabe <dir_read+0x80>
 800aaa0:	7dbb      	ldrb	r3, [r7, #22]
 800aaa2:	2b2e      	cmp	r3, #46	@ 0x2e
 800aaa4:	d00b      	beq.n	800aabe <dir_read+0x80>
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
 800aaa8:	f023 0320 	bic.w	r3, r3, #32
 800aaac:	2b08      	cmp	r3, #8
 800aaae:	bf0c      	ite	eq
 800aab0:	2301      	moveq	r3, #1
 800aab2:	2300      	movne	r3, #0
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	461a      	mov	r2, r3
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d002      	beq.n	800aac4 <dir_read+0x86>
				ord = 0xFF;
 800aabe:	23ff      	movs	r3, #255	@ 0xff
 800aac0:	757b      	strb	r3, [r7, #21]
 800aac2:	e044      	b.n	800ab4e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	2b0f      	cmp	r3, #15
 800aac8:	d12f      	bne.n	800ab2a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800aaca:	7dbb      	ldrb	r3, [r7, #22]
 800aacc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00d      	beq.n	800aaf0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a1b      	ldr	r3, [r3, #32]
 800aad8:	7b5b      	ldrb	r3, [r3, #13]
 800aada:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800aadc:	7dbb      	ldrb	r3, [r7, #22]
 800aade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aae2:	75bb      	strb	r3, [r7, #22]
 800aae4:	7dbb      	ldrb	r3, [r7, #22]
 800aae6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	695a      	ldr	r2, [r3, #20]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800aaf0:	7dba      	ldrb	r2, [r7, #22]
 800aaf2:	7d7b      	ldrb	r3, [r7, #21]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d115      	bne.n	800ab24 <dir_read+0xe6>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a1b      	ldr	r3, [r3, #32]
 800aafc:	330d      	adds	r3, #13
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	7d3a      	ldrb	r2, [r7, #20]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d10e      	bne.n	800ab24 <dir_read+0xe6>
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	691a      	ldr	r2, [r3, #16]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	4619      	mov	r1, r3
 800ab10:	4610      	mov	r0, r2
 800ab12:	f7ff fe19 	bl	800a748 <pick_lfn>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d003      	beq.n	800ab24 <dir_read+0xe6>
 800ab1c:	7d7b      	ldrb	r3, [r7, #21]
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	e000      	b.n	800ab26 <dir_read+0xe8>
 800ab24:	23ff      	movs	r3, #255	@ 0xff
 800ab26:	757b      	strb	r3, [r7, #21]
 800ab28:	e011      	b.n	800ab4e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ab2a:	7d7b      	ldrb	r3, [r7, #21]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d109      	bne.n	800ab44 <dir_read+0x106>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a1b      	ldr	r3, [r3, #32]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff ff61 	bl	800a9fc <sum_sfn>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	7d3b      	ldrb	r3, [r7, #20]
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d015      	beq.n	800ab70 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f04f 32ff 	mov.w	r2, #4294967295
 800ab4a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800ab4c:	e010      	b.n	800ab70 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ab4e:	2100      	movs	r1, #0
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7ff fc2d 	bl	800a3b0 <dir_next>
 800ab56:	4603      	mov	r3, r0
 800ab58:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ab5a:	7dfb      	ldrb	r3, [r7, #23]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d109      	bne.n	800ab74 <dir_read+0x136>
	while (dp->sect) {
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	69db      	ldr	r3, [r3, #28]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f47f af79 	bne.w	800aa5c <dir_read+0x1e>
 800ab6a:	e004      	b.n	800ab76 <dir_read+0x138>
		if (res != FR_OK) break;
 800ab6c:	bf00      	nop
 800ab6e:	e002      	b.n	800ab76 <dir_read+0x138>
					break;
 800ab70:	bf00      	nop
 800ab72:	e000      	b.n	800ab76 <dir_read+0x138>
		if (res != FR_OK) break;
 800ab74:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <dir_read+0x144>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	61da      	str	r2, [r3, #28]
	return res;
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7ff fb7e 	bl	800a29e <dir_sdi>
 800aba2:	4603      	mov	r3, r0
 800aba4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <dir_find+0x24>
 800abac:	7dfb      	ldrb	r3, [r7, #23]
 800abae:	e0a9      	b.n	800ad04 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800abb0:	23ff      	movs	r3, #255	@ 0xff
 800abb2:	753b      	strb	r3, [r7, #20]
 800abb4:	7d3b      	ldrb	r3, [r7, #20]
 800abb6:	757b      	strb	r3, [r7, #21]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f04f 32ff 	mov.w	r2, #4294967295
 800abbe:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	69db      	ldr	r3, [r3, #28]
 800abc4:	4619      	mov	r1, r3
 800abc6:	6938      	ldr	r0, [r7, #16]
 800abc8:	f7fe ff8a 	bl	8009ae0 <move_window>
 800abcc:	4603      	mov	r3, r0
 800abce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f040 8090 	bne.w	800acf8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a1b      	ldr	r3, [r3, #32]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800abe0:	7dbb      	ldrb	r3, [r7, #22]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d102      	bne.n	800abec <dir_find+0x60>
 800abe6:	2304      	movs	r3, #4
 800abe8:	75fb      	strb	r3, [r7, #23]
 800abea:	e08a      	b.n	800ad02 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a1b      	ldr	r3, [r3, #32]
 800abf0:	330b      	adds	r3, #11
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abf8:	73fb      	strb	r3, [r7, #15]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	7bfa      	ldrb	r2, [r7, #15]
 800abfe:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ac00:	7dbb      	ldrb	r3, [r7, #22]
 800ac02:	2be5      	cmp	r3, #229	@ 0xe5
 800ac04:	d007      	beq.n	800ac16 <dir_find+0x8a>
 800ac06:	7bfb      	ldrb	r3, [r7, #15]
 800ac08:	f003 0308 	and.w	r3, r3, #8
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d009      	beq.n	800ac24 <dir_find+0x98>
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
 800ac12:	2b0f      	cmp	r3, #15
 800ac14:	d006      	beq.n	800ac24 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ac16:	23ff      	movs	r3, #255	@ 0xff
 800ac18:	757b      	strb	r3, [r7, #21]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac20:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac22:	e05e      	b.n	800ace2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
 800ac26:	2b0f      	cmp	r3, #15
 800ac28:	d136      	bne.n	800ac98 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ac30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d154      	bne.n	800ace2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ac38:	7dbb      	ldrb	r3, [r7, #22]
 800ac3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00d      	beq.n	800ac5e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	7b5b      	ldrb	r3, [r3, #13]
 800ac48:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ac4a:	7dbb      	ldrb	r3, [r7, #22]
 800ac4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac50:	75bb      	strb	r3, [r7, #22]
 800ac52:	7dbb      	ldrb	r3, [r7, #22]
 800ac54:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	695a      	ldr	r2, [r3, #20]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ac5e:	7dba      	ldrb	r2, [r7, #22]
 800ac60:	7d7b      	ldrb	r3, [r7, #21]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d115      	bne.n	800ac92 <dir_find+0x106>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	330d      	adds	r3, #13
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	7d3a      	ldrb	r2, [r7, #20]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d10e      	bne.n	800ac92 <dir_find+0x106>
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	691a      	ldr	r2, [r3, #16]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a1b      	ldr	r3, [r3, #32]
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	4610      	mov	r0, r2
 800ac80:	f7ff fcf2 	bl	800a668 <cmp_lfn>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d003      	beq.n	800ac92 <dir_find+0x106>
 800ac8a:	7d7b      	ldrb	r3, [r7, #21]
 800ac8c:	3b01      	subs	r3, #1
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	e000      	b.n	800ac94 <dir_find+0x108>
 800ac92:	23ff      	movs	r3, #255	@ 0xff
 800ac94:	757b      	strb	r3, [r7, #21]
 800ac96:	e024      	b.n	800ace2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ac98:	7d7b      	ldrb	r3, [r7, #21]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d109      	bne.n	800acb2 <dir_find+0x126>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a1b      	ldr	r3, [r3, #32]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff feaa 	bl	800a9fc <sum_sfn>
 800aca8:	4603      	mov	r3, r0
 800acaa:	461a      	mov	r2, r3
 800acac:	7d3b      	ldrb	r3, [r7, #20]
 800acae:	4293      	cmp	r3, r2
 800acb0:	d024      	beq.n	800acfc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800acb8:	f003 0301 	and.w	r3, r3, #1
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10a      	bne.n	800acd6 <dir_find+0x14a>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a18      	ldr	r0, [r3, #32]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	3324      	adds	r3, #36	@ 0x24
 800acc8:	220b      	movs	r2, #11
 800acca:	4619      	mov	r1, r3
 800accc:	f7fe fd16 	bl	80096fc <mem_cmp>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d014      	beq.n	800ad00 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800acd6:	23ff      	movs	r3, #255	@ 0xff
 800acd8:	757b      	strb	r3, [r7, #21]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f04f 32ff 	mov.w	r2, #4294967295
 800ace0:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ace2:	2100      	movs	r1, #0
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7ff fb63 	bl	800a3b0 <dir_next>
 800acea:	4603      	mov	r3, r0
 800acec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800acee:	7dfb      	ldrb	r3, [r7, #23]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f43f af65 	beq.w	800abc0 <dir_find+0x34>
 800acf6:	e004      	b.n	800ad02 <dir_find+0x176>
		if (res != FR_OK) break;
 800acf8:	bf00      	nop
 800acfa:	e002      	b.n	800ad02 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800acfc:	bf00      	nop
 800acfe:	e000      	b.n	800ad02 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ad00:	bf00      	nop

	return res;
 800ad02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3718      	adds	r7, #24
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08c      	sub	sp, #48	@ 0x30
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ad20:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d001      	beq.n	800ad2c <dir_register+0x20>
 800ad28:	2306      	movs	r3, #6
 800ad2a:	e0e0      	b.n	800aeee <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad30:	e002      	b.n	800ad38 <dir_register+0x2c>
 800ad32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad34:	3301      	adds	r3, #1
 800ad36:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	691a      	ldr	r2, [r3, #16]
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3e:	005b      	lsls	r3, r3, #1
 800ad40:	4413      	add	r3, r2
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1f4      	bne.n	800ad32 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800ad4e:	f107 030c 	add.w	r3, r7, #12
 800ad52:	220c      	movs	r2, #12
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fe fc95 	bl	8009684 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d032      	beq.n	800adca <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2240      	movs	r2, #64	@ 0x40
 800ad68:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad70:	e016      	b.n	800ada0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	691a      	ldr	r2, [r3, #16]
 800ad7c:	f107 010c 	add.w	r1, r7, #12
 800ad80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad82:	f7ff fdad 	bl	800a8e0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7ff ff00 	bl	800ab8c <dir_find>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800ad92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d106      	bne.n	800ada8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ad9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ada0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada2:	2b63      	cmp	r3, #99	@ 0x63
 800ada4:	d9e5      	bls.n	800ad72 <dir_register+0x66>
 800ada6:	e000      	b.n	800adaa <dir_register+0x9e>
			if (res != FR_OK) break;
 800ada8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800adaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adac:	2b64      	cmp	r3, #100	@ 0x64
 800adae:	d101      	bne.n	800adb4 <dir_register+0xa8>
 800adb0:	2307      	movs	r3, #7
 800adb2:	e09c      	b.n	800aeee <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800adb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800adb8:	2b04      	cmp	r3, #4
 800adba:	d002      	beq.n	800adc2 <dir_register+0xb6>
 800adbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800adc0:	e095      	b.n	800aeee <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800adc2:	7dfa      	ldrb	r2, [r7, #23]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	f003 0302 	and.w	r3, r3, #2
 800add0:	2b00      	cmp	r3, #0
 800add2:	d007      	beq.n	800ade4 <dir_register+0xd8>
 800add4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add6:	330c      	adds	r3, #12
 800add8:	4a47      	ldr	r2, [pc, #284]	@ (800aef8 <dir_register+0x1ec>)
 800adda:	fba2 2303 	umull	r2, r3, r2, r3
 800adde:	089b      	lsrs	r3, r3, #2
 800ade0:	3301      	adds	r3, #1
 800ade2:	e000      	b.n	800ade6 <dir_register+0xda>
 800ade4:	2301      	movs	r3, #1
 800ade6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ade8:	6a39      	ldr	r1, [r7, #32]
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7ff fbb6 	bl	800a55c <dir_alloc>
 800adf0:	4603      	mov	r3, r0
 800adf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800adf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d148      	bne.n	800ae90 <dir_register+0x184>
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	623b      	str	r3, [r7, #32]
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d042      	beq.n	800ae90 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	695a      	ldr	r2, [r3, #20]
 800ae0e:	6a3b      	ldr	r3, [r7, #32]
 800ae10:	015b      	lsls	r3, r3, #5
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	4619      	mov	r1, r3
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7ff fa41 	bl	800a29e <dir_sdi>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ae22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d132      	bne.n	800ae90 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3324      	adds	r3, #36	@ 0x24
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff fde4 	bl	800a9fc <sum_sfn>
 800ae34:	4603      	mov	r3, r0
 800ae36:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	69db      	ldr	r3, [r3, #28]
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	69f8      	ldr	r0, [r7, #28]
 800ae40:	f7fe fe4e 	bl	8009ae0 <move_window>
 800ae44:	4603      	mov	r3, r0
 800ae46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800ae4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d11d      	bne.n	800ae8e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	6918      	ldr	r0, [r3, #16]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a19      	ldr	r1, [r3, #32]
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	b2da      	uxtb	r2, r3
 800ae5e:	7efb      	ldrb	r3, [r7, #27]
 800ae60:	f7ff fcd6 	bl	800a810 <put_lfn>
				fs->wflag = 1;
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	2201      	movs	r2, #1
 800ae68:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7ff fa9f 	bl	800a3b0 <dir_next>
 800ae72:	4603      	mov	r3, r0
 800ae74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800ae78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d107      	bne.n	800ae90 <dir_register+0x184>
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	623b      	str	r3, [r7, #32]
 800ae86:	6a3b      	ldr	r3, [r7, #32]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1d5      	bne.n	800ae38 <dir_register+0x12c>
 800ae8c:	e000      	b.n	800ae90 <dir_register+0x184>
				if (res != FR_OK) break;
 800ae8e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ae90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d128      	bne.n	800aeea <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	69db      	ldr	r3, [r3, #28]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	69f8      	ldr	r0, [r7, #28]
 800aea0:	f7fe fe1e 	bl	8009ae0 <move_window>
 800aea4:	4603      	mov	r3, r0
 800aea6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800aeaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d11b      	bne.n	800aeea <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	2220      	movs	r2, #32
 800aeb8:	2100      	movs	r1, #0
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fe fc03 	bl	80096c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a18      	ldr	r0, [r3, #32]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	3324      	adds	r3, #36	@ 0x24
 800aec8:	220b      	movs	r2, #11
 800aeca:	4619      	mov	r1, r3
 800aecc:	f7fe fbda 	bl	8009684 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	330c      	adds	r3, #12
 800aedc:	f002 0218 	and.w	r2, r2, #24
 800aee0:	b2d2      	uxtb	r2, r2
 800aee2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	2201      	movs	r2, #1
 800aee8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aeea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3730      	adds	r7, #48	@ 0x30
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	4ec4ec4f 	.word	0x4ec4ec4f

0800aefc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af18:	d007      	beq.n	800af2a <dir_remove+0x2e>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7ff f9bc 	bl	800a29e <dir_sdi>
 800af26:	4603      	mov	r3, r0
 800af28:	e000      	b.n	800af2c <dir_remove+0x30>
 800af2a:	2300      	movs	r3, #0
 800af2c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af2e:	7dfb      	ldrb	r3, [r7, #23]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d128      	bne.n	800af86 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	69db      	ldr	r3, [r3, #28]
 800af38:	4619      	mov	r1, r3
 800af3a:	6938      	ldr	r0, [r7, #16]
 800af3c:	f7fe fdd0 	bl	8009ae0 <move_window>
 800af40:	4603      	mov	r3, r0
 800af42:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800af44:	7dfb      	ldrb	r3, [r7, #23]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d115      	bne.n	800af76 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	22e5      	movs	r2, #229	@ 0xe5
 800af50:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	2201      	movs	r2, #1
 800af56:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	695b      	ldr	r3, [r3, #20]
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d90b      	bls.n	800af7a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800af62:	2100      	movs	r1, #0
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7ff fa23 	bl	800a3b0 <dir_next>
 800af6a:	4603      	mov	r3, r0
 800af6c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d0df      	beq.n	800af34 <dir_remove+0x38>
 800af74:	e002      	b.n	800af7c <dir_remove+0x80>
			if (res != FR_OK) break;
 800af76:	bf00      	nop
 800af78:	e000      	b.n	800af7c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800af7a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800af7c:	7dfb      	ldrb	r3, [r7, #23]
 800af7e:	2b04      	cmp	r3, #4
 800af80:	d101      	bne.n	800af86 <dir_remove+0x8a>
 800af82:	2302      	movs	r3, #2
 800af84:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800af86:	7dfb      	ldrb	r3, [r7, #23]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b088      	sub	sp, #32
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	2200      	movs	r2, #0
 800afa4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	69db      	ldr	r3, [r3, #28]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 80ca 	beq.w	800b144 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb8:	d032      	beq.n	800b020 <get_fileinfo+0x90>
			i = j = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	61bb      	str	r3, [r7, #24]
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800afc2:	e01b      	b.n	800affc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800afc4:	89fb      	ldrh	r3, [r7, #14]
 800afc6:	2100      	movs	r1, #0
 800afc8:	4618      	mov	r0, r3
 800afca:	f002 fa47 	bl	800d45c <ff_convert>
 800afce:	4603      	mov	r3, r0
 800afd0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800afd2:	89fb      	ldrh	r3, [r7, #14]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d102      	bne.n	800afde <get_fileinfo+0x4e>
 800afd8:	2300      	movs	r3, #0
 800afda:	61fb      	str	r3, [r7, #28]
 800afdc:	e01a      	b.n	800b014 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	2bfe      	cmp	r3, #254	@ 0xfe
 800afe2:	d902      	bls.n	800afea <get_fileinfo+0x5a>
 800afe4:	2300      	movs	r3, #0
 800afe6:	61fb      	str	r3, [r7, #28]
 800afe8:	e014      	b.n	800b014 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	1c5a      	adds	r2, r3, #1
 800afee:	61fa      	str	r2, [r7, #28]
 800aff0:	89fa      	ldrh	r2, [r7, #14]
 800aff2:	b2d1      	uxtb	r1, r2
 800aff4:	683a      	ldr	r2, [r7, #0]
 800aff6:	4413      	add	r3, r2
 800aff8:	460a      	mov	r2, r1
 800affa:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	691a      	ldr	r2, [r3, #16]
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	1c59      	adds	r1, r3, #1
 800b004:	61b9      	str	r1, [r7, #24]
 800b006:	005b      	lsls	r3, r3, #1
 800b008:	4413      	add	r3, r2
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	81fb      	strh	r3, [r7, #14]
 800b00e:	89fb      	ldrh	r3, [r7, #14]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1d7      	bne.n	800afc4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	4413      	add	r3, r2
 800b01a:	3316      	adds	r3, #22
 800b01c:	2200      	movs	r2, #0
 800b01e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	61bb      	str	r3, [r7, #24]
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b028:	683a      	ldr	r2, [r7, #0]
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	4413      	add	r3, r2
 800b02e:	3316      	adds	r3, #22
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b034:	e04d      	b.n	800b0d2 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a1a      	ldr	r2, [r3, #32]
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	1c59      	adds	r1, r3, #1
 800b03e:	61f9      	str	r1, [r7, #28]
 800b040:	4413      	add	r3, r2
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b046:	7dfb      	ldrb	r3, [r7, #23]
 800b048:	2b20      	cmp	r3, #32
 800b04a:	d041      	beq.n	800b0d0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b04c:	7dfb      	ldrb	r3, [r7, #23]
 800b04e:	2b05      	cmp	r3, #5
 800b050:	d101      	bne.n	800b056 <get_fileinfo+0xc6>
 800b052:	23e5      	movs	r3, #229	@ 0xe5
 800b054:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	2b09      	cmp	r3, #9
 800b05a:	d10f      	bne.n	800b07c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800b05c:	89bb      	ldrh	r3, [r7, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d105      	bne.n	800b06e <get_fileinfo+0xde>
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	4413      	add	r3, r2
 800b068:	3316      	adds	r3, #22
 800b06a:	222e      	movs	r2, #46	@ 0x2e
 800b06c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	1c5a      	adds	r2, r3, #1
 800b072:	61ba      	str	r2, [r7, #24]
 800b074:	683a      	ldr	r2, [r7, #0]
 800b076:	4413      	add	r3, r2
 800b078:	222e      	movs	r2, #46	@ 0x2e
 800b07a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b07c:	683a      	ldr	r2, [r7, #0]
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	4413      	add	r3, r2
 800b082:	3309      	adds	r3, #9
 800b084:	7dfa      	ldrb	r2, [r7, #23]
 800b086:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b088:	89bb      	ldrh	r3, [r7, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d11c      	bne.n	800b0c8 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b08e:	7dfb      	ldrb	r3, [r7, #23]
 800b090:	2b40      	cmp	r3, #64	@ 0x40
 800b092:	d913      	bls.n	800b0bc <get_fileinfo+0x12c>
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	2b5a      	cmp	r3, #90	@ 0x5a
 800b098:	d810      	bhi.n	800b0bc <get_fileinfo+0x12c>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a1b      	ldr	r3, [r3, #32]
 800b09e:	330c      	adds	r3, #12
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	2b08      	cmp	r3, #8
 800b0a8:	d901      	bls.n	800b0ae <get_fileinfo+0x11e>
 800b0aa:	2310      	movs	r3, #16
 800b0ac:	e000      	b.n	800b0b0 <get_fileinfo+0x120>
 800b0ae:	2308      	movs	r3, #8
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d002      	beq.n	800b0bc <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	3320      	adds	r3, #32
 800b0ba:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b0bc:	683a      	ldr	r2, [r7, #0]
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	3316      	adds	r3, #22
 800b0c4:	7dfa      	ldrb	r2, [r7, #23]
 800b0c6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	61bb      	str	r3, [r7, #24]
 800b0ce:	e000      	b.n	800b0d2 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800b0d0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	2b0a      	cmp	r3, #10
 800b0d6:	d9ae      	bls.n	800b036 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b0d8:	89bb      	ldrh	r3, [r7, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10d      	bne.n	800b0fa <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800b0de:	683a      	ldr	r2, [r7, #0]
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	3316      	adds	r3, #22
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a1b      	ldr	r3, [r3, #32]
 800b0ee:	330c      	adds	r3, #12
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <get_fileinfo+0x16a>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	4413      	add	r3, r2
 800b100:	3309      	adds	r3, #9
 800b102:	2200      	movs	r2, #0
 800b104:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	7ada      	ldrb	r2, [r3, #11]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a1b      	ldr	r3, [r3, #32]
 800b114:	331c      	adds	r3, #28
 800b116:	4618      	mov	r0, r3
 800b118:	f7fe fa4a 	bl	80095b0 <ld_dword>
 800b11c:	4602      	mov	r2, r0
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a1b      	ldr	r3, [r3, #32]
 800b126:	3316      	adds	r3, #22
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fe fa41 	bl	80095b0 <ld_dword>
 800b12e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	b29a      	uxth	r2, r3
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	80da      	strh	r2, [r3, #6]
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	0c1b      	lsrs	r3, r3, #16
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	809a      	strh	r2, [r3, #4]
 800b142:	e000      	b.n	800b146 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b144:	bf00      	nop
}
 800b146:	3720      	adds	r7, #32
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08a      	sub	sp, #40	@ 0x28
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	613b      	str	r3, [r7, #16]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	2300      	movs	r3, #0
 800b166:	617b      	str	r3, [r7, #20]
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	1c5a      	adds	r2, r3, #1
 800b170:	61ba      	str	r2, [r7, #24]
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	4413      	add	r3, r2
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b17a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b17c:	2b1f      	cmp	r3, #31
 800b17e:	d940      	bls.n	800b202 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b180:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b182:	2b2f      	cmp	r3, #47	@ 0x2f
 800b184:	d006      	beq.n	800b194 <create_name+0x48>
 800b186:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b188:	2b5c      	cmp	r3, #92	@ 0x5c
 800b18a:	d110      	bne.n	800b1ae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b18c:	e002      	b.n	800b194 <create_name+0x48>
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	3301      	adds	r3, #1
 800b192:	61bb      	str	r3, [r7, #24]
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	4413      	add	r3, r2
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b19e:	d0f6      	beq.n	800b18e <create_name+0x42>
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b1aa:	d0f0      	beq.n	800b18e <create_name+0x42>
			break;
 800b1ac:	e02a      	b.n	800b204 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2bfe      	cmp	r3, #254	@ 0xfe
 800b1b2:	d901      	bls.n	800b1b8 <create_name+0x6c>
 800b1b4:	2306      	movs	r3, #6
 800b1b6:	e17d      	b.n	800b4b4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b1b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b1be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1c0:	2101      	movs	r1, #1
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f002 f94a 	bl	800d45c <ff_convert>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b1cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d101      	bne.n	800b1d6 <create_name+0x8a>
 800b1d2:	2306      	movs	r3, #6
 800b1d4:	e16e      	b.n	800b4b4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b1d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1d8:	2b7f      	cmp	r3, #127	@ 0x7f
 800b1da:	d809      	bhi.n	800b1f0 <create_name+0xa4>
 800b1dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1de:	4619      	mov	r1, r3
 800b1e0:	488d      	ldr	r0, [pc, #564]	@ (800b418 <create_name+0x2cc>)
 800b1e2:	f7fe fab2 	bl	800974a <chk_chr>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <create_name+0xa4>
 800b1ec:	2306      	movs	r3, #6
 800b1ee:	e161      	b.n	800b4b4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	617a      	str	r2, [r7, #20]
 800b1f6:	005b      	lsls	r3, r3, #1
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b1fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b200:	e7b4      	b.n	800b16c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b202:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b204:	693a      	ldr	r2, [r7, #16]
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	441a      	add	r2, r3
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b20e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b210:	2b1f      	cmp	r3, #31
 800b212:	d801      	bhi.n	800b218 <create_name+0xcc>
 800b214:	2304      	movs	r3, #4
 800b216:	e000      	b.n	800b21a <create_name+0xce>
 800b218:	2300      	movs	r3, #0
 800b21a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b21e:	e011      	b.n	800b244 <create_name+0xf8>
		w = lfn[di - 1];
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b226:	3b01      	subs	r3, #1
 800b228:	005b      	lsls	r3, r3, #1
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	4413      	add	r3, r2
 800b22e:	881b      	ldrh	r3, [r3, #0]
 800b230:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b232:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b234:	2b20      	cmp	r3, #32
 800b236:	d002      	beq.n	800b23e <create_name+0xf2>
 800b238:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b23a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b23c:	d106      	bne.n	800b24c <create_name+0x100>
		di--;
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	3b01      	subs	r3, #1
 800b242:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1ea      	bne.n	800b220 <create_name+0xd4>
 800b24a:	e000      	b.n	800b24e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b24c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	005b      	lsls	r3, r3, #1
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	4413      	add	r3, r2
 800b256:	2200      	movs	r2, #0
 800b258:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d101      	bne.n	800b264 <create_name+0x118>
 800b260:	2306      	movs	r3, #6
 800b262:	e127      	b.n	800b4b4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3324      	adds	r3, #36	@ 0x24
 800b268:	220b      	movs	r2, #11
 800b26a:	2120      	movs	r1, #32
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7fe fa2a 	bl	80096c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b272:	2300      	movs	r3, #0
 800b274:	61bb      	str	r3, [r7, #24]
 800b276:	e002      	b.n	800b27e <create_name+0x132>
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	3301      	adds	r3, #1
 800b27c:	61bb      	str	r3, [r7, #24]
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	005b      	lsls	r3, r3, #1
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	4413      	add	r3, r2
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	2b20      	cmp	r3, #32
 800b28a:	d0f5      	beq.n	800b278 <create_name+0x12c>
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	005b      	lsls	r3, r3, #1
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	4413      	add	r3, r2
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	2b2e      	cmp	r3, #46	@ 0x2e
 800b298:	d0ee      	beq.n	800b278 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d009      	beq.n	800b2b4 <create_name+0x168>
 800b2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2a4:	f043 0303 	orr.w	r3, r3, #3
 800b2a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b2ac:	e002      	b.n	800b2b4 <create_name+0x168>
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	617b      	str	r3, [r7, #20]
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d009      	beq.n	800b2ce <create_name+0x182>
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	005b      	lsls	r3, r3, #1
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	881b      	ldrh	r3, [r3, #0]
 800b2ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2cc:	d1ef      	bne.n	800b2ae <create_name+0x162>

	i = b = 0; ni = 8;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	623b      	str	r3, [r7, #32]
 800b2d8:	2308      	movs	r3, #8
 800b2da:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	1c5a      	adds	r2, r3, #1
 800b2e0:	61ba      	str	r2, [r7, #24]
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	881b      	ldrh	r3, [r3, #0]
 800b2ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b2ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 8090 	beq.w	800b414 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b2f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b2f6:	2b20      	cmp	r3, #32
 800b2f8:	d006      	beq.n	800b308 <create_name+0x1bc>
 800b2fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b2fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2fe:	d10a      	bne.n	800b316 <create_name+0x1ca>
 800b300:	69ba      	ldr	r2, [r7, #24]
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	429a      	cmp	r2, r3
 800b306:	d006      	beq.n	800b316 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b30c:	f043 0303 	orr.w	r3, r3, #3
 800b310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b314:	e07d      	b.n	800b412 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b316:	6a3a      	ldr	r2, [r7, #32]
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d203      	bcs.n	800b326 <create_name+0x1da>
 800b31e:	69ba      	ldr	r2, [r7, #24]
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	429a      	cmp	r2, r3
 800b324:	d123      	bne.n	800b36e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	2b0b      	cmp	r3, #11
 800b32a:	d106      	bne.n	800b33a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b32c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b330:	f043 0303 	orr.w	r3, r3, #3
 800b334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b338:	e075      	b.n	800b426 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b33a:	69ba      	ldr	r2, [r7, #24]
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d005      	beq.n	800b34e <create_name+0x202>
 800b342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b346:	f043 0303 	orr.w	r3, r3, #3
 800b34a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800b34e:	69ba      	ldr	r2, [r7, #24]
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	429a      	cmp	r2, r3
 800b354:	d866      	bhi.n	800b424 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	61bb      	str	r3, [r7, #24]
 800b35a:	2308      	movs	r3, #8
 800b35c:	623b      	str	r3, [r7, #32]
 800b35e:	230b      	movs	r3, #11
 800b360:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b362:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b36c:	e051      	b.n	800b412 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b36e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b370:	2b7f      	cmp	r3, #127	@ 0x7f
 800b372:	d914      	bls.n	800b39e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b374:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b376:	2100      	movs	r1, #0
 800b378:	4618      	mov	r0, r3
 800b37a:	f002 f86f 	bl	800d45c <ff_convert>
 800b37e:	4603      	mov	r3, r0
 800b380:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b382:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b384:	2b00      	cmp	r3, #0
 800b386:	d004      	beq.n	800b392 <create_name+0x246>
 800b388:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b38a:	3b80      	subs	r3, #128	@ 0x80
 800b38c:	4a23      	ldr	r2, [pc, #140]	@ (800b41c <create_name+0x2d0>)
 800b38e:	5cd3      	ldrb	r3, [r2, r3]
 800b390:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b392:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b396:	f043 0302 	orr.w	r3, r3, #2
 800b39a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b39e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d007      	beq.n	800b3b4 <create_name+0x268>
 800b3a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	481d      	ldr	r0, [pc, #116]	@ (800b420 <create_name+0x2d4>)
 800b3aa:	f7fe f9ce 	bl	800974a <chk_chr>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d008      	beq.n	800b3c6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b3b4:	235f      	movs	r3, #95	@ 0x5f
 800b3b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3bc:	f043 0303 	orr.w	r3, r3, #3
 800b3c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b3c4:	e01b      	b.n	800b3fe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b3c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3c8:	2b40      	cmp	r3, #64	@ 0x40
 800b3ca:	d909      	bls.n	800b3e0 <create_name+0x294>
 800b3cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3ce:	2b5a      	cmp	r3, #90	@ 0x5a
 800b3d0:	d806      	bhi.n	800b3e0 <create_name+0x294>
					b |= 2;
 800b3d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b3d6:	f043 0302 	orr.w	r3, r3, #2
 800b3da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b3de:	e00e      	b.n	800b3fe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b3e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3e2:	2b60      	cmp	r3, #96	@ 0x60
 800b3e4:	d90b      	bls.n	800b3fe <create_name+0x2b2>
 800b3e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3e8:	2b7a      	cmp	r3, #122	@ 0x7a
 800b3ea:	d808      	bhi.n	800b3fe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b3ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b3f0:	f043 0301 	orr.w	r3, r3, #1
 800b3f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b3f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3fa:	3b20      	subs	r3, #32
 800b3fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b3fe:	6a3b      	ldr	r3, [r7, #32]
 800b400:	1c5a      	adds	r2, r3, #1
 800b402:	623a      	str	r2, [r7, #32]
 800b404:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b406:	b2d1      	uxtb	r1, r2
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	4413      	add	r3, r2
 800b40c:	460a      	mov	r2, r1
 800b40e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b412:	e763      	b.n	800b2dc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b414:	bf00      	nop
 800b416:	e006      	b.n	800b426 <create_name+0x2da>
 800b418:	080129d4 	.word	0x080129d4
 800b41c:	08012ab8 	.word	0x08012ab8
 800b420:	080129e0 	.word	0x080129e0
			if (si > di) break;			/* No extension */
 800b424:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b42c:	2be5      	cmp	r3, #229	@ 0xe5
 800b42e:	d103      	bne.n	800b438 <create_name+0x2ec>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2205      	movs	r2, #5
 800b434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	2b08      	cmp	r3, #8
 800b43c:	d104      	bne.n	800b448 <create_name+0x2fc>
 800b43e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b448:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b44c:	f003 030c 	and.w	r3, r3, #12
 800b450:	2b0c      	cmp	r3, #12
 800b452:	d005      	beq.n	800b460 <create_name+0x314>
 800b454:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b458:	f003 0303 	and.w	r3, r3, #3
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d105      	bne.n	800b46c <create_name+0x320>
 800b460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b464:	f043 0302 	orr.w	r3, r3, #2
 800b468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b46c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b470:	f003 0302 	and.w	r3, r3, #2
 800b474:	2b00      	cmp	r3, #0
 800b476:	d117      	bne.n	800b4a8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b478:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b47c:	f003 0303 	and.w	r3, r3, #3
 800b480:	2b01      	cmp	r3, #1
 800b482:	d105      	bne.n	800b490 <create_name+0x344>
 800b484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b488:	f043 0310 	orr.w	r3, r3, #16
 800b48c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b490:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b494:	f003 030c 	and.w	r3, r3, #12
 800b498:	2b04      	cmp	r3, #4
 800b49a:	d105      	bne.n	800b4a8 <create_name+0x35c>
 800b49c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4a0:	f043 0308 	orr.w	r3, r3, #8
 800b4a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b4ae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800b4b2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3728      	adds	r7, #40	@ 0x28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b086      	sub	sp, #24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b4d0:	e002      	b.n	800b4d8 <follow_path+0x1c>
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	603b      	str	r3, [r7, #0]
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	2b2f      	cmp	r3, #47	@ 0x2f
 800b4de:	d0f8      	beq.n	800b4d2 <follow_path+0x16>
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	2b5c      	cmp	r3, #92	@ 0x5c
 800b4e6:	d0f4      	beq.n	800b4d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	2b1f      	cmp	r3, #31
 800b4f4:	d80a      	bhi.n	800b50c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2280      	movs	r2, #128	@ 0x80
 800b4fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b4fe:	2100      	movs	r1, #0
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7fe fecc 	bl	800a29e <dir_sdi>
 800b506:	4603      	mov	r3, r0
 800b508:	75fb      	strb	r3, [r7, #23]
 800b50a:	e048      	b.n	800b59e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b50c:	463b      	mov	r3, r7
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7ff fe1b 	bl	800b14c <create_name>
 800b516:	4603      	mov	r3, r0
 800b518:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d139      	bne.n	800b594 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7ff fb33 	bl	800ab8c <dir_find>
 800b526:	4603      	mov	r3, r0
 800b528:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b530:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b532:	7dfb      	ldrb	r3, [r7, #23]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00a      	beq.n	800b54e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b538:	7dfb      	ldrb	r3, [r7, #23]
 800b53a:	2b04      	cmp	r3, #4
 800b53c:	d12c      	bne.n	800b598 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b53e:	7afb      	ldrb	r3, [r7, #11]
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b00      	cmp	r3, #0
 800b546:	d127      	bne.n	800b598 <follow_path+0xdc>
 800b548:	2305      	movs	r3, #5
 800b54a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b54c:	e024      	b.n	800b598 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b54e:	7afb      	ldrb	r3, [r7, #11]
 800b550:	f003 0304 	and.w	r3, r3, #4
 800b554:	2b00      	cmp	r3, #0
 800b556:	d121      	bne.n	800b59c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	799b      	ldrb	r3, [r3, #6]
 800b55c:	f003 0310 	and.w	r3, r3, #16
 800b560:	2b00      	cmp	r3, #0
 800b562:	d102      	bne.n	800b56a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b564:	2305      	movs	r3, #5
 800b566:	75fb      	strb	r3, [r7, #23]
 800b568:	e019      	b.n	800b59e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	68fa      	ldr	r2, [r7, #12]
 800b576:	8992      	ldrh	r2, [r2, #12]
 800b578:	fbb3 f0f2 	udiv	r0, r3, r2
 800b57c:	fb00 f202 	mul.w	r2, r0, r2
 800b580:	1a9b      	subs	r3, r3, r2
 800b582:	440b      	add	r3, r1
 800b584:	4619      	mov	r1, r3
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f7ff f82f 	bl	800a5ea <ld_clust>
 800b58c:	4602      	mov	r2, r0
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b592:	e7bb      	b.n	800b50c <follow_path+0x50>
			if (res != FR_OK) break;
 800b594:	bf00      	nop
 800b596:	e002      	b.n	800b59e <follow_path+0xe2>
				break;
 800b598:	bf00      	nop
 800b59a:	e000      	b.n	800b59e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b59c:	bf00      	nop
			}
		}
	}

	return res;
 800b59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3718      	adds	r7, #24
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d031      	beq.n	800b622 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	617b      	str	r3, [r7, #20]
 800b5c4:	e002      	b.n	800b5cc <get_ldnumber+0x24>
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	617b      	str	r3, [r7, #20]
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	2b1f      	cmp	r3, #31
 800b5d2:	d903      	bls.n	800b5dc <get_ldnumber+0x34>
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	2b3a      	cmp	r3, #58	@ 0x3a
 800b5da:	d1f4      	bne.n	800b5c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2b3a      	cmp	r3, #58	@ 0x3a
 800b5e2:	d11c      	bne.n	800b61e <get_ldnumber+0x76>
			tp = *path;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	1c5a      	adds	r2, r3, #1
 800b5ee:	60fa      	str	r2, [r7, #12]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	3b30      	subs	r3, #48	@ 0x30
 800b5f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	2b09      	cmp	r3, #9
 800b5fa:	d80e      	bhi.n	800b61a <get_ldnumber+0x72>
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	429a      	cmp	r2, r3
 800b602:	d10a      	bne.n	800b61a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d107      	bne.n	800b61a <get_ldnumber+0x72>
					vol = (int)i;
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	3301      	adds	r3, #1
 800b612:	617b      	str	r3, [r7, #20]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	e002      	b.n	800b624 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b61e:	2300      	movs	r3, #0
 800b620:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b622:	693b      	ldr	r3, [r7, #16]
}
 800b624:	4618      	mov	r0, r3
 800b626:	371c      	adds	r7, #28
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	70da      	strb	r2, [r3, #3]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f04f 32ff 	mov.w	r2, #4294967295
 800b646:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7fe fa48 	bl	8009ae0 <move_window>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <check_fs+0x2a>
 800b656:	2304      	movs	r3, #4
 800b658:	e038      	b.n	800b6cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	3338      	adds	r3, #56	@ 0x38
 800b65e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b662:	4618      	mov	r0, r3
 800b664:	f7fd ff8c 	bl	8009580 <ld_word>
 800b668:	4603      	mov	r3, r0
 800b66a:	461a      	mov	r2, r3
 800b66c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b670:	429a      	cmp	r2, r3
 800b672:	d001      	beq.n	800b678 <check_fs+0x48>
 800b674:	2303      	movs	r3, #3
 800b676:	e029      	b.n	800b6cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b67e:	2be9      	cmp	r3, #233	@ 0xe9
 800b680:	d009      	beq.n	800b696 <check_fs+0x66>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b688:	2beb      	cmp	r3, #235	@ 0xeb
 800b68a:	d11e      	bne.n	800b6ca <check_fs+0x9a>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800b692:	2b90      	cmp	r3, #144	@ 0x90
 800b694:	d119      	bne.n	800b6ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	3338      	adds	r3, #56	@ 0x38
 800b69a:	3336      	adds	r3, #54	@ 0x36
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fd ff87 	bl	80095b0 <ld_dword>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b6a8:	4a0a      	ldr	r2, [pc, #40]	@ (800b6d4 <check_fs+0xa4>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d101      	bne.n	800b6b2 <check_fs+0x82>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e00c      	b.n	800b6cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	3338      	adds	r3, #56	@ 0x38
 800b6b6:	3352      	adds	r3, #82	@ 0x52
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fd ff79 	bl	80095b0 <ld_dword>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	4a05      	ldr	r2, [pc, #20]	@ (800b6d8 <check_fs+0xa8>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d101      	bne.n	800b6ca <check_fs+0x9a>
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	e000      	b.n	800b6cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b6ca:	2302      	movs	r3, #2
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	00544146 	.word	0x00544146
 800b6d8:	33544146 	.word	0x33544146

0800b6dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b096      	sub	sp, #88	@ 0x58
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f7ff ff59 	bl	800b5a8 <get_ldnumber>
 800b6f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	da01      	bge.n	800b702 <find_volume+0x26>
 800b6fe:	230b      	movs	r3, #11
 800b700:	e265      	b.n	800bbce <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b702:	4a9f      	ldr	r2, [pc, #636]	@ (800b980 <find_volume+0x2a4>)
 800b704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b70a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d101      	bne.n	800b716 <find_volume+0x3a>
 800b712:	230c      	movs	r3, #12
 800b714:	e25b      	b.n	800bbce <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b71a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b71c:	79fb      	ldrb	r3, [r7, #7]
 800b71e:	f023 0301 	bic.w	r3, r3, #1
 800b722:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d01a      	beq.n	800b762 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b72e:	785b      	ldrb	r3, [r3, #1]
 800b730:	4618      	mov	r0, r3
 800b732:	f7fd fe85 	bl	8009440 <disk_status>
 800b736:	4603      	mov	r3, r0
 800b738:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b73c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b740:	f003 0301 	and.w	r3, r3, #1
 800b744:	2b00      	cmp	r3, #0
 800b746:	d10c      	bne.n	800b762 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b748:	79fb      	ldrb	r3, [r7, #7]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d007      	beq.n	800b75e <find_volume+0x82>
 800b74e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b752:	f003 0304 	and.w	r3, r3, #4
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b75a:	230a      	movs	r3, #10
 800b75c:	e237      	b.n	800bbce <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b75e:	2300      	movs	r3, #0
 800b760:	e235      	b.n	800bbce <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b764:	2200      	movs	r2, #0
 800b766:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b76e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b772:	785b      	ldrb	r3, [r3, #1]
 800b774:	4618      	mov	r0, r3
 800b776:	f7fd fe7d 	bl	8009474 <disk_initialize>
 800b77a:	4603      	mov	r3, r0
 800b77c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b780:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d001      	beq.n	800b790 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b78c:	2303      	movs	r3, #3
 800b78e:	e21e      	b.n	800bbce <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b790:	79fb      	ldrb	r3, [r7, #7]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d007      	beq.n	800b7a6 <find_volume+0xca>
 800b796:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b79a:	f003 0304 	and.w	r3, r3, #4
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b7a2:	230a      	movs	r3, #10
 800b7a4:	e213      	b.n	800bbce <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a8:	7858      	ldrb	r0, [r3, #1]
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ac:	330c      	adds	r3, #12
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	2102      	movs	r1, #2
 800b7b2:	f7fd fec7 	bl	8009544 <disk_ioctl>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d001      	beq.n	800b7c0 <find_volume+0xe4>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e206      	b.n	800bbce <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c2:	899b      	ldrh	r3, [r3, #12]
 800b7c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7c8:	d80d      	bhi.n	800b7e6 <find_volume+0x10a>
 800b7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7cc:	899b      	ldrh	r3, [r3, #12]
 800b7ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7d2:	d308      	bcc.n	800b7e6 <find_volume+0x10a>
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d6:	899b      	ldrh	r3, [r3, #12]
 800b7d8:	461a      	mov	r2, r3
 800b7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7dc:	899b      	ldrh	r3, [r3, #12]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	4013      	ands	r3, r2
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <find_volume+0x10e>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e1f1      	b.n	800bbce <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b7ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b7f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b7f2:	f7ff ff1d 	bl	800b630 <check_fs>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b7fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b800:	2b02      	cmp	r3, #2
 800b802:	d149      	bne.n	800b898 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b804:	2300      	movs	r3, #0
 800b806:	643b      	str	r3, [r7, #64]	@ 0x40
 800b808:	e01e      	b.n	800b848 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b812:	011b      	lsls	r3, r3, #4
 800b814:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b818:	4413      	add	r3, r2
 800b81a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b81e:	3304      	adds	r3, #4
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d006      	beq.n	800b834 <find_volume+0x158>
 800b826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b828:	3308      	adds	r3, #8
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fd fec0 	bl	80095b0 <ld_dword>
 800b830:	4602      	mov	r2, r0
 800b832:	e000      	b.n	800b836 <find_volume+0x15a>
 800b834:	2200      	movs	r2, #0
 800b836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	3358      	adds	r3, #88	@ 0x58
 800b83c:	443b      	add	r3, r7
 800b83e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b844:	3301      	adds	r3, #1
 800b846:	643b      	str	r3, [r7, #64]	@ 0x40
 800b848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b84a:	2b03      	cmp	r3, #3
 800b84c:	d9dd      	bls.n	800b80a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b84e:	2300      	movs	r3, #0
 800b850:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b854:	2b00      	cmp	r3, #0
 800b856:	d002      	beq.n	800b85e <find_volume+0x182>
 800b858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b85a:	3b01      	subs	r3, #1
 800b85c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b85e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	3358      	adds	r3, #88	@ 0x58
 800b864:	443b      	add	r3, r7
 800b866:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b86a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b86c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d005      	beq.n	800b87e <find_volume+0x1a2>
 800b872:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b874:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b876:	f7ff fedb 	bl	800b630 <check_fs>
 800b87a:	4603      	mov	r3, r0
 800b87c:	e000      	b.n	800b880 <find_volume+0x1a4>
 800b87e:	2303      	movs	r3, #3
 800b880:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b884:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d905      	bls.n	800b898 <find_volume+0x1bc>
 800b88c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b88e:	3301      	adds	r3, #1
 800b890:	643b      	str	r3, [r7, #64]	@ 0x40
 800b892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b894:	2b03      	cmp	r3, #3
 800b896:	d9e2      	bls.n	800b85e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b898:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b89c:	2b04      	cmp	r3, #4
 800b89e:	d101      	bne.n	800b8a4 <find_volume+0x1c8>
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e194      	b.n	800bbce <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b8a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d901      	bls.n	800b8b0 <find_volume+0x1d4>
 800b8ac:	230d      	movs	r3, #13
 800b8ae:	e18e      	b.n	800bbce <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b2:	3338      	adds	r3, #56	@ 0x38
 800b8b4:	330b      	adds	r3, #11
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fd fe62 	bl	8009580 <ld_word>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	461a      	mov	r2, r3
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c2:	899b      	ldrh	r3, [r3, #12]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d001      	beq.n	800b8cc <find_volume+0x1f0>
 800b8c8:	230d      	movs	r3, #13
 800b8ca:	e180      	b.n	800bbce <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ce:	3338      	adds	r3, #56	@ 0x38
 800b8d0:	3316      	adds	r3, #22
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7fd fe54 	bl	8009580 <ld_word>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b8dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d106      	bne.n	800b8f0 <find_volume+0x214>
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e4:	3338      	adds	r3, #56	@ 0x38
 800b8e6:	3324      	adds	r3, #36	@ 0x24
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fd fe61 	bl	80095b0 <ld_dword>
 800b8ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b8f4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800b8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b902:	789b      	ldrb	r3, [r3, #2]
 800b904:	2b01      	cmp	r3, #1
 800b906:	d005      	beq.n	800b914 <find_volume+0x238>
 800b908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b90a:	789b      	ldrb	r3, [r3, #2]
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d001      	beq.n	800b914 <find_volume+0x238>
 800b910:	230d      	movs	r3, #13
 800b912:	e15c      	b.n	800bbce <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b916:	789b      	ldrb	r3, [r3, #2]
 800b918:	461a      	mov	r2, r3
 800b91a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b91c:	fb02 f303 	mul.w	r3, r2, r3
 800b920:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b924:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b928:	461a      	mov	r2, r3
 800b92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b930:	895b      	ldrh	r3, [r3, #10]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d008      	beq.n	800b948 <find_volume+0x26c>
 800b936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b938:	895b      	ldrh	r3, [r3, #10]
 800b93a:	461a      	mov	r2, r3
 800b93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93e:	895b      	ldrh	r3, [r3, #10]
 800b940:	3b01      	subs	r3, #1
 800b942:	4013      	ands	r3, r2
 800b944:	2b00      	cmp	r3, #0
 800b946:	d001      	beq.n	800b94c <find_volume+0x270>
 800b948:	230d      	movs	r3, #13
 800b94a:	e140      	b.n	800bbce <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94e:	3338      	adds	r3, #56	@ 0x38
 800b950:	3311      	adds	r3, #17
 800b952:	4618      	mov	r0, r3
 800b954:	f7fd fe14 	bl	8009580 <ld_word>
 800b958:	4603      	mov	r3, r0
 800b95a:	461a      	mov	r2, r3
 800b95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b962:	891b      	ldrh	r3, [r3, #8]
 800b964:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b966:	8992      	ldrh	r2, [r2, #12]
 800b968:	0952      	lsrs	r2, r2, #5
 800b96a:	b292      	uxth	r2, r2
 800b96c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b970:	fb01 f202 	mul.w	r2, r1, r2
 800b974:	1a9b      	subs	r3, r3, r2
 800b976:	b29b      	uxth	r3, r3
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <find_volume+0x2a8>
 800b97c:	230d      	movs	r3, #13
 800b97e:	e126      	b.n	800bbce <find_volume+0x4f2>
 800b980:	20002390 	.word	0x20002390

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b986:	3338      	adds	r3, #56	@ 0x38
 800b988:	3313      	adds	r3, #19
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fd fdf8 	bl	8009580 <ld_word>
 800b990:	4603      	mov	r3, r0
 800b992:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b996:	2b00      	cmp	r3, #0
 800b998:	d106      	bne.n	800b9a8 <find_volume+0x2cc>
 800b99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99c:	3338      	adds	r3, #56	@ 0x38
 800b99e:	3320      	adds	r3, #32
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fd fe05 	bl	80095b0 <ld_dword>
 800b9a6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9aa:	3338      	adds	r3, #56	@ 0x38
 800b9ac:	330e      	adds	r3, #14
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fd fde6 	bl	8009580 <ld_word>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b9b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <find_volume+0x2e6>
 800b9be:	230d      	movs	r3, #13
 800b9c0:	e105      	b.n	800bbce <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b9c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b9c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9c6:	4413      	add	r3, r2
 800b9c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9ca:	8911      	ldrh	r1, [r2, #8]
 800b9cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9ce:	8992      	ldrh	r2, [r2, #12]
 800b9d0:	0952      	lsrs	r2, r2, #5
 800b9d2:	b292      	uxth	r2, r2
 800b9d4:	fbb1 f2f2 	udiv	r2, r1, r2
 800b9d8:	b292      	uxth	r2, r2
 800b9da:	4413      	add	r3, r2
 800b9dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b9de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d201      	bcs.n	800b9ea <find_volume+0x30e>
 800b9e6:	230d      	movs	r3, #13
 800b9e8:	e0f1      	b.n	800bbce <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b9ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9f2:	8952      	ldrh	r2, [r2, #10]
 800b9f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9f8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d101      	bne.n	800ba04 <find_volume+0x328>
 800ba00:	230d      	movs	r3, #13
 800ba02:	e0e4      	b.n	800bbce <find_volume+0x4f2>
		fmt = FS_FAT32;
 800ba04:	2303      	movs	r3, #3
 800ba06:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d802      	bhi.n	800ba1a <find_volume+0x33e>
 800ba14:	2302      	movs	r3, #2
 800ba16:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d802      	bhi.n	800ba2a <find_volume+0x34e>
 800ba24:	2301      	movs	r3, #1
 800ba26:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2c:	1c9a      	adds	r2, r3, #2
 800ba2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba30:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ba32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba36:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ba38:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ba3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba3c:	441a      	add	r2, r3
 800ba3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba40:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ba42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba46:	441a      	add	r2, r3
 800ba48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba4a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800ba4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba50:	2b03      	cmp	r3, #3
 800ba52:	d11e      	bne.n	800ba92 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ba54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba56:	3338      	adds	r3, #56	@ 0x38
 800ba58:	332a      	adds	r3, #42	@ 0x2a
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fd fd90 	bl	8009580 <ld_word>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <find_volume+0x38e>
 800ba66:	230d      	movs	r3, #13
 800ba68:	e0b1      	b.n	800bbce <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ba6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba6c:	891b      	ldrh	r3, [r3, #8]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <find_volume+0x39a>
 800ba72:	230d      	movs	r3, #13
 800ba74:	e0ab      	b.n	800bbce <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ba76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba78:	3338      	adds	r3, #56	@ 0x38
 800ba7a:	332c      	adds	r3, #44	@ 0x2c
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fd fd97 	bl	80095b0 <ld_dword>
 800ba82:	4602      	mov	r2, r0
 800ba84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba86:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ba88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba8a:	69db      	ldr	r3, [r3, #28]
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba90:	e01f      	b.n	800bad2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ba92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba94:	891b      	ldrh	r3, [r3, #8]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d101      	bne.n	800ba9e <find_volume+0x3c2>
 800ba9a:	230d      	movs	r3, #13
 800ba9c:	e097      	b.n	800bbce <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ba9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800baa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baa4:	441a      	add	r2, r3
 800baa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800baaa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d103      	bne.n	800baba <find_volume+0x3de>
 800bab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab4:	69db      	ldr	r3, [r3, #28]
 800bab6:	005b      	lsls	r3, r3, #1
 800bab8:	e00a      	b.n	800bad0 <find_volume+0x3f4>
 800baba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800babc:	69da      	ldr	r2, [r3, #28]
 800babe:	4613      	mov	r3, r2
 800bac0:	005b      	lsls	r3, r3, #1
 800bac2:	4413      	add	r3, r2
 800bac4:	085a      	lsrs	r2, r3, #1
 800bac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac8:	69db      	ldr	r3, [r3, #28]
 800baca:	f003 0301 	and.w	r3, r3, #1
 800bace:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bad0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad4:	6a1a      	ldr	r2, [r3, #32]
 800bad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad8:	899b      	ldrh	r3, [r3, #12]
 800bada:	4619      	mov	r1, r3
 800badc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bade:	440b      	add	r3, r1
 800bae0:	3b01      	subs	r3, #1
 800bae2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bae4:	8989      	ldrh	r1, [r1, #12]
 800bae6:	fbb3 f3f1 	udiv	r3, r3, r1
 800baea:	429a      	cmp	r2, r3
 800baec:	d201      	bcs.n	800baf2 <find_volume+0x416>
 800baee:	230d      	movs	r3, #13
 800baf0:	e06d      	b.n	800bbce <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800baf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf4:	f04f 32ff 	mov.w	r2, #4294967295
 800baf8:	619a      	str	r2, [r3, #24]
 800bafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafc:	699a      	ldr	r2, [r3, #24]
 800bafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb00:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb04:	2280      	movs	r2, #128	@ 0x80
 800bb06:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bb08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bb0c:	2b03      	cmp	r3, #3
 800bb0e:	d149      	bne.n	800bba4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bb10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb12:	3338      	adds	r3, #56	@ 0x38
 800bb14:	3330      	adds	r3, #48	@ 0x30
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fd fd32 	bl	8009580 <ld_word>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d140      	bne.n	800bba4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bb22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb24:	3301      	adds	r3, #1
 800bb26:	4619      	mov	r1, r3
 800bb28:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bb2a:	f7fd ffd9 	bl	8009ae0 <move_window>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d137      	bne.n	800bba4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800bb34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb36:	2200      	movs	r2, #0
 800bb38:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3c:	3338      	adds	r3, #56	@ 0x38
 800bb3e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fd fd1c 	bl	8009580 <ld_word>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d127      	bne.n	800bba4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb56:	3338      	adds	r3, #56	@ 0x38
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7fd fd29 	bl	80095b0 <ld_dword>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	4a1d      	ldr	r2, [pc, #116]	@ (800bbd8 <find_volume+0x4fc>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d11e      	bne.n	800bba4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb68:	3338      	adds	r3, #56	@ 0x38
 800bb6a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fd fd1e 	bl	80095b0 <ld_dword>
 800bb74:	4603      	mov	r3, r0
 800bb76:	4a19      	ldr	r2, [pc, #100]	@ (800bbdc <find_volume+0x500>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d113      	bne.n	800bba4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7e:	3338      	adds	r3, #56	@ 0x38
 800bb80:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fd fd13 	bl	80095b0 <ld_dword>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb8e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bb90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb92:	3338      	adds	r3, #56	@ 0x38
 800bb94:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fd fd09 	bl	80095b0 <ld_dword>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800bbaa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bbac:	4b0c      	ldr	r3, [pc, #48]	@ (800bbe0 <find_volume+0x504>)
 800bbae:	881b      	ldrh	r3, [r3, #0]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe0 <find_volume+0x504>)
 800bbb6:	801a      	strh	r2, [r3, #0]
 800bbb8:	4b09      	ldr	r3, [pc, #36]	@ (800bbe0 <find_volume+0x504>)
 800bbba:	881a      	ldrh	r2, [r3, #0]
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbbe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc2:	4a08      	ldr	r2, [pc, #32]	@ (800bbe4 <find_volume+0x508>)
 800bbc4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bbc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bbc8:	f7fd ff22 	bl	8009a10 <clear_lock>
#endif
	return FR_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3758      	adds	r7, #88	@ 0x58
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	41615252 	.word	0x41615252
 800bbdc:	61417272 	.word	0x61417272
 800bbe0:	20002394 	.word	0x20002394
 800bbe4:	200023b8 	.word	0x200023b8

0800bbe8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bbf2:	2309      	movs	r3, #9
 800bbf4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d01c      	beq.n	800bc36 <validate+0x4e>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d018      	beq.n	800bc36 <validate+0x4e>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d013      	beq.n	800bc36 <validate+0x4e>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	889a      	ldrh	r2, [r3, #4]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	88db      	ldrh	r3, [r3, #6]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d10c      	bne.n	800bc36 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	785b      	ldrb	r3, [r3, #1]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7fd fc0c 	bl	8009440 <disk_status>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	f003 0301 	and.w	r3, r3, #1
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d101      	bne.n	800bc36 <validate+0x4e>
			res = FR_OK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d102      	bne.n	800bc42 <validate+0x5a>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	e000      	b.n	800bc44 <validate+0x5c>
 800bc42:	2300      	movs	r3, #0
 800bc44:	683a      	ldr	r2, [r7, #0]
 800bc46:	6013      	str	r3, [r2, #0]
	return res;
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
	...

0800bc54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bc66:	f107 0310 	add.w	r3, r7, #16
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7ff fc9c 	bl	800b5a8 <get_ldnumber>
 800bc70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	da01      	bge.n	800bc7c <f_mount+0x28>
 800bc78:	230b      	movs	r3, #11
 800bc7a:	e02b      	b.n	800bcd4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bc7c:	4a17      	ldr	r2, [pc, #92]	@ (800bcdc <f_mount+0x88>)
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d005      	beq.n	800bc98 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bc8c:	69b8      	ldr	r0, [r7, #24]
 800bc8e:	f7fd febf 	bl	8009a10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	2200      	movs	r2, #0
 800bc96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d002      	beq.n	800bca4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	490d      	ldr	r1, [pc, #52]	@ (800bcdc <f_mount+0x88>)
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d002      	beq.n	800bcba <f_mount+0x66>
 800bcb4:	79fb      	ldrb	r3, [r7, #7]
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d001      	beq.n	800bcbe <f_mount+0x6a>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e00a      	b.n	800bcd4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bcbe:	f107 010c 	add.w	r1, r7, #12
 800bcc2:	f107 0308 	add.w	r3, r7, #8
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7ff fd07 	bl	800b6dc <find_volume>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bcd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3720      	adds	r7, #32
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	20002390 	.word	0x20002390

0800bce0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b09a      	sub	sp, #104	@ 0x68
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	4613      	mov	r3, r2
 800bcec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d101      	bne.n	800bcf8 <f_open+0x18>
 800bcf4:	2309      	movs	r3, #9
 800bcf6:	e1b7      	b.n	800c068 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bcf8:	79fb      	ldrb	r3, [r7, #7]
 800bcfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bcfe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bd00:	79fa      	ldrb	r2, [r7, #7]
 800bd02:	f107 0114 	add.w	r1, r7, #20
 800bd06:	f107 0308 	add.w	r3, r7, #8
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7ff fce6 	bl	800b6dc <find_volume>
 800bd10:	4603      	mov	r3, r0
 800bd12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800bd16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f040 819b 	bne.w	800c056 <f_open+0x376>
		dj.obj.fs = fs;
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	f107 0318 	add.w	r3, r7, #24
 800bd2a:	4611      	mov	r1, r2
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff fbc5 	bl	800b4bc <follow_path>
 800bd32:	4603      	mov	r3, r0
 800bd34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bd38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d118      	bne.n	800bd72 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bd40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bd44:	b25b      	sxtb	r3, r3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	da03      	bge.n	800bd52 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bd4a:	2306      	movs	r3, #6
 800bd4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bd50:	e00f      	b.n	800bd72 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bd52:	79fb      	ldrb	r3, [r7, #7]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	bf8c      	ite	hi
 800bd58:	2301      	movhi	r3, #1
 800bd5a:	2300      	movls	r3, #0
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f107 0318 	add.w	r3, r7, #24
 800bd64:	4611      	mov	r1, r2
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fd fd0a 	bl	8009780 <chk_lock>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bd72:	79fb      	ldrb	r3, [r7, #7]
 800bd74:	f003 031c 	and.w	r3, r3, #28
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d07f      	beq.n	800be7c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800bd7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d017      	beq.n	800bdb4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bd84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bd88:	2b04      	cmp	r3, #4
 800bd8a:	d10e      	bne.n	800bdaa <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bd8c:	f7fd fd54 	bl	8009838 <enq_lock>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d006      	beq.n	800bda4 <f_open+0xc4>
 800bd96:	f107 0318 	add.w	r3, r7, #24
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fe ffb6 	bl	800ad0c <dir_register>
 800bda0:	4603      	mov	r3, r0
 800bda2:	e000      	b.n	800bda6 <f_open+0xc6>
 800bda4:	2312      	movs	r3, #18
 800bda6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bdaa:	79fb      	ldrb	r3, [r7, #7]
 800bdac:	f043 0308 	orr.w	r3, r3, #8
 800bdb0:	71fb      	strb	r3, [r7, #7]
 800bdb2:	e010      	b.n	800bdd6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bdb4:	7fbb      	ldrb	r3, [r7, #30]
 800bdb6:	f003 0311 	and.w	r3, r3, #17
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <f_open+0xe6>
					res = FR_DENIED;
 800bdbe:	2307      	movs	r3, #7
 800bdc0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bdc4:	e007      	b.n	800bdd6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bdc6:	79fb      	ldrb	r3, [r7, #7]
 800bdc8:	f003 0304 	and.w	r3, r3, #4
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <f_open+0xf6>
 800bdd0:	2308      	movs	r3, #8
 800bdd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bdd6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d168      	bne.n	800beb0 <f_open+0x1d0>
 800bdde:	79fb      	ldrb	r3, [r7, #7]
 800bde0:	f003 0308 	and.w	r3, r3, #8
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d063      	beq.n	800beb0 <f_open+0x1d0>
				dw = GET_FATTIME();
 800bde8:	f7fb fb02 	bl	80073f0 <get_fattime>
 800bdec:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bdee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdf0:	330e      	adds	r3, #14
 800bdf2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fd fc19 	bl	800962c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bdfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdfc:	3316      	adds	r3, #22
 800bdfe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800be00:	4618      	mov	r0, r3
 800be02:	f7fd fc13 	bl	800962c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800be06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be08:	330b      	adds	r3, #11
 800be0a:	2220      	movs	r2, #32
 800be0c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be12:	4611      	mov	r1, r2
 800be14:	4618      	mov	r0, r3
 800be16:	f7fe fbe8 	bl	800a5ea <ld_clust>
 800be1a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800be20:	2200      	movs	r2, #0
 800be22:	4618      	mov	r0, r3
 800be24:	f7fe fc00 	bl	800a628 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800be28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be2a:	331c      	adds	r3, #28
 800be2c:	2100      	movs	r1, #0
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fd fbfc 	bl	800962c <st_dword>
					fs->wflag = 1;
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	2201      	movs	r2, #1
 800be38:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800be3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d037      	beq.n	800beb0 <f_open+0x1d0>
						dw = fs->winsect;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be44:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800be46:	f107 0318 	add.w	r3, r7, #24
 800be4a:	2200      	movs	r2, #0
 800be4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fe f8f0 	bl	800a034 <remove_chain>
 800be54:	4603      	mov	r3, r0
 800be56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800be5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d126      	bne.n	800beb0 <f_open+0x1d0>
							res = move_window(fs, dw);
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800be66:	4618      	mov	r0, r3
 800be68:	f7fd fe3a 	bl	8009ae0 <move_window>
 800be6c:	4603      	mov	r3, r0
 800be6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800be76:	3a01      	subs	r2, #1
 800be78:	615a      	str	r2, [r3, #20]
 800be7a:	e019      	b.n	800beb0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800be7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800be80:	2b00      	cmp	r3, #0
 800be82:	d115      	bne.n	800beb0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800be84:	7fbb      	ldrb	r3, [r7, #30]
 800be86:	f003 0310 	and.w	r3, r3, #16
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d003      	beq.n	800be96 <f_open+0x1b6>
					res = FR_NO_FILE;
 800be8e:	2304      	movs	r3, #4
 800be90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800be94:	e00c      	b.n	800beb0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800be96:	79fb      	ldrb	r3, [r7, #7]
 800be98:	f003 0302 	and.w	r3, r3, #2
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d007      	beq.n	800beb0 <f_open+0x1d0>
 800bea0:	7fbb      	ldrb	r3, [r7, #30]
 800bea2:	f003 0301 	and.w	r3, r3, #1
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d002      	beq.n	800beb0 <f_open+0x1d0>
						res = FR_DENIED;
 800beaa:	2307      	movs	r3, #7
 800beac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800beb0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d126      	bne.n	800bf06 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800beb8:	79fb      	ldrb	r3, [r7, #7]
 800beba:	f003 0308 	and.w	r3, r3, #8
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d003      	beq.n	800beca <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800bec2:	79fb      	ldrb	r3, [r7, #7]
 800bec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bec8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800bed2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	2b01      	cmp	r3, #1
 800bedc:	bf8c      	ite	hi
 800bede:	2301      	movhi	r3, #1
 800bee0:	2300      	movls	r3, #0
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	461a      	mov	r2, r3
 800bee6:	f107 0318 	add.w	r3, r7, #24
 800beea:	4611      	mov	r1, r2
 800beec:	4618      	mov	r0, r3
 800beee:	f7fd fcc5 	bl	800987c <inc_lock>
 800bef2:	4602      	mov	r2, r0
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d102      	bne.n	800bf06 <f_open+0x226>
 800bf00:	2302      	movs	r3, #2
 800bf02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bf06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f040 80a3 	bne.w	800c056 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf14:	4611      	mov	r1, r2
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe fb67 	bl	800a5ea <ld_clust>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bf22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf24:	331c      	adds	r3, #28
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fd fb42 	bl	80095b0 <ld_dword>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	88da      	ldrh	r2, [r3, #6]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	79fa      	ldrb	r2, [r7, #7]
 800bf4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	3330      	adds	r3, #48	@ 0x30
 800bf62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800bf66:	2100      	movs	r1, #0
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fd fbac 	bl	80096c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bf6e:	79fb      	ldrb	r3, [r7, #7]
 800bf70:	f003 0320 	and.w	r3, r3, #32
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d06e      	beq.n	800c056 <f_open+0x376>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d06a      	beq.n	800c056 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	68da      	ldr	r2, [r3, #12]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	895b      	ldrh	r3, [r3, #10]
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	899b      	ldrh	r3, [r3, #12]
 800bf92:	fb02 f303 	mul.w	r3, r2, r3
 800bf96:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bfa4:	e016      	b.n	800bfd4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fd fe55 	bl	8009c5a <get_fat>
 800bfb0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800bfb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d802      	bhi.n	800bfbe <f_open+0x2de>
 800bfb8:	2302      	movs	r3, #2
 800bfba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bfbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc4:	d102      	bne.n	800bfcc <f_open+0x2ec>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bfcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bfce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bfd4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d103      	bne.n	800bfe4 <f_open+0x304>
 800bfdc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bfde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d8e0      	bhi.n	800bfa6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bfe8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bfea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d131      	bne.n	800c056 <f_open+0x376>
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	899b      	ldrh	r3, [r3, #12]
 800bff6:	461a      	mov	r2, r3
 800bff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bffa:	fbb3 f1f2 	udiv	r1, r3, r2
 800bffe:	fb01 f202 	mul.w	r2, r1, r2
 800c002:	1a9b      	subs	r3, r3, r2
 800c004:	2b00      	cmp	r3, #0
 800c006:	d026      	beq.n	800c056 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7fd fe05 	bl	8009c1c <clust2sect>
 800c012:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c016:	2b00      	cmp	r3, #0
 800c018:	d103      	bne.n	800c022 <f_open+0x342>
						res = FR_INT_ERR;
 800c01a:	2302      	movs	r3, #2
 800c01c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c020:	e019      	b.n	800c056 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	899b      	ldrh	r3, [r3, #12]
 800c026:	461a      	mov	r2, r3
 800c028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c02a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c02e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c030:	441a      	add	r2, r3
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	7858      	ldrb	r0, [r3, #1]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6a1a      	ldr	r2, [r3, #32]
 800c044:	2301      	movs	r3, #1
 800c046:	f7fd fa3d 	bl	80094c4 <disk_read>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <f_open+0x376>
 800c050:	2301      	movs	r3, #1
 800c052:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c056:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d002      	beq.n	800c064 <f_open+0x384>
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c064:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3768      	adds	r7, #104	@ 0x68
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b08e      	sub	sp, #56	@ 0x38
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	607a      	str	r2, [r7, #4]
 800c07c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2200      	movs	r2, #0
 800c086:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f107 0214 	add.w	r2, r7, #20
 800c08e:	4611      	mov	r1, r2
 800c090:	4618      	mov	r0, r3
 800c092:	f7ff fda9 	bl	800bbe8 <validate>
 800c096:	4603      	mov	r3, r0
 800c098:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c09c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d107      	bne.n	800c0b4 <f_read+0x44>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	7d5b      	ldrb	r3, [r3, #21]
 800c0a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c0ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <f_read+0x4a>
 800c0b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c0b8:	e135      	b.n	800c326 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	7d1b      	ldrb	r3, [r3, #20]
 800c0be:	f003 0301 	and.w	r3, r3, #1
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d101      	bne.n	800c0ca <f_read+0x5a>
 800c0c6:	2307      	movs	r3, #7
 800c0c8:	e12d      	b.n	800c326 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	68da      	ldr	r2, [r3, #12]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	699b      	ldr	r3, [r3, #24]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	f240 811e 	bls.w	800c31c <f_read+0x2ac>
 800c0e0:	6a3b      	ldr	r3, [r7, #32]
 800c0e2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c0e4:	e11a      	b.n	800c31c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	699b      	ldr	r3, [r3, #24]
 800c0ea:	697a      	ldr	r2, [r7, #20]
 800c0ec:	8992      	ldrh	r2, [r2, #12]
 800c0ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0f2:	fb01 f202 	mul.w	r2, r1, r2
 800c0f6:	1a9b      	subs	r3, r3, r2
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f040 80d5 	bne.w	800c2a8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	699b      	ldr	r3, [r3, #24]
 800c102:	697a      	ldr	r2, [r7, #20]
 800c104:	8992      	ldrh	r2, [r2, #12]
 800c106:	fbb3 f3f2 	udiv	r3, r3, r2
 800c10a:	697a      	ldr	r2, [r7, #20]
 800c10c:	8952      	ldrh	r2, [r2, #10]
 800c10e:	3a01      	subs	r2, #1
 800c110:	4013      	ands	r3, r2
 800c112:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d12f      	bne.n	800c17a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	699b      	ldr	r3, [r3, #24]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d103      	bne.n	800c12a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	633b      	str	r3, [r7, #48]	@ 0x30
 800c128:	e013      	b.n	800c152 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d007      	beq.n	800c142 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	699b      	ldr	r3, [r3, #24]
 800c136:	4619      	mov	r1, r3
 800c138:	68f8      	ldr	r0, [r7, #12]
 800c13a:	f7fe f878 	bl	800a22e <clmt_clust>
 800c13e:	6338      	str	r0, [r7, #48]	@ 0x30
 800c140:	e007      	b.n	800c152 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	4619      	mov	r1, r3
 800c14a:	4610      	mov	r0, r2
 800c14c:	f7fd fd85 	bl	8009c5a <get_fat>
 800c150:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c154:	2b01      	cmp	r3, #1
 800c156:	d804      	bhi.n	800c162 <f_read+0xf2>
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2202      	movs	r2, #2
 800c15c:	755a      	strb	r2, [r3, #21]
 800c15e:	2302      	movs	r3, #2
 800c160:	e0e1      	b.n	800c326 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c168:	d104      	bne.n	800c174 <f_read+0x104>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2201      	movs	r2, #1
 800c16e:	755a      	strb	r2, [r3, #21]
 800c170:	2301      	movs	r3, #1
 800c172:	e0d8      	b.n	800c326 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c178:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	69db      	ldr	r3, [r3, #28]
 800c180:	4619      	mov	r1, r3
 800c182:	4610      	mov	r0, r2
 800c184:	f7fd fd4a 	bl	8009c1c <clust2sect>
 800c188:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d104      	bne.n	800c19a <f_read+0x12a>
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2202      	movs	r2, #2
 800c194:	755a      	strb	r2, [r3, #21]
 800c196:	2302      	movs	r3, #2
 800c198:	e0c5      	b.n	800c326 <f_read+0x2b6>
			sect += csect;
 800c19a:	69ba      	ldr	r2, [r7, #24]
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	4413      	add	r3, r2
 800c1a0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	899b      	ldrh	r3, [r3, #12]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1ae:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d041      	beq.n	800c23a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c1b6:	69fa      	ldr	r2, [r7, #28]
 800c1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ba:	4413      	add	r3, r2
 800c1bc:	697a      	ldr	r2, [r7, #20]
 800c1be:	8952      	ldrh	r2, [r2, #10]
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d905      	bls.n	800c1d0 <f_read+0x160>
					cc = fs->csize - csect;
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	895b      	ldrh	r3, [r3, #10]
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	1ad3      	subs	r3, r2, r3
 800c1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	7858      	ldrb	r0, [r3, #1]
 800c1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d6:	69ba      	ldr	r2, [r7, #24]
 800c1d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c1da:	f7fd f973 	bl	80094c4 <disk_read>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d004      	beq.n	800c1ee <f_read+0x17e>
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	755a      	strb	r2, [r3, #21]
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e09b      	b.n	800c326 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	7d1b      	ldrb	r3, [r3, #20]
 800c1f2:	b25b      	sxtb	r3, r3
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	da18      	bge.n	800c22a <f_read+0x1ba>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6a1a      	ldr	r2, [r3, #32]
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c202:	429a      	cmp	r2, r3
 800c204:	d911      	bls.n	800c22a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6a1a      	ldr	r2, [r3, #32]
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	1ad3      	subs	r3, r2, r3
 800c20e:	697a      	ldr	r2, [r7, #20]
 800c210:	8992      	ldrh	r2, [r2, #12]
 800c212:	fb02 f303 	mul.w	r3, r2, r3
 800c216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c218:	18d0      	adds	r0, r2, r3
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	899b      	ldrh	r3, [r3, #12]
 800c224:	461a      	mov	r2, r3
 800c226:	f7fd fa2d 	bl	8009684 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	899b      	ldrh	r3, [r3, #12]
 800c22e:	461a      	mov	r2, r3
 800c230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c232:	fb02 f303 	mul.w	r3, r2, r3
 800c236:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c238:	e05c      	b.n	800c2f4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	69ba      	ldr	r2, [r7, #24]
 800c240:	429a      	cmp	r2, r3
 800c242:	d02e      	beq.n	800c2a2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	7d1b      	ldrb	r3, [r3, #20]
 800c248:	b25b      	sxtb	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	da18      	bge.n	800c280 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	7858      	ldrb	r0, [r3, #1]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6a1a      	ldr	r2, [r3, #32]
 800c25c:	2301      	movs	r3, #1
 800c25e:	f7fd f951 	bl	8009504 <disk_write>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d004      	beq.n	800c272 <f_read+0x202>
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2201      	movs	r2, #1
 800c26c:	755a      	strb	r2, [r3, #21]
 800c26e:	2301      	movs	r3, #1
 800c270:	e059      	b.n	800c326 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	7d1b      	ldrb	r3, [r3, #20]
 800c276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	7858      	ldrb	r0, [r3, #1]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c28a:	2301      	movs	r3, #1
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	f7fd f919 	bl	80094c4 <disk_read>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d004      	beq.n	800c2a2 <f_read+0x232>
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2201      	movs	r2, #1
 800c29c:	755a      	strb	r2, [r3, #21]
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e041      	b.n	800c326 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	69ba      	ldr	r2, [r7, #24]
 800c2a6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	899b      	ldrh	r3, [r3, #12]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	697a      	ldr	r2, [r7, #20]
 800c2b4:	8992      	ldrh	r2, [r2, #12]
 800c2b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2ba:	fb01 f202 	mul.w	r2, r1, r2
 800c2be:	1a9b      	subs	r3, r3, r2
 800c2c0:	1ac3      	subs	r3, r0, r3
 800c2c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c2c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d901      	bls.n	800c2d0 <f_read+0x260>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	699b      	ldr	r3, [r3, #24]
 800c2da:	697a      	ldr	r2, [r7, #20]
 800c2dc:	8992      	ldrh	r2, [r2, #12]
 800c2de:	fbb3 f0f2 	udiv	r0, r3, r2
 800c2e2:	fb00 f202 	mul.w	r2, r0, r2
 800c2e6:	1a9b      	subs	r3, r3, r2
 800c2e8:	440b      	add	r3, r1
 800c2ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c2f0:	f7fd f9c8 	bl	8009684 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c2f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f8:	4413      	add	r3, r2
 800c2fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	699a      	ldr	r2, [r3, #24]
 800c300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c302:	441a      	add	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	619a      	str	r2, [r3, #24]
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c30e:	441a      	add	r2, r3
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	601a      	str	r2, [r3, #0]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c318:	1ad3      	subs	r3, r2, r3
 800c31a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f47f aee1 	bne.w	800c0e6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3738      	adds	r7, #56	@ 0x38
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b08c      	sub	sp, #48	@ 0x30
 800c332:	af00      	add	r7, sp, #0
 800c334:	60f8      	str	r0, [r7, #12]
 800c336:	60b9      	str	r1, [r7, #8]
 800c338:	607a      	str	r2, [r7, #4]
 800c33a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	2200      	movs	r2, #0
 800c344:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f107 0210 	add.w	r2, r7, #16
 800c34c:	4611      	mov	r1, r2
 800c34e:	4618      	mov	r0, r3
 800c350:	f7ff fc4a 	bl	800bbe8 <validate>
 800c354:	4603      	mov	r3, r0
 800c356:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c35a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d107      	bne.n	800c372 <f_write+0x44>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	7d5b      	ldrb	r3, [r3, #21]
 800c366:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c36a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d002      	beq.n	800c378 <f_write+0x4a>
 800c372:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c376:	e16a      	b.n	800c64e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	7d1b      	ldrb	r3, [r3, #20]
 800c37c:	f003 0302 	and.w	r3, r3, #2
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <f_write+0x5a>
 800c384:	2307      	movs	r3, #7
 800c386:	e162      	b.n	800c64e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	699a      	ldr	r2, [r3, #24]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	441a      	add	r2, r3
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	429a      	cmp	r2, r3
 800c396:	f080 814c 	bcs.w	800c632 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	699b      	ldr	r3, [r3, #24]
 800c39e:	43db      	mvns	r3, r3
 800c3a0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c3a2:	e146      	b.n	800c632 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	699b      	ldr	r3, [r3, #24]
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	8992      	ldrh	r2, [r2, #12]
 800c3ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3b0:	fb01 f202 	mul.w	r2, r1, r2
 800c3b4:	1a9b      	subs	r3, r3, r2
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f040 80f1 	bne.w	800c59e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	8992      	ldrh	r2, [r2, #12]
 800c3c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	8952      	ldrh	r2, [r2, #10]
 800c3cc:	3a01      	subs	r2, #1
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d143      	bne.n	800c460 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	699b      	ldr	r3, [r3, #24]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10c      	bne.n	800c3fa <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d11a      	bne.n	800c422 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fd fe84 	bl	800a0fe <create_chain>
 800c3f6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c3f8:	e013      	b.n	800c422 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d007      	beq.n	800c412 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	699b      	ldr	r3, [r3, #24]
 800c406:	4619      	mov	r1, r3
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f7fd ff10 	bl	800a22e <clmt_clust>
 800c40e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c410:	e007      	b.n	800c422 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	69db      	ldr	r3, [r3, #28]
 800c418:	4619      	mov	r1, r3
 800c41a:	4610      	mov	r0, r2
 800c41c:	f7fd fe6f 	bl	800a0fe <create_chain>
 800c420:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c424:	2b00      	cmp	r3, #0
 800c426:	f000 8109 	beq.w	800c63c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d104      	bne.n	800c43a <f_write+0x10c>
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2202      	movs	r2, #2
 800c434:	755a      	strb	r2, [r3, #21]
 800c436:	2302      	movs	r3, #2
 800c438:	e109      	b.n	800c64e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c440:	d104      	bne.n	800c44c <f_write+0x11e>
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2201      	movs	r2, #1
 800c446:	755a      	strb	r2, [r3, #21]
 800c448:	2301      	movs	r3, #1
 800c44a:	e100      	b.n	800c64e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c450:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d102      	bne.n	800c460 <f_write+0x132>
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c45e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	7d1b      	ldrb	r3, [r3, #20]
 800c464:	b25b      	sxtb	r3, r3
 800c466:	2b00      	cmp	r3, #0
 800c468:	da18      	bge.n	800c49c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	7858      	ldrb	r0, [r3, #1]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6a1a      	ldr	r2, [r3, #32]
 800c478:	2301      	movs	r3, #1
 800c47a:	f7fd f843 	bl	8009504 <disk_write>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d004      	beq.n	800c48e <f_write+0x160>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2201      	movs	r2, #1
 800c488:	755a      	strb	r2, [r3, #21]
 800c48a:	2301      	movs	r3, #1
 800c48c:	e0df      	b.n	800c64e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	7d1b      	ldrb	r3, [r3, #20]
 800c492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c496:	b2da      	uxtb	r2, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	69db      	ldr	r3, [r3, #28]
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	f7fd fbb9 	bl	8009c1c <clust2sect>
 800c4aa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d104      	bne.n	800c4bc <f_write+0x18e>
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2202      	movs	r2, #2
 800c4b6:	755a      	strb	r2, [r3, #21]
 800c4b8:	2302      	movs	r3, #2
 800c4ba:	e0c8      	b.n	800c64e <f_write+0x320>
			sect += csect;
 800c4bc:	697a      	ldr	r2, [r7, #20]
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	899b      	ldrh	r3, [r3, #12]
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c4d2:	6a3b      	ldr	r3, [r7, #32]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d043      	beq.n	800c560 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c4d8:	69ba      	ldr	r2, [r7, #24]
 800c4da:	6a3b      	ldr	r3, [r7, #32]
 800c4dc:	4413      	add	r3, r2
 800c4de:	693a      	ldr	r2, [r7, #16]
 800c4e0:	8952      	ldrh	r2, [r2, #10]
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d905      	bls.n	800c4f2 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	895b      	ldrh	r3, [r3, #10]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	7858      	ldrb	r0, [r3, #1]
 800c4f6:	6a3b      	ldr	r3, [r7, #32]
 800c4f8:	697a      	ldr	r2, [r7, #20]
 800c4fa:	69f9      	ldr	r1, [r7, #28]
 800c4fc:	f7fd f802 	bl	8009504 <disk_write>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d004      	beq.n	800c510 <f_write+0x1e2>
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2201      	movs	r2, #1
 800c50a:	755a      	strb	r2, [r3, #21]
 800c50c:	2301      	movs	r3, #1
 800c50e:	e09e      	b.n	800c64e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6a1a      	ldr	r2, [r3, #32]
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	1ad3      	subs	r3, r2, r3
 800c518:	6a3a      	ldr	r2, [r7, #32]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d918      	bls.n	800c550 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	6a1a      	ldr	r2, [r3, #32]
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	693a      	ldr	r2, [r7, #16]
 800c52e:	8992      	ldrh	r2, [r2, #12]
 800c530:	fb02 f303 	mul.w	r3, r2, r3
 800c534:	69fa      	ldr	r2, [r7, #28]
 800c536:	18d1      	adds	r1, r2, r3
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	899b      	ldrh	r3, [r3, #12]
 800c53c:	461a      	mov	r2, r3
 800c53e:	f7fd f8a1 	bl	8009684 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	7d1b      	ldrb	r3, [r3, #20]
 800c546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	899b      	ldrh	r3, [r3, #12]
 800c554:	461a      	mov	r2, r3
 800c556:	6a3b      	ldr	r3, [r7, #32]
 800c558:	fb02 f303 	mul.w	r3, r2, r3
 800c55c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c55e:	e04b      	b.n	800c5f8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6a1b      	ldr	r3, [r3, #32]
 800c564:	697a      	ldr	r2, [r7, #20]
 800c566:	429a      	cmp	r2, r3
 800c568:	d016      	beq.n	800c598 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	699a      	ldr	r2, [r3, #24]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c572:	429a      	cmp	r2, r3
 800c574:	d210      	bcs.n	800c598 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	7858      	ldrb	r0, [r3, #1]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c580:	2301      	movs	r3, #1
 800c582:	697a      	ldr	r2, [r7, #20]
 800c584:	f7fc ff9e 	bl	80094c4 <disk_read>
 800c588:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d004      	beq.n	800c598 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2201      	movs	r2, #1
 800c592:	755a      	strb	r2, [r3, #21]
 800c594:	2301      	movs	r3, #1
 800c596:	e05a      	b.n	800c64e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	697a      	ldr	r2, [r7, #20]
 800c59c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	899b      	ldrh	r3, [r3, #12]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	699b      	ldr	r3, [r3, #24]
 800c5a8:	693a      	ldr	r2, [r7, #16]
 800c5aa:	8992      	ldrh	r2, [r2, #12]
 800c5ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5b0:	fb01 f202 	mul.w	r2, r1, r2
 800c5b4:	1a9b      	subs	r3, r3, r2
 800c5b6:	1ac3      	subs	r3, r0, r3
 800c5b8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c5ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d901      	bls.n	800c5c6 <f_write+0x298>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	693a      	ldr	r2, [r7, #16]
 800c5d2:	8992      	ldrh	r2, [r2, #12]
 800c5d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5d8:	fb00 f202 	mul.w	r2, r0, r2
 800c5dc:	1a9b      	subs	r3, r3, r2
 800c5de:	440b      	add	r3, r1
 800c5e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5e2:	69f9      	ldr	r1, [r7, #28]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fd f84d 	bl	8009684 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	7d1b      	ldrb	r3, [r3, #20]
 800c5ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c5f2:	b2da      	uxtb	r2, r3
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c5f8:	69fa      	ldr	r2, [r7, #28]
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fc:	4413      	add	r3, r2
 800c5fe:	61fb      	str	r3, [r7, #28]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	699a      	ldr	r2, [r3, #24]
 800c604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c606:	441a      	add	r2, r3
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	619a      	str	r2, [r3, #24]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	68da      	ldr	r2, [r3, #12]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	699b      	ldr	r3, [r3, #24]
 800c614:	429a      	cmp	r2, r3
 800c616:	bf38      	it	cc
 800c618:	461a      	movcc	r2, r3
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	60da      	str	r2, [r3, #12]
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c624:	441a      	add	r2, r3
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	601a      	str	r2, [r3, #0]
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62e:	1ad3      	subs	r3, r2, r3
 800c630:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	f47f aeb5 	bne.w	800c3a4 <f_write+0x76>
 800c63a:	e000      	b.n	800c63e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c63c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	7d1b      	ldrb	r3, [r3, #20]
 800c642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c646:	b2da      	uxtb	r2, r3
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3730      	adds	r7, #48	@ 0x30
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b086      	sub	sp, #24
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f107 0208 	add.w	r2, r7, #8
 800c664:	4611      	mov	r1, r2
 800c666:	4618      	mov	r0, r3
 800c668:	f7ff fabe 	bl	800bbe8 <validate>
 800c66c:	4603      	mov	r3, r0
 800c66e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c670:	7dfb      	ldrb	r3, [r7, #23]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d168      	bne.n	800c748 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	7d1b      	ldrb	r3, [r3, #20]
 800c67a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d062      	beq.n	800c748 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	7d1b      	ldrb	r3, [r3, #20]
 800c686:	b25b      	sxtb	r3, r3
 800c688:	2b00      	cmp	r3, #0
 800c68a:	da15      	bge.n	800c6b8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	7858      	ldrb	r0, [r3, #1]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a1a      	ldr	r2, [r3, #32]
 800c69a:	2301      	movs	r3, #1
 800c69c:	f7fc ff32 	bl	8009504 <disk_write>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d001      	beq.n	800c6aa <f_sync+0x54>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e04f      	b.n	800c74a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	7d1b      	ldrb	r3, [r3, #20]
 800c6ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6b2:	b2da      	uxtb	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c6b8:	f7fa fe9a 	bl	80073f0 <get_fattime>
 800c6bc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c6be:	68ba      	ldr	r2, [r7, #8]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	4610      	mov	r0, r2
 800c6c8:	f7fd fa0a 	bl	8009ae0 <move_window>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d138      	bne.n	800c748 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	330b      	adds	r3, #11
 800c6e0:	781a      	ldrb	r2, [r3, #0]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	330b      	adds	r3, #11
 800c6e6:	f042 0220 	orr.w	r2, r2, #32
 800c6ea:	b2d2      	uxtb	r2, r2
 800c6ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6818      	ldr	r0, [r3, #0]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	68f9      	ldr	r1, [r7, #12]
 800c6fa:	f7fd ff95 	bl	800a628 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f103 021c 	add.w	r2, r3, #28
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	4619      	mov	r1, r3
 800c70a:	4610      	mov	r0, r2
 800c70c:	f7fc ff8e 	bl	800962c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	3316      	adds	r3, #22
 800c714:	6939      	ldr	r1, [r7, #16]
 800c716:	4618      	mov	r0, r3
 800c718:	f7fc ff88 	bl	800962c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	3312      	adds	r3, #18
 800c720:	2100      	movs	r1, #0
 800c722:	4618      	mov	r0, r3
 800c724:	f7fc ff67 	bl	80095f6 <st_word>
					fs->wflag = 1;
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	2201      	movs	r2, #1
 800c72c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	4618      	mov	r0, r3
 800c732:	f7fd fa03 	bl	8009b3c <sync_fs>
 800c736:	4603      	mov	r3, r0
 800c738:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	7d1b      	ldrb	r3, [r3, #20]
 800c73e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c742:	b2da      	uxtb	r2, r3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c748:	7dfb      	ldrb	r3, [r7, #23]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3718      	adds	r7, #24
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b084      	sub	sp, #16
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7ff ff7b 	bl	800c656 <f_sync>
 800c760:	4603      	mov	r3, r0
 800c762:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c764:	7bfb      	ldrb	r3, [r7, #15]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d118      	bne.n	800c79c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f107 0208 	add.w	r2, r7, #8
 800c770:	4611      	mov	r1, r2
 800c772:	4618      	mov	r0, r3
 800c774:	f7ff fa38 	bl	800bbe8 <validate>
 800c778:	4603      	mov	r3, r0
 800c77a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10c      	bne.n	800c79c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	4618      	mov	r0, r3
 800c788:	f7fd f906 	bl	8009998 <dec_lock>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c790:	7bfb      	ldrb	r3, [r7, #15]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d102      	bne.n	800c79c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3710      	adds	r7, #16
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b090      	sub	sp, #64	@ 0x40
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
 800c7ae:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f107 0208 	add.w	r2, r7, #8
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff fa15 	bl	800bbe8 <validate>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c7c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d103      	bne.n	800c7d4 <f_lseek+0x2e>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	7d5b      	ldrb	r3, [r3, #21]
 800c7d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c7d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <f_lseek+0x3c>
 800c7dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c7e0:	e201      	b.n	800cbe6 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f000 80d9 	beq.w	800c99e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f2:	d15a      	bne.n	800c8aa <f_lseek+0x104>
			tbl = fp->cltbl;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7f8:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fc:	1d1a      	adds	r2, r3, #4
 800c7fe:	627a      	str	r2, [r7, #36]	@ 0x24
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	617b      	str	r3, [r7, #20]
 800c804:	2302      	movs	r3, #2
 800c806:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800c80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c810:	2b00      	cmp	r3, #0
 800c812:	d03a      	beq.n	800c88a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c816:	613b      	str	r3, [r7, #16]
 800c818:	2300      	movs	r3, #0
 800c81a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c81e:	3302      	adds	r3, #2
 800c820:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800c822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c824:	60fb      	str	r3, [r7, #12]
 800c826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c828:	3301      	adds	r3, #1
 800c82a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c830:	4618      	mov	r0, r3
 800c832:	f7fd fa12 	bl	8009c5a <get_fat>
 800c836:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d804      	bhi.n	800c848 <f_lseek+0xa2>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2202      	movs	r2, #2
 800c842:	755a      	strb	r2, [r3, #21]
 800c844:	2302      	movs	r3, #2
 800c846:	e1ce      	b.n	800cbe6 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c84e:	d104      	bne.n	800c85a <f_lseek+0xb4>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	755a      	strb	r2, [r3, #21]
 800c856:	2301      	movs	r3, #1
 800c858:	e1c5      	b.n	800cbe6 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	3301      	adds	r3, #1
 800c85e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c860:	429a      	cmp	r2, r3
 800c862:	d0de      	beq.n	800c822 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c864:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d809      	bhi.n	800c880 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86e:	1d1a      	adds	r2, r3, #4
 800c870:	627a      	str	r2, [r7, #36]	@ 0x24
 800c872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c874:	601a      	str	r2, [r3, #0]
 800c876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c878:	1d1a      	adds	r2, r3, #4
 800c87a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	69db      	ldr	r3, [r3, #28]
 800c884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c886:	429a      	cmp	r2, r3
 800c888:	d3c4      	bcc.n	800c814 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c88e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c890:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	429a      	cmp	r2, r3
 800c898:	d803      	bhi.n	800c8a2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89c:	2200      	movs	r2, #0
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	e19f      	b.n	800cbe2 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c8a2:	2311      	movs	r3, #17
 800c8a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c8a8:	e19b      	b.n	800cbe2 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	683a      	ldr	r2, [r7, #0]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d902      	bls.n	800c8ba <f_lseek+0x114>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	683a      	ldr	r2, [r7, #0]
 800c8be:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f000 818d 	beq.w	800cbe2 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7fd fcad 	bl	800a22e <clmt_clust>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	69db      	ldr	r3, [r3, #28]
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	f7fd f99a 	bl	8009c1c <clust2sect>
 800c8e8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d104      	bne.n	800c8fa <f_lseek+0x154>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2202      	movs	r2, #2
 800c8f4:	755a      	strb	r2, [r3, #21]
 800c8f6:	2302      	movs	r3, #2
 800c8f8:	e175      	b.n	800cbe6 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	8992      	ldrh	r2, [r2, #12]
 800c902:	fbb3 f3f2 	udiv	r3, r3, r2
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	8952      	ldrh	r2, [r2, #10]
 800c90a:	3a01      	subs	r2, #1
 800c90c:	4013      	ands	r3, r2
 800c90e:	69ba      	ldr	r2, [r7, #24]
 800c910:	4413      	add	r3, r2
 800c912:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	699b      	ldr	r3, [r3, #24]
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	8992      	ldrh	r2, [r2, #12]
 800c91c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c920:	fb01 f202 	mul.w	r2, r1, r2
 800c924:	1a9b      	subs	r3, r3, r2
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 815b 	beq.w	800cbe2 <f_lseek+0x43c>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a1b      	ldr	r3, [r3, #32]
 800c930:	69ba      	ldr	r2, [r7, #24]
 800c932:	429a      	cmp	r2, r3
 800c934:	f000 8155 	beq.w	800cbe2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	7d1b      	ldrb	r3, [r3, #20]
 800c93c:	b25b      	sxtb	r3, r3
 800c93e:	2b00      	cmp	r3, #0
 800c940:	da18      	bge.n	800c974 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	7858      	ldrb	r0, [r3, #1]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6a1a      	ldr	r2, [r3, #32]
 800c950:	2301      	movs	r3, #1
 800c952:	f7fc fdd7 	bl	8009504 <disk_write>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d004      	beq.n	800c966 <f_lseek+0x1c0>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2201      	movs	r2, #1
 800c960:	755a      	strb	r2, [r3, #21]
 800c962:	2301      	movs	r3, #1
 800c964:	e13f      	b.n	800cbe6 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	7d1b      	ldrb	r3, [r3, #20]
 800c96a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c96e:	b2da      	uxtb	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	7858      	ldrb	r0, [r3, #1]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c97e:	2301      	movs	r3, #1
 800c980:	69ba      	ldr	r2, [r7, #24]
 800c982:	f7fc fd9f 	bl	80094c4 <disk_read>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d004      	beq.n	800c996 <f_lseek+0x1f0>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	755a      	strb	r2, [r3, #21]
 800c992:	2301      	movs	r3, #1
 800c994:	e127      	b.n	800cbe6 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	69ba      	ldr	r2, [r7, #24]
 800c99a:	621a      	str	r2, [r3, #32]
 800c99c:	e121      	b.n	800cbe2 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	68db      	ldr	r3, [r3, #12]
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d908      	bls.n	800c9ba <f_lseek+0x214>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	7d1b      	ldrb	r3, [r3, #20]
 800c9ac:	f003 0302 	and.w	r3, r3, #2
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d102      	bne.n	800c9ba <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	699b      	ldr	r3, [r3, #24]
 800c9be:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9c8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f000 80b5 	beq.w	800cb3c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	895b      	ldrh	r3, [r3, #10]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	899b      	ldrh	r3, [r3, #12]
 800c9dc:	fb02 f303 	mul.w	r3, r2, r3
 800c9e0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c9e2:	6a3b      	ldr	r3, [r7, #32]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d01b      	beq.n	800ca20 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	1e5a      	subs	r2, r3, #1
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	fbb2 f2f3 	udiv	r2, r2, r3
 800c9f2:	6a3b      	ldr	r3, [r7, #32]
 800c9f4:	1e59      	subs	r1, r3, #1
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d30f      	bcc.n	800ca20 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ca00:	6a3b      	ldr	r3, [r7, #32]
 800ca02:	1e5a      	subs	r2, r3, #1
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	425b      	negs	r3, r3
 800ca08:	401a      	ands	r2, r3
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	699b      	ldr	r3, [r3, #24]
 800ca12:	683a      	ldr	r2, [r7, #0]
 800ca14:	1ad3      	subs	r3, r2, r3
 800ca16:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	69db      	ldr	r3, [r3, #28]
 800ca1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca1e:	e022      	b.n	800ca66 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ca26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d119      	bne.n	800ca60 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2100      	movs	r1, #0
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7fd fb64 	bl	800a0fe <create_chain>
 800ca36:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ca38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	d104      	bne.n	800ca48 <f_lseek+0x2a2>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2202      	movs	r2, #2
 800ca42:	755a      	strb	r2, [r3, #21]
 800ca44:	2302      	movs	r3, #2
 800ca46:	e0ce      	b.n	800cbe6 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca4e:	d104      	bne.n	800ca5a <f_lseek+0x2b4>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	755a      	strb	r2, [r3, #21]
 800ca56:	2301      	movs	r3, #1
 800ca58:	e0c5      	b.n	800cbe6 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca5e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca64:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ca66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d067      	beq.n	800cb3c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800ca6c:	e03a      	b.n	800cae4 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800ca6e:	683a      	ldr	r2, [r7, #0]
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	603b      	str	r3, [r7, #0]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	699a      	ldr	r2, [r3, #24]
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	441a      	add	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	7d1b      	ldrb	r3, [r3, #20]
 800ca86:	f003 0302 	and.w	r3, r3, #2
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00b      	beq.n	800caa6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fd fb33 	bl	800a0fe <create_chain>
 800ca98:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ca9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d108      	bne.n	800cab2 <f_lseek+0x30c>
							ofs = 0; break;
 800caa0:	2300      	movs	r3, #0
 800caa2:	603b      	str	r3, [r7, #0]
 800caa4:	e022      	b.n	800caec <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800caaa:	4618      	mov	r0, r3
 800caac:	f7fd f8d5 	bl	8009c5a <get_fat>
 800cab0:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cab8:	d104      	bne.n	800cac4 <f_lseek+0x31e>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2201      	movs	r2, #1
 800cabe:	755a      	strb	r2, [r3, #21]
 800cac0:	2301      	movs	r3, #1
 800cac2:	e090      	b.n	800cbe6 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d904      	bls.n	800cad4 <f_lseek+0x32e>
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	69db      	ldr	r3, [r3, #28]
 800cace:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d304      	bcc.n	800cade <f_lseek+0x338>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2202      	movs	r2, #2
 800cad8:	755a      	strb	r2, [r3, #21]
 800cada:	2302      	movs	r3, #2
 800cadc:	e083      	b.n	800cbe6 <f_lseek+0x440>
					fp->clust = clst;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cae2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cae4:	683a      	ldr	r2, [r7, #0]
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d8c0      	bhi.n	800ca6e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	699a      	ldr	r2, [r3, #24]
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	441a      	add	r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	899b      	ldrh	r3, [r3, #12]
 800cafc:	461a      	mov	r2, r3
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb04:	fb01 f202 	mul.w	r2, r1, r2
 800cb08:	1a9b      	subs	r3, r3, r2
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d016      	beq.n	800cb3c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fd f882 	bl	8009c1c <clust2sect>
 800cb18:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cb1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d104      	bne.n	800cb2a <f_lseek+0x384>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2202      	movs	r2, #2
 800cb24:	755a      	strb	r2, [r3, #21]
 800cb26:	2302      	movs	r3, #2
 800cb28:	e05d      	b.n	800cbe6 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	899b      	ldrh	r3, [r3, #12]
 800cb2e:	461a      	mov	r2, r3
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb38:	4413      	add	r3, r2
 800cb3a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	699a      	ldr	r2, [r3, #24]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d90a      	bls.n	800cb5e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	699a      	ldr	r2, [r3, #24]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	7d1b      	ldrb	r3, [r3, #20]
 800cb54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb58:	b2da      	uxtb	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	699b      	ldr	r3, [r3, #24]
 800cb62:	68ba      	ldr	r2, [r7, #8]
 800cb64:	8992      	ldrh	r2, [r2, #12]
 800cb66:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb6a:	fb01 f202 	mul.w	r2, r1, r2
 800cb6e:	1a9b      	subs	r3, r3, r2
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d036      	beq.n	800cbe2 <f_lseek+0x43c>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a1b      	ldr	r3, [r3, #32]
 800cb78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d031      	beq.n	800cbe2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	7d1b      	ldrb	r3, [r3, #20]
 800cb82:	b25b      	sxtb	r3, r3
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	da18      	bge.n	800cbba <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	7858      	ldrb	r0, [r3, #1]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6a1a      	ldr	r2, [r3, #32]
 800cb96:	2301      	movs	r3, #1
 800cb98:	f7fc fcb4 	bl	8009504 <disk_write>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d004      	beq.n	800cbac <f_lseek+0x406>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2201      	movs	r2, #1
 800cba6:	755a      	strb	r2, [r3, #21]
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e01c      	b.n	800cbe6 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	7d1b      	ldrb	r3, [r3, #20]
 800cbb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbb4:	b2da      	uxtb	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	7858      	ldrb	r0, [r3, #1]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbc8:	f7fc fc7c 	bl	80094c4 <disk_read>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d004      	beq.n	800cbdc <f_lseek+0x436>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	755a      	strb	r2, [r3, #21]
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e004      	b.n	800cbe6 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbe0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cbe2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3740      	adds	r7, #64	@ 0x40
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b090      	sub	sp, #64	@ 0x40
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800cbf8:	f107 0108 	add.w	r1, r7, #8
 800cbfc:	1d3b      	adds	r3, r7, #4
 800cbfe:	2200      	movs	r2, #0
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7fe fd6b 	bl	800b6dc <find_volume>
 800cc06:	4603      	mov	r3, r0
 800cc08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800cc0c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d11f      	bne.n	800cc54 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	f107 0308 	add.w	r3, r7, #8
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7fe fc4d 	bl	800b4bc <follow_path>
 800cc22:	4603      	mov	r3, r0
 800cc24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800cc28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d111      	bne.n	800cc54 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800cc30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cc34:	b25b      	sxtb	r3, r3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	da03      	bge.n	800cc42 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800cc3a:	2306      	movs	r3, #6
 800cc3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cc40:	e008      	b.n	800cc54 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d005      	beq.n	800cc54 <f_stat+0x66>
 800cc48:	f107 0308 	add.w	r3, r7, #8
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7fe f99e 	bl	800af90 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800cc54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3740      	adds	r7, #64	@ 0x40
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b0a0      	sub	sp, #128	@ 0x80
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800cc6c:	f107 010c 	add.w	r1, r7, #12
 800cc70:	1d3b      	adds	r3, r7, #4
 800cc72:	2202      	movs	r2, #2
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7fe fd31 	bl	800b6dc <find_volume>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 800cc84:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f040 808e 	bne.w	800cdaa <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800cc94:	4611      	mov	r1, r2
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fe fc10 	bl	800b4bc <follow_path>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800cca2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d108      	bne.n	800ccbc <f_unlink+0x5c>
 800ccaa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800ccae:	2102      	movs	r1, #2
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f7fc fd65 	bl	8009780 <chk_lock>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800ccbc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d172      	bne.n	800cdaa <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800ccc4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800ccc8:	b25b      	sxtb	r3, r3
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	da03      	bge.n	800ccd6 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800ccce:	2306      	movs	r3, #6
 800ccd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800ccd4:	e008      	b.n	800cce8 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800ccd6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800ccda:	f003 0301 	and.w	r3, r3, #1
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d002      	beq.n	800cce8 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800cce2:	2307      	movs	r3, #7
 800cce4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 800cce8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d134      	bne.n	800cd5a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fd fc77 	bl	800a5ea <ld_clust>
 800ccfc:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800ccfe:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800cd02:	f003 0310 	and.w	r3, r3, #16
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d027      	beq.n	800cd5a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800cd0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd10:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800cd12:	f107 0310 	add.w	r3, r7, #16
 800cd16:	2100      	movs	r1, #0
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fd fac0 	bl	800a29e <dir_sdi>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 800cd24:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d116      	bne.n	800cd5a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800cd2c:	f107 0310 	add.w	r3, r7, #16
 800cd30:	2100      	movs	r1, #0
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fd fe83 	bl	800aa3e <dir_read>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800cd3e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d102      	bne.n	800cd4c <f_unlink+0xec>
 800cd46:	2307      	movs	r3, #7
 800cd48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800cd4c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cd50:	2b04      	cmp	r3, #4
 800cd52:	d102      	bne.n	800cd5a <f_unlink+0xfa>
 800cd54:	2300      	movs	r3, #0
 800cd56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800cd5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d123      	bne.n	800cdaa <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800cd62:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fe f8c8 	bl	800aefc <dir_remove>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800cd72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d10c      	bne.n	800cd94 <f_unlink+0x134>
 800cd7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d009      	beq.n	800cd94 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800cd80:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800cd84:	2200      	movs	r2, #0
 800cd86:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fd f953 	bl	800a034 <remove_chain>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800cd94:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d106      	bne.n	800cdaa <f_unlink+0x14a>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fc fecc 	bl	8009b3c <sync_fs>
 800cda4:	4603      	mov	r3, r0
 800cda6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800cdaa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3780      	adds	r7, #128	@ 0x80
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b088      	sub	sp, #32
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	60f8      	str	r0, [r7, #12]
 800cdbe:	60b9      	str	r1, [r7, #8]
 800cdc0:	607a      	str	r2, [r7, #4]
	int n = 0;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cdca:	e01c      	b.n	800ce06 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800cdcc:	f107 0310 	add.w	r3, r7, #16
 800cdd0:	f107 0114 	add.w	r1, r7, #20
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7ff f94a 	bl	800c070 <f_read>
		if (rc != 1) break;
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d117      	bne.n	800ce12 <f_gets+0x5c>
		c = s[0];
 800cde2:	7d3b      	ldrb	r3, [r7, #20]
 800cde4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	2b0d      	cmp	r3, #13
 800cdea:	d00b      	beq.n	800ce04 <f_gets+0x4e>
		*p++ = c;
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	61ba      	str	r2, [r7, #24]
 800cdf2:	7dfa      	ldrb	r2, [r7, #23]
 800cdf4:	701a      	strb	r2, [r3, #0]
		n++;
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800cdfc:	7dfb      	ldrb	r3, [r7, #23]
 800cdfe:	2b0a      	cmp	r3, #10
 800ce00:	d009      	beq.n	800ce16 <f_gets+0x60>
 800ce02:	e000      	b.n	800ce06 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ce04:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	3b01      	subs	r3, #1
 800ce0a:	69fa      	ldr	r2, [r7, #28]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	dbdd      	blt.n	800cdcc <f_gets+0x16>
 800ce10:	e002      	b.n	800ce18 <f_gets+0x62>
		if (rc != 1) break;
 800ce12:	bf00      	nop
 800ce14:	e000      	b.n	800ce18 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800ce16:	bf00      	nop
	}
	*p = 0;
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d001      	beq.n	800ce28 <f_gets+0x72>
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	e000      	b.n	800ce2a <f_gets+0x74>
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3720      	adds	r7, #32
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b084      	sub	sp, #16
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ce3e:	78fb      	ldrb	r3, [r7, #3]
 800ce40:	2b0a      	cmp	r3, #10
 800ce42:	d103      	bne.n	800ce4c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ce44:	210d      	movs	r1, #13
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7ff fff3 	bl	800ce32 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	db25      	blt.n	800cea4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	1c5a      	adds	r2, r3, #1
 800ce5c:	60fa      	str	r2, [r7, #12]
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	4413      	add	r3, r2
 800ce62:	78fa      	ldrb	r2, [r7, #3]
 800ce64:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b3c      	cmp	r3, #60	@ 0x3c
 800ce6a:	dd12      	ble.n	800ce92 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6818      	ldr	r0, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f103 010c 	add.w	r1, r3, #12
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	f107 0308 	add.w	r3, r7, #8
 800ce7c:	f7ff fa57 	bl	800c32e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d101      	bne.n	800ce8c <putc_bfd+0x5a>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	e001      	b.n	800ce90 <putc_bfd+0x5e>
 800ce8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce90:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	1c5a      	adds	r2, r3, #1
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	609a      	str	r2, [r3, #8]
 800cea2:	e000      	b.n	800cea6 <putc_bfd+0x74>
	if (i < 0) return;
 800cea4:	bf00      	nop
}
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	db16      	blt.n	800ceea <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6818      	ldr	r0, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f103 010c 	add.w	r1, r3, #12
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	461a      	mov	r2, r3
 800cecc:	f107 030c 	add.w	r3, r7, #12
 800ced0:	f7ff fa2d 	bl	800c32e <f_write>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d107      	bne.n	800ceea <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	68fa      	ldr	r2, [r7, #12]
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d102      	bne.n	800ceea <putc_flush+0x3e>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	e001      	b.n	800ceee <putc_flush+0x42>
	return EOF;
 800ceea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800cef6:	b480      	push	{r7}
 800cef8:	b083      	sub	sp, #12
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	683a      	ldr	r2, [r7, #0]
 800cf04:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	605a      	str	r2, [r3, #4]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	685a      	ldr	r2, [r3, #4]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	609a      	str	r2, [r3, #8]
}
 800cf14:	bf00      	nop
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b096      	sub	sp, #88	@ 0x58
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800cf2a:	f107 030c 	add.w	r3, r7, #12
 800cf2e:	6839      	ldr	r1, [r7, #0]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7ff ffe0 	bl	800cef6 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800cf36:	e009      	b.n	800cf4c <f_puts+0x2c>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	1c5a      	adds	r2, r3, #1
 800cf3c:	607a      	str	r2, [r7, #4]
 800cf3e:	781a      	ldrb	r2, [r3, #0]
 800cf40:	f107 030c 	add.w	r3, r7, #12
 800cf44:	4611      	mov	r1, r2
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff ff73 	bl	800ce32 <putc_bfd>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d1f1      	bne.n	800cf38 <f_puts+0x18>
	return putc_flush(&pb);
 800cf54:	f107 030c 	add.w	r3, r7, #12
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7ff ffa7 	bl	800ceac <putc_flush>
 800cf5e:	4603      	mov	r3, r0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3758      	adds	r7, #88	@ 0x58
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800cf68:	b40e      	push	{r1, r2, r3}
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b0a7      	sub	sp, #156	@ 0x9c
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800cf72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cf76:	6879      	ldr	r1, [r7, #4]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7ff ffbc 	bl	800cef6 <putc_init>

	va_start(arp, fmt);
 800cf7e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800cf82:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 800cf84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cf88:	1c5a      	adds	r2, r3, #1
 800cf8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 800cf94:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f000 81f2 	beq.w	800d382 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800cf9e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cfa2:	2b25      	cmp	r3, #37	@ 0x25
 800cfa4:	d008      	beq.n	800cfb8 <f_printf+0x50>
			putc_bfd(&pb, c);
 800cfa6:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800cfaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cfae:	4611      	mov	r1, r2
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff ff3e 	bl	800ce32 <putc_bfd>
			continue;
 800cfb6:	e1e3      	b.n	800d380 <f_printf+0x418>
		}
		w = f = 0;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 800cfc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cfc8:	1c5a      	adds	r2, r3, #1
 800cfca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800cfd4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cfd8:	2b30      	cmp	r3, #48	@ 0x30
 800cfda:	d10b      	bne.n	800cff4 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800cfe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cfe6:	1c5a      	adds	r2, r3, #1
 800cfe8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800cff2:	e024      	b.n	800d03e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800cff4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cff8:	2b2d      	cmp	r3, #45	@ 0x2d
 800cffa:	d120      	bne.n	800d03e <f_printf+0xd6>
				f = 2; c = *fmt++;
 800cffc:	2302      	movs	r3, #2
 800cffe:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d006:	1c5a      	adds	r2, r3, #1
 800d008:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800d012:	e014      	b.n	800d03e <f_printf+0xd6>
			w = w * 10 + c - '0';
 800d014:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d018:	4613      	mov	r3, r2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	4413      	add	r3, r2
 800d01e:	005b      	lsls	r3, r3, #1
 800d020:	461a      	mov	r2, r3
 800d022:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d026:	4413      	add	r3, r2
 800d028:	3b30      	subs	r3, #48	@ 0x30
 800d02a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 800d02e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d032:	1c5a      	adds	r2, r3, #1
 800d034:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 800d03e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d042:	2b2f      	cmp	r3, #47	@ 0x2f
 800d044:	d903      	bls.n	800d04e <f_printf+0xe6>
 800d046:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d04a:	2b39      	cmp	r3, #57	@ 0x39
 800d04c:	d9e2      	bls.n	800d014 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800d04e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d052:	2b6c      	cmp	r3, #108	@ 0x6c
 800d054:	d003      	beq.n	800d05e <f_printf+0xf6>
 800d056:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d05a:	2b4c      	cmp	r3, #76	@ 0x4c
 800d05c:	d10d      	bne.n	800d07a <f_printf+0x112>
			f |= 4; c = *fmt++;
 800d05e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d062:	f043 0304 	orr.w	r3, r3, #4
 800d066:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d06a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d06e:	1c5a      	adds	r2, r3, #1
 800d070:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 800d07a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 8181 	beq.w	800d386 <f_printf+0x41e>
		d = c;
 800d084:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d088:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 800d08c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d090:	2b60      	cmp	r3, #96	@ 0x60
 800d092:	d908      	bls.n	800d0a6 <f_printf+0x13e>
 800d094:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d098:	2b7a      	cmp	r3, #122	@ 0x7a
 800d09a:	d804      	bhi.n	800d0a6 <f_printf+0x13e>
 800d09c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d0a0:	3b20      	subs	r3, #32
 800d0a2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 800d0a6:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d0aa:	3b42      	subs	r3, #66	@ 0x42
 800d0ac:	2b16      	cmp	r3, #22
 800d0ae:	f200 8098 	bhi.w	800d1e2 <f_printf+0x27a>
 800d0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d0b8 <f_printf+0x150>)
 800d0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b8:	0800d1c3 	.word	0x0800d1c3
 800d0bc:	0800d1ab 	.word	0x0800d1ab
 800d0c0:	0800d1d3 	.word	0x0800d1d3
 800d0c4:	0800d1e3 	.word	0x0800d1e3
 800d0c8:	0800d1e3 	.word	0x0800d1e3
 800d0cc:	0800d1e3 	.word	0x0800d1e3
 800d0d0:	0800d1e3 	.word	0x0800d1e3
 800d0d4:	0800d1e3 	.word	0x0800d1e3
 800d0d8:	0800d1e3 	.word	0x0800d1e3
 800d0dc:	0800d1e3 	.word	0x0800d1e3
 800d0e0:	0800d1e3 	.word	0x0800d1e3
 800d0e4:	0800d1e3 	.word	0x0800d1e3
 800d0e8:	0800d1e3 	.word	0x0800d1e3
 800d0ec:	0800d1cb 	.word	0x0800d1cb
 800d0f0:	0800d1e3 	.word	0x0800d1e3
 800d0f4:	0800d1e3 	.word	0x0800d1e3
 800d0f8:	0800d1e3 	.word	0x0800d1e3
 800d0fc:	0800d115 	.word	0x0800d115
 800d100:	0800d1e3 	.word	0x0800d1e3
 800d104:	0800d1d3 	.word	0x0800d1d3
 800d108:	0800d1e3 	.word	0x0800d1e3
 800d10c:	0800d1e3 	.word	0x0800d1e3
 800d110:	0800d1db 	.word	0x0800d1db
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800d114:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d116:	1d1a      	adds	r2, r3, #4
 800d118:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 800d11e:	2300      	movs	r3, #0
 800d120:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d124:	e004      	b.n	800d130 <f_printf+0x1c8>
 800d126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d12a:	3301      	adds	r3, #1
 800d12c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d130:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d136:	4413      	add	r3, r2
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1f3      	bne.n	800d126 <f_printf+0x1be>
			if (!(f & 2)) {
 800d13e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d142:	f003 0302 	and.w	r3, r3, #2
 800d146:	2b00      	cmp	r3, #0
 800d148:	d11a      	bne.n	800d180 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800d14a:	e005      	b.n	800d158 <f_printf+0x1f0>
 800d14c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d150:	2120      	movs	r1, #32
 800d152:	4618      	mov	r0, r3
 800d154:	f7ff fe6d 	bl	800ce32 <putc_bfd>
 800d158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d15c:	1c5a      	adds	r2, r3, #1
 800d15e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d162:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d166:	429a      	cmp	r2, r3
 800d168:	d8f0      	bhi.n	800d14c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800d16a:	e009      	b.n	800d180 <f_printf+0x218>
 800d16c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d16e:	1c5a      	adds	r2, r3, #1
 800d170:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d172:	781a      	ldrb	r2, [r3, #0]
 800d174:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d178:	4611      	mov	r1, r2
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7ff fe59 	bl	800ce32 <putc_bfd>
 800d180:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d1f1      	bne.n	800d16c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800d188:	e005      	b.n	800d196 <f_printf+0x22e>
 800d18a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d18e:	2120      	movs	r1, #32
 800d190:	4618      	mov	r0, r3
 800d192:	f7ff fe4e 	bl	800ce32 <putc_bfd>
 800d196:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d19a:	1c5a      	adds	r2, r3, #1
 800d19c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d1a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d8f0      	bhi.n	800d18a <f_printf+0x222>
			continue;
 800d1a8:	e0ea      	b.n	800d380 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800d1aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1ac:	1d1a      	adds	r2, r3, #4
 800d1ae:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	b2da      	uxtb	r2, r3
 800d1b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7ff fe39 	bl	800ce32 <putc_bfd>
 800d1c0:	e0de      	b.n	800d380 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800d1c2:	2302      	movs	r3, #2
 800d1c4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d1c8:	e014      	b.n	800d1f4 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800d1ca:	2308      	movs	r3, #8
 800d1cc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d1d0:	e010      	b.n	800d1f4 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800d1d2:	230a      	movs	r3, #10
 800d1d4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d1d8:	e00c      	b.n	800d1f4 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800d1da:	2310      	movs	r3, #16
 800d1dc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d1e0:	e008      	b.n	800d1f4 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800d1e2:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800d1e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7ff fe20 	bl	800ce32 <putc_bfd>
 800d1f2:	e0c5      	b.n	800d380 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800d1f4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d1f8:	f003 0304 	and.w	r3, r3, #4
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d004      	beq.n	800d20a <f_printf+0x2a2>
 800d200:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d202:	1d1a      	adds	r2, r3, #4
 800d204:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	e00c      	b.n	800d224 <f_printf+0x2bc>
 800d20a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d20e:	2b44      	cmp	r3, #68	@ 0x44
 800d210:	d104      	bne.n	800d21c <f_printf+0x2b4>
 800d212:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d214:	1d1a      	adds	r2, r3, #4
 800d216:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	e003      	b.n	800d224 <f_printf+0x2bc>
 800d21c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d21e:	1d1a      	adds	r2, r3, #4
 800d220:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800d228:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d22c:	2b44      	cmp	r3, #68	@ 0x44
 800d22e:	d10e      	bne.n	800d24e <f_printf+0x2e6>
 800d230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d234:	2b00      	cmp	r3, #0
 800d236:	da0a      	bge.n	800d24e <f_printf+0x2e6>
			v = 0 - v;
 800d238:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d23c:	425b      	negs	r3, r3
 800d23e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 800d242:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d246:	f043 0308 	orr.w	r3, r3, #8
 800d24a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 800d24e:	2300      	movs	r3, #0
 800d250:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800d254:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800d258:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d25c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d260:	fb01 f202 	mul.w	r2, r1, r2
 800d264:	1a9b      	subs	r3, r3, r2
 800d266:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800d26a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800d26e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d272:	fbb2 f3f3 	udiv	r3, r2, r3
 800d276:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800d27a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d27e:	2b09      	cmp	r3, #9
 800d280:	d90b      	bls.n	800d29a <f_printf+0x332>
 800d282:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d286:	2b78      	cmp	r3, #120	@ 0x78
 800d288:	d101      	bne.n	800d28e <f_printf+0x326>
 800d28a:	2227      	movs	r2, #39	@ 0x27
 800d28c:	e000      	b.n	800d290 <f_printf+0x328>
 800d28e:	2207      	movs	r2, #7
 800d290:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d294:	4413      	add	r3, r2
 800d296:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 800d29a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d29e:	1c5a      	adds	r2, r3, #1
 800d2a0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800d2a4:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800d2a8:	3230      	adds	r2, #48	@ 0x30
 800d2aa:	b2d2      	uxtb	r2, r2
 800d2ac:	3398      	adds	r3, #152	@ 0x98
 800d2ae:	443b      	add	r3, r7
 800d2b0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800d2b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d003      	beq.n	800d2c4 <f_printf+0x35c>
 800d2bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d2c0:	2b1f      	cmp	r3, #31
 800d2c2:	d9c7      	bls.n	800d254 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800d2c4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d2c8:	f003 0308 	and.w	r3, r3, #8
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d009      	beq.n	800d2e4 <f_printf+0x37c>
 800d2d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d2d4:	1c5a      	adds	r2, r3, #1
 800d2d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800d2da:	3398      	adds	r3, #152	@ 0x98
 800d2dc:	443b      	add	r3, r7
 800d2de:	222d      	movs	r2, #45	@ 0x2d
 800d2e0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800d2e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d2e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d2ec:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d2f0:	f003 0301 	and.w	r3, r3, #1
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d001      	beq.n	800d2fc <f_printf+0x394>
 800d2f8:	2330      	movs	r3, #48	@ 0x30
 800d2fa:	e000      	b.n	800d2fe <f_printf+0x396>
 800d2fc:	2320      	movs	r3, #32
 800d2fe:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800d302:	e007      	b.n	800d314 <f_printf+0x3ac>
 800d304:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800d308:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d30c:	4611      	mov	r1, r2
 800d30e:	4618      	mov	r0, r3
 800d310:	f7ff fd8f 	bl	800ce32 <putc_bfd>
 800d314:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d318:	f003 0302 	and.w	r3, r3, #2
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d108      	bne.n	800d332 <f_printf+0x3ca>
 800d320:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d324:	1c5a      	adds	r2, r3, #1
 800d326:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d32a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d32e:	429a      	cmp	r2, r3
 800d330:	d8e8      	bhi.n	800d304 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800d332:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d336:	3b01      	subs	r3, #1
 800d338:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d33c:	f107 020c 	add.w	r2, r7, #12
 800d340:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d344:	4413      	add	r3, r2
 800d346:	781a      	ldrb	r2, [r3, #0]
 800d348:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d34c:	4611      	mov	r1, r2
 800d34e:	4618      	mov	r0, r3
 800d350:	f7ff fd6f 	bl	800ce32 <putc_bfd>
		} while (i);
 800d354:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1ea      	bne.n	800d332 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800d35c:	e007      	b.n	800d36e <f_printf+0x406>
 800d35e:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800d362:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d366:	4611      	mov	r1, r2
 800d368:	4618      	mov	r0, r3
 800d36a:	f7ff fd62 	bl	800ce32 <putc_bfd>
 800d36e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d372:	1c5a      	adds	r2, r3, #1
 800d374:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d378:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d8ee      	bhi.n	800d35e <f_printf+0x3f6>
		c = *fmt++;
 800d380:	e600      	b.n	800cf84 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800d382:	bf00      	nop
 800d384:	e000      	b.n	800d388 <f_printf+0x420>
		if (!c) break;
 800d386:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800d388:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7ff fd8d 	bl	800ceac <putc_flush>
 800d392:	4603      	mov	r3, r0
}
 800d394:	4618      	mov	r0, r3
 800d396:	379c      	adds	r7, #156	@ 0x9c
 800d398:	46bd      	mov	sp, r7
 800d39a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d39e:	b003      	add	sp, #12
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop

0800d3a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b087      	sub	sp, #28
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d3ba:	4b1f      	ldr	r3, [pc, #124]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3bc:	7a5b      	ldrb	r3, [r3, #9]
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d131      	bne.n	800d428 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d3c4:	4b1c      	ldr	r3, [pc, #112]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3c6:	7a5b      	ldrb	r3, [r3, #9]
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	4b1a      	ldr	r3, [pc, #104]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3ce:	2100      	movs	r1, #0
 800d3d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d3d2:	4b19      	ldr	r3, [pc, #100]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3d4:	7a5b      	ldrb	r3, [r3, #9]
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	4a17      	ldr	r2, [pc, #92]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4413      	add	r3, r2
 800d3de:	68fa      	ldr	r2, [r7, #12]
 800d3e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d3e2:	4b15      	ldr	r3, [pc, #84]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3e4:	7a5b      	ldrb	r3, [r3, #9]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	4b13      	ldr	r3, [pc, #76]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3ec:	4413      	add	r3, r2
 800d3ee:	79fa      	ldrb	r2, [r7, #7]
 800d3f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d3f2:	4b11      	ldr	r3, [pc, #68]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3f4:	7a5b      	ldrb	r3, [r3, #9]
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	1c5a      	adds	r2, r3, #1
 800d3fa:	b2d1      	uxtb	r1, r2
 800d3fc:	4a0e      	ldr	r2, [pc, #56]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3fe:	7251      	strb	r1, [r2, #9]
 800d400:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d402:	7dbb      	ldrb	r3, [r7, #22]
 800d404:	3330      	adds	r3, #48	@ 0x30
 800d406:	b2da      	uxtb	r2, r3
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	3301      	adds	r3, #1
 800d410:	223a      	movs	r2, #58	@ 0x3a
 800d412:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	3302      	adds	r3, #2
 800d418:	222f      	movs	r2, #47	@ 0x2f
 800d41a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	3303      	adds	r3, #3
 800d420:	2200      	movs	r2, #0
 800d422:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d424:	2300      	movs	r3, #0
 800d426:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d428:	7dfb      	ldrb	r3, [r7, #23]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	371c      	adds	r7, #28
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	200025b8 	.word	0x200025b8

0800d43c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d446:	2200      	movs	r2, #0
 800d448:	6839      	ldr	r1, [r7, #0]
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f7ff ffaa 	bl	800d3a4 <FATFS_LinkDriverEx>
 800d450:	4603      	mov	r3, r0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	4603      	mov	r3, r0
 800d464:	6039      	str	r1, [r7, #0]
 800d466:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d468:	88fb      	ldrh	r3, [r7, #6]
 800d46a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d46c:	d802      	bhi.n	800d474 <ff_convert+0x18>
		c = chr;
 800d46e:	88fb      	ldrh	r3, [r7, #6]
 800d470:	81fb      	strh	r3, [r7, #14]
 800d472:	e025      	b.n	800d4c0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00b      	beq.n	800d492 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d47a:	88fb      	ldrh	r3, [r7, #6]
 800d47c:	2bff      	cmp	r3, #255	@ 0xff
 800d47e:	d805      	bhi.n	800d48c <ff_convert+0x30>
 800d480:	88fb      	ldrh	r3, [r7, #6]
 800d482:	3b80      	subs	r3, #128	@ 0x80
 800d484:	4a12      	ldr	r2, [pc, #72]	@ (800d4d0 <ff_convert+0x74>)
 800d486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d48a:	e000      	b.n	800d48e <ff_convert+0x32>
 800d48c:	2300      	movs	r3, #0
 800d48e:	81fb      	strh	r3, [r7, #14]
 800d490:	e016      	b.n	800d4c0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d492:	2300      	movs	r3, #0
 800d494:	81fb      	strh	r3, [r7, #14]
 800d496:	e009      	b.n	800d4ac <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d498:	89fb      	ldrh	r3, [r7, #14]
 800d49a:	4a0d      	ldr	r2, [pc, #52]	@ (800d4d0 <ff_convert+0x74>)
 800d49c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4a0:	88fa      	ldrh	r2, [r7, #6]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d006      	beq.n	800d4b4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d4a6:	89fb      	ldrh	r3, [r7, #14]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	81fb      	strh	r3, [r7, #14]
 800d4ac:	89fb      	ldrh	r3, [r7, #14]
 800d4ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800d4b0:	d9f2      	bls.n	800d498 <ff_convert+0x3c>
 800d4b2:	e000      	b.n	800d4b6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d4b4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d4b6:	89fb      	ldrh	r3, [r7, #14]
 800d4b8:	3380      	adds	r3, #128	@ 0x80
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d4c0:	89fb      	ldrh	r3, [r7, #14]
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3714      	adds	r7, #20
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	08012b48 	.word	0x08012b48

0800d4d4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b087      	sub	sp, #28
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d4de:	88fb      	ldrh	r3, [r7, #6]
 800d4e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4e4:	d201      	bcs.n	800d4ea <ff_wtoupper+0x16>
 800d4e6:	4b3e      	ldr	r3, [pc, #248]	@ (800d5e0 <ff_wtoupper+0x10c>)
 800d4e8:	e000      	b.n	800d4ec <ff_wtoupper+0x18>
 800d4ea:	4b3e      	ldr	r3, [pc, #248]	@ (800d5e4 <ff_wtoupper+0x110>)
 800d4ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	1c9a      	adds	r2, r3, #2
 800d4f2:	617a      	str	r2, [r7, #20]
 800d4f4:	881b      	ldrh	r3, [r3, #0]
 800d4f6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d4f8:	8a7b      	ldrh	r3, [r7, #18]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d068      	beq.n	800d5d0 <ff_wtoupper+0xfc>
 800d4fe:	88fa      	ldrh	r2, [r7, #6]
 800d500:	8a7b      	ldrh	r3, [r7, #18]
 800d502:	429a      	cmp	r2, r3
 800d504:	d364      	bcc.n	800d5d0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	1c9a      	adds	r2, r3, #2
 800d50a:	617a      	str	r2, [r7, #20]
 800d50c:	881b      	ldrh	r3, [r3, #0]
 800d50e:	823b      	strh	r3, [r7, #16]
 800d510:	8a3b      	ldrh	r3, [r7, #16]
 800d512:	0a1b      	lsrs	r3, r3, #8
 800d514:	81fb      	strh	r3, [r7, #14]
 800d516:	8a3b      	ldrh	r3, [r7, #16]
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d51c:	88fa      	ldrh	r2, [r7, #6]
 800d51e:	8a79      	ldrh	r1, [r7, #18]
 800d520:	8a3b      	ldrh	r3, [r7, #16]
 800d522:	440b      	add	r3, r1
 800d524:	429a      	cmp	r2, r3
 800d526:	da49      	bge.n	800d5bc <ff_wtoupper+0xe8>
			switch (cmd) {
 800d528:	89fb      	ldrh	r3, [r7, #14]
 800d52a:	2b08      	cmp	r3, #8
 800d52c:	d84f      	bhi.n	800d5ce <ff_wtoupper+0xfa>
 800d52e:	a201      	add	r2, pc, #4	@ (adr r2, 800d534 <ff_wtoupper+0x60>)
 800d530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d534:	0800d559 	.word	0x0800d559
 800d538:	0800d56b 	.word	0x0800d56b
 800d53c:	0800d581 	.word	0x0800d581
 800d540:	0800d589 	.word	0x0800d589
 800d544:	0800d591 	.word	0x0800d591
 800d548:	0800d599 	.word	0x0800d599
 800d54c:	0800d5a1 	.word	0x0800d5a1
 800d550:	0800d5a9 	.word	0x0800d5a9
 800d554:	0800d5b1 	.word	0x0800d5b1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d558:	88fa      	ldrh	r2, [r7, #6]
 800d55a:	8a7b      	ldrh	r3, [r7, #18]
 800d55c:	1ad3      	subs	r3, r2, r3
 800d55e:	005b      	lsls	r3, r3, #1
 800d560:	697a      	ldr	r2, [r7, #20]
 800d562:	4413      	add	r3, r2
 800d564:	881b      	ldrh	r3, [r3, #0]
 800d566:	80fb      	strh	r3, [r7, #6]
 800d568:	e027      	b.n	800d5ba <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d56a:	88fa      	ldrh	r2, [r7, #6]
 800d56c:	8a7b      	ldrh	r3, [r7, #18]
 800d56e:	1ad3      	subs	r3, r2, r3
 800d570:	b29b      	uxth	r3, r3
 800d572:	f003 0301 	and.w	r3, r3, #1
 800d576:	b29b      	uxth	r3, r3
 800d578:	88fa      	ldrh	r2, [r7, #6]
 800d57a:	1ad3      	subs	r3, r2, r3
 800d57c:	80fb      	strh	r3, [r7, #6]
 800d57e:	e01c      	b.n	800d5ba <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d580:	88fb      	ldrh	r3, [r7, #6]
 800d582:	3b10      	subs	r3, #16
 800d584:	80fb      	strh	r3, [r7, #6]
 800d586:	e018      	b.n	800d5ba <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d588:	88fb      	ldrh	r3, [r7, #6]
 800d58a:	3b20      	subs	r3, #32
 800d58c:	80fb      	strh	r3, [r7, #6]
 800d58e:	e014      	b.n	800d5ba <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d590:	88fb      	ldrh	r3, [r7, #6]
 800d592:	3b30      	subs	r3, #48	@ 0x30
 800d594:	80fb      	strh	r3, [r7, #6]
 800d596:	e010      	b.n	800d5ba <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d598:	88fb      	ldrh	r3, [r7, #6]
 800d59a:	3b1a      	subs	r3, #26
 800d59c:	80fb      	strh	r3, [r7, #6]
 800d59e:	e00c      	b.n	800d5ba <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d5a0:	88fb      	ldrh	r3, [r7, #6]
 800d5a2:	3308      	adds	r3, #8
 800d5a4:	80fb      	strh	r3, [r7, #6]
 800d5a6:	e008      	b.n	800d5ba <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d5a8:	88fb      	ldrh	r3, [r7, #6]
 800d5aa:	3b50      	subs	r3, #80	@ 0x50
 800d5ac:	80fb      	strh	r3, [r7, #6]
 800d5ae:	e004      	b.n	800d5ba <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d5b0:	88fb      	ldrh	r3, [r7, #6]
 800d5b2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800d5b6:	80fb      	strh	r3, [r7, #6]
 800d5b8:	bf00      	nop
			}
			break;
 800d5ba:	e008      	b.n	800d5ce <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d5bc:	89fb      	ldrh	r3, [r7, #14]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d195      	bne.n	800d4ee <ff_wtoupper+0x1a>
 800d5c2:	8a3b      	ldrh	r3, [r7, #16]
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	697a      	ldr	r2, [r7, #20]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d5cc:	e78f      	b.n	800d4ee <ff_wtoupper+0x1a>
			break;
 800d5ce:	bf00      	nop
	}

	return chr;
 800d5d0:	88fb      	ldrh	r3, [r7, #6]
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	371c      	adds	r7, #28
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	08012c48 	.word	0x08012c48
 800d5e4:	08012e3c 	.word	0x08012e3c

0800d5e8 <__NVIC_SetPriority>:
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	6039      	str	r1, [r7, #0]
 800d5f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d5f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	db0a      	blt.n	800d612 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	b2da      	uxtb	r2, r3
 800d600:	490c      	ldr	r1, [pc, #48]	@ (800d634 <__NVIC_SetPriority+0x4c>)
 800d602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d606:	0112      	lsls	r2, r2, #4
 800d608:	b2d2      	uxtb	r2, r2
 800d60a:	440b      	add	r3, r1
 800d60c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d610:	e00a      	b.n	800d628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	b2da      	uxtb	r2, r3
 800d616:	4908      	ldr	r1, [pc, #32]	@ (800d638 <__NVIC_SetPriority+0x50>)
 800d618:	79fb      	ldrb	r3, [r7, #7]
 800d61a:	f003 030f 	and.w	r3, r3, #15
 800d61e:	3b04      	subs	r3, #4
 800d620:	0112      	lsls	r2, r2, #4
 800d622:	b2d2      	uxtb	r2, r2
 800d624:	440b      	add	r3, r1
 800d626:	761a      	strb	r2, [r3, #24]
}
 800d628:	bf00      	nop
 800d62a:	370c      	adds	r7, #12
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr
 800d634:	e000e100 	.word	0xe000e100
 800d638:	e000ed00 	.word	0xe000ed00

0800d63c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d63c:	b580      	push	{r7, lr}
 800d63e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d640:	4b05      	ldr	r3, [pc, #20]	@ (800d658 <SysTick_Handler+0x1c>)
 800d642:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d644:	f001 ff82 	bl	800f54c <xTaskGetSchedulerState>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d001      	beq.n	800d652 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d64e:	f002 fe7b 	bl	8010348 <xPortSysTickHandler>
  }
}
 800d652:	bf00      	nop
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	e000e010 	.word	0xe000e010

0800d65c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d65c:	b580      	push	{r7, lr}
 800d65e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d660:	2100      	movs	r1, #0
 800d662:	f06f 0004 	mvn.w	r0, #4
 800d666:	f7ff ffbf 	bl	800d5e8 <__NVIC_SetPriority>
#endif
}
 800d66a:	bf00      	nop
 800d66c:	bd80      	pop	{r7, pc}
	...

0800d670 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d676:	f3ef 8305 	mrs	r3, IPSR
 800d67a:	603b      	str	r3, [r7, #0]
  return(result);
 800d67c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d003      	beq.n	800d68a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d682:	f06f 0305 	mvn.w	r3, #5
 800d686:	607b      	str	r3, [r7, #4]
 800d688:	e00c      	b.n	800d6a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d68a:	4b0a      	ldr	r3, [pc, #40]	@ (800d6b4 <osKernelInitialize+0x44>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d105      	bne.n	800d69e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d692:	4b08      	ldr	r3, [pc, #32]	@ (800d6b4 <osKernelInitialize+0x44>)
 800d694:	2201      	movs	r2, #1
 800d696:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d698:	2300      	movs	r3, #0
 800d69a:	607b      	str	r3, [r7, #4]
 800d69c:	e002      	b.n	800d6a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d69e:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d6a4:	687b      	ldr	r3, [r7, #4]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	370c      	adds	r7, #12
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr
 800d6b2:	bf00      	nop
 800d6b4:	200025c4 	.word	0x200025c4

0800d6b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6be:	f3ef 8305 	mrs	r3, IPSR
 800d6c2:	603b      	str	r3, [r7, #0]
  return(result);
 800d6c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d003      	beq.n	800d6d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d6ca:	f06f 0305 	mvn.w	r3, #5
 800d6ce:	607b      	str	r3, [r7, #4]
 800d6d0:	e010      	b.n	800d6f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d6d2:	4b0b      	ldr	r3, [pc, #44]	@ (800d700 <osKernelStart+0x48>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d109      	bne.n	800d6ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d6da:	f7ff ffbf 	bl	800d65c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d6de:	4b08      	ldr	r3, [pc, #32]	@ (800d700 <osKernelStart+0x48>)
 800d6e0:	2202      	movs	r2, #2
 800d6e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d6e4:	f001 face 	bl	800ec84 <vTaskStartScheduler>
      stat = osOK;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	607b      	str	r3, [r7, #4]
 800d6ec:	e002      	b.n	800d6f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d6f4:	687b      	ldr	r3, [r7, #4]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	200025c4 	.word	0x200025c4

0800d704 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d704:	b580      	push	{r7, lr}
 800d706:	b08e      	sub	sp, #56	@ 0x38
 800d708:	af04      	add	r7, sp, #16
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d710:	2300      	movs	r3, #0
 800d712:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d714:	f3ef 8305 	mrs	r3, IPSR
 800d718:	617b      	str	r3, [r7, #20]
  return(result);
 800d71a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d17e      	bne.n	800d81e <osThreadNew+0x11a>
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d07b      	beq.n	800d81e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d726:	2380      	movs	r3, #128	@ 0x80
 800d728:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d72a:	2318      	movs	r3, #24
 800d72c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d72e:	2300      	movs	r3, #0
 800d730:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d732:	f04f 33ff 	mov.w	r3, #4294967295
 800d736:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d045      	beq.n	800d7ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d002      	beq.n	800d74c <osThreadNew+0x48>
        name = attr->name;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	699b      	ldr	r3, [r3, #24]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d002      	beq.n	800d75a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	699b      	ldr	r3, [r3, #24]
 800d758:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d008      	beq.n	800d772 <osThreadNew+0x6e>
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	2b38      	cmp	r3, #56	@ 0x38
 800d764:	d805      	bhi.n	800d772 <osThreadNew+0x6e>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	f003 0301 	and.w	r3, r3, #1
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d001      	beq.n	800d776 <osThreadNew+0x72>
        return (NULL);
 800d772:	2300      	movs	r3, #0
 800d774:	e054      	b.n	800d820 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	695b      	ldr	r3, [r3, #20]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d003      	beq.n	800d786 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	695b      	ldr	r3, [r3, #20]
 800d782:	089b      	lsrs	r3, r3, #2
 800d784:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	689b      	ldr	r3, [r3, #8]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00e      	beq.n	800d7ac <osThreadNew+0xa8>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	2ba7      	cmp	r3, #167	@ 0xa7
 800d794:	d90a      	bls.n	800d7ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d006      	beq.n	800d7ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	695b      	ldr	r3, [r3, #20]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d002      	beq.n	800d7ac <osThreadNew+0xa8>
        mem = 1;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	61bb      	str	r3, [r7, #24]
 800d7aa:	e010      	b.n	800d7ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d10c      	bne.n	800d7ce <osThreadNew+0xca>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d108      	bne.n	800d7ce <osThreadNew+0xca>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	691b      	ldr	r3, [r3, #16]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d104      	bne.n	800d7ce <osThreadNew+0xca>
          mem = 0;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	61bb      	str	r3, [r7, #24]
 800d7c8:	e001      	b.n	800d7ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d110      	bne.n	800d7f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d7dc:	9202      	str	r2, [sp, #8]
 800d7de:	9301      	str	r3, [sp, #4]
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	9300      	str	r3, [sp, #0]
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	6a3a      	ldr	r2, [r7, #32]
 800d7e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d7ea:	68f8      	ldr	r0, [r7, #12]
 800d7ec:	f000 ff62 	bl	800e6b4 <xTaskCreateStatic>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	613b      	str	r3, [r7, #16]
 800d7f4:	e013      	b.n	800d81e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d110      	bne.n	800d81e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d7fc:	6a3b      	ldr	r3, [r7, #32]
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	f107 0310 	add.w	r3, r7, #16
 800d804:	9301      	str	r3, [sp, #4]
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d80e:	68f8      	ldr	r0, [r7, #12]
 800d810:	f000 ffb0 	bl	800e774 <xTaskCreate>
 800d814:	4603      	mov	r3, r0
 800d816:	2b01      	cmp	r3, #1
 800d818:	d001      	beq.n	800d81e <osThreadNew+0x11a>
            hTask = NULL;
 800d81a:	2300      	movs	r3, #0
 800d81c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d81e:	693b      	ldr	r3, [r7, #16]
}
 800d820:	4618      	mov	r0, r3
 800d822:	3728      	adds	r7, #40	@ 0x28
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	4a07      	ldr	r2, [pc, #28]	@ (800d854 <vApplicationGetIdleTaskMemory+0x2c>)
 800d838:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	4a06      	ldr	r2, [pc, #24]	@ (800d858 <vApplicationGetIdleTaskMemory+0x30>)
 800d83e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2280      	movs	r2, #128	@ 0x80
 800d844:	601a      	str	r2, [r3, #0]
}
 800d846:	bf00      	nop
 800d848:	3714      	adds	r7, #20
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	200025c8 	.word	0x200025c8
 800d858:	20002670 	.word	0x20002670

0800d85c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	4a07      	ldr	r2, [pc, #28]	@ (800d888 <vApplicationGetTimerTaskMemory+0x2c>)
 800d86c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	4a06      	ldr	r2, [pc, #24]	@ (800d88c <vApplicationGetTimerTaskMemory+0x30>)
 800d872:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d87a:	601a      	str	r2, [r3, #0]
}
 800d87c:	bf00      	nop
 800d87e:	3714      	adds	r7, #20
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	20002870 	.word	0x20002870
 800d88c:	20002918 	.word	0x20002918

0800d890 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f103 0208 	add.w	r2, r3, #8
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f103 0208 	add.w	r2, r3, #8
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f103 0208 	add.w	r2, r3, #8
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d8c4:	bf00      	nop
 800d8c6:	370c      	adds	r7, #12
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d8de:	bf00      	nop
 800d8e0:	370c      	adds	r7, #12
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d8ea:	b480      	push	{r7}
 800d8ec:	b085      	sub	sp, #20
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
 800d8f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	689a      	ldr	r2, [r3, #8]
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	683a      	ldr	r2, [r7, #0]
 800d90e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	1c5a      	adds	r2, r3, #1
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	601a      	str	r2, [r3, #0]
}
 800d926:	bf00      	nop
 800d928:	3714      	adds	r7, #20
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr

0800d932 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d932:	b480      	push	{r7}
 800d934:	b085      	sub	sp, #20
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
 800d93a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d948:	d103      	bne.n	800d952 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	60fb      	str	r3, [r7, #12]
 800d950:	e00c      	b.n	800d96c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	3308      	adds	r3, #8
 800d956:	60fb      	str	r3, [r7, #12]
 800d958:	e002      	b.n	800d960 <vListInsert+0x2e>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	60fb      	str	r3, [r7, #12]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	68ba      	ldr	r2, [r7, #8]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d2f6      	bcs.n	800d95a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	685a      	ldr	r2, [r3, #4]
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	683a      	ldr	r2, [r7, #0]
 800d97a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	683a      	ldr	r2, [r7, #0]
 800d986:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	1c5a      	adds	r2, r3, #1
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	601a      	str	r2, [r3, #0]
}
 800d998:	bf00      	nop
 800d99a:	3714      	adds	r7, #20
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr

0800d9a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	6892      	ldr	r2, [r2, #8]
 800d9ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	6852      	ldr	r2, [r2, #4]
 800d9c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d103      	bne.n	800d9d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	689a      	ldr	r2, [r3, #8]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	1e5a      	subs	r2, r3, #1
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10b      	bne.n	800da24 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800da1e:	bf00      	nop
 800da20:	bf00      	nop
 800da22:	e7fd      	b.n	800da20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800da24:	f002 fc00 	bl	8010228 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da30:	68f9      	ldr	r1, [r7, #12]
 800da32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800da34:	fb01 f303 	mul.w	r3, r1, r3
 800da38:	441a      	add	r2, r3
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2200      	movs	r2, #0
 800da42:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da54:	3b01      	subs	r3, #1
 800da56:	68f9      	ldr	r1, [r7, #12]
 800da58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800da5a:	fb01 f303 	mul.w	r3, r1, r3
 800da5e:	441a      	add	r2, r3
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	22ff      	movs	r2, #255	@ 0xff
 800da68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	22ff      	movs	r2, #255	@ 0xff
 800da70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d114      	bne.n	800daa4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	691b      	ldr	r3, [r3, #16]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d01a      	beq.n	800dab8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	3310      	adds	r3, #16
 800da86:	4618      	mov	r0, r3
 800da88:	f001 fb9a 	bl	800f1c0 <xTaskRemoveFromEventList>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d012      	beq.n	800dab8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800da92:	4b0d      	ldr	r3, [pc, #52]	@ (800dac8 <xQueueGenericReset+0xd0>)
 800da94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	e009      	b.n	800dab8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	3310      	adds	r3, #16
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7ff fef1 	bl	800d890 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	3324      	adds	r3, #36	@ 0x24
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7ff feec 	bl	800d890 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dab8:	f002 fbe8 	bl	801028c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dabc:	2301      	movs	r3, #1
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	e000ed04 	.word	0xe000ed04

0800dacc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b08e      	sub	sp, #56	@ 0x38
 800dad0:	af02      	add	r7, sp, #8
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
 800dad8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10b      	bne.n	800daf8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800dae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae4:	f383 8811 	msr	BASEPRI, r3
 800dae8:	f3bf 8f6f 	isb	sy
 800daec:	f3bf 8f4f 	dsb	sy
 800daf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800daf2:	bf00      	nop
 800daf4:	bf00      	nop
 800daf6:	e7fd      	b.n	800daf4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d10b      	bne.n	800db16 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800dafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800db10:	bf00      	nop
 800db12:	bf00      	nop
 800db14:	e7fd      	b.n	800db12 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d002      	beq.n	800db22 <xQueueGenericCreateStatic+0x56>
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d001      	beq.n	800db26 <xQueueGenericCreateStatic+0x5a>
 800db22:	2301      	movs	r3, #1
 800db24:	e000      	b.n	800db28 <xQueueGenericCreateStatic+0x5c>
 800db26:	2300      	movs	r3, #0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10b      	bne.n	800db44 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800db2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db30:	f383 8811 	msr	BASEPRI, r3
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	623b      	str	r3, [r7, #32]
}
 800db3e:	bf00      	nop
 800db40:	bf00      	nop
 800db42:	e7fd      	b.n	800db40 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d102      	bne.n	800db50 <xQueueGenericCreateStatic+0x84>
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d101      	bne.n	800db54 <xQueueGenericCreateStatic+0x88>
 800db50:	2301      	movs	r3, #1
 800db52:	e000      	b.n	800db56 <xQueueGenericCreateStatic+0x8a>
 800db54:	2300      	movs	r3, #0
 800db56:	2b00      	cmp	r3, #0
 800db58:	d10b      	bne.n	800db72 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800db5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db5e:	f383 8811 	msr	BASEPRI, r3
 800db62:	f3bf 8f6f 	isb	sy
 800db66:	f3bf 8f4f 	dsb	sy
 800db6a:	61fb      	str	r3, [r7, #28]
}
 800db6c:	bf00      	nop
 800db6e:	bf00      	nop
 800db70:	e7fd      	b.n	800db6e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800db72:	2350      	movs	r3, #80	@ 0x50
 800db74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	2b50      	cmp	r3, #80	@ 0x50
 800db7a:	d00b      	beq.n	800db94 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800db7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db80:	f383 8811 	msr	BASEPRI, r3
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	61bb      	str	r3, [r7, #24]
}
 800db8e:	bf00      	nop
 800db90:	bf00      	nop
 800db92:	e7fd      	b.n	800db90 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800db94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800db9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d00d      	beq.n	800dbbc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dba2:	2201      	movs	r2, #1
 800dba4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dba8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800dbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	68b9      	ldr	r1, [r7, #8]
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f000 f840 	bl	800dc3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3730      	adds	r7, #48	@ 0x30
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b08a      	sub	sp, #40	@ 0x28
 800dbca:	af02      	add	r7, sp, #8
 800dbcc:	60f8      	str	r0, [r7, #12]
 800dbce:	60b9      	str	r1, [r7, #8]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d10b      	bne.n	800dbf2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800dbda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbde:	f383 8811 	msr	BASEPRI, r3
 800dbe2:	f3bf 8f6f 	isb	sy
 800dbe6:	f3bf 8f4f 	dsb	sy
 800dbea:	613b      	str	r3, [r7, #16]
}
 800dbec:	bf00      	nop
 800dbee:	bf00      	nop
 800dbf0:	e7fd      	b.n	800dbee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	fb02 f303 	mul.w	r3, r2, r3
 800dbfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	3350      	adds	r3, #80	@ 0x50
 800dc00:	4618      	mov	r0, r3
 800dc02:	f002 fc33 	bl	801046c <pvPortMalloc>
 800dc06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d011      	beq.n	800dc32 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	3350      	adds	r3, #80	@ 0x50
 800dc16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dc20:	79fa      	ldrb	r2, [r7, #7]
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	9300      	str	r3, [sp, #0]
 800dc26:	4613      	mov	r3, r2
 800dc28:	697a      	ldr	r2, [r7, #20]
 800dc2a:	68b9      	ldr	r1, [r7, #8]
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f000 f805 	bl	800dc3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dc32:	69bb      	ldr	r3, [r7, #24]
	}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3720      	adds	r7, #32
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
 800dc48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d103      	bne.n	800dc58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dc50:	69bb      	ldr	r3, [r7, #24]
 800dc52:	69ba      	ldr	r2, [r7, #24]
 800dc54:	601a      	str	r2, [r3, #0]
 800dc56:	e002      	b.n	800dc5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	687a      	ldr	r2, [r7, #4]
 800dc5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dc5e:	69bb      	ldr	r3, [r7, #24]
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dc64:	69bb      	ldr	r3, [r7, #24]
 800dc66:	68ba      	ldr	r2, [r7, #8]
 800dc68:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dc6a:	2101      	movs	r1, #1
 800dc6c:	69b8      	ldr	r0, [r7, #24]
 800dc6e:	f7ff fec3 	bl	800d9f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	78fa      	ldrb	r2, [r7, #3]
 800dc76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dc7a:	bf00      	nop
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
	...

0800dc84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b08e      	sub	sp, #56	@ 0x38
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dc92:	2300      	movs	r3, #0
 800dc94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10b      	bne.n	800dcb8 <xQueueGenericSend+0x34>
	__asm volatile
 800dca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dcb2:	bf00      	nop
 800dcb4:	bf00      	nop
 800dcb6:	e7fd      	b.n	800dcb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d103      	bne.n	800dcc6 <xQueueGenericSend+0x42>
 800dcbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d101      	bne.n	800dcca <xQueueGenericSend+0x46>
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e000      	b.n	800dccc <xQueueGenericSend+0x48>
 800dcca:	2300      	movs	r3, #0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d10b      	bne.n	800dce8 <xQueueGenericSend+0x64>
	__asm volatile
 800dcd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dce2:	bf00      	nop
 800dce4:	bf00      	nop
 800dce6:	e7fd      	b.n	800dce4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	2b02      	cmp	r3, #2
 800dcec:	d103      	bne.n	800dcf6 <xQueueGenericSend+0x72>
 800dcee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d101      	bne.n	800dcfa <xQueueGenericSend+0x76>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e000      	b.n	800dcfc <xQueueGenericSend+0x78>
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10b      	bne.n	800dd18 <xQueueGenericSend+0x94>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	623b      	str	r3, [r7, #32]
}
 800dd12:	bf00      	nop
 800dd14:	bf00      	nop
 800dd16:	e7fd      	b.n	800dd14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd18:	f001 fc18 	bl	800f54c <xTaskGetSchedulerState>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d102      	bne.n	800dd28 <xQueueGenericSend+0xa4>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d101      	bne.n	800dd2c <xQueueGenericSend+0xa8>
 800dd28:	2301      	movs	r3, #1
 800dd2a:	e000      	b.n	800dd2e <xQueueGenericSend+0xaa>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d10b      	bne.n	800dd4a <xQueueGenericSend+0xc6>
	__asm volatile
 800dd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd36:	f383 8811 	msr	BASEPRI, r3
 800dd3a:	f3bf 8f6f 	isb	sy
 800dd3e:	f3bf 8f4f 	dsb	sy
 800dd42:	61fb      	str	r3, [r7, #28]
}
 800dd44:	bf00      	nop
 800dd46:	bf00      	nop
 800dd48:	e7fd      	b.n	800dd46 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd4a:	f002 fa6d 	bl	8010228 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d302      	bcc.n	800dd60 <xQueueGenericSend+0xdc>
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d129      	bne.n	800ddb4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd60:	683a      	ldr	r2, [r7, #0]
 800dd62:	68b9      	ldr	r1, [r7, #8]
 800dd64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd66:	f000 fb37 	bl	800e3d8 <prvCopyDataToQueue>
 800dd6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d010      	beq.n	800dd96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd76:	3324      	adds	r3, #36	@ 0x24
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f001 fa21 	bl	800f1c0 <xTaskRemoveFromEventList>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d013      	beq.n	800ddac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dd84:	4b3f      	ldr	r3, [pc, #252]	@ (800de84 <xQueueGenericSend+0x200>)
 800dd86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd8a:	601a      	str	r2, [r3, #0]
 800dd8c:	f3bf 8f4f 	dsb	sy
 800dd90:	f3bf 8f6f 	isb	sy
 800dd94:	e00a      	b.n	800ddac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dd96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d007      	beq.n	800ddac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dd9c:	4b39      	ldr	r3, [pc, #228]	@ (800de84 <xQueueGenericSend+0x200>)
 800dd9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dda2:	601a      	str	r2, [r3, #0]
 800dda4:	f3bf 8f4f 	dsb	sy
 800dda8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ddac:	f002 fa6e 	bl	801028c <vPortExitCritical>
				return pdPASS;
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	e063      	b.n	800de7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d103      	bne.n	800ddc2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ddba:	f002 fa67 	bl	801028c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	e05c      	b.n	800de7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ddc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d106      	bne.n	800ddd6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddc8:	f107 0314 	add.w	r3, r7, #20
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f001 fa5b 	bl	800f288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ddd6:	f002 fa59 	bl	801028c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ddda:	f000 ffc3 	bl	800ed64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ddde:	f002 fa23 	bl	8010228 <vPortEnterCritical>
 800dde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dde8:	b25b      	sxtb	r3, r3
 800ddea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddee:	d103      	bne.n	800ddf8 <xQueueGenericSend+0x174>
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ddfe:	b25b      	sxtb	r3, r3
 800de00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de04:	d103      	bne.n	800de0e <xQueueGenericSend+0x18a>
 800de06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de08:	2200      	movs	r2, #0
 800de0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de0e:	f002 fa3d 	bl	801028c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de12:	1d3a      	adds	r2, r7, #4
 800de14:	f107 0314 	add.w	r3, r7, #20
 800de18:	4611      	mov	r1, r2
 800de1a:	4618      	mov	r0, r3
 800de1c:	f001 fa4a 	bl	800f2b4 <xTaskCheckForTimeOut>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d124      	bne.n	800de70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800de26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de28:	f000 fbce 	bl	800e5c8 <prvIsQueueFull>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d018      	beq.n	800de64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800de32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de34:	3310      	adds	r3, #16
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	4611      	mov	r1, r2
 800de3a:	4618      	mov	r0, r3
 800de3c:	f001 f96e 	bl	800f11c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800de40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de42:	f000 fb59 	bl	800e4f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800de46:	f000 ff9b 	bl	800ed80 <xTaskResumeAll>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f47f af7c 	bne.w	800dd4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800de52:	4b0c      	ldr	r3, [pc, #48]	@ (800de84 <xQueueGenericSend+0x200>)
 800de54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de58:	601a      	str	r2, [r3, #0]
 800de5a:	f3bf 8f4f 	dsb	sy
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	e772      	b.n	800dd4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800de64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de66:	f000 fb47 	bl	800e4f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de6a:	f000 ff89 	bl	800ed80 <xTaskResumeAll>
 800de6e:	e76c      	b.n	800dd4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800de70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de72:	f000 fb41 	bl	800e4f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de76:	f000 ff83 	bl	800ed80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800de7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3738      	adds	r7, #56	@ 0x38
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	e000ed04 	.word	0xe000ed04

0800de88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b090      	sub	sp, #64	@ 0x40
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
 800de94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800de9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10b      	bne.n	800deb8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800dea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea4:	f383 8811 	msr	BASEPRI, r3
 800dea8:	f3bf 8f6f 	isb	sy
 800deac:	f3bf 8f4f 	dsb	sy
 800deb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800deb2:	bf00      	nop
 800deb4:	bf00      	nop
 800deb6:	e7fd      	b.n	800deb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d103      	bne.n	800dec6 <xQueueGenericSendFromISR+0x3e>
 800debe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d101      	bne.n	800deca <xQueueGenericSendFromISR+0x42>
 800dec6:	2301      	movs	r3, #1
 800dec8:	e000      	b.n	800decc <xQueueGenericSendFromISR+0x44>
 800deca:	2300      	movs	r3, #0
 800decc:	2b00      	cmp	r3, #0
 800dece:	d10b      	bne.n	800dee8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ded0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded4:	f383 8811 	msr	BASEPRI, r3
 800ded8:	f3bf 8f6f 	isb	sy
 800dedc:	f3bf 8f4f 	dsb	sy
 800dee0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dee2:	bf00      	nop
 800dee4:	bf00      	nop
 800dee6:	e7fd      	b.n	800dee4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	2b02      	cmp	r3, #2
 800deec:	d103      	bne.n	800def6 <xQueueGenericSendFromISR+0x6e>
 800deee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800def0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800def2:	2b01      	cmp	r3, #1
 800def4:	d101      	bne.n	800defa <xQueueGenericSendFromISR+0x72>
 800def6:	2301      	movs	r3, #1
 800def8:	e000      	b.n	800defc <xQueueGenericSendFromISR+0x74>
 800defa:	2300      	movs	r3, #0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d10b      	bne.n	800df18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800df00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df04:	f383 8811 	msr	BASEPRI, r3
 800df08:	f3bf 8f6f 	isb	sy
 800df0c:	f3bf 8f4f 	dsb	sy
 800df10:	623b      	str	r3, [r7, #32]
}
 800df12:	bf00      	nop
 800df14:	bf00      	nop
 800df16:	e7fd      	b.n	800df14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df18:	f002 fa66 	bl	80103e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800df1c:	f3ef 8211 	mrs	r2, BASEPRI
 800df20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	61fa      	str	r2, [r7, #28]
 800df32:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800df34:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df36:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df40:	429a      	cmp	r2, r3
 800df42:	d302      	bcc.n	800df4a <xQueueGenericSendFromISR+0xc2>
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	2b02      	cmp	r3, #2
 800df48:	d12f      	bne.n	800dfaa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800df4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800df50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df5a:	683a      	ldr	r2, [r7, #0]
 800df5c:	68b9      	ldr	r1, [r7, #8]
 800df5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800df60:	f000 fa3a 	bl	800e3d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800df64:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800df68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df6c:	d112      	bne.n	800df94 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df72:	2b00      	cmp	r3, #0
 800df74:	d016      	beq.n	800dfa4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df78:	3324      	adds	r3, #36	@ 0x24
 800df7a:	4618      	mov	r0, r3
 800df7c:	f001 f920 	bl	800f1c0 <xTaskRemoveFromEventList>
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d00e      	beq.n	800dfa4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00b      	beq.n	800dfa4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2201      	movs	r2, #1
 800df90:	601a      	str	r2, [r3, #0]
 800df92:	e007      	b.n	800dfa4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800df94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800df98:	3301      	adds	r3, #1
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	b25a      	sxtb	r2, r3
 800df9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800dfa8:	e001      	b.n	800dfae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dfae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfb0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dfb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3740      	adds	r7, #64	@ 0x40
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b08c      	sub	sp, #48	@ 0x30
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dfd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d10b      	bne.n	800dff6 <xQueueReceive+0x32>
	__asm volatile
 800dfde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe2:	f383 8811 	msr	BASEPRI, r3
 800dfe6:	f3bf 8f6f 	isb	sy
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	623b      	str	r3, [r7, #32]
}
 800dff0:	bf00      	nop
 800dff2:	bf00      	nop
 800dff4:	e7fd      	b.n	800dff2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d103      	bne.n	800e004 <xQueueReceive+0x40>
 800dffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e000:	2b00      	cmp	r3, #0
 800e002:	d101      	bne.n	800e008 <xQueueReceive+0x44>
 800e004:	2301      	movs	r3, #1
 800e006:	e000      	b.n	800e00a <xQueueReceive+0x46>
 800e008:	2300      	movs	r3, #0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10b      	bne.n	800e026 <xQueueReceive+0x62>
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	61fb      	str	r3, [r7, #28]
}
 800e020:	bf00      	nop
 800e022:	bf00      	nop
 800e024:	e7fd      	b.n	800e022 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e026:	f001 fa91 	bl	800f54c <xTaskGetSchedulerState>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d102      	bne.n	800e036 <xQueueReceive+0x72>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d101      	bne.n	800e03a <xQueueReceive+0x76>
 800e036:	2301      	movs	r3, #1
 800e038:	e000      	b.n	800e03c <xQueueReceive+0x78>
 800e03a:	2300      	movs	r3, #0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10b      	bne.n	800e058 <xQueueReceive+0x94>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	61bb      	str	r3, [r7, #24]
}
 800e052:	bf00      	nop
 800e054:	bf00      	nop
 800e056:	e7fd      	b.n	800e054 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e058:	f002 f8e6 	bl	8010228 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e05e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e060:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e064:	2b00      	cmp	r3, #0
 800e066:	d01f      	beq.n	800e0a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e068:	68b9      	ldr	r1, [r7, #8]
 800e06a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e06c:	f000 fa1e 	bl	800e4ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e072:	1e5a      	subs	r2, r3, #1
 800e074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e076:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e07a:	691b      	ldr	r3, [r3, #16]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00f      	beq.n	800e0a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e082:	3310      	adds	r3, #16
 800e084:	4618      	mov	r0, r3
 800e086:	f001 f89b 	bl	800f1c0 <xTaskRemoveFromEventList>
 800e08a:	4603      	mov	r3, r0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d007      	beq.n	800e0a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e090:	4b3c      	ldr	r3, [pc, #240]	@ (800e184 <xQueueReceive+0x1c0>)
 800e092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e096:	601a      	str	r2, [r3, #0]
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e0a0:	f002 f8f4 	bl	801028c <vPortExitCritical>
				return pdPASS;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e069      	b.n	800e17c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d103      	bne.n	800e0b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e0ae:	f002 f8ed 	bl	801028c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	e062      	b.n	800e17c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d106      	bne.n	800e0ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0bc:	f107 0310 	add.w	r3, r7, #16
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f001 f8e1 	bl	800f288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e0ca:	f002 f8df 	bl	801028c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e0ce:	f000 fe49 	bl	800ed64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e0d2:	f002 f8a9 	bl	8010228 <vPortEnterCritical>
 800e0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e0dc:	b25b      	sxtb	r3, r3
 800e0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e2:	d103      	bne.n	800e0ec <xQueueReceive+0x128>
 800e0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e0f2:	b25b      	sxtb	r3, r3
 800e0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f8:	d103      	bne.n	800e102 <xQueueReceive+0x13e>
 800e0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e102:	f002 f8c3 	bl	801028c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e106:	1d3a      	adds	r2, r7, #4
 800e108:	f107 0310 	add.w	r3, r7, #16
 800e10c:	4611      	mov	r1, r2
 800e10e:	4618      	mov	r0, r3
 800e110:	f001 f8d0 	bl	800f2b4 <xTaskCheckForTimeOut>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d123      	bne.n	800e162 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e11a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e11c:	f000 fa3e 	bl	800e59c <prvIsQueueEmpty>
 800e120:	4603      	mov	r3, r0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d017      	beq.n	800e156 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e128:	3324      	adds	r3, #36	@ 0x24
 800e12a:	687a      	ldr	r2, [r7, #4]
 800e12c:	4611      	mov	r1, r2
 800e12e:	4618      	mov	r0, r3
 800e130:	f000 fff4 	bl	800f11c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e134:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e136:	f000 f9df 	bl	800e4f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e13a:	f000 fe21 	bl	800ed80 <xTaskResumeAll>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d189      	bne.n	800e058 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e144:	4b0f      	ldr	r3, [pc, #60]	@ (800e184 <xQueueReceive+0x1c0>)
 800e146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e14a:	601a      	str	r2, [r3, #0]
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	f3bf 8f6f 	isb	sy
 800e154:	e780      	b.n	800e058 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e158:	f000 f9ce 	bl	800e4f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e15c:	f000 fe10 	bl	800ed80 <xTaskResumeAll>
 800e160:	e77a      	b.n	800e058 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e164:	f000 f9c8 	bl	800e4f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e168:	f000 fe0a 	bl	800ed80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e16c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e16e:	f000 fa15 	bl	800e59c <prvIsQueueEmpty>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	f43f af6f 	beq.w	800e058 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e17a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3730      	adds	r7, #48	@ 0x30
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	e000ed04 	.word	0xe000ed04

0800e188 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b08e      	sub	sp, #56	@ 0x38
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e192:	2300      	movs	r3, #0
 800e194:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e19a:	2300      	movs	r3, #0
 800e19c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d10b      	bne.n	800e1bc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800e1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a8:	f383 8811 	msr	BASEPRI, r3
 800e1ac:	f3bf 8f6f 	isb	sy
 800e1b0:	f3bf 8f4f 	dsb	sy
 800e1b4:	623b      	str	r3, [r7, #32]
}
 800e1b6:	bf00      	nop
 800e1b8:	bf00      	nop
 800e1ba:	e7fd      	b.n	800e1b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00b      	beq.n	800e1dc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800e1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c8:	f383 8811 	msr	BASEPRI, r3
 800e1cc:	f3bf 8f6f 	isb	sy
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	61fb      	str	r3, [r7, #28]
}
 800e1d6:	bf00      	nop
 800e1d8:	bf00      	nop
 800e1da:	e7fd      	b.n	800e1d8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e1dc:	f001 f9b6 	bl	800f54c <xTaskGetSchedulerState>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d102      	bne.n	800e1ec <xQueueSemaphoreTake+0x64>
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d101      	bne.n	800e1f0 <xQueueSemaphoreTake+0x68>
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e000      	b.n	800e1f2 <xQueueSemaphoreTake+0x6a>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d10b      	bne.n	800e20e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800e1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fa:	f383 8811 	msr	BASEPRI, r3
 800e1fe:	f3bf 8f6f 	isb	sy
 800e202:	f3bf 8f4f 	dsb	sy
 800e206:	61bb      	str	r3, [r7, #24]
}
 800e208:	bf00      	nop
 800e20a:	bf00      	nop
 800e20c:	e7fd      	b.n	800e20a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e20e:	f002 f80b 	bl	8010228 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e216:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d024      	beq.n	800e268 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e220:	1e5a      	subs	r2, r3, #1
 800e222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e224:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d104      	bne.n	800e238 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e22e:	f001 fb07 	bl	800f840 <pvTaskIncrementMutexHeldCount>
 800e232:	4602      	mov	r2, r0
 800e234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e236:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e23a:	691b      	ldr	r3, [r3, #16]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d00f      	beq.n	800e260 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e242:	3310      	adds	r3, #16
 800e244:	4618      	mov	r0, r3
 800e246:	f000 ffbb 	bl	800f1c0 <xTaskRemoveFromEventList>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d007      	beq.n	800e260 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e250:	4b54      	ldr	r3, [pc, #336]	@ (800e3a4 <xQueueSemaphoreTake+0x21c>)
 800e252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e256:	601a      	str	r2, [r3, #0]
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e260:	f002 f814 	bl	801028c <vPortExitCritical>
				return pdPASS;
 800e264:	2301      	movs	r3, #1
 800e266:	e098      	b.n	800e39a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d112      	bne.n	800e294 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00b      	beq.n	800e28c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800e274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e278:	f383 8811 	msr	BASEPRI, r3
 800e27c:	f3bf 8f6f 	isb	sy
 800e280:	f3bf 8f4f 	dsb	sy
 800e284:	617b      	str	r3, [r7, #20]
}
 800e286:	bf00      	nop
 800e288:	bf00      	nop
 800e28a:	e7fd      	b.n	800e288 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e28c:	f001 fffe 	bl	801028c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e290:	2300      	movs	r3, #0
 800e292:	e082      	b.n	800e39a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e296:	2b00      	cmp	r3, #0
 800e298:	d106      	bne.n	800e2a8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e29a:	f107 030c 	add.w	r3, r7, #12
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f000 fff2 	bl	800f288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2a8:	f001 fff0 	bl	801028c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2ac:	f000 fd5a 	bl	800ed64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2b0:	f001 ffba 	bl	8010228 <vPortEnterCritical>
 800e2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e2ba:	b25b      	sxtb	r3, r3
 800e2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c0:	d103      	bne.n	800e2ca <xQueueSemaphoreTake+0x142>
 800e2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e2d0:	b25b      	sxtb	r3, r3
 800e2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d6:	d103      	bne.n	800e2e0 <xQueueSemaphoreTake+0x158>
 800e2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e2e0:	f001 ffd4 	bl	801028c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e2e4:	463a      	mov	r2, r7
 800e2e6:	f107 030c 	add.w	r3, r7, #12
 800e2ea:	4611      	mov	r1, r2
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f000 ffe1 	bl	800f2b4 <xTaskCheckForTimeOut>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d132      	bne.n	800e35e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e2f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e2fa:	f000 f94f 	bl	800e59c <prvIsQueueEmpty>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d026      	beq.n	800e352 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d109      	bne.n	800e320 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e30c:	f001 ff8c 	bl	8010228 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	4618      	mov	r0, r3
 800e316:	f001 f937 	bl	800f588 <xTaskPriorityInherit>
 800e31a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e31c:	f001 ffb6 	bl	801028c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e322:	3324      	adds	r3, #36	@ 0x24
 800e324:	683a      	ldr	r2, [r7, #0]
 800e326:	4611      	mov	r1, r2
 800e328:	4618      	mov	r0, r3
 800e32a:	f000 fef7 	bl	800f11c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e32e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e330:	f000 f8e2 	bl	800e4f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e334:	f000 fd24 	bl	800ed80 <xTaskResumeAll>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	f47f af67 	bne.w	800e20e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e340:	4b18      	ldr	r3, [pc, #96]	@ (800e3a4 <xQueueSemaphoreTake+0x21c>)
 800e342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e346:	601a      	str	r2, [r3, #0]
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	f3bf 8f6f 	isb	sy
 800e350:	e75d      	b.n	800e20e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e352:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e354:	f000 f8d0 	bl	800e4f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e358:	f000 fd12 	bl	800ed80 <xTaskResumeAll>
 800e35c:	e757      	b.n	800e20e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e35e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e360:	f000 f8ca 	bl	800e4f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e364:	f000 fd0c 	bl	800ed80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e368:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e36a:	f000 f917 	bl	800e59c <prvIsQueueEmpty>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b00      	cmp	r3, #0
 800e372:	f43f af4c 	beq.w	800e20e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00d      	beq.n	800e398 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e37c:	f001 ff54 	bl	8010228 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e380:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e382:	f000 f811 	bl	800e3a8 <prvGetDisinheritPriorityAfterTimeout>
 800e386:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e38a:	689b      	ldr	r3, [r3, #8]
 800e38c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e38e:	4618      	mov	r0, r3
 800e390:	f001 f9d2 	bl	800f738 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e394:	f001 ff7a 	bl	801028c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e398:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3738      	adds	r7, #56	@ 0x38
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	e000ed04 	.word	0xe000ed04

0800e3a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d006      	beq.n	800e3c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e3c2:	60fb      	str	r3, [r7, #12]
 800e3c4:	e001      	b.n	800e3ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
	}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3714      	adds	r7, #20
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b086      	sub	sp, #24
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10d      	bne.n	800e412 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d14d      	bne.n	800e49a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	689b      	ldr	r3, [r3, #8]
 800e402:	4618      	mov	r0, r3
 800e404:	f001 f928 	bl	800f658 <xTaskPriorityDisinherit>
 800e408:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2200      	movs	r2, #0
 800e40e:	609a      	str	r2, [r3, #8]
 800e410:	e043      	b.n	800e49a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d119      	bne.n	800e44c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	6858      	ldr	r0, [r3, #4]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e420:	461a      	mov	r2, r3
 800e422:	68b9      	ldr	r1, [r7, #8]
 800e424:	f003 f983 	bl	801172e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	685a      	ldr	r2, [r3, #4]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e430:	441a      	add	r2, r3
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	685a      	ldr	r2, [r3, #4]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d32b      	bcc.n	800e49a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	605a      	str	r2, [r3, #4]
 800e44a:	e026      	b.n	800e49a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	68d8      	ldr	r0, [r3, #12]
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e454:	461a      	mov	r2, r3
 800e456:	68b9      	ldr	r1, [r7, #8]
 800e458:	f003 f969 	bl	801172e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	68da      	ldr	r2, [r3, #12]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e464:	425b      	negs	r3, r3
 800e466:	441a      	add	r2, r3
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	68da      	ldr	r2, [r3, #12]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	429a      	cmp	r2, r3
 800e476:	d207      	bcs.n	800e488 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	689a      	ldr	r2, [r3, #8]
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e480:	425b      	negs	r3, r3
 800e482:	441a      	add	r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2b02      	cmp	r3, #2
 800e48c:	d105      	bne.n	800e49a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	3b01      	subs	r3, #1
 800e498:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	1c5a      	adds	r2, r3, #1
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e4a2:	697b      	ldr	r3, [r7, #20]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3718      	adds	r7, #24
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d018      	beq.n	800e4f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	68da      	ldr	r2, [r3, #12]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4c6:	441a      	add	r2, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	68da      	ldr	r2, [r3, #12]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	689b      	ldr	r3, [r3, #8]
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d303      	bcc.n	800e4e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	68d9      	ldr	r1, [r3, #12]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	6838      	ldr	r0, [r7, #0]
 800e4ec:	f003 f91f 	bl	801172e <memcpy>
	}
}
 800e4f0:	bf00      	nop
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b084      	sub	sp, #16
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e500:	f001 fe92 	bl	8010228 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e50a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e50c:	e011      	b.n	800e532 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e512:	2b00      	cmp	r3, #0
 800e514:	d012      	beq.n	800e53c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	3324      	adds	r3, #36	@ 0x24
 800e51a:	4618      	mov	r0, r3
 800e51c:	f000 fe50 	bl	800f1c0 <xTaskRemoveFromEventList>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d001      	beq.n	800e52a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e526:	f000 ff29 	bl	800f37c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e52a:	7bfb      	ldrb	r3, [r7, #15]
 800e52c:	3b01      	subs	r3, #1
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e536:	2b00      	cmp	r3, #0
 800e538:	dce9      	bgt.n	800e50e <prvUnlockQueue+0x16>
 800e53a:	e000      	b.n	800e53e <prvUnlockQueue+0x46>
					break;
 800e53c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	22ff      	movs	r2, #255	@ 0xff
 800e542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e546:	f001 fea1 	bl	801028c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e54a:	f001 fe6d 	bl	8010228 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e554:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e556:	e011      	b.n	800e57c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	691b      	ldr	r3, [r3, #16]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d012      	beq.n	800e586 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	3310      	adds	r3, #16
 800e564:	4618      	mov	r0, r3
 800e566:	f000 fe2b 	bl	800f1c0 <xTaskRemoveFromEventList>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d001      	beq.n	800e574 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e570:	f000 ff04 	bl	800f37c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e574:	7bbb      	ldrb	r3, [r7, #14]
 800e576:	3b01      	subs	r3, #1
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e57c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e580:	2b00      	cmp	r3, #0
 800e582:	dce9      	bgt.n	800e558 <prvUnlockQueue+0x60>
 800e584:	e000      	b.n	800e588 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e586:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	22ff      	movs	r2, #255	@ 0xff
 800e58c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e590:	f001 fe7c 	bl	801028c <vPortExitCritical>
}
 800e594:	bf00      	nop
 800e596:	3710      	adds	r7, #16
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e5a4:	f001 fe40 	bl	8010228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d102      	bne.n	800e5b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	60fb      	str	r3, [r7, #12]
 800e5b4:	e001      	b.n	800e5ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e5ba:	f001 fe67 	bl	801028c <vPortExitCritical>

	return xReturn;
 800e5be:	68fb      	ldr	r3, [r7, #12]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e5d0:	f001 fe2a 	bl	8010228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d102      	bne.n	800e5e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	60fb      	str	r3, [r7, #12]
 800e5e4:	e001      	b.n	800e5ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e5ea:	f001 fe4f 	bl	801028c <vPortExitCritical>

	return xReturn;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3710      	adds	r7, #16
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b085      	sub	sp, #20
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e602:	2300      	movs	r3, #0
 800e604:	60fb      	str	r3, [r7, #12]
 800e606:	e014      	b.n	800e632 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e608:	4a0f      	ldr	r2, [pc, #60]	@ (800e648 <vQueueAddToRegistry+0x50>)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d10b      	bne.n	800e62c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e614:	490c      	ldr	r1, [pc, #48]	@ (800e648 <vQueueAddToRegistry+0x50>)
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	683a      	ldr	r2, [r7, #0]
 800e61a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e61e:	4a0a      	ldr	r2, [pc, #40]	@ (800e648 <vQueueAddToRegistry+0x50>)
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	00db      	lsls	r3, r3, #3
 800e624:	4413      	add	r3, r2
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e62a:	e006      	b.n	800e63a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	3301      	adds	r3, #1
 800e630:	60fb      	str	r3, [r7, #12]
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2b07      	cmp	r3, #7
 800e636:	d9e7      	bls.n	800e608 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e638:	bf00      	nop
 800e63a:	bf00      	nop
 800e63c:	3714      	adds	r7, #20
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop
 800e648:	20002d18 	.word	0x20002d18

0800e64c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b086      	sub	sp, #24
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e65c:	f001 fde4 	bl	8010228 <vPortEnterCritical>
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e666:	b25b      	sxtb	r3, r3
 800e668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e66c:	d103      	bne.n	800e676 <vQueueWaitForMessageRestricted+0x2a>
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	2200      	movs	r2, #0
 800e672:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e67c:	b25b      	sxtb	r3, r3
 800e67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e682:	d103      	bne.n	800e68c <vQueueWaitForMessageRestricted+0x40>
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	2200      	movs	r2, #0
 800e688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e68c:	f001 fdfe 	bl	801028c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e694:	2b00      	cmp	r3, #0
 800e696:	d106      	bne.n	800e6a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	3324      	adds	r3, #36	@ 0x24
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	68b9      	ldr	r1, [r7, #8]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f000 fd61 	bl	800f168 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e6a6:	6978      	ldr	r0, [r7, #20]
 800e6a8:	f7ff ff26 	bl	800e4f8 <prvUnlockQueue>
	}
 800e6ac:	bf00      	nop
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08e      	sub	sp, #56	@ 0x38
 800e6b8:	af04      	add	r7, sp, #16
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
 800e6c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e6c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d10b      	bne.n	800e6e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6cc:	f383 8811 	msr	BASEPRI, r3
 800e6d0:	f3bf 8f6f 	isb	sy
 800e6d4:	f3bf 8f4f 	dsb	sy
 800e6d8:	623b      	str	r3, [r7, #32]
}
 800e6da:	bf00      	nop
 800e6dc:	bf00      	nop
 800e6de:	e7fd      	b.n	800e6dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d10b      	bne.n	800e6fe <xTaskCreateStatic+0x4a>
	__asm volatile
 800e6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ea:	f383 8811 	msr	BASEPRI, r3
 800e6ee:	f3bf 8f6f 	isb	sy
 800e6f2:	f3bf 8f4f 	dsb	sy
 800e6f6:	61fb      	str	r3, [r7, #28]
}
 800e6f8:	bf00      	nop
 800e6fa:	bf00      	nop
 800e6fc:	e7fd      	b.n	800e6fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e6fe:	23a8      	movs	r3, #168	@ 0xa8
 800e700:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	2ba8      	cmp	r3, #168	@ 0xa8
 800e706:	d00b      	beq.n	800e720 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e70c:	f383 8811 	msr	BASEPRI, r3
 800e710:	f3bf 8f6f 	isb	sy
 800e714:	f3bf 8f4f 	dsb	sy
 800e718:	61bb      	str	r3, [r7, #24]
}
 800e71a:	bf00      	nop
 800e71c:	bf00      	nop
 800e71e:	e7fd      	b.n	800e71c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e720:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e724:	2b00      	cmp	r3, #0
 800e726:	d01e      	beq.n	800e766 <xTaskCreateStatic+0xb2>
 800e728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d01b      	beq.n	800e766 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e730:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e734:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e736:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e73a:	2202      	movs	r2, #2
 800e73c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e740:	2300      	movs	r3, #0
 800e742:	9303      	str	r3, [sp, #12]
 800e744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e746:	9302      	str	r3, [sp, #8]
 800e748:	f107 0314 	add.w	r3, r7, #20
 800e74c:	9301      	str	r3, [sp, #4]
 800e74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	68b9      	ldr	r1, [r7, #8]
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f000 f851 	bl	800e800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e75e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e760:	f000 f8f6 	bl	800e950 <prvAddNewTaskToReadyList>
 800e764:	e001      	b.n	800e76a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e766:	2300      	movs	r3, #0
 800e768:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e76a:	697b      	ldr	r3, [r7, #20]
	}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3728      	adds	r7, #40	@ 0x28
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e774:	b580      	push	{r7, lr}
 800e776:	b08c      	sub	sp, #48	@ 0x30
 800e778:	af04      	add	r7, sp, #16
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	603b      	str	r3, [r7, #0]
 800e780:	4613      	mov	r3, r2
 800e782:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e784:	88fb      	ldrh	r3, [r7, #6]
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	4618      	mov	r0, r3
 800e78a:	f001 fe6f 	bl	801046c <pvPortMalloc>
 800e78e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00e      	beq.n	800e7b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e796:	20a8      	movs	r0, #168	@ 0xa8
 800e798:	f001 fe68 	bl	801046c <pvPortMalloc>
 800e79c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d003      	beq.n	800e7ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	697a      	ldr	r2, [r7, #20]
 800e7a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800e7aa:	e005      	b.n	800e7b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e7ac:	6978      	ldr	r0, [r7, #20]
 800e7ae:	f001 ff2b 	bl	8010608 <vPortFree>
 800e7b2:	e001      	b.n	800e7b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d017      	beq.n	800e7ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e7c6:	88fa      	ldrh	r2, [r7, #6]
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	9303      	str	r3, [sp, #12]
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	9302      	str	r3, [sp, #8]
 800e7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7d2:	9301      	str	r3, [sp, #4]
 800e7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7d6:	9300      	str	r3, [sp, #0]
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	68b9      	ldr	r1, [r7, #8]
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f000 f80f 	bl	800e800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e7e2:	69f8      	ldr	r0, [r7, #28]
 800e7e4:	f000 f8b4 	bl	800e950 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	61bb      	str	r3, [r7, #24]
 800e7ec:	e002      	b.n	800e7f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e7f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e7f4:	69bb      	ldr	r3, [r7, #24]
	}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3720      	adds	r7, #32
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
	...

0800e800 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b088      	sub	sp, #32
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	607a      	str	r2, [r7, #4]
 800e80c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e810:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	009b      	lsls	r3, r3, #2
 800e816:	461a      	mov	r2, r3
 800e818:	21a5      	movs	r1, #165	@ 0xa5
 800e81a:	f002 feb6 	bl	801158a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e820:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e828:	3b01      	subs	r3, #1
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	4413      	add	r3, r2
 800e82e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	f023 0307 	bic.w	r3, r3, #7
 800e836:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	f003 0307 	and.w	r3, r3, #7
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d00b      	beq.n	800e85a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e846:	f383 8811 	msr	BASEPRI, r3
 800e84a:	f3bf 8f6f 	isb	sy
 800e84e:	f3bf 8f4f 	dsb	sy
 800e852:	617b      	str	r3, [r7, #20]
}
 800e854:	bf00      	nop
 800e856:	bf00      	nop
 800e858:	e7fd      	b.n	800e856 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d01f      	beq.n	800e8a0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e860:	2300      	movs	r3, #0
 800e862:	61fb      	str	r3, [r7, #28]
 800e864:	e012      	b.n	800e88c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e866:	68ba      	ldr	r2, [r7, #8]
 800e868:	69fb      	ldr	r3, [r7, #28]
 800e86a:	4413      	add	r3, r2
 800e86c:	7819      	ldrb	r1, [r3, #0]
 800e86e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	4413      	add	r3, r2
 800e874:	3334      	adds	r3, #52	@ 0x34
 800e876:	460a      	mov	r2, r1
 800e878:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e87a:	68ba      	ldr	r2, [r7, #8]
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	4413      	add	r3, r2
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d006      	beq.n	800e894 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	3301      	adds	r3, #1
 800e88a:	61fb      	str	r3, [r7, #28]
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	2b0f      	cmp	r3, #15
 800e890:	d9e9      	bls.n	800e866 <prvInitialiseNewTask+0x66>
 800e892:	e000      	b.n	800e896 <prvInitialiseNewTask+0x96>
			{
				break;
 800e894:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e89e:	e003      	b.n	800e8a8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8aa:	2b37      	cmp	r3, #55	@ 0x37
 800e8ac:	d901      	bls.n	800e8b2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e8ae:	2337      	movs	r3, #55	@ 0x37
 800e8b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8bc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8c6:	3304      	adds	r3, #4
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7ff f801 	bl	800d8d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8d0:	3318      	adds	r3, #24
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fe fffc 	bl	800d8d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e900:	3354      	adds	r3, #84	@ 0x54
 800e902:	224c      	movs	r2, #76	@ 0x4c
 800e904:	2100      	movs	r1, #0
 800e906:	4618      	mov	r0, r3
 800e908:	f002 fe3f 	bl	801158a <memset>
 800e90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e90e:	4a0d      	ldr	r2, [pc, #52]	@ (800e944 <prvInitialiseNewTask+0x144>)
 800e910:	659a      	str	r2, [r3, #88]	@ 0x58
 800e912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e914:	4a0c      	ldr	r2, [pc, #48]	@ (800e948 <prvInitialiseNewTask+0x148>)
 800e916:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e91a:	4a0c      	ldr	r2, [pc, #48]	@ (800e94c <prvInitialiseNewTask+0x14c>)
 800e91c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e91e:	683a      	ldr	r2, [r7, #0]
 800e920:	68f9      	ldr	r1, [r7, #12]
 800e922:	69b8      	ldr	r0, [r7, #24]
 800e924:	f001 fb4e 	bl	800ffc4 <pxPortInitialiseStack>
 800e928:	4602      	mov	r2, r0
 800e92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e92c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e930:	2b00      	cmp	r3, #0
 800e932:	d002      	beq.n	800e93a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e938:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e93a:	bf00      	nop
 800e93c:	3720      	adds	r7, #32
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	2000838c 	.word	0x2000838c
 800e948:	200083f4 	.word	0x200083f4
 800e94c:	2000845c 	.word	0x2000845c

0800e950 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e958:	f001 fc66 	bl	8010228 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e95c:	4b2d      	ldr	r3, [pc, #180]	@ (800ea14 <prvAddNewTaskToReadyList+0xc4>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	3301      	adds	r3, #1
 800e962:	4a2c      	ldr	r2, [pc, #176]	@ (800ea14 <prvAddNewTaskToReadyList+0xc4>)
 800e964:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e966:	4b2c      	ldr	r3, [pc, #176]	@ (800ea18 <prvAddNewTaskToReadyList+0xc8>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d109      	bne.n	800e982 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e96e:	4a2a      	ldr	r2, [pc, #168]	@ (800ea18 <prvAddNewTaskToReadyList+0xc8>)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e974:	4b27      	ldr	r3, [pc, #156]	@ (800ea14 <prvAddNewTaskToReadyList+0xc4>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2b01      	cmp	r3, #1
 800e97a:	d110      	bne.n	800e99e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e97c:	f000 fd22 	bl	800f3c4 <prvInitialiseTaskLists>
 800e980:	e00d      	b.n	800e99e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e982:	4b26      	ldr	r3, [pc, #152]	@ (800ea1c <prvAddNewTaskToReadyList+0xcc>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d109      	bne.n	800e99e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e98a:	4b23      	ldr	r3, [pc, #140]	@ (800ea18 <prvAddNewTaskToReadyList+0xc8>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e994:	429a      	cmp	r2, r3
 800e996:	d802      	bhi.n	800e99e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e998:	4a1f      	ldr	r2, [pc, #124]	@ (800ea18 <prvAddNewTaskToReadyList+0xc8>)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e99e:	4b20      	ldr	r3, [pc, #128]	@ (800ea20 <prvAddNewTaskToReadyList+0xd0>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	4a1e      	ldr	r2, [pc, #120]	@ (800ea20 <prvAddNewTaskToReadyList+0xd0>)
 800e9a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e9a8:	4b1d      	ldr	r3, [pc, #116]	@ (800ea20 <prvAddNewTaskToReadyList+0xd0>)
 800e9aa:	681a      	ldr	r2, [r3, #0]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9b4:	4b1b      	ldr	r3, [pc, #108]	@ (800ea24 <prvAddNewTaskToReadyList+0xd4>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d903      	bls.n	800e9c4 <prvAddNewTaskToReadyList+0x74>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9c0:	4a18      	ldr	r2, [pc, #96]	@ (800ea24 <prvAddNewTaskToReadyList+0xd4>)
 800e9c2:	6013      	str	r3, [r2, #0]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	4413      	add	r3, r2
 800e9ce:	009b      	lsls	r3, r3, #2
 800e9d0:	4a15      	ldr	r2, [pc, #84]	@ (800ea28 <prvAddNewTaskToReadyList+0xd8>)
 800e9d2:	441a      	add	r2, r3
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	3304      	adds	r3, #4
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4610      	mov	r0, r2
 800e9dc:	f7fe ff85 	bl	800d8ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e9e0:	f001 fc54 	bl	801028c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e9e4:	4b0d      	ldr	r3, [pc, #52]	@ (800ea1c <prvAddNewTaskToReadyList+0xcc>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d00e      	beq.n	800ea0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e9ec:	4b0a      	ldr	r3, [pc, #40]	@ (800ea18 <prvAddNewTaskToReadyList+0xc8>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d207      	bcs.n	800ea0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e9fa:	4b0c      	ldr	r3, [pc, #48]	@ (800ea2c <prvAddNewTaskToReadyList+0xdc>)
 800e9fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea00:	601a      	str	r2, [r3, #0]
 800ea02:	f3bf 8f4f 	dsb	sy
 800ea06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea0a:	bf00      	nop
 800ea0c:	3708      	adds	r7, #8
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	2000322c 	.word	0x2000322c
 800ea18:	20002d58 	.word	0x20002d58
 800ea1c:	20003238 	.word	0x20003238
 800ea20:	20003248 	.word	0x20003248
 800ea24:	20003234 	.word	0x20003234
 800ea28:	20002d5c 	.word	0x20002d5c
 800ea2c:	e000ed04 	.word	0xe000ed04

0800ea30 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ea38:	f001 fbf6 	bl	8010228 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d102      	bne.n	800ea48 <vTaskDelete+0x18>
 800ea42:	4b2d      	ldr	r3, [pc, #180]	@ (800eaf8 <vTaskDelete+0xc8>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	e000      	b.n	800ea4a <vTaskDelete+0x1a>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	3304      	adds	r3, #4
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7fe ffa7 	bl	800d9a4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d004      	beq.n	800ea68 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	3318      	adds	r3, #24
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7fe ff9e 	bl	800d9a4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ea68:	4b24      	ldr	r3, [pc, #144]	@ (800eafc <vTaskDelete+0xcc>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	4a23      	ldr	r2, [pc, #140]	@ (800eafc <vTaskDelete+0xcc>)
 800ea70:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ea72:	4b21      	ldr	r3, [pc, #132]	@ (800eaf8 <vTaskDelete+0xc8>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d10b      	bne.n	800ea94 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	3304      	adds	r3, #4
 800ea80:	4619      	mov	r1, r3
 800ea82:	481f      	ldr	r0, [pc, #124]	@ (800eb00 <vTaskDelete+0xd0>)
 800ea84:	f7fe ff31 	bl	800d8ea <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ea88:	4b1e      	ldr	r3, [pc, #120]	@ (800eb04 <vTaskDelete+0xd4>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	4a1d      	ldr	r2, [pc, #116]	@ (800eb04 <vTaskDelete+0xd4>)
 800ea90:	6013      	str	r3, [r2, #0]
 800ea92:	e009      	b.n	800eaa8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ea94:	4b1c      	ldr	r3, [pc, #112]	@ (800eb08 <vTaskDelete+0xd8>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	3b01      	subs	r3, #1
 800ea9a:	4a1b      	ldr	r2, [pc, #108]	@ (800eb08 <vTaskDelete+0xd8>)
 800ea9c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f000 fcfe 	bl	800f4a0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800eaa4:	f000 fd32 	bl	800f50c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800eaa8:	f001 fbf0 	bl	801028c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800eaac:	4b17      	ldr	r3, [pc, #92]	@ (800eb0c <vTaskDelete+0xdc>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d01c      	beq.n	800eaee <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800eab4:	4b10      	ldr	r3, [pc, #64]	@ (800eaf8 <vTaskDelete+0xc8>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	68fa      	ldr	r2, [r7, #12]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d117      	bne.n	800eaee <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800eabe:	4b14      	ldr	r3, [pc, #80]	@ (800eb10 <vTaskDelete+0xe0>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d00b      	beq.n	800eade <vTaskDelete+0xae>
	__asm volatile
 800eac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaca:	f383 8811 	msr	BASEPRI, r3
 800eace:	f3bf 8f6f 	isb	sy
 800ead2:	f3bf 8f4f 	dsb	sy
 800ead6:	60bb      	str	r3, [r7, #8]
}
 800ead8:	bf00      	nop
 800eada:	bf00      	nop
 800eadc:	e7fd      	b.n	800eada <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800eade:	4b0d      	ldr	r3, [pc, #52]	@ (800eb14 <vTaskDelete+0xe4>)
 800eae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eae4:	601a      	str	r2, [r3, #0]
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eaee:	bf00      	nop
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	20002d58 	.word	0x20002d58
 800eafc:	20003248 	.word	0x20003248
 800eb00:	20003200 	.word	0x20003200
 800eb04:	20003214 	.word	0x20003214
 800eb08:	2000322c 	.word	0x2000322c
 800eb0c:	20003238 	.word	0x20003238
 800eb10:	20003254 	.word	0x20003254
 800eb14:	e000ed04 	.word	0xe000ed04

0800eb18 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b08a      	sub	sp, #40	@ 0x28
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800eb22:	2300      	movs	r3, #0
 800eb24:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d10b      	bne.n	800eb44 <vTaskDelayUntil+0x2c>
	__asm volatile
 800eb2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb30:	f383 8811 	msr	BASEPRI, r3
 800eb34:	f3bf 8f6f 	isb	sy
 800eb38:	f3bf 8f4f 	dsb	sy
 800eb3c:	617b      	str	r3, [r7, #20]
}
 800eb3e:	bf00      	nop
 800eb40:	bf00      	nop
 800eb42:	e7fd      	b.n	800eb40 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d10b      	bne.n	800eb62 <vTaskDelayUntil+0x4a>
	__asm volatile
 800eb4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb4e:	f383 8811 	msr	BASEPRI, r3
 800eb52:	f3bf 8f6f 	isb	sy
 800eb56:	f3bf 8f4f 	dsb	sy
 800eb5a:	613b      	str	r3, [r7, #16]
}
 800eb5c:	bf00      	nop
 800eb5e:	bf00      	nop
 800eb60:	e7fd      	b.n	800eb5e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800eb62:	4b2a      	ldr	r3, [pc, #168]	@ (800ec0c <vTaskDelayUntil+0xf4>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00b      	beq.n	800eb82 <vTaskDelayUntil+0x6a>
	__asm volatile
 800eb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb6e:	f383 8811 	msr	BASEPRI, r3
 800eb72:	f3bf 8f6f 	isb	sy
 800eb76:	f3bf 8f4f 	dsb	sy
 800eb7a:	60fb      	str	r3, [r7, #12]
}
 800eb7c:	bf00      	nop
 800eb7e:	bf00      	nop
 800eb80:	e7fd      	b.n	800eb7e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800eb82:	f000 f8ef 	bl	800ed64 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800eb86:	4b22      	ldr	r3, [pc, #136]	@ (800ec10 <vTaskDelayUntil+0xf8>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	683a      	ldr	r2, [r7, #0]
 800eb92:	4413      	add	r3, r2
 800eb94:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	6a3a      	ldr	r2, [r7, #32]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d20b      	bcs.n	800ebb8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	69fa      	ldr	r2, [r7, #28]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d211      	bcs.n	800ebce <vTaskDelayUntil+0xb6>
 800ebaa:	69fa      	ldr	r2, [r7, #28]
 800ebac:	6a3b      	ldr	r3, [r7, #32]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d90d      	bls.n	800ebce <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebb6:	e00a      	b.n	800ebce <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	69fa      	ldr	r2, [r7, #28]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d303      	bcc.n	800ebca <vTaskDelayUntil+0xb2>
 800ebc2:	69fa      	ldr	r2, [r7, #28]
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d901      	bls.n	800ebce <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	69fa      	ldr	r2, [r7, #28]
 800ebd2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d006      	beq.n	800ebe8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ebda:	69fa      	ldr	r2, [r7, #28]
 800ebdc:	6a3b      	ldr	r3, [r7, #32]
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f000 fe40 	bl	800f868 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ebe8:	f000 f8ca 	bl	800ed80 <xTaskResumeAll>
 800ebec:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d107      	bne.n	800ec04 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800ebf4:	4b07      	ldr	r3, [pc, #28]	@ (800ec14 <vTaskDelayUntil+0xfc>)
 800ebf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebfa:	601a      	str	r2, [r3, #0]
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec04:	bf00      	nop
 800ec06:	3728      	adds	r7, #40	@ 0x28
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	20003254 	.word	0x20003254
 800ec10:	20003230 	.word	0x20003230
 800ec14:	e000ed04 	.word	0xe000ed04

0800ec18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ec20:	2300      	movs	r3, #0
 800ec22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d018      	beq.n	800ec5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ec2a:	4b14      	ldr	r3, [pc, #80]	@ (800ec7c <vTaskDelay+0x64>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00b      	beq.n	800ec4a <vTaskDelay+0x32>
	__asm volatile
 800ec32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec36:	f383 8811 	msr	BASEPRI, r3
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	f3bf 8f4f 	dsb	sy
 800ec42:	60bb      	str	r3, [r7, #8]
}
 800ec44:	bf00      	nop
 800ec46:	bf00      	nop
 800ec48:	e7fd      	b.n	800ec46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ec4a:	f000 f88b 	bl	800ed64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ec4e:	2100      	movs	r1, #0
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 fe09 	bl	800f868 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ec56:	f000 f893 	bl	800ed80 <xTaskResumeAll>
 800ec5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d107      	bne.n	800ec72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ec62:	4b07      	ldr	r3, [pc, #28]	@ (800ec80 <vTaskDelay+0x68>)
 800ec64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec68:	601a      	str	r2, [r3, #0]
 800ec6a:	f3bf 8f4f 	dsb	sy
 800ec6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec72:	bf00      	nop
 800ec74:	3710      	adds	r7, #16
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	20003254 	.word	0x20003254
 800ec80:	e000ed04 	.word	0xe000ed04

0800ec84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b08a      	sub	sp, #40	@ 0x28
 800ec88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ec92:	463a      	mov	r2, r7
 800ec94:	1d39      	adds	r1, r7, #4
 800ec96:	f107 0308 	add.w	r3, r7, #8
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fe fdc4 	bl	800d828 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eca0:	6839      	ldr	r1, [r7, #0]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	68ba      	ldr	r2, [r7, #8]
 800eca6:	9202      	str	r2, [sp, #8]
 800eca8:	9301      	str	r3, [sp, #4]
 800ecaa:	2300      	movs	r3, #0
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	2300      	movs	r3, #0
 800ecb0:	460a      	mov	r2, r1
 800ecb2:	4924      	ldr	r1, [pc, #144]	@ (800ed44 <vTaskStartScheduler+0xc0>)
 800ecb4:	4824      	ldr	r0, [pc, #144]	@ (800ed48 <vTaskStartScheduler+0xc4>)
 800ecb6:	f7ff fcfd 	bl	800e6b4 <xTaskCreateStatic>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	4a23      	ldr	r2, [pc, #140]	@ (800ed4c <vTaskStartScheduler+0xc8>)
 800ecbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ecc0:	4b22      	ldr	r3, [pc, #136]	@ (800ed4c <vTaskStartScheduler+0xc8>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d002      	beq.n	800ecce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	617b      	str	r3, [r7, #20]
 800eccc:	e001      	b.n	800ecd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d102      	bne.n	800ecde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ecd8:	f000 fe1a 	bl	800f910 <xTimerCreateTimerTask>
 800ecdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d11b      	bne.n	800ed1c <vTaskStartScheduler+0x98>
	__asm volatile
 800ece4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ece8:	f383 8811 	msr	BASEPRI, r3
 800ecec:	f3bf 8f6f 	isb	sy
 800ecf0:	f3bf 8f4f 	dsb	sy
 800ecf4:	613b      	str	r3, [r7, #16]
}
 800ecf6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ecf8:	4b15      	ldr	r3, [pc, #84]	@ (800ed50 <vTaskStartScheduler+0xcc>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	3354      	adds	r3, #84	@ 0x54
 800ecfe:	4a15      	ldr	r2, [pc, #84]	@ (800ed54 <vTaskStartScheduler+0xd0>)
 800ed00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ed02:	4b15      	ldr	r3, [pc, #84]	@ (800ed58 <vTaskStartScheduler+0xd4>)
 800ed04:	f04f 32ff 	mov.w	r2, #4294967295
 800ed08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ed0a:	4b14      	ldr	r3, [pc, #80]	@ (800ed5c <vTaskStartScheduler+0xd8>)
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed10:	4b13      	ldr	r3, [pc, #76]	@ (800ed60 <vTaskStartScheduler+0xdc>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ed16:	f001 f9e3 	bl	80100e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ed1a:	e00f      	b.n	800ed3c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed22:	d10b      	bne.n	800ed3c <vTaskStartScheduler+0xb8>
	__asm volatile
 800ed24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed28:	f383 8811 	msr	BASEPRI, r3
 800ed2c:	f3bf 8f6f 	isb	sy
 800ed30:	f3bf 8f4f 	dsb	sy
 800ed34:	60fb      	str	r3, [r7, #12]
}
 800ed36:	bf00      	nop
 800ed38:	bf00      	nop
 800ed3a:	e7fd      	b.n	800ed38 <vTaskStartScheduler+0xb4>
}
 800ed3c:	bf00      	nop
 800ed3e:	3718      	adds	r7, #24
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	08012a1c 	.word	0x08012a1c
 800ed48:	0800f395 	.word	0x0800f395
 800ed4c:	20003250 	.word	0x20003250
 800ed50:	20002d58 	.word	0x20002d58
 800ed54:	2000018c 	.word	0x2000018c
 800ed58:	2000324c 	.word	0x2000324c
 800ed5c:	20003238 	.word	0x20003238
 800ed60:	20003230 	.word	0x20003230

0800ed64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ed64:	b480      	push	{r7}
 800ed66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ed68:	4b04      	ldr	r3, [pc, #16]	@ (800ed7c <vTaskSuspendAll+0x18>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	4a03      	ldr	r2, [pc, #12]	@ (800ed7c <vTaskSuspendAll+0x18>)
 800ed70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ed72:	bf00      	nop
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr
 800ed7c:	20003254 	.word	0x20003254

0800ed80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ed86:	2300      	movs	r3, #0
 800ed88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ed8e:	4b42      	ldr	r3, [pc, #264]	@ (800ee98 <xTaskResumeAll+0x118>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d10b      	bne.n	800edae <xTaskResumeAll+0x2e>
	__asm volatile
 800ed96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed9a:	f383 8811 	msr	BASEPRI, r3
 800ed9e:	f3bf 8f6f 	isb	sy
 800eda2:	f3bf 8f4f 	dsb	sy
 800eda6:	603b      	str	r3, [r7, #0]
}
 800eda8:	bf00      	nop
 800edaa:	bf00      	nop
 800edac:	e7fd      	b.n	800edaa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800edae:	f001 fa3b 	bl	8010228 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800edb2:	4b39      	ldr	r3, [pc, #228]	@ (800ee98 <xTaskResumeAll+0x118>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	3b01      	subs	r3, #1
 800edb8:	4a37      	ldr	r2, [pc, #220]	@ (800ee98 <xTaskResumeAll+0x118>)
 800edba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edbc:	4b36      	ldr	r3, [pc, #216]	@ (800ee98 <xTaskResumeAll+0x118>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d162      	bne.n	800ee8a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800edc4:	4b35      	ldr	r3, [pc, #212]	@ (800ee9c <xTaskResumeAll+0x11c>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d05e      	beq.n	800ee8a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800edcc:	e02f      	b.n	800ee2e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edce:	4b34      	ldr	r3, [pc, #208]	@ (800eea0 <xTaskResumeAll+0x120>)
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	3318      	adds	r3, #24
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fe fde2 	bl	800d9a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	3304      	adds	r3, #4
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7fe fddd 	bl	800d9a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edee:	4b2d      	ldr	r3, [pc, #180]	@ (800eea4 <xTaskResumeAll+0x124>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d903      	bls.n	800edfe <xTaskResumeAll+0x7e>
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edfa:	4a2a      	ldr	r2, [pc, #168]	@ (800eea4 <xTaskResumeAll+0x124>)
 800edfc:	6013      	str	r3, [r2, #0]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee02:	4613      	mov	r3, r2
 800ee04:	009b      	lsls	r3, r3, #2
 800ee06:	4413      	add	r3, r2
 800ee08:	009b      	lsls	r3, r3, #2
 800ee0a:	4a27      	ldr	r2, [pc, #156]	@ (800eea8 <xTaskResumeAll+0x128>)
 800ee0c:	441a      	add	r2, r3
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	3304      	adds	r3, #4
 800ee12:	4619      	mov	r1, r3
 800ee14:	4610      	mov	r0, r2
 800ee16:	f7fe fd68 	bl	800d8ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee1e:	4b23      	ldr	r3, [pc, #140]	@ (800eeac <xTaskResumeAll+0x12c>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d302      	bcc.n	800ee2e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ee28:	4b21      	ldr	r3, [pc, #132]	@ (800eeb0 <xTaskResumeAll+0x130>)
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee2e:	4b1c      	ldr	r3, [pc, #112]	@ (800eea0 <xTaskResumeAll+0x120>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d1cb      	bne.n	800edce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d001      	beq.n	800ee40 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ee3c:	f000 fb66 	bl	800f50c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ee40:	4b1c      	ldr	r3, [pc, #112]	@ (800eeb4 <xTaskResumeAll+0x134>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d010      	beq.n	800ee6e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ee4c:	f000 f846 	bl	800eedc <xTaskIncrementTick>
 800ee50:	4603      	mov	r3, r0
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d002      	beq.n	800ee5c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ee56:	4b16      	ldr	r3, [pc, #88]	@ (800eeb0 <xTaskResumeAll+0x130>)
 800ee58:	2201      	movs	r2, #1
 800ee5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	3b01      	subs	r3, #1
 800ee60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d1f1      	bne.n	800ee4c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ee68:	4b12      	ldr	r3, [pc, #72]	@ (800eeb4 <xTaskResumeAll+0x134>)
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ee6e:	4b10      	ldr	r3, [pc, #64]	@ (800eeb0 <xTaskResumeAll+0x130>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d009      	beq.n	800ee8a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ee76:	2301      	movs	r3, #1
 800ee78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ee7a:	4b0f      	ldr	r3, [pc, #60]	@ (800eeb8 <xTaskResumeAll+0x138>)
 800ee7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee80:	601a      	str	r2, [r3, #0]
 800ee82:	f3bf 8f4f 	dsb	sy
 800ee86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee8a:	f001 f9ff 	bl	801028c <vPortExitCritical>

	return xAlreadyYielded;
 800ee8e:	68bb      	ldr	r3, [r7, #8]
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3710      	adds	r7, #16
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	20003254 	.word	0x20003254
 800ee9c:	2000322c 	.word	0x2000322c
 800eea0:	200031ec 	.word	0x200031ec
 800eea4:	20003234 	.word	0x20003234
 800eea8:	20002d5c 	.word	0x20002d5c
 800eeac:	20002d58 	.word	0x20002d58
 800eeb0:	20003240 	.word	0x20003240
 800eeb4:	2000323c 	.word	0x2000323c
 800eeb8:	e000ed04 	.word	0xe000ed04

0800eebc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eec2:	4b05      	ldr	r3, [pc, #20]	@ (800eed8 <xTaskGetTickCount+0x1c>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eec8:	687b      	ldr	r3, [r7, #4]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	370c      	adds	r7, #12
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	20003230 	.word	0x20003230

0800eedc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b086      	sub	sp, #24
 800eee0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800eee2:	2300      	movs	r3, #0
 800eee4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eee6:	4b4f      	ldr	r3, [pc, #316]	@ (800f024 <xTaskIncrementTick+0x148>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	f040 8090 	bne.w	800f010 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800eef0:	4b4d      	ldr	r3, [pc, #308]	@ (800f028 <xTaskIncrementTick+0x14c>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	3301      	adds	r3, #1
 800eef6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800eef8:	4a4b      	ldr	r2, [pc, #300]	@ (800f028 <xTaskIncrementTick+0x14c>)
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d121      	bne.n	800ef48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ef04:	4b49      	ldr	r3, [pc, #292]	@ (800f02c <xTaskIncrementTick+0x150>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d00b      	beq.n	800ef26 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ef0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef12:	f383 8811 	msr	BASEPRI, r3
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	603b      	str	r3, [r7, #0]
}
 800ef20:	bf00      	nop
 800ef22:	bf00      	nop
 800ef24:	e7fd      	b.n	800ef22 <xTaskIncrementTick+0x46>
 800ef26:	4b41      	ldr	r3, [pc, #260]	@ (800f02c <xTaskIncrementTick+0x150>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	60fb      	str	r3, [r7, #12]
 800ef2c:	4b40      	ldr	r3, [pc, #256]	@ (800f030 <xTaskIncrementTick+0x154>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4a3e      	ldr	r2, [pc, #248]	@ (800f02c <xTaskIncrementTick+0x150>)
 800ef32:	6013      	str	r3, [r2, #0]
 800ef34:	4a3e      	ldr	r2, [pc, #248]	@ (800f030 <xTaskIncrementTick+0x154>)
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6013      	str	r3, [r2, #0]
 800ef3a:	4b3e      	ldr	r3, [pc, #248]	@ (800f034 <xTaskIncrementTick+0x158>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	3301      	adds	r3, #1
 800ef40:	4a3c      	ldr	r2, [pc, #240]	@ (800f034 <xTaskIncrementTick+0x158>)
 800ef42:	6013      	str	r3, [r2, #0]
 800ef44:	f000 fae2 	bl	800f50c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ef48:	4b3b      	ldr	r3, [pc, #236]	@ (800f038 <xTaskIncrementTick+0x15c>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	693a      	ldr	r2, [r7, #16]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d349      	bcc.n	800efe6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef52:	4b36      	ldr	r3, [pc, #216]	@ (800f02c <xTaskIncrementTick+0x150>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d104      	bne.n	800ef66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef5c:	4b36      	ldr	r3, [pc, #216]	@ (800f038 <xTaskIncrementTick+0x15c>)
 800ef5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef62:	601a      	str	r2, [r3, #0]
					break;
 800ef64:	e03f      	b.n	800efe6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef66:	4b31      	ldr	r3, [pc, #196]	@ (800f02c <xTaskIncrementTick+0x150>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	68db      	ldr	r3, [r3, #12]
 800ef6c:	68db      	ldr	r3, [r3, #12]
 800ef6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ef76:	693a      	ldr	r2, [r7, #16]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d203      	bcs.n	800ef86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ef7e:	4a2e      	ldr	r2, [pc, #184]	@ (800f038 <xTaskIncrementTick+0x15c>)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ef84:	e02f      	b.n	800efe6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	3304      	adds	r3, #4
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fe fd0a 	bl	800d9a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d004      	beq.n	800efa2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	3318      	adds	r3, #24
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fe fd01 	bl	800d9a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efa6:	4b25      	ldr	r3, [pc, #148]	@ (800f03c <xTaskIncrementTick+0x160>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d903      	bls.n	800efb6 <xTaskIncrementTick+0xda>
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efb2:	4a22      	ldr	r2, [pc, #136]	@ (800f03c <xTaskIncrementTick+0x160>)
 800efb4:	6013      	str	r3, [r2, #0]
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efba:	4613      	mov	r3, r2
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	4413      	add	r3, r2
 800efc0:	009b      	lsls	r3, r3, #2
 800efc2:	4a1f      	ldr	r2, [pc, #124]	@ (800f040 <xTaskIncrementTick+0x164>)
 800efc4:	441a      	add	r2, r3
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	3304      	adds	r3, #4
 800efca:	4619      	mov	r1, r3
 800efcc:	4610      	mov	r0, r2
 800efce:	f7fe fc8c 	bl	800d8ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efd6:	4b1b      	ldr	r3, [pc, #108]	@ (800f044 <xTaskIncrementTick+0x168>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efdc:	429a      	cmp	r2, r3
 800efde:	d3b8      	bcc.n	800ef52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800efe0:	2301      	movs	r3, #1
 800efe2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800efe4:	e7b5      	b.n	800ef52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800efe6:	4b17      	ldr	r3, [pc, #92]	@ (800f044 <xTaskIncrementTick+0x168>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efec:	4914      	ldr	r1, [pc, #80]	@ (800f040 <xTaskIncrementTick+0x164>)
 800efee:	4613      	mov	r3, r2
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	4413      	add	r3, r2
 800eff4:	009b      	lsls	r3, r3, #2
 800eff6:	440b      	add	r3, r1
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b01      	cmp	r3, #1
 800effc:	d901      	bls.n	800f002 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800effe:	2301      	movs	r3, #1
 800f000:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f002:	4b11      	ldr	r3, [pc, #68]	@ (800f048 <xTaskIncrementTick+0x16c>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d007      	beq.n	800f01a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f00a:	2301      	movs	r3, #1
 800f00c:	617b      	str	r3, [r7, #20]
 800f00e:	e004      	b.n	800f01a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f010:	4b0e      	ldr	r3, [pc, #56]	@ (800f04c <xTaskIncrementTick+0x170>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	3301      	adds	r3, #1
 800f016:	4a0d      	ldr	r2, [pc, #52]	@ (800f04c <xTaskIncrementTick+0x170>)
 800f018:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f01a:	697b      	ldr	r3, [r7, #20]
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3718      	adds	r7, #24
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	20003254 	.word	0x20003254
 800f028:	20003230 	.word	0x20003230
 800f02c:	200031e4 	.word	0x200031e4
 800f030:	200031e8 	.word	0x200031e8
 800f034:	20003244 	.word	0x20003244
 800f038:	2000324c 	.word	0x2000324c
 800f03c:	20003234 	.word	0x20003234
 800f040:	20002d5c 	.word	0x20002d5c
 800f044:	20002d58 	.word	0x20002d58
 800f048:	20003240 	.word	0x20003240
 800f04c:	2000323c 	.word	0x2000323c

0800f050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f050:	b480      	push	{r7}
 800f052:	b085      	sub	sp, #20
 800f054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f056:	4b2b      	ldr	r3, [pc, #172]	@ (800f104 <vTaskSwitchContext+0xb4>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d003      	beq.n	800f066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f05e:	4b2a      	ldr	r3, [pc, #168]	@ (800f108 <vTaskSwitchContext+0xb8>)
 800f060:	2201      	movs	r2, #1
 800f062:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f064:	e047      	b.n	800f0f6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f066:	4b28      	ldr	r3, [pc, #160]	@ (800f108 <vTaskSwitchContext+0xb8>)
 800f068:	2200      	movs	r2, #0
 800f06a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f06c:	4b27      	ldr	r3, [pc, #156]	@ (800f10c <vTaskSwitchContext+0xbc>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	60fb      	str	r3, [r7, #12]
 800f072:	e011      	b.n	800f098 <vTaskSwitchContext+0x48>
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d10b      	bne.n	800f092 <vTaskSwitchContext+0x42>
	__asm volatile
 800f07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f07e:	f383 8811 	msr	BASEPRI, r3
 800f082:	f3bf 8f6f 	isb	sy
 800f086:	f3bf 8f4f 	dsb	sy
 800f08a:	607b      	str	r3, [r7, #4]
}
 800f08c:	bf00      	nop
 800f08e:	bf00      	nop
 800f090:	e7fd      	b.n	800f08e <vTaskSwitchContext+0x3e>
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	3b01      	subs	r3, #1
 800f096:	60fb      	str	r3, [r7, #12]
 800f098:	491d      	ldr	r1, [pc, #116]	@ (800f110 <vTaskSwitchContext+0xc0>)
 800f09a:	68fa      	ldr	r2, [r7, #12]
 800f09c:	4613      	mov	r3, r2
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	4413      	add	r3, r2
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	440b      	add	r3, r1
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d0e3      	beq.n	800f074 <vTaskSwitchContext+0x24>
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	4613      	mov	r3, r2
 800f0b0:	009b      	lsls	r3, r3, #2
 800f0b2:	4413      	add	r3, r2
 800f0b4:	009b      	lsls	r3, r3, #2
 800f0b6:	4a16      	ldr	r2, [pc, #88]	@ (800f110 <vTaskSwitchContext+0xc0>)
 800f0b8:	4413      	add	r3, r2
 800f0ba:	60bb      	str	r3, [r7, #8]
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	685a      	ldr	r2, [r3, #4]
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	605a      	str	r2, [r3, #4]
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	685a      	ldr	r2, [r3, #4]
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	3308      	adds	r3, #8
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d104      	bne.n	800f0dc <vTaskSwitchContext+0x8c>
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	685a      	ldr	r2, [r3, #4]
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	605a      	str	r2, [r3, #4]
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	4a0c      	ldr	r2, [pc, #48]	@ (800f114 <vTaskSwitchContext+0xc4>)
 800f0e4:	6013      	str	r3, [r2, #0]
 800f0e6:	4a09      	ldr	r2, [pc, #36]	@ (800f10c <vTaskSwitchContext+0xbc>)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f0ec:	4b09      	ldr	r3, [pc, #36]	@ (800f114 <vTaskSwitchContext+0xc4>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	3354      	adds	r3, #84	@ 0x54
 800f0f2:	4a09      	ldr	r2, [pc, #36]	@ (800f118 <vTaskSwitchContext+0xc8>)
 800f0f4:	6013      	str	r3, [r2, #0]
}
 800f0f6:	bf00      	nop
 800f0f8:	3714      	adds	r7, #20
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr
 800f102:	bf00      	nop
 800f104:	20003254 	.word	0x20003254
 800f108:	20003240 	.word	0x20003240
 800f10c:	20003234 	.word	0x20003234
 800f110:	20002d5c 	.word	0x20002d5c
 800f114:	20002d58 	.word	0x20002d58
 800f118:	2000018c 	.word	0x2000018c

0800f11c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d10b      	bne.n	800f144 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f130:	f383 8811 	msr	BASEPRI, r3
 800f134:	f3bf 8f6f 	isb	sy
 800f138:	f3bf 8f4f 	dsb	sy
 800f13c:	60fb      	str	r3, [r7, #12]
}
 800f13e:	bf00      	nop
 800f140:	bf00      	nop
 800f142:	e7fd      	b.n	800f140 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f144:	4b07      	ldr	r3, [pc, #28]	@ (800f164 <vTaskPlaceOnEventList+0x48>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	3318      	adds	r3, #24
 800f14a:	4619      	mov	r1, r3
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f7fe fbf0 	bl	800d932 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f152:	2101      	movs	r1, #1
 800f154:	6838      	ldr	r0, [r7, #0]
 800f156:	f000 fb87 	bl	800f868 <prvAddCurrentTaskToDelayedList>
}
 800f15a:	bf00      	nop
 800f15c:	3710      	adds	r7, #16
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	20002d58 	.word	0x20002d58

0800f168 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d10b      	bne.n	800f192 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f17e:	f383 8811 	msr	BASEPRI, r3
 800f182:	f3bf 8f6f 	isb	sy
 800f186:	f3bf 8f4f 	dsb	sy
 800f18a:	617b      	str	r3, [r7, #20]
}
 800f18c:	bf00      	nop
 800f18e:	bf00      	nop
 800f190:	e7fd      	b.n	800f18e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f192:	4b0a      	ldr	r3, [pc, #40]	@ (800f1bc <vTaskPlaceOnEventListRestricted+0x54>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	3318      	adds	r3, #24
 800f198:	4619      	mov	r1, r3
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	f7fe fba5 	bl	800d8ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d002      	beq.n	800f1ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f1ac:	6879      	ldr	r1, [r7, #4]
 800f1ae:	68b8      	ldr	r0, [r7, #8]
 800f1b0:	f000 fb5a 	bl	800f868 <prvAddCurrentTaskToDelayedList>
	}
 800f1b4:	bf00      	nop
 800f1b6:	3718      	adds	r7, #24
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}
 800f1bc:	20002d58 	.word	0x20002d58

0800f1c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b086      	sub	sp, #24
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d10b      	bne.n	800f1ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1da:	f383 8811 	msr	BASEPRI, r3
 800f1de:	f3bf 8f6f 	isb	sy
 800f1e2:	f3bf 8f4f 	dsb	sy
 800f1e6:	60fb      	str	r3, [r7, #12]
}
 800f1e8:	bf00      	nop
 800f1ea:	bf00      	nop
 800f1ec:	e7fd      	b.n	800f1ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	3318      	adds	r3, #24
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fe fbd6 	bl	800d9a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1f8:	4b1d      	ldr	r3, [pc, #116]	@ (800f270 <xTaskRemoveFromEventList+0xb0>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d11d      	bne.n	800f23c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	3304      	adds	r3, #4
 800f204:	4618      	mov	r0, r3
 800f206:	f7fe fbcd 	bl	800d9a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f20e:	4b19      	ldr	r3, [pc, #100]	@ (800f274 <xTaskRemoveFromEventList+0xb4>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	429a      	cmp	r2, r3
 800f214:	d903      	bls.n	800f21e <xTaskRemoveFromEventList+0x5e>
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f21a:	4a16      	ldr	r2, [pc, #88]	@ (800f274 <xTaskRemoveFromEventList+0xb4>)
 800f21c:	6013      	str	r3, [r2, #0]
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f222:	4613      	mov	r3, r2
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	4413      	add	r3, r2
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	4a13      	ldr	r2, [pc, #76]	@ (800f278 <xTaskRemoveFromEventList+0xb8>)
 800f22c:	441a      	add	r2, r3
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	3304      	adds	r3, #4
 800f232:	4619      	mov	r1, r3
 800f234:	4610      	mov	r0, r2
 800f236:	f7fe fb58 	bl	800d8ea <vListInsertEnd>
 800f23a:	e005      	b.n	800f248 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	3318      	adds	r3, #24
 800f240:	4619      	mov	r1, r3
 800f242:	480e      	ldr	r0, [pc, #56]	@ (800f27c <xTaskRemoveFromEventList+0xbc>)
 800f244:	f7fe fb51 	bl	800d8ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f24c:	4b0c      	ldr	r3, [pc, #48]	@ (800f280 <xTaskRemoveFromEventList+0xc0>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f252:	429a      	cmp	r2, r3
 800f254:	d905      	bls.n	800f262 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f256:	2301      	movs	r3, #1
 800f258:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f25a:	4b0a      	ldr	r3, [pc, #40]	@ (800f284 <xTaskRemoveFromEventList+0xc4>)
 800f25c:	2201      	movs	r2, #1
 800f25e:	601a      	str	r2, [r3, #0]
 800f260:	e001      	b.n	800f266 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f262:	2300      	movs	r3, #0
 800f264:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f266:	697b      	ldr	r3, [r7, #20]
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3718      	adds	r7, #24
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	20003254 	.word	0x20003254
 800f274:	20003234 	.word	0x20003234
 800f278:	20002d5c 	.word	0x20002d5c
 800f27c:	200031ec 	.word	0x200031ec
 800f280:	20002d58 	.word	0x20002d58
 800f284:	20003240 	.word	0x20003240

0800f288 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f288:	b480      	push	{r7}
 800f28a:	b083      	sub	sp, #12
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f290:	4b06      	ldr	r3, [pc, #24]	@ (800f2ac <vTaskInternalSetTimeOutState+0x24>)
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f298:	4b05      	ldr	r3, [pc, #20]	@ (800f2b0 <vTaskInternalSetTimeOutState+0x28>)
 800f29a:	681a      	ldr	r2, [r3, #0]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	605a      	str	r2, [r3, #4]
}
 800f2a0:	bf00      	nop
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr
 800f2ac:	20003244 	.word	0x20003244
 800f2b0:	20003230 	.word	0x20003230

0800f2b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b088      	sub	sp, #32
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d10b      	bne.n	800f2dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2c8:	f383 8811 	msr	BASEPRI, r3
 800f2cc:	f3bf 8f6f 	isb	sy
 800f2d0:	f3bf 8f4f 	dsb	sy
 800f2d4:	613b      	str	r3, [r7, #16]
}
 800f2d6:	bf00      	nop
 800f2d8:	bf00      	nop
 800f2da:	e7fd      	b.n	800f2d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d10b      	bne.n	800f2fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2e6:	f383 8811 	msr	BASEPRI, r3
 800f2ea:	f3bf 8f6f 	isb	sy
 800f2ee:	f3bf 8f4f 	dsb	sy
 800f2f2:	60fb      	str	r3, [r7, #12]
}
 800f2f4:	bf00      	nop
 800f2f6:	bf00      	nop
 800f2f8:	e7fd      	b.n	800f2f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f2fa:	f000 ff95 	bl	8010228 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f2fe:	4b1d      	ldr	r3, [pc, #116]	@ (800f374 <xTaskCheckForTimeOut+0xc0>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	69ba      	ldr	r2, [r7, #24]
 800f30a:	1ad3      	subs	r3, r2, r3
 800f30c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f316:	d102      	bne.n	800f31e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f318:	2300      	movs	r3, #0
 800f31a:	61fb      	str	r3, [r7, #28]
 800f31c:	e023      	b.n	800f366 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	4b15      	ldr	r3, [pc, #84]	@ (800f378 <xTaskCheckForTimeOut+0xc4>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	429a      	cmp	r2, r3
 800f328:	d007      	beq.n	800f33a <xTaskCheckForTimeOut+0x86>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	69ba      	ldr	r2, [r7, #24]
 800f330:	429a      	cmp	r2, r3
 800f332:	d302      	bcc.n	800f33a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f334:	2301      	movs	r3, #1
 800f336:	61fb      	str	r3, [r7, #28]
 800f338:	e015      	b.n	800f366 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	697a      	ldr	r2, [r7, #20]
 800f340:	429a      	cmp	r2, r3
 800f342:	d20b      	bcs.n	800f35c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	1ad2      	subs	r2, r2, r3
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7ff ff99 	bl	800f288 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f356:	2300      	movs	r3, #0
 800f358:	61fb      	str	r3, [r7, #28]
 800f35a:	e004      	b.n	800f366 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	2200      	movs	r2, #0
 800f360:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f362:	2301      	movs	r3, #1
 800f364:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f366:	f000 ff91 	bl	801028c <vPortExitCritical>

	return xReturn;
 800f36a:	69fb      	ldr	r3, [r7, #28]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3720      	adds	r7, #32
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	20003230 	.word	0x20003230
 800f378:	20003244 	.word	0x20003244

0800f37c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f37c:	b480      	push	{r7}
 800f37e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f380:	4b03      	ldr	r3, [pc, #12]	@ (800f390 <vTaskMissedYield+0x14>)
 800f382:	2201      	movs	r2, #1
 800f384:	601a      	str	r2, [r3, #0]
}
 800f386:	bf00      	nop
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr
 800f390:	20003240 	.word	0x20003240

0800f394 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f39c:	f000 f852 	bl	800f444 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f3a0:	4b06      	ldr	r3, [pc, #24]	@ (800f3bc <prvIdleTask+0x28>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d9f9      	bls.n	800f39c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f3a8:	4b05      	ldr	r3, [pc, #20]	@ (800f3c0 <prvIdleTask+0x2c>)
 800f3aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3ae:	601a      	str	r2, [r3, #0]
 800f3b0:	f3bf 8f4f 	dsb	sy
 800f3b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f3b8:	e7f0      	b.n	800f39c <prvIdleTask+0x8>
 800f3ba:	bf00      	nop
 800f3bc:	20002d5c 	.word	0x20002d5c
 800f3c0:	e000ed04 	.word	0xe000ed04

0800f3c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	607b      	str	r3, [r7, #4]
 800f3ce:	e00c      	b.n	800f3ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	009b      	lsls	r3, r3, #2
 800f3d6:	4413      	add	r3, r2
 800f3d8:	009b      	lsls	r3, r3, #2
 800f3da:	4a12      	ldr	r2, [pc, #72]	@ (800f424 <prvInitialiseTaskLists+0x60>)
 800f3dc:	4413      	add	r3, r2
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fe fa56 	bl	800d890 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	607b      	str	r3, [r7, #4]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2b37      	cmp	r3, #55	@ 0x37
 800f3ee:	d9ef      	bls.n	800f3d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f3f0:	480d      	ldr	r0, [pc, #52]	@ (800f428 <prvInitialiseTaskLists+0x64>)
 800f3f2:	f7fe fa4d 	bl	800d890 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f3f6:	480d      	ldr	r0, [pc, #52]	@ (800f42c <prvInitialiseTaskLists+0x68>)
 800f3f8:	f7fe fa4a 	bl	800d890 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f3fc:	480c      	ldr	r0, [pc, #48]	@ (800f430 <prvInitialiseTaskLists+0x6c>)
 800f3fe:	f7fe fa47 	bl	800d890 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f402:	480c      	ldr	r0, [pc, #48]	@ (800f434 <prvInitialiseTaskLists+0x70>)
 800f404:	f7fe fa44 	bl	800d890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f408:	480b      	ldr	r0, [pc, #44]	@ (800f438 <prvInitialiseTaskLists+0x74>)
 800f40a:	f7fe fa41 	bl	800d890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f40e:	4b0b      	ldr	r3, [pc, #44]	@ (800f43c <prvInitialiseTaskLists+0x78>)
 800f410:	4a05      	ldr	r2, [pc, #20]	@ (800f428 <prvInitialiseTaskLists+0x64>)
 800f412:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f414:	4b0a      	ldr	r3, [pc, #40]	@ (800f440 <prvInitialiseTaskLists+0x7c>)
 800f416:	4a05      	ldr	r2, [pc, #20]	@ (800f42c <prvInitialiseTaskLists+0x68>)
 800f418:	601a      	str	r2, [r3, #0]
}
 800f41a:	bf00      	nop
 800f41c:	3708      	adds	r7, #8
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	20002d5c 	.word	0x20002d5c
 800f428:	200031bc 	.word	0x200031bc
 800f42c:	200031d0 	.word	0x200031d0
 800f430:	200031ec 	.word	0x200031ec
 800f434:	20003200 	.word	0x20003200
 800f438:	20003218 	.word	0x20003218
 800f43c:	200031e4 	.word	0x200031e4
 800f440:	200031e8 	.word	0x200031e8

0800f444 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f44a:	e019      	b.n	800f480 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f44c:	f000 feec 	bl	8010228 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f450:	4b10      	ldr	r3, [pc, #64]	@ (800f494 <prvCheckTasksWaitingTermination+0x50>)
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	68db      	ldr	r3, [r3, #12]
 800f456:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	3304      	adds	r3, #4
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7fe faa1 	bl	800d9a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f462:	4b0d      	ldr	r3, [pc, #52]	@ (800f498 <prvCheckTasksWaitingTermination+0x54>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	3b01      	subs	r3, #1
 800f468:	4a0b      	ldr	r2, [pc, #44]	@ (800f498 <prvCheckTasksWaitingTermination+0x54>)
 800f46a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f46c:	4b0b      	ldr	r3, [pc, #44]	@ (800f49c <prvCheckTasksWaitingTermination+0x58>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	3b01      	subs	r3, #1
 800f472:	4a0a      	ldr	r2, [pc, #40]	@ (800f49c <prvCheckTasksWaitingTermination+0x58>)
 800f474:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f476:	f000 ff09 	bl	801028c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 f810 	bl	800f4a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f480:	4b06      	ldr	r3, [pc, #24]	@ (800f49c <prvCheckTasksWaitingTermination+0x58>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d1e1      	bne.n	800f44c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f488:	bf00      	nop
 800f48a:	bf00      	nop
 800f48c:	3708      	adds	r7, #8
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	20003200 	.word	0x20003200
 800f498:	2000322c 	.word	0x2000322c
 800f49c:	20003214 	.word	0x20003214

0800f4a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b084      	sub	sp, #16
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	3354      	adds	r3, #84	@ 0x54
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f002 f885 	bl	80115bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d108      	bne.n	800f4ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f001 f8a1 	bl	8010608 <vPortFree>
				vPortFree( pxTCB );
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f001 f89e 	bl	8010608 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f4cc:	e019      	b.n	800f502 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d103      	bne.n	800f4e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f001 f895 	bl	8010608 <vPortFree>
	}
 800f4de:	e010      	b.n	800f502 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f4e6:	2b02      	cmp	r3, #2
 800f4e8:	d00b      	beq.n	800f502 <prvDeleteTCB+0x62>
	__asm volatile
 800f4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ee:	f383 8811 	msr	BASEPRI, r3
 800f4f2:	f3bf 8f6f 	isb	sy
 800f4f6:	f3bf 8f4f 	dsb	sy
 800f4fa:	60fb      	str	r3, [r7, #12]
}
 800f4fc:	bf00      	nop
 800f4fe:	bf00      	nop
 800f500:	e7fd      	b.n	800f4fe <prvDeleteTCB+0x5e>
	}
 800f502:	bf00      	nop
 800f504:	3710      	adds	r7, #16
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
	...

0800f50c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f50c:	b480      	push	{r7}
 800f50e:	b083      	sub	sp, #12
 800f510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f512:	4b0c      	ldr	r3, [pc, #48]	@ (800f544 <prvResetNextTaskUnblockTime+0x38>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d104      	bne.n	800f526 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f51c:	4b0a      	ldr	r3, [pc, #40]	@ (800f548 <prvResetNextTaskUnblockTime+0x3c>)
 800f51e:	f04f 32ff 	mov.w	r2, #4294967295
 800f522:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f524:	e008      	b.n	800f538 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f526:	4b07      	ldr	r3, [pc, #28]	@ (800f544 <prvResetNextTaskUnblockTime+0x38>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	4a04      	ldr	r2, [pc, #16]	@ (800f548 <prvResetNextTaskUnblockTime+0x3c>)
 800f536:	6013      	str	r3, [r2, #0]
}
 800f538:	bf00      	nop
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr
 800f544:	200031e4 	.word	0x200031e4
 800f548:	2000324c 	.word	0x2000324c

0800f54c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f54c:	b480      	push	{r7}
 800f54e:	b083      	sub	sp, #12
 800f550:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f552:	4b0b      	ldr	r3, [pc, #44]	@ (800f580 <xTaskGetSchedulerState+0x34>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d102      	bne.n	800f560 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f55a:	2301      	movs	r3, #1
 800f55c:	607b      	str	r3, [r7, #4]
 800f55e:	e008      	b.n	800f572 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f560:	4b08      	ldr	r3, [pc, #32]	@ (800f584 <xTaskGetSchedulerState+0x38>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d102      	bne.n	800f56e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f568:	2302      	movs	r3, #2
 800f56a:	607b      	str	r3, [r7, #4]
 800f56c:	e001      	b.n	800f572 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f56e:	2300      	movs	r3, #0
 800f570:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f572:	687b      	ldr	r3, [r7, #4]
	}
 800f574:	4618      	mov	r0, r3
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr
 800f580:	20003238 	.word	0x20003238
 800f584:	20003254 	.word	0x20003254

0800f588 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f594:	2300      	movs	r3, #0
 800f596:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d051      	beq.n	800f642 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5a2:	4b2a      	ldr	r3, [pc, #168]	@ (800f64c <xTaskPriorityInherit+0xc4>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d241      	bcs.n	800f630 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	699b      	ldr	r3, [r3, #24]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	db06      	blt.n	800f5c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5b4:	4b25      	ldr	r3, [pc, #148]	@ (800f64c <xTaskPriorityInherit+0xc4>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	6959      	ldr	r1, [r3, #20]
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5ca:	4613      	mov	r3, r2
 800f5cc:	009b      	lsls	r3, r3, #2
 800f5ce:	4413      	add	r3, r2
 800f5d0:	009b      	lsls	r3, r3, #2
 800f5d2:	4a1f      	ldr	r2, [pc, #124]	@ (800f650 <xTaskPriorityInherit+0xc8>)
 800f5d4:	4413      	add	r3, r2
 800f5d6:	4299      	cmp	r1, r3
 800f5d8:	d122      	bne.n	800f620 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	3304      	adds	r3, #4
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7fe f9e0 	bl	800d9a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f5e4:	4b19      	ldr	r3, [pc, #100]	@ (800f64c <xTaskPriorityInherit+0xc4>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5f2:	4b18      	ldr	r3, [pc, #96]	@ (800f654 <xTaskPriorityInherit+0xcc>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d903      	bls.n	800f602 <xTaskPriorityInherit+0x7a>
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5fe:	4a15      	ldr	r2, [pc, #84]	@ (800f654 <xTaskPriorityInherit+0xcc>)
 800f600:	6013      	str	r3, [r2, #0]
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f606:	4613      	mov	r3, r2
 800f608:	009b      	lsls	r3, r3, #2
 800f60a:	4413      	add	r3, r2
 800f60c:	009b      	lsls	r3, r3, #2
 800f60e:	4a10      	ldr	r2, [pc, #64]	@ (800f650 <xTaskPriorityInherit+0xc8>)
 800f610:	441a      	add	r2, r3
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	3304      	adds	r3, #4
 800f616:	4619      	mov	r1, r3
 800f618:	4610      	mov	r0, r2
 800f61a:	f7fe f966 	bl	800d8ea <vListInsertEnd>
 800f61e:	e004      	b.n	800f62a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f620:	4b0a      	ldr	r3, [pc, #40]	@ (800f64c <xTaskPriorityInherit+0xc4>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f62a:	2301      	movs	r3, #1
 800f62c:	60fb      	str	r3, [r7, #12]
 800f62e:	e008      	b.n	800f642 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f634:	4b05      	ldr	r3, [pc, #20]	@ (800f64c <xTaskPriorityInherit+0xc4>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d201      	bcs.n	800f642 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f63e:	2301      	movs	r3, #1
 800f640:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f642:	68fb      	ldr	r3, [r7, #12]
	}
 800f644:	4618      	mov	r0, r3
 800f646:	3710      	adds	r7, #16
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	20002d58 	.word	0x20002d58
 800f650:	20002d5c 	.word	0x20002d5c
 800f654:	20003234 	.word	0x20003234

0800f658 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b086      	sub	sp, #24
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f664:	2300      	movs	r3, #0
 800f666:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d058      	beq.n	800f720 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f66e:	4b2f      	ldr	r3, [pc, #188]	@ (800f72c <xTaskPriorityDisinherit+0xd4>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	693a      	ldr	r2, [r7, #16]
 800f674:	429a      	cmp	r2, r3
 800f676:	d00b      	beq.n	800f690 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f67c:	f383 8811 	msr	BASEPRI, r3
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	60fb      	str	r3, [r7, #12]
}
 800f68a:	bf00      	nop
 800f68c:	bf00      	nop
 800f68e:	e7fd      	b.n	800f68c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f694:	2b00      	cmp	r3, #0
 800f696:	d10b      	bne.n	800f6b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f69c:	f383 8811 	msr	BASEPRI, r3
 800f6a0:	f3bf 8f6f 	isb	sy
 800f6a4:	f3bf 8f4f 	dsb	sy
 800f6a8:	60bb      	str	r3, [r7, #8]
}
 800f6aa:	bf00      	nop
 800f6ac:	bf00      	nop
 800f6ae:	e7fd      	b.n	800f6ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6b4:	1e5a      	subs	r2, r3, #1
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d02c      	beq.n	800f720 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d128      	bne.n	800f720 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	3304      	adds	r3, #4
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7fe f966 	bl	800d9a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6f0:	4b0f      	ldr	r3, [pc, #60]	@ (800f730 <xTaskPriorityDisinherit+0xd8>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d903      	bls.n	800f700 <xTaskPriorityDisinherit+0xa8>
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6fc:	4a0c      	ldr	r2, [pc, #48]	@ (800f730 <xTaskPriorityDisinherit+0xd8>)
 800f6fe:	6013      	str	r3, [r2, #0]
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f704:	4613      	mov	r3, r2
 800f706:	009b      	lsls	r3, r3, #2
 800f708:	4413      	add	r3, r2
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	4a09      	ldr	r2, [pc, #36]	@ (800f734 <xTaskPriorityDisinherit+0xdc>)
 800f70e:	441a      	add	r2, r3
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	3304      	adds	r3, #4
 800f714:	4619      	mov	r1, r3
 800f716:	4610      	mov	r0, r2
 800f718:	f7fe f8e7 	bl	800d8ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f71c:	2301      	movs	r3, #1
 800f71e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f720:	697b      	ldr	r3, [r7, #20]
	}
 800f722:	4618      	mov	r0, r3
 800f724:	3718      	adds	r7, #24
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
 800f72a:	bf00      	nop
 800f72c:	20002d58 	.word	0x20002d58
 800f730:	20003234 	.word	0x20003234
 800f734:	20002d5c 	.word	0x20002d5c

0800f738 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b088      	sub	sp, #32
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f746:	2301      	movs	r3, #1
 800f748:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d06c      	beq.n	800f82a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f750:	69bb      	ldr	r3, [r7, #24]
 800f752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f754:	2b00      	cmp	r3, #0
 800f756:	d10b      	bne.n	800f770 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f75c:	f383 8811 	msr	BASEPRI, r3
 800f760:	f3bf 8f6f 	isb	sy
 800f764:	f3bf 8f4f 	dsb	sy
 800f768:	60fb      	str	r3, [r7, #12]
}
 800f76a:	bf00      	nop
 800f76c:	bf00      	nop
 800f76e:	e7fd      	b.n	800f76c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f770:	69bb      	ldr	r3, [r7, #24]
 800f772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f774:	683a      	ldr	r2, [r7, #0]
 800f776:	429a      	cmp	r2, r3
 800f778:	d902      	bls.n	800f780 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	61fb      	str	r3, [r7, #28]
 800f77e:	e002      	b.n	800f786 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f784:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f78a:	69fa      	ldr	r2, [r7, #28]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d04c      	beq.n	800f82a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f794:	697a      	ldr	r2, [r7, #20]
 800f796:	429a      	cmp	r2, r3
 800f798:	d147      	bne.n	800f82a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f79a:	4b26      	ldr	r3, [pc, #152]	@ (800f834 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	69ba      	ldr	r2, [r7, #24]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d10b      	bne.n	800f7bc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a8:	f383 8811 	msr	BASEPRI, r3
 800f7ac:	f3bf 8f6f 	isb	sy
 800f7b0:	f3bf 8f4f 	dsb	sy
 800f7b4:	60bb      	str	r3, [r7, #8]
}
 800f7b6:	bf00      	nop
 800f7b8:	bf00      	nop
 800f7ba:	e7fd      	b.n	800f7b8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f7bc:	69bb      	ldr	r3, [r7, #24]
 800f7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	69fa      	ldr	r2, [r7, #28]
 800f7c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	699b      	ldr	r3, [r3, #24]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	db04      	blt.n	800f7da <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f7d6:	69bb      	ldr	r3, [r7, #24]
 800f7d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f7da:	69bb      	ldr	r3, [r7, #24]
 800f7dc:	6959      	ldr	r1, [r3, #20]
 800f7de:	693a      	ldr	r2, [r7, #16]
 800f7e0:	4613      	mov	r3, r2
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	4413      	add	r3, r2
 800f7e6:	009b      	lsls	r3, r3, #2
 800f7e8:	4a13      	ldr	r2, [pc, #76]	@ (800f838 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f7ea:	4413      	add	r3, r2
 800f7ec:	4299      	cmp	r1, r3
 800f7ee:	d11c      	bne.n	800f82a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7f0:	69bb      	ldr	r3, [r7, #24]
 800f7f2:	3304      	adds	r3, #4
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7fe f8d5 	bl	800d9a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f7fa:	69bb      	ldr	r3, [r7, #24]
 800f7fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7fe:	4b0f      	ldr	r3, [pc, #60]	@ (800f83c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	429a      	cmp	r2, r3
 800f804:	d903      	bls.n	800f80e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800f806:	69bb      	ldr	r3, [r7, #24]
 800f808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f80a:	4a0c      	ldr	r2, [pc, #48]	@ (800f83c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f80c:	6013      	str	r3, [r2, #0]
 800f80e:	69bb      	ldr	r3, [r7, #24]
 800f810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f812:	4613      	mov	r3, r2
 800f814:	009b      	lsls	r3, r3, #2
 800f816:	4413      	add	r3, r2
 800f818:	009b      	lsls	r3, r3, #2
 800f81a:	4a07      	ldr	r2, [pc, #28]	@ (800f838 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f81c:	441a      	add	r2, r3
 800f81e:	69bb      	ldr	r3, [r7, #24]
 800f820:	3304      	adds	r3, #4
 800f822:	4619      	mov	r1, r3
 800f824:	4610      	mov	r0, r2
 800f826:	f7fe f860 	bl	800d8ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f82a:	bf00      	nop
 800f82c:	3720      	adds	r7, #32
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	20002d58 	.word	0x20002d58
 800f838:	20002d5c 	.word	0x20002d5c
 800f83c:	20003234 	.word	0x20003234

0800f840 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f840:	b480      	push	{r7}
 800f842:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f844:	4b07      	ldr	r3, [pc, #28]	@ (800f864 <pvTaskIncrementMutexHeldCount+0x24>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d004      	beq.n	800f856 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f84c:	4b05      	ldr	r3, [pc, #20]	@ (800f864 <pvTaskIncrementMutexHeldCount+0x24>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f852:	3201      	adds	r2, #1
 800f854:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800f856:	4b03      	ldr	r3, [pc, #12]	@ (800f864 <pvTaskIncrementMutexHeldCount+0x24>)
 800f858:	681b      	ldr	r3, [r3, #0]
	}
 800f85a:	4618      	mov	r0, r3
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr
 800f864:	20002d58 	.word	0x20002d58

0800f868 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f872:	4b21      	ldr	r3, [pc, #132]	@ (800f8f8 <prvAddCurrentTaskToDelayedList+0x90>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f878:	4b20      	ldr	r3, [pc, #128]	@ (800f8fc <prvAddCurrentTaskToDelayedList+0x94>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	3304      	adds	r3, #4
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fe f890 	bl	800d9a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f88a:	d10a      	bne.n	800f8a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d007      	beq.n	800f8a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f892:	4b1a      	ldr	r3, [pc, #104]	@ (800f8fc <prvAddCurrentTaskToDelayedList+0x94>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	3304      	adds	r3, #4
 800f898:	4619      	mov	r1, r3
 800f89a:	4819      	ldr	r0, [pc, #100]	@ (800f900 <prvAddCurrentTaskToDelayedList+0x98>)
 800f89c:	f7fe f825 	bl	800d8ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f8a0:	e026      	b.n	800f8f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f8a2:	68fa      	ldr	r2, [r7, #12]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f8aa:	4b14      	ldr	r3, [pc, #80]	@ (800f8fc <prvAddCurrentTaskToDelayedList+0x94>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	68ba      	ldr	r2, [r7, #8]
 800f8b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f8b2:	68ba      	ldr	r2, [r7, #8]
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d209      	bcs.n	800f8ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8ba:	4b12      	ldr	r3, [pc, #72]	@ (800f904 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	4b0f      	ldr	r3, [pc, #60]	@ (800f8fc <prvAddCurrentTaskToDelayedList+0x94>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	3304      	adds	r3, #4
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	4610      	mov	r0, r2
 800f8c8:	f7fe f833 	bl	800d932 <vListInsert>
}
 800f8cc:	e010      	b.n	800f8f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f908 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f8d0:	681a      	ldr	r2, [r3, #0]
 800f8d2:	4b0a      	ldr	r3, [pc, #40]	@ (800f8fc <prvAddCurrentTaskToDelayedList+0x94>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	4619      	mov	r1, r3
 800f8da:	4610      	mov	r0, r2
 800f8dc:	f7fe f829 	bl	800d932 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f8e0:	4b0a      	ldr	r3, [pc, #40]	@ (800f90c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	68ba      	ldr	r2, [r7, #8]
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d202      	bcs.n	800f8f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f8ea:	4a08      	ldr	r2, [pc, #32]	@ (800f90c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	6013      	str	r3, [r2, #0]
}
 800f8f0:	bf00      	nop
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	20003230 	.word	0x20003230
 800f8fc:	20002d58 	.word	0x20002d58
 800f900:	20003218 	.word	0x20003218
 800f904:	200031e8 	.word	0x200031e8
 800f908:	200031e4 	.word	0x200031e4
 800f90c:	2000324c 	.word	0x2000324c

0800f910 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b08a      	sub	sp, #40	@ 0x28
 800f914:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f916:	2300      	movs	r3, #0
 800f918:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f91a:	f000 fb13 	bl	800ff44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f91e:	4b1d      	ldr	r3, [pc, #116]	@ (800f994 <xTimerCreateTimerTask+0x84>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d021      	beq.n	800f96a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f926:	2300      	movs	r3, #0
 800f928:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f92a:	2300      	movs	r3, #0
 800f92c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f92e:	1d3a      	adds	r2, r7, #4
 800f930:	f107 0108 	add.w	r1, r7, #8
 800f934:	f107 030c 	add.w	r3, r7, #12
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fd ff8f 	bl	800d85c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f93e:	6879      	ldr	r1, [r7, #4]
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	68fa      	ldr	r2, [r7, #12]
 800f944:	9202      	str	r2, [sp, #8]
 800f946:	9301      	str	r3, [sp, #4]
 800f948:	2302      	movs	r3, #2
 800f94a:	9300      	str	r3, [sp, #0]
 800f94c:	2300      	movs	r3, #0
 800f94e:	460a      	mov	r2, r1
 800f950:	4911      	ldr	r1, [pc, #68]	@ (800f998 <xTimerCreateTimerTask+0x88>)
 800f952:	4812      	ldr	r0, [pc, #72]	@ (800f99c <xTimerCreateTimerTask+0x8c>)
 800f954:	f7fe feae 	bl	800e6b4 <xTaskCreateStatic>
 800f958:	4603      	mov	r3, r0
 800f95a:	4a11      	ldr	r2, [pc, #68]	@ (800f9a0 <xTimerCreateTimerTask+0x90>)
 800f95c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f95e:	4b10      	ldr	r3, [pc, #64]	@ (800f9a0 <xTimerCreateTimerTask+0x90>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d001      	beq.n	800f96a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f966:	2301      	movs	r3, #1
 800f968:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d10b      	bne.n	800f988 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f974:	f383 8811 	msr	BASEPRI, r3
 800f978:	f3bf 8f6f 	isb	sy
 800f97c:	f3bf 8f4f 	dsb	sy
 800f980:	613b      	str	r3, [r7, #16]
}
 800f982:	bf00      	nop
 800f984:	bf00      	nop
 800f986:	e7fd      	b.n	800f984 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f988:	697b      	ldr	r3, [r7, #20]
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3718      	adds	r7, #24
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	20003288 	.word	0x20003288
 800f998:	08012a24 	.word	0x08012a24
 800f99c:	0800fadd 	.word	0x0800fadd
 800f9a0:	2000328c 	.word	0x2000328c

0800f9a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b08a      	sub	sp, #40	@ 0x28
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	607a      	str	r2, [r7, #4]
 800f9b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d10b      	bne.n	800f9d4 <xTimerGenericCommand+0x30>
	__asm volatile
 800f9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9c0:	f383 8811 	msr	BASEPRI, r3
 800f9c4:	f3bf 8f6f 	isb	sy
 800f9c8:	f3bf 8f4f 	dsb	sy
 800f9cc:	623b      	str	r3, [r7, #32]
}
 800f9ce:	bf00      	nop
 800f9d0:	bf00      	nop
 800f9d2:	e7fd      	b.n	800f9d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f9d4:	4b19      	ldr	r3, [pc, #100]	@ (800fa3c <xTimerGenericCommand+0x98>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d02a      	beq.n	800fa32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	2b05      	cmp	r3, #5
 800f9ec:	dc18      	bgt.n	800fa20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f9ee:	f7ff fdad 	bl	800f54c <xTaskGetSchedulerState>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b02      	cmp	r3, #2
 800f9f6:	d109      	bne.n	800fa0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f9f8:	4b10      	ldr	r3, [pc, #64]	@ (800fa3c <xTimerGenericCommand+0x98>)
 800f9fa:	6818      	ldr	r0, [r3, #0]
 800f9fc:	f107 0110 	add.w	r1, r7, #16
 800fa00:	2300      	movs	r3, #0
 800fa02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa04:	f7fe f93e 	bl	800dc84 <xQueueGenericSend>
 800fa08:	6278      	str	r0, [r7, #36]	@ 0x24
 800fa0a:	e012      	b.n	800fa32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fa0c:	4b0b      	ldr	r3, [pc, #44]	@ (800fa3c <xTimerGenericCommand+0x98>)
 800fa0e:	6818      	ldr	r0, [r3, #0]
 800fa10:	f107 0110 	add.w	r1, r7, #16
 800fa14:	2300      	movs	r3, #0
 800fa16:	2200      	movs	r2, #0
 800fa18:	f7fe f934 	bl	800dc84 <xQueueGenericSend>
 800fa1c:	6278      	str	r0, [r7, #36]	@ 0x24
 800fa1e:	e008      	b.n	800fa32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa20:	4b06      	ldr	r3, [pc, #24]	@ (800fa3c <xTimerGenericCommand+0x98>)
 800fa22:	6818      	ldr	r0, [r3, #0]
 800fa24:	f107 0110 	add.w	r1, r7, #16
 800fa28:	2300      	movs	r3, #0
 800fa2a:	683a      	ldr	r2, [r7, #0]
 800fa2c:	f7fe fa2c 	bl	800de88 <xQueueGenericSendFromISR>
 800fa30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3728      	adds	r7, #40	@ 0x28
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	20003288 	.word	0x20003288

0800fa40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b088      	sub	sp, #32
 800fa44:	af02      	add	r7, sp, #8
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa4a:	4b23      	ldr	r3, [pc, #140]	@ (800fad8 <prvProcessExpiredTimer+0x98>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	3304      	adds	r3, #4
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7fd ffa3 	bl	800d9a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa64:	f003 0304 	and.w	r3, r3, #4
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d023      	beq.n	800fab4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	699a      	ldr	r2, [r3, #24]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	18d1      	adds	r1, r2, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	683a      	ldr	r2, [r7, #0]
 800fa78:	6978      	ldr	r0, [r7, #20]
 800fa7a:	f000 f8d5 	bl	800fc28 <prvInsertTimerInActiveList>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d020      	beq.n	800fac6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa84:	2300      	movs	r3, #0
 800fa86:	9300      	str	r3, [sp, #0]
 800fa88:	2300      	movs	r3, #0
 800fa8a:	687a      	ldr	r2, [r7, #4]
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	6978      	ldr	r0, [r7, #20]
 800fa90:	f7ff ff88 	bl	800f9a4 <xTimerGenericCommand>
 800fa94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fa96:	693b      	ldr	r3, [r7, #16]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d114      	bne.n	800fac6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800fa9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faa0:	f383 8811 	msr	BASEPRI, r3
 800faa4:	f3bf 8f6f 	isb	sy
 800faa8:	f3bf 8f4f 	dsb	sy
 800faac:	60fb      	str	r3, [r7, #12]
}
 800faae:	bf00      	nop
 800fab0:	bf00      	nop
 800fab2:	e7fd      	b.n	800fab0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800faba:	f023 0301 	bic.w	r3, r3, #1
 800fabe:	b2da      	uxtb	r2, r3
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	6a1b      	ldr	r3, [r3, #32]
 800faca:	6978      	ldr	r0, [r7, #20]
 800facc:	4798      	blx	r3
}
 800face:	bf00      	nop
 800fad0:	3718      	adds	r7, #24
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	20003280 	.word	0x20003280

0800fadc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fae4:	f107 0308 	add.w	r3, r7, #8
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 f859 	bl	800fba0 <prvGetNextExpireTime>
 800faee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	4619      	mov	r1, r3
 800faf4:	68f8      	ldr	r0, [r7, #12]
 800faf6:	f000 f805 	bl	800fb04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fafa:	f000 f8d7 	bl	800fcac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fafe:	bf00      	nop
 800fb00:	e7f0      	b.n	800fae4 <prvTimerTask+0x8>
	...

0800fb04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fb0e:	f7ff f929 	bl	800ed64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb12:	f107 0308 	add.w	r3, r7, #8
 800fb16:	4618      	mov	r0, r3
 800fb18:	f000 f866 	bl	800fbe8 <prvSampleTimeNow>
 800fb1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d130      	bne.n	800fb86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d10a      	bne.n	800fb40 <prvProcessTimerOrBlockTask+0x3c>
 800fb2a:	687a      	ldr	r2, [r7, #4]
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d806      	bhi.n	800fb40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fb32:	f7ff f925 	bl	800ed80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fb36:	68f9      	ldr	r1, [r7, #12]
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f7ff ff81 	bl	800fa40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fb3e:	e024      	b.n	800fb8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d008      	beq.n	800fb58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fb46:	4b13      	ldr	r3, [pc, #76]	@ (800fb94 <prvProcessTimerOrBlockTask+0x90>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d101      	bne.n	800fb54 <prvProcessTimerOrBlockTask+0x50>
 800fb50:	2301      	movs	r3, #1
 800fb52:	e000      	b.n	800fb56 <prvProcessTimerOrBlockTask+0x52>
 800fb54:	2300      	movs	r3, #0
 800fb56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fb58:	4b0f      	ldr	r3, [pc, #60]	@ (800fb98 <prvProcessTimerOrBlockTask+0x94>)
 800fb5a:	6818      	ldr	r0, [r3, #0]
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	1ad3      	subs	r3, r2, r3
 800fb62:	683a      	ldr	r2, [r7, #0]
 800fb64:	4619      	mov	r1, r3
 800fb66:	f7fe fd71 	bl	800e64c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fb6a:	f7ff f909 	bl	800ed80 <xTaskResumeAll>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d10a      	bne.n	800fb8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fb74:	4b09      	ldr	r3, [pc, #36]	@ (800fb9c <prvProcessTimerOrBlockTask+0x98>)
 800fb76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb7a:	601a      	str	r2, [r3, #0]
 800fb7c:	f3bf 8f4f 	dsb	sy
 800fb80:	f3bf 8f6f 	isb	sy
}
 800fb84:	e001      	b.n	800fb8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fb86:	f7ff f8fb 	bl	800ed80 <xTaskResumeAll>
}
 800fb8a:	bf00      	nop
 800fb8c:	3710      	adds	r7, #16
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	20003284 	.word	0x20003284
 800fb98:	20003288 	.word	0x20003288
 800fb9c:	e000ed04 	.word	0xe000ed04

0800fba0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fba0:	b480      	push	{r7}
 800fba2:	b085      	sub	sp, #20
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fba8:	4b0e      	ldr	r3, [pc, #56]	@ (800fbe4 <prvGetNextExpireTime+0x44>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d101      	bne.n	800fbb6 <prvGetNextExpireTime+0x16>
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	e000      	b.n	800fbb8 <prvGetNextExpireTime+0x18>
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d105      	bne.n	800fbd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fbc4:	4b07      	ldr	r3, [pc, #28]	@ (800fbe4 <prvGetNextExpireTime+0x44>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	68db      	ldr	r3, [r3, #12]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	60fb      	str	r3, [r7, #12]
 800fbce:	e001      	b.n	800fbd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3714      	adds	r7, #20
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	20003280 	.word	0x20003280

0800fbe8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fbf0:	f7ff f964 	bl	800eebc <xTaskGetTickCount>
 800fbf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fbf6:	4b0b      	ldr	r3, [pc, #44]	@ (800fc24 <prvSampleTimeNow+0x3c>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d205      	bcs.n	800fc0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fc00:	f000 f93a 	bl	800fe78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2201      	movs	r2, #1
 800fc08:	601a      	str	r2, [r3, #0]
 800fc0a:	e002      	b.n	800fc12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fc12:	4a04      	ldr	r2, [pc, #16]	@ (800fc24 <prvSampleTimeNow+0x3c>)
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fc18:	68fb      	ldr	r3, [r7, #12]
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3710      	adds	r7, #16
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	20003290 	.word	0x20003290

0800fc28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b086      	sub	sp, #24
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	60f8      	str	r0, [r7, #12]
 800fc30:	60b9      	str	r1, [r7, #8]
 800fc32:	607a      	str	r2, [r7, #4]
 800fc34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fc36:	2300      	movs	r3, #0
 800fc38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	68ba      	ldr	r2, [r7, #8]
 800fc3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	68fa      	ldr	r2, [r7, #12]
 800fc44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fc46:	68ba      	ldr	r2, [r7, #8]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d812      	bhi.n	800fc74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	1ad2      	subs	r2, r2, r3
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	699b      	ldr	r3, [r3, #24]
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d302      	bcc.n	800fc62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	617b      	str	r3, [r7, #20]
 800fc60:	e01b      	b.n	800fc9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fc62:	4b10      	ldr	r3, [pc, #64]	@ (800fca4 <prvInsertTimerInActiveList+0x7c>)
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	3304      	adds	r3, #4
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	4610      	mov	r0, r2
 800fc6e:	f7fd fe60 	bl	800d932 <vListInsert>
 800fc72:	e012      	b.n	800fc9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d206      	bcs.n	800fc8a <prvInsertTimerInActiveList+0x62>
 800fc7c:	68ba      	ldr	r2, [r7, #8]
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d302      	bcc.n	800fc8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fc84:	2301      	movs	r3, #1
 800fc86:	617b      	str	r3, [r7, #20]
 800fc88:	e007      	b.n	800fc9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc8a:	4b07      	ldr	r3, [pc, #28]	@ (800fca8 <prvInsertTimerInActiveList+0x80>)
 800fc8c:	681a      	ldr	r2, [r3, #0]
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	3304      	adds	r3, #4
 800fc92:	4619      	mov	r1, r3
 800fc94:	4610      	mov	r0, r2
 800fc96:	f7fd fe4c 	bl	800d932 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fc9a:	697b      	ldr	r3, [r7, #20]
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3718      	adds	r7, #24
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}
 800fca4:	20003284 	.word	0x20003284
 800fca8:	20003280 	.word	0x20003280

0800fcac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b08e      	sub	sp, #56	@ 0x38
 800fcb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fcb2:	e0ce      	b.n	800fe52 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	da19      	bge.n	800fcee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fcba:	1d3b      	adds	r3, r7, #4
 800fcbc:	3304      	adds	r3, #4
 800fcbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fcc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d10b      	bne.n	800fcde <prvProcessReceivedCommands+0x32>
	__asm volatile
 800fcc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcca:	f383 8811 	msr	BASEPRI, r3
 800fcce:	f3bf 8f6f 	isb	sy
 800fcd2:	f3bf 8f4f 	dsb	sy
 800fcd6:	61fb      	str	r3, [r7, #28]
}
 800fcd8:	bf00      	nop
 800fcda:	bf00      	nop
 800fcdc:	e7fd      	b.n	800fcda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fce4:	6850      	ldr	r0, [r2, #4]
 800fce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fce8:	6892      	ldr	r2, [r2, #8]
 800fcea:	4611      	mov	r1, r2
 800fcec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	f2c0 80ae 	blt.w	800fe52 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fcfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcfc:	695b      	ldr	r3, [r3, #20]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d004      	beq.n	800fd0c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd04:	3304      	adds	r3, #4
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fd fe4c 	bl	800d9a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd0c:	463b      	mov	r3, r7
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7ff ff6a 	bl	800fbe8 <prvSampleTimeNow>
 800fd14:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2b09      	cmp	r3, #9
 800fd1a:	f200 8097 	bhi.w	800fe4c <prvProcessReceivedCommands+0x1a0>
 800fd1e:	a201      	add	r2, pc, #4	@ (adr r2, 800fd24 <prvProcessReceivedCommands+0x78>)
 800fd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd24:	0800fd4d 	.word	0x0800fd4d
 800fd28:	0800fd4d 	.word	0x0800fd4d
 800fd2c:	0800fd4d 	.word	0x0800fd4d
 800fd30:	0800fdc3 	.word	0x0800fdc3
 800fd34:	0800fdd7 	.word	0x0800fdd7
 800fd38:	0800fe23 	.word	0x0800fe23
 800fd3c:	0800fd4d 	.word	0x0800fd4d
 800fd40:	0800fd4d 	.word	0x0800fd4d
 800fd44:	0800fdc3 	.word	0x0800fdc3
 800fd48:	0800fdd7 	.word	0x0800fdd7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd52:	f043 0301 	orr.w	r3, r3, #1
 800fd56:	b2da      	uxtb	r2, r3
 800fd58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fd5e:	68ba      	ldr	r2, [r7, #8]
 800fd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd62:	699b      	ldr	r3, [r3, #24]
 800fd64:	18d1      	adds	r1, r2, r3
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd6c:	f7ff ff5c 	bl	800fc28 <prvInsertTimerInActiveList>
 800fd70:	4603      	mov	r3, r0
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d06c      	beq.n	800fe50 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd78:	6a1b      	ldr	r3, [r3, #32]
 800fd7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd84:	f003 0304 	and.w	r3, r3, #4
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d061      	beq.n	800fe50 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fd8c:	68ba      	ldr	r2, [r7, #8]
 800fd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd90:	699b      	ldr	r3, [r3, #24]
 800fd92:	441a      	add	r2, r3
 800fd94:	2300      	movs	r3, #0
 800fd96:	9300      	str	r3, [sp, #0]
 800fd98:	2300      	movs	r3, #0
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd9e:	f7ff fe01 	bl	800f9a4 <xTimerGenericCommand>
 800fda2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fda4:	6a3b      	ldr	r3, [r7, #32]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d152      	bne.n	800fe50 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800fdaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdae:	f383 8811 	msr	BASEPRI, r3
 800fdb2:	f3bf 8f6f 	isb	sy
 800fdb6:	f3bf 8f4f 	dsb	sy
 800fdba:	61bb      	str	r3, [r7, #24]
}
 800fdbc:	bf00      	nop
 800fdbe:	bf00      	nop
 800fdc0:	e7fd      	b.n	800fdbe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fdc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fdc8:	f023 0301 	bic.w	r3, r3, #1
 800fdcc:	b2da      	uxtb	r2, r3
 800fdce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fdd4:	e03d      	b.n	800fe52 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fdd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fddc:	f043 0301 	orr.w	r3, r3, #1
 800fde0:	b2da      	uxtb	r2, r3
 800fde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fde4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fde8:	68ba      	ldr	r2, [r7, #8]
 800fdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fdee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf0:	699b      	ldr	r3, [r3, #24]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d10b      	bne.n	800fe0e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800fdf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdfa:	f383 8811 	msr	BASEPRI, r3
 800fdfe:	f3bf 8f6f 	isb	sy
 800fe02:	f3bf 8f4f 	dsb	sy
 800fe06:	617b      	str	r3, [r7, #20]
}
 800fe08:	bf00      	nop
 800fe0a:	bf00      	nop
 800fe0c:	e7fd      	b.n	800fe0a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fe0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe10:	699a      	ldr	r2, [r3, #24]
 800fe12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe14:	18d1      	adds	r1, r2, r3
 800fe16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe1c:	f7ff ff04 	bl	800fc28 <prvInsertTimerInActiveList>
					break;
 800fe20:	e017      	b.n	800fe52 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fe22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fe28:	f003 0302 	and.w	r3, r3, #2
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d103      	bne.n	800fe38 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800fe30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe32:	f000 fbe9 	bl	8010608 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fe36:	e00c      	b.n	800fe52 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fe3e:	f023 0301 	bic.w	r3, r3, #1
 800fe42:	b2da      	uxtb	r2, r3
 800fe44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fe4a:	e002      	b.n	800fe52 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800fe4c:	bf00      	nop
 800fe4e:	e000      	b.n	800fe52 <prvProcessReceivedCommands+0x1a6>
					break;
 800fe50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fe52:	4b08      	ldr	r3, [pc, #32]	@ (800fe74 <prvProcessReceivedCommands+0x1c8>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	1d39      	adds	r1, r7, #4
 800fe58:	2200      	movs	r2, #0
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7fe f8b2 	bl	800dfc4 <xQueueReceive>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f47f af26 	bne.w	800fcb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fe68:	bf00      	nop
 800fe6a:	bf00      	nop
 800fe6c:	3730      	adds	r7, #48	@ 0x30
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	20003288 	.word	0x20003288

0800fe78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b088      	sub	sp, #32
 800fe7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe7e:	e049      	b.n	800ff14 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe80:	4b2e      	ldr	r3, [pc, #184]	@ (800ff3c <prvSwitchTimerLists+0xc4>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	68db      	ldr	r3, [r3, #12]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe8a:	4b2c      	ldr	r3, [pc, #176]	@ (800ff3c <prvSwitchTimerLists+0xc4>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	68db      	ldr	r3, [r3, #12]
 800fe90:	68db      	ldr	r3, [r3, #12]
 800fe92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	3304      	adds	r3, #4
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7fd fd83 	bl	800d9a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	6a1b      	ldr	r3, [r3, #32]
 800fea2:	68f8      	ldr	r0, [r7, #12]
 800fea4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800feac:	f003 0304 	and.w	r3, r3, #4
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d02f      	beq.n	800ff14 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	699b      	ldr	r3, [r3, #24]
 800feb8:	693a      	ldr	r2, [r7, #16]
 800feba:	4413      	add	r3, r2
 800febc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800febe:	68ba      	ldr	r2, [r7, #8]
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d90e      	bls.n	800fee4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	68ba      	ldr	r2, [r7, #8]
 800feca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fed2:	4b1a      	ldr	r3, [pc, #104]	@ (800ff3c <prvSwitchTimerLists+0xc4>)
 800fed4:	681a      	ldr	r2, [r3, #0]
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	3304      	adds	r3, #4
 800feda:	4619      	mov	r1, r3
 800fedc:	4610      	mov	r0, r2
 800fede:	f7fd fd28 	bl	800d932 <vListInsert>
 800fee2:	e017      	b.n	800ff14 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fee4:	2300      	movs	r3, #0
 800fee6:	9300      	str	r3, [sp, #0]
 800fee8:	2300      	movs	r3, #0
 800feea:	693a      	ldr	r2, [r7, #16]
 800feec:	2100      	movs	r1, #0
 800feee:	68f8      	ldr	r0, [r7, #12]
 800fef0:	f7ff fd58 	bl	800f9a4 <xTimerGenericCommand>
 800fef4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d10b      	bne.n	800ff14 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fefc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff00:	f383 8811 	msr	BASEPRI, r3
 800ff04:	f3bf 8f6f 	isb	sy
 800ff08:	f3bf 8f4f 	dsb	sy
 800ff0c:	603b      	str	r3, [r7, #0]
}
 800ff0e:	bf00      	nop
 800ff10:	bf00      	nop
 800ff12:	e7fd      	b.n	800ff10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff14:	4b09      	ldr	r3, [pc, #36]	@ (800ff3c <prvSwitchTimerLists+0xc4>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d1b0      	bne.n	800fe80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ff1e:	4b07      	ldr	r3, [pc, #28]	@ (800ff3c <prvSwitchTimerLists+0xc4>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ff24:	4b06      	ldr	r3, [pc, #24]	@ (800ff40 <prvSwitchTimerLists+0xc8>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	4a04      	ldr	r2, [pc, #16]	@ (800ff3c <prvSwitchTimerLists+0xc4>)
 800ff2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ff2c:	4a04      	ldr	r2, [pc, #16]	@ (800ff40 <prvSwitchTimerLists+0xc8>)
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	6013      	str	r3, [r2, #0]
}
 800ff32:	bf00      	nop
 800ff34:	3718      	adds	r7, #24
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}
 800ff3a:	bf00      	nop
 800ff3c:	20003280 	.word	0x20003280
 800ff40:	20003284 	.word	0x20003284

0800ff44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ff4a:	f000 f96d 	bl	8010228 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ff4e:	4b15      	ldr	r3, [pc, #84]	@ (800ffa4 <prvCheckForValidListAndQueue+0x60>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d120      	bne.n	800ff98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ff56:	4814      	ldr	r0, [pc, #80]	@ (800ffa8 <prvCheckForValidListAndQueue+0x64>)
 800ff58:	f7fd fc9a 	bl	800d890 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ff5c:	4813      	ldr	r0, [pc, #76]	@ (800ffac <prvCheckForValidListAndQueue+0x68>)
 800ff5e:	f7fd fc97 	bl	800d890 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ff62:	4b13      	ldr	r3, [pc, #76]	@ (800ffb0 <prvCheckForValidListAndQueue+0x6c>)
 800ff64:	4a10      	ldr	r2, [pc, #64]	@ (800ffa8 <prvCheckForValidListAndQueue+0x64>)
 800ff66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ff68:	4b12      	ldr	r3, [pc, #72]	@ (800ffb4 <prvCheckForValidListAndQueue+0x70>)
 800ff6a:	4a10      	ldr	r2, [pc, #64]	@ (800ffac <prvCheckForValidListAndQueue+0x68>)
 800ff6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ff6e:	2300      	movs	r3, #0
 800ff70:	9300      	str	r3, [sp, #0]
 800ff72:	4b11      	ldr	r3, [pc, #68]	@ (800ffb8 <prvCheckForValidListAndQueue+0x74>)
 800ff74:	4a11      	ldr	r2, [pc, #68]	@ (800ffbc <prvCheckForValidListAndQueue+0x78>)
 800ff76:	2110      	movs	r1, #16
 800ff78:	200a      	movs	r0, #10
 800ff7a:	f7fd fda7 	bl	800dacc <xQueueGenericCreateStatic>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	4a08      	ldr	r2, [pc, #32]	@ (800ffa4 <prvCheckForValidListAndQueue+0x60>)
 800ff82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ff84:	4b07      	ldr	r3, [pc, #28]	@ (800ffa4 <prvCheckForValidListAndQueue+0x60>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d005      	beq.n	800ff98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ff8c:	4b05      	ldr	r3, [pc, #20]	@ (800ffa4 <prvCheckForValidListAndQueue+0x60>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	490b      	ldr	r1, [pc, #44]	@ (800ffc0 <prvCheckForValidListAndQueue+0x7c>)
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fe fb30 	bl	800e5f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff98:	f000 f978 	bl	801028c <vPortExitCritical>
}
 800ff9c:	bf00      	nop
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	20003288 	.word	0x20003288
 800ffa8:	20003258 	.word	0x20003258
 800ffac:	2000326c 	.word	0x2000326c
 800ffb0:	20003280 	.word	0x20003280
 800ffb4:	20003284 	.word	0x20003284
 800ffb8:	20003334 	.word	0x20003334
 800ffbc:	20003294 	.word	0x20003294
 800ffc0:	08012a2c 	.word	0x08012a2c

0800ffc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b085      	sub	sp, #20
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	3b04      	subs	r3, #4
 800ffd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ffdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	3b04      	subs	r3, #4
 800ffe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	f023 0201 	bic.w	r2, r3, #1
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	3b04      	subs	r3, #4
 800fff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fff4:	4a0c      	ldr	r2, [pc, #48]	@ (8010028 <pxPortInitialiseStack+0x64>)
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	3b14      	subs	r3, #20
 800fffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	3b04      	subs	r3, #4
 801000a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f06f 0202 	mvn.w	r2, #2
 8010012:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	3b20      	subs	r3, #32
 8010018:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801001a:	68fb      	ldr	r3, [r7, #12]
}
 801001c:	4618      	mov	r0, r3
 801001e:	3714      	adds	r7, #20
 8010020:	46bd      	mov	sp, r7
 8010022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010026:	4770      	bx	lr
 8010028:	0801002d 	.word	0x0801002d

0801002c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801002c:	b480      	push	{r7}
 801002e:	b085      	sub	sp, #20
 8010030:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010032:	2300      	movs	r3, #0
 8010034:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010036:	4b13      	ldr	r3, [pc, #76]	@ (8010084 <prvTaskExitError+0x58>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801003e:	d00b      	beq.n	8010058 <prvTaskExitError+0x2c>
	__asm volatile
 8010040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010044:	f383 8811 	msr	BASEPRI, r3
 8010048:	f3bf 8f6f 	isb	sy
 801004c:	f3bf 8f4f 	dsb	sy
 8010050:	60fb      	str	r3, [r7, #12]
}
 8010052:	bf00      	nop
 8010054:	bf00      	nop
 8010056:	e7fd      	b.n	8010054 <prvTaskExitError+0x28>
	__asm volatile
 8010058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801005c:	f383 8811 	msr	BASEPRI, r3
 8010060:	f3bf 8f6f 	isb	sy
 8010064:	f3bf 8f4f 	dsb	sy
 8010068:	60bb      	str	r3, [r7, #8]
}
 801006a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801006c:	bf00      	nop
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d0fc      	beq.n	801006e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010074:	bf00      	nop
 8010076:	bf00      	nop
 8010078:	3714      	adds	r7, #20
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr
 8010082:	bf00      	nop
 8010084:	20000118 	.word	0x20000118
	...

08010090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010090:	4b07      	ldr	r3, [pc, #28]	@ (80100b0 <pxCurrentTCBConst2>)
 8010092:	6819      	ldr	r1, [r3, #0]
 8010094:	6808      	ldr	r0, [r1, #0]
 8010096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801009a:	f380 8809 	msr	PSP, r0
 801009e:	f3bf 8f6f 	isb	sy
 80100a2:	f04f 0000 	mov.w	r0, #0
 80100a6:	f380 8811 	msr	BASEPRI, r0
 80100aa:	4770      	bx	lr
 80100ac:	f3af 8000 	nop.w

080100b0 <pxCurrentTCBConst2>:
 80100b0:	20002d58 	.word	0x20002d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80100b4:	bf00      	nop
 80100b6:	bf00      	nop

080100b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80100b8:	4808      	ldr	r0, [pc, #32]	@ (80100dc <prvPortStartFirstTask+0x24>)
 80100ba:	6800      	ldr	r0, [r0, #0]
 80100bc:	6800      	ldr	r0, [r0, #0]
 80100be:	f380 8808 	msr	MSP, r0
 80100c2:	f04f 0000 	mov.w	r0, #0
 80100c6:	f380 8814 	msr	CONTROL, r0
 80100ca:	b662      	cpsie	i
 80100cc:	b661      	cpsie	f
 80100ce:	f3bf 8f4f 	dsb	sy
 80100d2:	f3bf 8f6f 	isb	sy
 80100d6:	df00      	svc	0
 80100d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80100da:	bf00      	nop
 80100dc:	e000ed08 	.word	0xe000ed08

080100e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b086      	sub	sp, #24
 80100e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80100e6:	4b47      	ldr	r3, [pc, #284]	@ (8010204 <xPortStartScheduler+0x124>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4a47      	ldr	r2, [pc, #284]	@ (8010208 <xPortStartScheduler+0x128>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d10b      	bne.n	8010108 <xPortStartScheduler+0x28>
	__asm volatile
 80100f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100f4:	f383 8811 	msr	BASEPRI, r3
 80100f8:	f3bf 8f6f 	isb	sy
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	613b      	str	r3, [r7, #16]
}
 8010102:	bf00      	nop
 8010104:	bf00      	nop
 8010106:	e7fd      	b.n	8010104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010108:	4b3e      	ldr	r3, [pc, #248]	@ (8010204 <xPortStartScheduler+0x124>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	4a3f      	ldr	r2, [pc, #252]	@ (801020c <xPortStartScheduler+0x12c>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d10b      	bne.n	801012a <xPortStartScheduler+0x4a>
	__asm volatile
 8010112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010116:	f383 8811 	msr	BASEPRI, r3
 801011a:	f3bf 8f6f 	isb	sy
 801011e:	f3bf 8f4f 	dsb	sy
 8010122:	60fb      	str	r3, [r7, #12]
}
 8010124:	bf00      	nop
 8010126:	bf00      	nop
 8010128:	e7fd      	b.n	8010126 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801012a:	4b39      	ldr	r3, [pc, #228]	@ (8010210 <xPortStartScheduler+0x130>)
 801012c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	b2db      	uxtb	r3, r3
 8010134:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	22ff      	movs	r2, #255	@ 0xff
 801013a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	b2db      	uxtb	r3, r3
 8010142:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010144:	78fb      	ldrb	r3, [r7, #3]
 8010146:	b2db      	uxtb	r3, r3
 8010148:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801014c:	b2da      	uxtb	r2, r3
 801014e:	4b31      	ldr	r3, [pc, #196]	@ (8010214 <xPortStartScheduler+0x134>)
 8010150:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010152:	4b31      	ldr	r3, [pc, #196]	@ (8010218 <xPortStartScheduler+0x138>)
 8010154:	2207      	movs	r2, #7
 8010156:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010158:	e009      	b.n	801016e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801015a:	4b2f      	ldr	r3, [pc, #188]	@ (8010218 <xPortStartScheduler+0x138>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	3b01      	subs	r3, #1
 8010160:	4a2d      	ldr	r2, [pc, #180]	@ (8010218 <xPortStartScheduler+0x138>)
 8010162:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010164:	78fb      	ldrb	r3, [r7, #3]
 8010166:	b2db      	uxtb	r3, r3
 8010168:	005b      	lsls	r3, r3, #1
 801016a:	b2db      	uxtb	r3, r3
 801016c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801016e:	78fb      	ldrb	r3, [r7, #3]
 8010170:	b2db      	uxtb	r3, r3
 8010172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010176:	2b80      	cmp	r3, #128	@ 0x80
 8010178:	d0ef      	beq.n	801015a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801017a:	4b27      	ldr	r3, [pc, #156]	@ (8010218 <xPortStartScheduler+0x138>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f1c3 0307 	rsb	r3, r3, #7
 8010182:	2b04      	cmp	r3, #4
 8010184:	d00b      	beq.n	801019e <xPortStartScheduler+0xbe>
	__asm volatile
 8010186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801018a:	f383 8811 	msr	BASEPRI, r3
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	f3bf 8f4f 	dsb	sy
 8010196:	60bb      	str	r3, [r7, #8]
}
 8010198:	bf00      	nop
 801019a:	bf00      	nop
 801019c:	e7fd      	b.n	801019a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801019e:	4b1e      	ldr	r3, [pc, #120]	@ (8010218 <xPortStartScheduler+0x138>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	021b      	lsls	r3, r3, #8
 80101a4:	4a1c      	ldr	r2, [pc, #112]	@ (8010218 <xPortStartScheduler+0x138>)
 80101a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101a8:	4b1b      	ldr	r3, [pc, #108]	@ (8010218 <xPortStartScheduler+0x138>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80101b0:	4a19      	ldr	r2, [pc, #100]	@ (8010218 <xPortStartScheduler+0x138>)
 80101b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	b2da      	uxtb	r2, r3
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80101bc:	4b17      	ldr	r3, [pc, #92]	@ (801021c <xPortStartScheduler+0x13c>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4a16      	ldr	r2, [pc, #88]	@ (801021c <xPortStartScheduler+0x13c>)
 80101c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80101c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80101c8:	4b14      	ldr	r3, [pc, #80]	@ (801021c <xPortStartScheduler+0x13c>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	4a13      	ldr	r2, [pc, #76]	@ (801021c <xPortStartScheduler+0x13c>)
 80101ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80101d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80101d4:	f000 f8da 	bl	801038c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80101d8:	4b11      	ldr	r3, [pc, #68]	@ (8010220 <xPortStartScheduler+0x140>)
 80101da:	2200      	movs	r2, #0
 80101dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80101de:	f000 f8f9 	bl	80103d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80101e2:	4b10      	ldr	r3, [pc, #64]	@ (8010224 <xPortStartScheduler+0x144>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	4a0f      	ldr	r2, [pc, #60]	@ (8010224 <xPortStartScheduler+0x144>)
 80101e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80101ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80101ee:	f7ff ff63 	bl	80100b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80101f2:	f7fe ff2d 	bl	800f050 <vTaskSwitchContext>
	prvTaskExitError();
 80101f6:	f7ff ff19 	bl	801002c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80101fa:	2300      	movs	r3, #0
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3718      	adds	r7, #24
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}
 8010204:	e000ed00 	.word	0xe000ed00
 8010208:	410fc271 	.word	0x410fc271
 801020c:	410fc270 	.word	0x410fc270
 8010210:	e000e400 	.word	0xe000e400
 8010214:	20003384 	.word	0x20003384
 8010218:	20003388 	.word	0x20003388
 801021c:	e000ed20 	.word	0xe000ed20
 8010220:	20000118 	.word	0x20000118
 8010224:	e000ef34 	.word	0xe000ef34

08010228 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
	__asm volatile
 801022e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010232:	f383 8811 	msr	BASEPRI, r3
 8010236:	f3bf 8f6f 	isb	sy
 801023a:	f3bf 8f4f 	dsb	sy
 801023e:	607b      	str	r3, [r7, #4]
}
 8010240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010242:	4b10      	ldr	r3, [pc, #64]	@ (8010284 <vPortEnterCritical+0x5c>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	3301      	adds	r3, #1
 8010248:	4a0e      	ldr	r2, [pc, #56]	@ (8010284 <vPortEnterCritical+0x5c>)
 801024a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801024c:	4b0d      	ldr	r3, [pc, #52]	@ (8010284 <vPortEnterCritical+0x5c>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b01      	cmp	r3, #1
 8010252:	d110      	bne.n	8010276 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010254:	4b0c      	ldr	r3, [pc, #48]	@ (8010288 <vPortEnterCritical+0x60>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	b2db      	uxtb	r3, r3
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00b      	beq.n	8010276 <vPortEnterCritical+0x4e>
	__asm volatile
 801025e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010262:	f383 8811 	msr	BASEPRI, r3
 8010266:	f3bf 8f6f 	isb	sy
 801026a:	f3bf 8f4f 	dsb	sy
 801026e:	603b      	str	r3, [r7, #0]
}
 8010270:	bf00      	nop
 8010272:	bf00      	nop
 8010274:	e7fd      	b.n	8010272 <vPortEnterCritical+0x4a>
	}
}
 8010276:	bf00      	nop
 8010278:	370c      	adds	r7, #12
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr
 8010282:	bf00      	nop
 8010284:	20000118 	.word	0x20000118
 8010288:	e000ed04 	.word	0xe000ed04

0801028c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010292:	4b12      	ldr	r3, [pc, #72]	@ (80102dc <vPortExitCritical+0x50>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d10b      	bne.n	80102b2 <vPortExitCritical+0x26>
	__asm volatile
 801029a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801029e:	f383 8811 	msr	BASEPRI, r3
 80102a2:	f3bf 8f6f 	isb	sy
 80102a6:	f3bf 8f4f 	dsb	sy
 80102aa:	607b      	str	r3, [r7, #4]
}
 80102ac:	bf00      	nop
 80102ae:	bf00      	nop
 80102b0:	e7fd      	b.n	80102ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80102b2:	4b0a      	ldr	r3, [pc, #40]	@ (80102dc <vPortExitCritical+0x50>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	3b01      	subs	r3, #1
 80102b8:	4a08      	ldr	r2, [pc, #32]	@ (80102dc <vPortExitCritical+0x50>)
 80102ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80102bc:	4b07      	ldr	r3, [pc, #28]	@ (80102dc <vPortExitCritical+0x50>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d105      	bne.n	80102d0 <vPortExitCritical+0x44>
 80102c4:	2300      	movs	r3, #0
 80102c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	f383 8811 	msr	BASEPRI, r3
}
 80102ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80102d0:	bf00      	nop
 80102d2:	370c      	adds	r7, #12
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr
 80102dc:	20000118 	.word	0x20000118

080102e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80102e0:	f3ef 8009 	mrs	r0, PSP
 80102e4:	f3bf 8f6f 	isb	sy
 80102e8:	4b15      	ldr	r3, [pc, #84]	@ (8010340 <pxCurrentTCBConst>)
 80102ea:	681a      	ldr	r2, [r3, #0]
 80102ec:	f01e 0f10 	tst.w	lr, #16
 80102f0:	bf08      	it	eq
 80102f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80102f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102fa:	6010      	str	r0, [r2, #0]
 80102fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010300:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010304:	f380 8811 	msr	BASEPRI, r0
 8010308:	f3bf 8f4f 	dsb	sy
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f7fe fe9e 	bl	800f050 <vTaskSwitchContext>
 8010314:	f04f 0000 	mov.w	r0, #0
 8010318:	f380 8811 	msr	BASEPRI, r0
 801031c:	bc09      	pop	{r0, r3}
 801031e:	6819      	ldr	r1, [r3, #0]
 8010320:	6808      	ldr	r0, [r1, #0]
 8010322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010326:	f01e 0f10 	tst.w	lr, #16
 801032a:	bf08      	it	eq
 801032c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010330:	f380 8809 	msr	PSP, r0
 8010334:	f3bf 8f6f 	isb	sy
 8010338:	4770      	bx	lr
 801033a:	bf00      	nop
 801033c:	f3af 8000 	nop.w

08010340 <pxCurrentTCBConst>:
 8010340:	20002d58 	.word	0x20002d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010344:	bf00      	nop
 8010346:	bf00      	nop

08010348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
	__asm volatile
 801034e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010352:	f383 8811 	msr	BASEPRI, r3
 8010356:	f3bf 8f6f 	isb	sy
 801035a:	f3bf 8f4f 	dsb	sy
 801035e:	607b      	str	r3, [r7, #4]
}
 8010360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010362:	f7fe fdbb 	bl	800eedc <xTaskIncrementTick>
 8010366:	4603      	mov	r3, r0
 8010368:	2b00      	cmp	r3, #0
 801036a:	d003      	beq.n	8010374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801036c:	4b06      	ldr	r3, [pc, #24]	@ (8010388 <xPortSysTickHandler+0x40>)
 801036e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010372:	601a      	str	r2, [r3, #0]
 8010374:	2300      	movs	r3, #0
 8010376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	f383 8811 	msr	BASEPRI, r3
}
 801037e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010380:	bf00      	nop
 8010382:	3708      	adds	r7, #8
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}
 8010388:	e000ed04 	.word	0xe000ed04

0801038c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801038c:	b480      	push	{r7}
 801038e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010390:	4b0b      	ldr	r3, [pc, #44]	@ (80103c0 <vPortSetupTimerInterrupt+0x34>)
 8010392:	2200      	movs	r2, #0
 8010394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010396:	4b0b      	ldr	r3, [pc, #44]	@ (80103c4 <vPortSetupTimerInterrupt+0x38>)
 8010398:	2200      	movs	r2, #0
 801039a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801039c:	4b0a      	ldr	r3, [pc, #40]	@ (80103c8 <vPortSetupTimerInterrupt+0x3c>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4a0a      	ldr	r2, [pc, #40]	@ (80103cc <vPortSetupTimerInterrupt+0x40>)
 80103a2:	fba2 2303 	umull	r2, r3, r2, r3
 80103a6:	099b      	lsrs	r3, r3, #6
 80103a8:	4a09      	ldr	r2, [pc, #36]	@ (80103d0 <vPortSetupTimerInterrupt+0x44>)
 80103aa:	3b01      	subs	r3, #1
 80103ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103ae:	4b04      	ldr	r3, [pc, #16]	@ (80103c0 <vPortSetupTimerInterrupt+0x34>)
 80103b0:	2207      	movs	r2, #7
 80103b2:	601a      	str	r2, [r3, #0]
}
 80103b4:	bf00      	nop
 80103b6:	46bd      	mov	sp, r7
 80103b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop
 80103c0:	e000e010 	.word	0xe000e010
 80103c4:	e000e018 	.word	0xe000e018
 80103c8:	2000006c 	.word	0x2000006c
 80103cc:	10624dd3 	.word	0x10624dd3
 80103d0:	e000e014 	.word	0xe000e014

080103d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80103d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80103e4 <vPortEnableVFP+0x10>
 80103d8:	6801      	ldr	r1, [r0, #0]
 80103da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80103de:	6001      	str	r1, [r0, #0]
 80103e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80103e2:	bf00      	nop
 80103e4:	e000ed88 	.word	0xe000ed88

080103e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80103e8:	b480      	push	{r7}
 80103ea:	b085      	sub	sp, #20
 80103ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80103ee:	f3ef 8305 	mrs	r3, IPSR
 80103f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	2b0f      	cmp	r3, #15
 80103f8:	d915      	bls.n	8010426 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80103fa:	4a18      	ldr	r2, [pc, #96]	@ (801045c <vPortValidateInterruptPriority+0x74>)
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	4413      	add	r3, r2
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010404:	4b16      	ldr	r3, [pc, #88]	@ (8010460 <vPortValidateInterruptPriority+0x78>)
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	7afa      	ldrb	r2, [r7, #11]
 801040a:	429a      	cmp	r2, r3
 801040c:	d20b      	bcs.n	8010426 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801040e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010412:	f383 8811 	msr	BASEPRI, r3
 8010416:	f3bf 8f6f 	isb	sy
 801041a:	f3bf 8f4f 	dsb	sy
 801041e:	607b      	str	r3, [r7, #4]
}
 8010420:	bf00      	nop
 8010422:	bf00      	nop
 8010424:	e7fd      	b.n	8010422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010426:	4b0f      	ldr	r3, [pc, #60]	@ (8010464 <vPortValidateInterruptPriority+0x7c>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801042e:	4b0e      	ldr	r3, [pc, #56]	@ (8010468 <vPortValidateInterruptPriority+0x80>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	429a      	cmp	r2, r3
 8010434:	d90b      	bls.n	801044e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801043a:	f383 8811 	msr	BASEPRI, r3
 801043e:	f3bf 8f6f 	isb	sy
 8010442:	f3bf 8f4f 	dsb	sy
 8010446:	603b      	str	r3, [r7, #0]
}
 8010448:	bf00      	nop
 801044a:	bf00      	nop
 801044c:	e7fd      	b.n	801044a <vPortValidateInterruptPriority+0x62>
	}
 801044e:	bf00      	nop
 8010450:	3714      	adds	r7, #20
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop
 801045c:	e000e3f0 	.word	0xe000e3f0
 8010460:	20003384 	.word	0x20003384
 8010464:	e000ed0c 	.word	0xe000ed0c
 8010468:	20003388 	.word	0x20003388

0801046c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b08a      	sub	sp, #40	@ 0x28
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010474:	2300      	movs	r3, #0
 8010476:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010478:	f7fe fc74 	bl	800ed64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801047c:	4b5c      	ldr	r3, [pc, #368]	@ (80105f0 <pvPortMalloc+0x184>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d101      	bne.n	8010488 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010484:	f000 f924 	bl	80106d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010488:	4b5a      	ldr	r3, [pc, #360]	@ (80105f4 <pvPortMalloc+0x188>)
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	4013      	ands	r3, r2
 8010490:	2b00      	cmp	r3, #0
 8010492:	f040 8095 	bne.w	80105c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d01e      	beq.n	80104da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801049c:	2208      	movs	r2, #8
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	4413      	add	r3, r2
 80104a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f003 0307 	and.w	r3, r3, #7
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d015      	beq.n	80104da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f023 0307 	bic.w	r3, r3, #7
 80104b4:	3308      	adds	r3, #8
 80104b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f003 0307 	and.w	r3, r3, #7
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d00b      	beq.n	80104da <pvPortMalloc+0x6e>
	__asm volatile
 80104c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104c6:	f383 8811 	msr	BASEPRI, r3
 80104ca:	f3bf 8f6f 	isb	sy
 80104ce:	f3bf 8f4f 	dsb	sy
 80104d2:	617b      	str	r3, [r7, #20]
}
 80104d4:	bf00      	nop
 80104d6:	bf00      	nop
 80104d8:	e7fd      	b.n	80104d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d06f      	beq.n	80105c0 <pvPortMalloc+0x154>
 80104e0:	4b45      	ldr	r3, [pc, #276]	@ (80105f8 <pvPortMalloc+0x18c>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	687a      	ldr	r2, [r7, #4]
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d86a      	bhi.n	80105c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80104ea:	4b44      	ldr	r3, [pc, #272]	@ (80105fc <pvPortMalloc+0x190>)
 80104ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80104ee:	4b43      	ldr	r3, [pc, #268]	@ (80105fc <pvPortMalloc+0x190>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80104f4:	e004      	b.n	8010500 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80104f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80104fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	429a      	cmp	r2, r3
 8010508:	d903      	bls.n	8010512 <pvPortMalloc+0xa6>
 801050a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d1f1      	bne.n	80104f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010512:	4b37      	ldr	r3, [pc, #220]	@ (80105f0 <pvPortMalloc+0x184>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010518:	429a      	cmp	r2, r3
 801051a:	d051      	beq.n	80105c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801051c:	6a3b      	ldr	r3, [r7, #32]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2208      	movs	r2, #8
 8010522:	4413      	add	r3, r2
 8010524:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	6a3b      	ldr	r3, [r7, #32]
 801052c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801052e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010530:	685a      	ldr	r2, [r3, #4]
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	1ad2      	subs	r2, r2, r3
 8010536:	2308      	movs	r3, #8
 8010538:	005b      	lsls	r3, r3, #1
 801053a:	429a      	cmp	r2, r3
 801053c:	d920      	bls.n	8010580 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801053e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	4413      	add	r3, r2
 8010544:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	f003 0307 	and.w	r3, r3, #7
 801054c:	2b00      	cmp	r3, #0
 801054e:	d00b      	beq.n	8010568 <pvPortMalloc+0xfc>
	__asm volatile
 8010550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010554:	f383 8811 	msr	BASEPRI, r3
 8010558:	f3bf 8f6f 	isb	sy
 801055c:	f3bf 8f4f 	dsb	sy
 8010560:	613b      	str	r3, [r7, #16]
}
 8010562:	bf00      	nop
 8010564:	bf00      	nop
 8010566:	e7fd      	b.n	8010564 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801056a:	685a      	ldr	r2, [r3, #4]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	1ad2      	subs	r2, r2, r3
 8010570:	69bb      	ldr	r3, [r7, #24]
 8010572:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801057a:	69b8      	ldr	r0, [r7, #24]
 801057c:	f000 f90a 	bl	8010794 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010580:	4b1d      	ldr	r3, [pc, #116]	@ (80105f8 <pvPortMalloc+0x18c>)
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010586:	685b      	ldr	r3, [r3, #4]
 8010588:	1ad3      	subs	r3, r2, r3
 801058a:	4a1b      	ldr	r2, [pc, #108]	@ (80105f8 <pvPortMalloc+0x18c>)
 801058c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801058e:	4b1a      	ldr	r3, [pc, #104]	@ (80105f8 <pvPortMalloc+0x18c>)
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	4b1b      	ldr	r3, [pc, #108]	@ (8010600 <pvPortMalloc+0x194>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	429a      	cmp	r2, r3
 8010598:	d203      	bcs.n	80105a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801059a:	4b17      	ldr	r3, [pc, #92]	@ (80105f8 <pvPortMalloc+0x18c>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	4a18      	ldr	r2, [pc, #96]	@ (8010600 <pvPortMalloc+0x194>)
 80105a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80105a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a4:	685a      	ldr	r2, [r3, #4]
 80105a6:	4b13      	ldr	r3, [pc, #76]	@ (80105f4 <pvPortMalloc+0x188>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	431a      	orrs	r2, r3
 80105ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80105b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105b2:	2200      	movs	r2, #0
 80105b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80105b6:	4b13      	ldr	r3, [pc, #76]	@ (8010604 <pvPortMalloc+0x198>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	3301      	adds	r3, #1
 80105bc:	4a11      	ldr	r2, [pc, #68]	@ (8010604 <pvPortMalloc+0x198>)
 80105be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80105c0:	f7fe fbde 	bl	800ed80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80105c4:	69fb      	ldr	r3, [r7, #28]
 80105c6:	f003 0307 	and.w	r3, r3, #7
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d00b      	beq.n	80105e6 <pvPortMalloc+0x17a>
	__asm volatile
 80105ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105d2:	f383 8811 	msr	BASEPRI, r3
 80105d6:	f3bf 8f6f 	isb	sy
 80105da:	f3bf 8f4f 	dsb	sy
 80105de:	60fb      	str	r3, [r7, #12]
}
 80105e0:	bf00      	nop
 80105e2:	bf00      	nop
 80105e4:	e7fd      	b.n	80105e2 <pvPortMalloc+0x176>
	return pvReturn;
 80105e6:	69fb      	ldr	r3, [r7, #28]
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3728      	adds	r7, #40	@ 0x28
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	20006f94 	.word	0x20006f94
 80105f4:	20006fa8 	.word	0x20006fa8
 80105f8:	20006f98 	.word	0x20006f98
 80105fc:	20006f8c 	.word	0x20006f8c
 8010600:	20006f9c 	.word	0x20006f9c
 8010604:	20006fa0 	.word	0x20006fa0

08010608 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b086      	sub	sp, #24
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d04f      	beq.n	80106ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801061a:	2308      	movs	r3, #8
 801061c:	425b      	negs	r3, r3
 801061e:	697a      	ldr	r2, [r7, #20]
 8010620:	4413      	add	r3, r2
 8010622:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	685a      	ldr	r2, [r3, #4]
 801062c:	4b25      	ldr	r3, [pc, #148]	@ (80106c4 <vPortFree+0xbc>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	4013      	ands	r3, r2
 8010632:	2b00      	cmp	r3, #0
 8010634:	d10b      	bne.n	801064e <vPortFree+0x46>
	__asm volatile
 8010636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801063a:	f383 8811 	msr	BASEPRI, r3
 801063e:	f3bf 8f6f 	isb	sy
 8010642:	f3bf 8f4f 	dsb	sy
 8010646:	60fb      	str	r3, [r7, #12]
}
 8010648:	bf00      	nop
 801064a:	bf00      	nop
 801064c:	e7fd      	b.n	801064a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d00b      	beq.n	801066e <vPortFree+0x66>
	__asm volatile
 8010656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801065a:	f383 8811 	msr	BASEPRI, r3
 801065e:	f3bf 8f6f 	isb	sy
 8010662:	f3bf 8f4f 	dsb	sy
 8010666:	60bb      	str	r3, [r7, #8]
}
 8010668:	bf00      	nop
 801066a:	bf00      	nop
 801066c:	e7fd      	b.n	801066a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	685a      	ldr	r2, [r3, #4]
 8010672:	4b14      	ldr	r3, [pc, #80]	@ (80106c4 <vPortFree+0xbc>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	4013      	ands	r3, r2
 8010678:	2b00      	cmp	r3, #0
 801067a:	d01e      	beq.n	80106ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d11a      	bne.n	80106ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	685a      	ldr	r2, [r3, #4]
 8010688:	4b0e      	ldr	r3, [pc, #56]	@ (80106c4 <vPortFree+0xbc>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	43db      	mvns	r3, r3
 801068e:	401a      	ands	r2, r3
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010694:	f7fe fb66 	bl	800ed64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	685a      	ldr	r2, [r3, #4]
 801069c:	4b0a      	ldr	r3, [pc, #40]	@ (80106c8 <vPortFree+0xc0>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	4413      	add	r3, r2
 80106a2:	4a09      	ldr	r2, [pc, #36]	@ (80106c8 <vPortFree+0xc0>)
 80106a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80106a6:	6938      	ldr	r0, [r7, #16]
 80106a8:	f000 f874 	bl	8010794 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80106ac:	4b07      	ldr	r3, [pc, #28]	@ (80106cc <vPortFree+0xc4>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	3301      	adds	r3, #1
 80106b2:	4a06      	ldr	r2, [pc, #24]	@ (80106cc <vPortFree+0xc4>)
 80106b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80106b6:	f7fe fb63 	bl	800ed80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80106ba:	bf00      	nop
 80106bc:	3718      	adds	r7, #24
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
 80106c2:	bf00      	nop
 80106c4:	20006fa8 	.word	0x20006fa8
 80106c8:	20006f98 	.word	0x20006f98
 80106cc:	20006fa4 	.word	0x20006fa4

080106d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80106d0:	b480      	push	{r7}
 80106d2:	b085      	sub	sp, #20
 80106d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80106d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80106da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80106dc:	4b27      	ldr	r3, [pc, #156]	@ (801077c <prvHeapInit+0xac>)
 80106de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f003 0307 	and.w	r3, r3, #7
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d00c      	beq.n	8010704 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	3307      	adds	r3, #7
 80106ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f023 0307 	bic.w	r3, r3, #7
 80106f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80106f8:	68ba      	ldr	r2, [r7, #8]
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	1ad3      	subs	r3, r2, r3
 80106fe:	4a1f      	ldr	r2, [pc, #124]	@ (801077c <prvHeapInit+0xac>)
 8010700:	4413      	add	r3, r2
 8010702:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010708:	4a1d      	ldr	r2, [pc, #116]	@ (8010780 <prvHeapInit+0xb0>)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801070e:	4b1c      	ldr	r3, [pc, #112]	@ (8010780 <prvHeapInit+0xb0>)
 8010710:	2200      	movs	r2, #0
 8010712:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	68ba      	ldr	r2, [r7, #8]
 8010718:	4413      	add	r3, r2
 801071a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801071c:	2208      	movs	r2, #8
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	1a9b      	subs	r3, r3, r2
 8010722:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	f023 0307 	bic.w	r3, r3, #7
 801072a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	4a15      	ldr	r2, [pc, #84]	@ (8010784 <prvHeapInit+0xb4>)
 8010730:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010732:	4b14      	ldr	r3, [pc, #80]	@ (8010784 <prvHeapInit+0xb4>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	2200      	movs	r2, #0
 8010738:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801073a:	4b12      	ldr	r3, [pc, #72]	@ (8010784 <prvHeapInit+0xb4>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	2200      	movs	r2, #0
 8010740:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	68fa      	ldr	r2, [r7, #12]
 801074a:	1ad2      	subs	r2, r2, r3
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010750:	4b0c      	ldr	r3, [pc, #48]	@ (8010784 <prvHeapInit+0xb4>)
 8010752:	681a      	ldr	r2, [r3, #0]
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	4a0a      	ldr	r2, [pc, #40]	@ (8010788 <prvHeapInit+0xb8>)
 801075e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	685b      	ldr	r3, [r3, #4]
 8010764:	4a09      	ldr	r2, [pc, #36]	@ (801078c <prvHeapInit+0xbc>)
 8010766:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010768:	4b09      	ldr	r3, [pc, #36]	@ (8010790 <prvHeapInit+0xc0>)
 801076a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801076e:	601a      	str	r2, [r3, #0]
}
 8010770:	bf00      	nop
 8010772:	3714      	adds	r7, #20
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr
 801077c:	2000338c 	.word	0x2000338c
 8010780:	20006f8c 	.word	0x20006f8c
 8010784:	20006f94 	.word	0x20006f94
 8010788:	20006f9c 	.word	0x20006f9c
 801078c:	20006f98 	.word	0x20006f98
 8010790:	20006fa8 	.word	0x20006fa8

08010794 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010794:	b480      	push	{r7}
 8010796:	b085      	sub	sp, #20
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801079c:	4b28      	ldr	r3, [pc, #160]	@ (8010840 <prvInsertBlockIntoFreeList+0xac>)
 801079e:	60fb      	str	r3, [r7, #12]
 80107a0:	e002      	b.n	80107a8 <prvInsertBlockIntoFreeList+0x14>
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	60fb      	str	r3, [r7, #12]
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	687a      	ldr	r2, [r7, #4]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d8f7      	bhi.n	80107a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	68ba      	ldr	r2, [r7, #8]
 80107bc:	4413      	add	r3, r2
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d108      	bne.n	80107d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	685a      	ldr	r2, [r3, #4]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	685b      	ldr	r3, [r3, #4]
 80107cc:	441a      	add	r2, r3
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	68ba      	ldr	r2, [r7, #8]
 80107e0:	441a      	add	r2, r3
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d118      	bne.n	801081c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	4b15      	ldr	r3, [pc, #84]	@ (8010844 <prvInsertBlockIntoFreeList+0xb0>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d00d      	beq.n	8010812 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	685a      	ldr	r2, [r3, #4]
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	685b      	ldr	r3, [r3, #4]
 8010800:	441a      	add	r2, r3
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	601a      	str	r2, [r3, #0]
 8010810:	e008      	b.n	8010824 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010812:	4b0c      	ldr	r3, [pc, #48]	@ (8010844 <prvInsertBlockIntoFreeList+0xb0>)
 8010814:	681a      	ldr	r2, [r3, #0]
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	601a      	str	r2, [r3, #0]
 801081a:	e003      	b.n	8010824 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	681a      	ldr	r2, [r3, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010824:	68fa      	ldr	r2, [r7, #12]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	429a      	cmp	r2, r3
 801082a:	d002      	beq.n	8010832 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010832:	bf00      	nop
 8010834:	3714      	adds	r7, #20
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr
 801083e:	bf00      	nop
 8010840:	20006f8c 	.word	0x20006f8c
 8010844:	20006f94 	.word	0x20006f94

08010848 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801084c:	2200      	movs	r2, #0
 801084e:	4912      	ldr	r1, [pc, #72]	@ (8010898 <MX_USB_DEVICE_Init+0x50>)
 8010850:	4812      	ldr	r0, [pc, #72]	@ (801089c <MX_USB_DEVICE_Init+0x54>)
 8010852:	f7f7 faff 	bl	8007e54 <USBD_Init>
 8010856:	4603      	mov	r3, r0
 8010858:	2b00      	cmp	r3, #0
 801085a:	d001      	beq.n	8010860 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801085c:	f7f1 f9a6 	bl	8001bac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010860:	490f      	ldr	r1, [pc, #60]	@ (80108a0 <MX_USB_DEVICE_Init+0x58>)
 8010862:	480e      	ldr	r0, [pc, #56]	@ (801089c <MX_USB_DEVICE_Init+0x54>)
 8010864:	f7f7 fb26 	bl	8007eb4 <USBD_RegisterClass>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d001      	beq.n	8010872 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801086e:	f7f1 f99d 	bl	8001bac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010872:	490c      	ldr	r1, [pc, #48]	@ (80108a4 <MX_USB_DEVICE_Init+0x5c>)
 8010874:	4809      	ldr	r0, [pc, #36]	@ (801089c <MX_USB_DEVICE_Init+0x54>)
 8010876:	f7f7 fa1d 	bl	8007cb4 <USBD_CDC_RegisterInterface>
 801087a:	4603      	mov	r3, r0
 801087c:	2b00      	cmp	r3, #0
 801087e:	d001      	beq.n	8010884 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010880:	f7f1 f994 	bl	8001bac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010884:	4805      	ldr	r0, [pc, #20]	@ (801089c <MX_USB_DEVICE_Init+0x54>)
 8010886:	f7f7 fb4b 	bl	8007f20 <USBD_Start>
 801088a:	4603      	mov	r3, r0
 801088c:	2b00      	cmp	r3, #0
 801088e:	d001      	beq.n	8010894 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010890:	f7f1 f98c 	bl	8001bac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010894:	bf00      	nop
 8010896:	bd80      	pop	{r7, pc}
 8010898:	20000130 	.word	0x20000130
 801089c:	20006fac 	.word	0x20006fac
 80108a0:	20000098 	.word	0x20000098
 80108a4:	2000011c 	.word	0x2000011c

080108a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80108ac:	2200      	movs	r2, #0
 80108ae:	4905      	ldr	r1, [pc, #20]	@ (80108c4 <CDC_Init_FS+0x1c>)
 80108b0:	4805      	ldr	r0, [pc, #20]	@ (80108c8 <CDC_Init_FS+0x20>)
 80108b2:	f7f7 fa19 	bl	8007ce8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80108b6:	4905      	ldr	r1, [pc, #20]	@ (80108cc <CDC_Init_FS+0x24>)
 80108b8:	4803      	ldr	r0, [pc, #12]	@ (80108c8 <CDC_Init_FS+0x20>)
 80108ba:	f7f7 fa37 	bl	8007d2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80108be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	20007688 	.word	0x20007688
 80108c8:	20006fac 	.word	0x20006fac
 80108cc:	20007288 	.word	0x20007288

080108d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80108d0:	b480      	push	{r7}
 80108d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80108d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	4603      	mov	r3, r0
 80108e8:	6039      	str	r1, [r7, #0]
 80108ea:	71fb      	strb	r3, [r7, #7]
 80108ec:	4613      	mov	r3, r2
 80108ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80108f0:	79fb      	ldrb	r3, [r7, #7]
 80108f2:	2b23      	cmp	r3, #35	@ 0x23
 80108f4:	d84a      	bhi.n	801098c <CDC_Control_FS+0xac>
 80108f6:	a201      	add	r2, pc, #4	@ (adr r2, 80108fc <CDC_Control_FS+0x1c>)
 80108f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108fc:	0801098d 	.word	0x0801098d
 8010900:	0801098d 	.word	0x0801098d
 8010904:	0801098d 	.word	0x0801098d
 8010908:	0801098d 	.word	0x0801098d
 801090c:	0801098d 	.word	0x0801098d
 8010910:	0801098d 	.word	0x0801098d
 8010914:	0801098d 	.word	0x0801098d
 8010918:	0801098d 	.word	0x0801098d
 801091c:	0801098d 	.word	0x0801098d
 8010920:	0801098d 	.word	0x0801098d
 8010924:	0801098d 	.word	0x0801098d
 8010928:	0801098d 	.word	0x0801098d
 801092c:	0801098d 	.word	0x0801098d
 8010930:	0801098d 	.word	0x0801098d
 8010934:	0801098d 	.word	0x0801098d
 8010938:	0801098d 	.word	0x0801098d
 801093c:	0801098d 	.word	0x0801098d
 8010940:	0801098d 	.word	0x0801098d
 8010944:	0801098d 	.word	0x0801098d
 8010948:	0801098d 	.word	0x0801098d
 801094c:	0801098d 	.word	0x0801098d
 8010950:	0801098d 	.word	0x0801098d
 8010954:	0801098d 	.word	0x0801098d
 8010958:	0801098d 	.word	0x0801098d
 801095c:	0801098d 	.word	0x0801098d
 8010960:	0801098d 	.word	0x0801098d
 8010964:	0801098d 	.word	0x0801098d
 8010968:	0801098d 	.word	0x0801098d
 801096c:	0801098d 	.word	0x0801098d
 8010970:	0801098d 	.word	0x0801098d
 8010974:	0801098d 	.word	0x0801098d
 8010978:	0801098d 	.word	0x0801098d
 801097c:	0801098d 	.word	0x0801098d
 8010980:	0801098d 	.word	0x0801098d
 8010984:	0801098d 	.word	0x0801098d
 8010988:	0801098d 	.word	0x0801098d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801098c:	bf00      	nop
  }

  return (USBD_OK);
 801098e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010990:	4618      	mov	r0, r3
 8010992:	370c      	adds	r7, #12
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr

0801099c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80109a6:	6879      	ldr	r1, [r7, #4]
 80109a8:	4805      	ldr	r0, [pc, #20]	@ (80109c0 <CDC_Receive_FS+0x24>)
 80109aa:	f7f7 f9bf 	bl	8007d2c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80109ae:	4804      	ldr	r0, [pc, #16]	@ (80109c0 <CDC_Receive_FS+0x24>)
 80109b0:	f7f7 fa1a 	bl	8007de8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80109b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	20006fac 	.word	0x20006fac

080109c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b084      	sub	sp, #16
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	460b      	mov	r3, r1
 80109ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80109d0:	2300      	movs	r3, #0
 80109d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80109d4:	4b0d      	ldr	r3, [pc, #52]	@ (8010a0c <CDC_Transmit_FS+0x48>)
 80109d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80109da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d001      	beq.n	80109ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80109e6:	2301      	movs	r3, #1
 80109e8:	e00b      	b.n	8010a02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80109ea:	887b      	ldrh	r3, [r7, #2]
 80109ec:	461a      	mov	r2, r3
 80109ee:	6879      	ldr	r1, [r7, #4]
 80109f0:	4806      	ldr	r0, [pc, #24]	@ (8010a0c <CDC_Transmit_FS+0x48>)
 80109f2:	f7f7 f979 	bl	8007ce8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80109f6:	4805      	ldr	r0, [pc, #20]	@ (8010a0c <CDC_Transmit_FS+0x48>)
 80109f8:	f7f7 f9b6 	bl	8007d68 <USBD_CDC_TransmitPacket>
 80109fc:	4603      	mov	r3, r0
 80109fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3710      	adds	r7, #16
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	20006fac 	.word	0x20006fac

08010a10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010a10:	b480      	push	{r7}
 8010a12:	b087      	sub	sp, #28
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60f8      	str	r0, [r7, #12]
 8010a18:	60b9      	str	r1, [r7, #8]
 8010a1a:	4613      	mov	r3, r2
 8010a1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010a22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	371c      	adds	r7, #28
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a30:	4770      	bx	lr
	...

08010a34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a34:	b480      	push	{r7}
 8010a36:	b083      	sub	sp, #12
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	6039      	str	r1, [r7, #0]
 8010a3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	2212      	movs	r2, #18
 8010a44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010a46:	4b03      	ldr	r3, [pc, #12]	@ (8010a54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	370c      	adds	r7, #12
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr
 8010a54:	2000014c 	.word	0x2000014c

08010a58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b083      	sub	sp, #12
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	4603      	mov	r3, r0
 8010a60:	6039      	str	r1, [r7, #0]
 8010a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	2204      	movs	r2, #4
 8010a68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010a6a:	4b03      	ldr	r3, [pc, #12]	@ (8010a78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	370c      	adds	r7, #12
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr
 8010a78:	20000160 	.word	0x20000160

08010a7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	4603      	mov	r3, r0
 8010a84:	6039      	str	r1, [r7, #0]
 8010a86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010a88:	79fb      	ldrb	r3, [r7, #7]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d105      	bne.n	8010a9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a8e:	683a      	ldr	r2, [r7, #0]
 8010a90:	4907      	ldr	r1, [pc, #28]	@ (8010ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8010a92:	4808      	ldr	r0, [pc, #32]	@ (8010ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8010a94:	f7f8 fbf4 	bl	8009280 <USBD_GetString>
 8010a98:	e004      	b.n	8010aa4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a9a:	683a      	ldr	r2, [r7, #0]
 8010a9c:	4904      	ldr	r1, [pc, #16]	@ (8010ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8010a9e:	4805      	ldr	r0, [pc, #20]	@ (8010ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8010aa0:	f7f8 fbee 	bl	8009280 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010aa4:	4b02      	ldr	r3, [pc, #8]	@ (8010ab0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3708      	adds	r7, #8
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	20007a88 	.word	0x20007a88
 8010ab4:	08012a34 	.word	0x08012a34

08010ab8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	4603      	mov	r3, r0
 8010ac0:	6039      	str	r1, [r7, #0]
 8010ac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010ac4:	683a      	ldr	r2, [r7, #0]
 8010ac6:	4904      	ldr	r1, [pc, #16]	@ (8010ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010ac8:	4804      	ldr	r0, [pc, #16]	@ (8010adc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010aca:	f7f8 fbd9 	bl	8009280 <USBD_GetString>
  return USBD_StrDesc;
 8010ace:	4b02      	ldr	r3, [pc, #8]	@ (8010ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3708      	adds	r7, #8
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}
 8010ad8:	20007a88 	.word	0x20007a88
 8010adc:	08012a4c 	.word	0x08012a4c

08010ae0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	6039      	str	r1, [r7, #0]
 8010aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	221a      	movs	r2, #26
 8010af0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010af2:	f000 f843 	bl	8010b7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010af6:	4b02      	ldr	r3, [pc, #8]	@ (8010b00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3708      	adds	r7, #8
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	20000164 	.word	0x20000164

08010b04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	6039      	str	r1, [r7, #0]
 8010b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010b10:	79fb      	ldrb	r3, [r7, #7]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d105      	bne.n	8010b22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b16:	683a      	ldr	r2, [r7, #0]
 8010b18:	4907      	ldr	r1, [pc, #28]	@ (8010b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b1a:	4808      	ldr	r0, [pc, #32]	@ (8010b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b1c:	f7f8 fbb0 	bl	8009280 <USBD_GetString>
 8010b20:	e004      	b.n	8010b2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b22:	683a      	ldr	r2, [r7, #0]
 8010b24:	4904      	ldr	r1, [pc, #16]	@ (8010b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b26:	4805      	ldr	r0, [pc, #20]	@ (8010b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b28:	f7f8 fbaa 	bl	8009280 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b2c:	4b02      	ldr	r3, [pc, #8]	@ (8010b38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3708      	adds	r7, #8
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
 8010b36:	bf00      	nop
 8010b38:	20007a88 	.word	0x20007a88
 8010b3c:	08012a60 	.word	0x08012a60

08010b40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b082      	sub	sp, #8
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	4603      	mov	r3, r0
 8010b48:	6039      	str	r1, [r7, #0]
 8010b4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b4c:	79fb      	ldrb	r3, [r7, #7]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d105      	bne.n	8010b5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b52:	683a      	ldr	r2, [r7, #0]
 8010b54:	4907      	ldr	r1, [pc, #28]	@ (8010b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b56:	4808      	ldr	r0, [pc, #32]	@ (8010b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b58:	f7f8 fb92 	bl	8009280 <USBD_GetString>
 8010b5c:	e004      	b.n	8010b68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b5e:	683a      	ldr	r2, [r7, #0]
 8010b60:	4904      	ldr	r1, [pc, #16]	@ (8010b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b62:	4805      	ldr	r0, [pc, #20]	@ (8010b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b64:	f7f8 fb8c 	bl	8009280 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b68:	4b02      	ldr	r3, [pc, #8]	@ (8010b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3708      	adds	r7, #8
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
 8010b72:	bf00      	nop
 8010b74:	20007a88 	.word	0x20007a88
 8010b78:	08012a6c 	.word	0x08012a6c

08010b7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010b82:	4b0f      	ldr	r3, [pc, #60]	@ (8010bc0 <Get_SerialNum+0x44>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010b88:	4b0e      	ldr	r3, [pc, #56]	@ (8010bc4 <Get_SerialNum+0x48>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8010bc8 <Get_SerialNum+0x4c>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010b94:	68fa      	ldr	r2, [r7, #12]
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4413      	add	r3, r2
 8010b9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d009      	beq.n	8010bb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010ba2:	2208      	movs	r2, #8
 8010ba4:	4909      	ldr	r1, [pc, #36]	@ (8010bcc <Get_SerialNum+0x50>)
 8010ba6:	68f8      	ldr	r0, [r7, #12]
 8010ba8:	f000 f814 	bl	8010bd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010bac:	2204      	movs	r2, #4
 8010bae:	4908      	ldr	r1, [pc, #32]	@ (8010bd0 <Get_SerialNum+0x54>)
 8010bb0:	68b8      	ldr	r0, [r7, #8]
 8010bb2:	f000 f80f 	bl	8010bd4 <IntToUnicode>
  }
}
 8010bb6:	bf00      	nop
 8010bb8:	3710      	adds	r7, #16
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	1fff7a10 	.word	0x1fff7a10
 8010bc4:	1fff7a14 	.word	0x1fff7a14
 8010bc8:	1fff7a18 	.word	0x1fff7a18
 8010bcc:	20000166 	.word	0x20000166
 8010bd0:	20000176 	.word	0x20000176

08010bd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010bd4:	b480      	push	{r7}
 8010bd6:	b087      	sub	sp, #28
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	4613      	mov	r3, r2
 8010be0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010be2:	2300      	movs	r3, #0
 8010be4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010be6:	2300      	movs	r3, #0
 8010be8:	75fb      	strb	r3, [r7, #23]
 8010bea:	e027      	b.n	8010c3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	0f1b      	lsrs	r3, r3, #28
 8010bf0:	2b09      	cmp	r3, #9
 8010bf2:	d80b      	bhi.n	8010c0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	0f1b      	lsrs	r3, r3, #28
 8010bf8:	b2da      	uxtb	r2, r3
 8010bfa:	7dfb      	ldrb	r3, [r7, #23]
 8010bfc:	005b      	lsls	r3, r3, #1
 8010bfe:	4619      	mov	r1, r3
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	440b      	add	r3, r1
 8010c04:	3230      	adds	r2, #48	@ 0x30
 8010c06:	b2d2      	uxtb	r2, r2
 8010c08:	701a      	strb	r2, [r3, #0]
 8010c0a:	e00a      	b.n	8010c22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	0f1b      	lsrs	r3, r3, #28
 8010c10:	b2da      	uxtb	r2, r3
 8010c12:	7dfb      	ldrb	r3, [r7, #23]
 8010c14:	005b      	lsls	r3, r3, #1
 8010c16:	4619      	mov	r1, r3
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	440b      	add	r3, r1
 8010c1c:	3237      	adds	r2, #55	@ 0x37
 8010c1e:	b2d2      	uxtb	r2, r2
 8010c20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	011b      	lsls	r3, r3, #4
 8010c26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010c28:	7dfb      	ldrb	r3, [r7, #23]
 8010c2a:	005b      	lsls	r3, r3, #1
 8010c2c:	3301      	adds	r3, #1
 8010c2e:	68ba      	ldr	r2, [r7, #8]
 8010c30:	4413      	add	r3, r2
 8010c32:	2200      	movs	r2, #0
 8010c34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010c36:	7dfb      	ldrb	r3, [r7, #23]
 8010c38:	3301      	adds	r3, #1
 8010c3a:	75fb      	strb	r3, [r7, #23]
 8010c3c:	7dfa      	ldrb	r2, [r7, #23]
 8010c3e:	79fb      	ldrb	r3, [r7, #7]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d3d3      	bcc.n	8010bec <IntToUnicode+0x18>
  }
}
 8010c44:	bf00      	nop
 8010c46:	bf00      	nop
 8010c48:	371c      	adds	r7, #28
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
	...

08010c54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b08a      	sub	sp, #40	@ 0x28
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c5c:	f107 0314 	add.w	r3, r7, #20
 8010c60:	2200      	movs	r2, #0
 8010c62:	601a      	str	r2, [r3, #0]
 8010c64:	605a      	str	r2, [r3, #4]
 8010c66:	609a      	str	r2, [r3, #8]
 8010c68:	60da      	str	r2, [r3, #12]
 8010c6a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010c74:	d13a      	bne.n	8010cec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c76:	2300      	movs	r3, #0
 8010c78:	613b      	str	r3, [r7, #16]
 8010c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8010cf4 <HAL_PCD_MspInit+0xa0>)
 8010c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8010cf4 <HAL_PCD_MspInit+0xa0>)
 8010c80:	f043 0301 	orr.w	r3, r3, #1
 8010c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8010c86:	4b1b      	ldr	r3, [pc, #108]	@ (8010cf4 <HAL_PCD_MspInit+0xa0>)
 8010c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c8a:	f003 0301 	and.w	r3, r3, #1
 8010c8e:	613b      	str	r3, [r7, #16]
 8010c90:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010c92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c98:	2302      	movs	r3, #2
 8010c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ca0:	2303      	movs	r3, #3
 8010ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010ca4:	230a      	movs	r3, #10
 8010ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ca8:	f107 0314 	add.w	r3, r7, #20
 8010cac:	4619      	mov	r1, r3
 8010cae:	4812      	ldr	r0, [pc, #72]	@ (8010cf8 <HAL_PCD_MspInit+0xa4>)
 8010cb0:	f7f1 fc22 	bl	80024f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8010cf4 <HAL_PCD_MspInit+0xa0>)
 8010cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8010cf4 <HAL_PCD_MspInit+0xa0>)
 8010cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010cbe:	6353      	str	r3, [r2, #52]	@ 0x34
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	60fb      	str	r3, [r7, #12]
 8010cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8010cf4 <HAL_PCD_MspInit+0xa0>)
 8010cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8010cf4 <HAL_PCD_MspInit+0xa0>)
 8010cca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010cce:	6453      	str	r3, [r2, #68]	@ 0x44
 8010cd0:	4b08      	ldr	r3, [pc, #32]	@ (8010cf4 <HAL_PCD_MspInit+0xa0>)
 8010cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010cd8:	60fb      	str	r3, [r7, #12]
 8010cda:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010cdc:	2200      	movs	r2, #0
 8010cde:	2105      	movs	r1, #5
 8010ce0:	2043      	movs	r0, #67	@ 0x43
 8010ce2:	f7f1 fbdf 	bl	80024a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010ce6:	2043      	movs	r0, #67	@ 0x43
 8010ce8:	f7f1 fbf8 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010cec:	bf00      	nop
 8010cee:	3728      	adds	r7, #40	@ 0x28
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	40023800 	.word	0x40023800
 8010cf8:	40020000 	.word	0x40020000

08010cfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010d10:	4619      	mov	r1, r3
 8010d12:	4610      	mov	r0, r2
 8010d14:	f7f7 f951 	bl	8007fba <USBD_LL_SetupStage>
}
 8010d18:	bf00      	nop
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	460b      	mov	r3, r1
 8010d2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010d32:	78fa      	ldrb	r2, [r7, #3]
 8010d34:	6879      	ldr	r1, [r7, #4]
 8010d36:	4613      	mov	r3, r2
 8010d38:	00db      	lsls	r3, r3, #3
 8010d3a:	4413      	add	r3, r2
 8010d3c:	009b      	lsls	r3, r3, #2
 8010d3e:	440b      	add	r3, r1
 8010d40:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010d44:	681a      	ldr	r2, [r3, #0]
 8010d46:	78fb      	ldrb	r3, [r7, #3]
 8010d48:	4619      	mov	r1, r3
 8010d4a:	f7f7 f98b 	bl	8008064 <USBD_LL_DataOutStage>
}
 8010d4e:	bf00      	nop
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}

08010d56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b082      	sub	sp, #8
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
 8010d5e:	460b      	mov	r3, r1
 8010d60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010d68:	78fa      	ldrb	r2, [r7, #3]
 8010d6a:	6879      	ldr	r1, [r7, #4]
 8010d6c:	4613      	mov	r3, r2
 8010d6e:	00db      	lsls	r3, r3, #3
 8010d70:	4413      	add	r3, r2
 8010d72:	009b      	lsls	r3, r3, #2
 8010d74:	440b      	add	r3, r1
 8010d76:	3320      	adds	r3, #32
 8010d78:	681a      	ldr	r2, [r3, #0]
 8010d7a:	78fb      	ldrb	r3, [r7, #3]
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	f7f7 fa24 	bl	80081ca <USBD_LL_DataInStage>
}
 8010d82:	bf00      	nop
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b082      	sub	sp, #8
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7f7 fb5e 	bl	800845a <USBD_LL_SOF>
}
 8010d9e:	bf00      	nop
 8010da0:	3708      	adds	r7, #8
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}

08010da6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010da6:	b580      	push	{r7, lr}
 8010da8:	b084      	sub	sp, #16
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010dae:	2301      	movs	r3, #1
 8010db0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	79db      	ldrb	r3, [r3, #7]
 8010db6:	2b02      	cmp	r3, #2
 8010db8:	d001      	beq.n	8010dbe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010dba:	f7f0 fef7 	bl	8001bac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010dc4:	7bfa      	ldrb	r2, [r7, #15]
 8010dc6:	4611      	mov	r1, r2
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7f7 fb02 	bl	80083d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7f7 faaa 	bl	800832e <USBD_LL_Reset>
}
 8010dda:	bf00      	nop
 8010ddc:	3710      	adds	r7, #16
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
	...

08010de4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7f7 fafd 	bl	80083f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	687a      	ldr	r2, [r7, #4]
 8010e04:	6812      	ldr	r2, [r2, #0]
 8010e06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010e0a:	f043 0301 	orr.w	r3, r3, #1
 8010e0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	7adb      	ldrb	r3, [r3, #11]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d005      	beq.n	8010e24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010e18:	4b04      	ldr	r3, [pc, #16]	@ (8010e2c <HAL_PCD_SuspendCallback+0x48>)
 8010e1a:	691b      	ldr	r3, [r3, #16]
 8010e1c:	4a03      	ldr	r2, [pc, #12]	@ (8010e2c <HAL_PCD_SuspendCallback+0x48>)
 8010e1e:	f043 0306 	orr.w	r3, r3, #6
 8010e22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010e24:	bf00      	nop
 8010e26:	3708      	adds	r7, #8
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	e000ed00 	.word	0xe000ed00

08010e30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7f7 faf3 	bl	800842a <USBD_LL_Resume>
}
 8010e44:	bf00      	nop
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	460b      	mov	r3, r1
 8010e56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010e5e:	78fa      	ldrb	r2, [r7, #3]
 8010e60:	4611      	mov	r1, r2
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7f7 fb4b 	bl	80084fe <USBD_LL_IsoOUTIncomplete>
}
 8010e68:	bf00      	nop
 8010e6a:	3708      	adds	r7, #8
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}

08010e70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	460b      	mov	r3, r1
 8010e7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010e82:	78fa      	ldrb	r2, [r7, #3]
 8010e84:	4611      	mov	r1, r2
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7f7 fb07 	bl	800849a <USBD_LL_IsoINIncomplete>
}
 8010e8c:	bf00      	nop
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7f7 fb5d 	bl	8008562 <USBD_LL_DevConnected>
}
 8010ea8:	bf00      	nop
 8010eaa:	3708      	adds	r7, #8
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7f7 fb5a 	bl	8008578 <USBD_LL_DevDisconnected>
}
 8010ec4:	bf00      	nop
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d13c      	bne.n	8010f56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010edc:	4a20      	ldr	r2, [pc, #128]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010ee8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010eec:	4b1c      	ldr	r3, [pc, #112]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010eee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8010ef2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010ef6:	2204      	movs	r2, #4
 8010ef8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010efa:	4b19      	ldr	r3, [pc, #100]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010efc:	2202      	movs	r2, #2
 8010efe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010f00:	4b17      	ldr	r3, [pc, #92]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010f02:	2200      	movs	r2, #0
 8010f04:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010f06:	4b16      	ldr	r3, [pc, #88]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010f08:	2202      	movs	r2, #2
 8010f0a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010f0c:	4b14      	ldr	r3, [pc, #80]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010f0e:	2200      	movs	r2, #0
 8010f10:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010f12:	4b13      	ldr	r3, [pc, #76]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010f14:	2200      	movs	r2, #0
 8010f16:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010f18:	4b11      	ldr	r3, [pc, #68]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010f1e:	4b10      	ldr	r3, [pc, #64]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010f20:	2200      	movs	r2, #0
 8010f22:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010f24:	4b0e      	ldr	r3, [pc, #56]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010f26:	2200      	movs	r2, #0
 8010f28:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010f2a:	480d      	ldr	r0, [pc, #52]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010f2c:	f7f1 fc81 	bl	8002832 <HAL_PCD_Init>
 8010f30:	4603      	mov	r3, r0
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d001      	beq.n	8010f3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010f36:	f7f0 fe39 	bl	8001bac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010f3a:	2180      	movs	r1, #128	@ 0x80
 8010f3c:	4808      	ldr	r0, [pc, #32]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010f3e:	f7f2 feac 	bl	8003c9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010f42:	2240      	movs	r2, #64	@ 0x40
 8010f44:	2100      	movs	r1, #0
 8010f46:	4806      	ldr	r0, [pc, #24]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010f48:	f7f2 fe60 	bl	8003c0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010f4c:	2280      	movs	r2, #128	@ 0x80
 8010f4e:	2101      	movs	r1, #1
 8010f50:	4803      	ldr	r0, [pc, #12]	@ (8010f60 <USBD_LL_Init+0x94>)
 8010f52:	f7f2 fe5b 	bl	8003c0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010f56:	2300      	movs	r3, #0
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	20007c88 	.word	0x20007c88

08010f64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b084      	sub	sp, #16
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f70:	2300      	movs	r3, #0
 8010f72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7f1 fd68 	bl	8002a50 <HAL_PCD_Start>
 8010f80:	4603      	mov	r3, r0
 8010f82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f84:	7bfb      	ldrb	r3, [r7, #15]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f000 f942 	bl	8011210 <USBD_Get_USB_Status>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f90:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3710      	adds	r7, #16
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}

08010f9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010f9a:	b580      	push	{r7, lr}
 8010f9c:	b084      	sub	sp, #16
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
 8010fa2:	4608      	mov	r0, r1
 8010fa4:	4611      	mov	r1, r2
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	4603      	mov	r3, r0
 8010faa:	70fb      	strb	r3, [r7, #3]
 8010fac:	460b      	mov	r3, r1
 8010fae:	70bb      	strb	r3, [r7, #2]
 8010fb0:	4613      	mov	r3, r2
 8010fb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010fc2:	78bb      	ldrb	r3, [r7, #2]
 8010fc4:	883a      	ldrh	r2, [r7, #0]
 8010fc6:	78f9      	ldrb	r1, [r7, #3]
 8010fc8:	f7f2 fa3c 	bl	8003444 <HAL_PCD_EP_Open>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fd0:	7bfb      	ldrb	r3, [r7, #15]
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f000 f91c 	bl	8011210 <USBD_Get_USB_Status>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3710      	adds	r7, #16
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}

08010fe6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010fe6:	b580      	push	{r7, lr}
 8010fe8:	b084      	sub	sp, #16
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	6078      	str	r0, [r7, #4]
 8010fee:	460b      	mov	r3, r1
 8010ff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011000:	78fa      	ldrb	r2, [r7, #3]
 8011002:	4611      	mov	r1, r2
 8011004:	4618      	mov	r0, r3
 8011006:	f7f2 fa85 	bl	8003514 <HAL_PCD_EP_Close>
 801100a:	4603      	mov	r3, r0
 801100c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801100e:	7bfb      	ldrb	r3, [r7, #15]
 8011010:	4618      	mov	r0, r3
 8011012:	f000 f8fd 	bl	8011210 <USBD_Get_USB_Status>
 8011016:	4603      	mov	r3, r0
 8011018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801101a:	7bbb      	ldrb	r3, [r7, #14]
}
 801101c:	4618      	mov	r0, r3
 801101e:	3710      	adds	r7, #16
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	460b      	mov	r3, r1
 801102e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011030:	2300      	movs	r3, #0
 8011032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011034:	2300      	movs	r3, #0
 8011036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801103e:	78fa      	ldrb	r2, [r7, #3]
 8011040:	4611      	mov	r1, r2
 8011042:	4618      	mov	r0, r3
 8011044:	f7f2 fb3d 	bl	80036c2 <HAL_PCD_EP_SetStall>
 8011048:	4603      	mov	r3, r0
 801104a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801104c:	7bfb      	ldrb	r3, [r7, #15]
 801104e:	4618      	mov	r0, r3
 8011050:	f000 f8de 	bl	8011210 <USBD_Get_USB_Status>
 8011054:	4603      	mov	r3, r0
 8011056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011058:	7bbb      	ldrb	r3, [r7, #14]
}
 801105a:	4618      	mov	r0, r3
 801105c:	3710      	adds	r7, #16
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}

08011062 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011062:	b580      	push	{r7, lr}
 8011064:	b084      	sub	sp, #16
 8011066:	af00      	add	r7, sp, #0
 8011068:	6078      	str	r0, [r7, #4]
 801106a:	460b      	mov	r3, r1
 801106c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801106e:	2300      	movs	r3, #0
 8011070:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011072:	2300      	movs	r3, #0
 8011074:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801107c:	78fa      	ldrb	r2, [r7, #3]
 801107e:	4611      	mov	r1, r2
 8011080:	4618      	mov	r0, r3
 8011082:	f7f2 fb81 	bl	8003788 <HAL_PCD_EP_ClrStall>
 8011086:	4603      	mov	r3, r0
 8011088:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801108a:	7bfb      	ldrb	r3, [r7, #15]
 801108c:	4618      	mov	r0, r3
 801108e:	f000 f8bf 	bl	8011210 <USBD_Get_USB_Status>
 8011092:	4603      	mov	r3, r0
 8011094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011096:	7bbb      	ldrb	r3, [r7, #14]
}
 8011098:	4618      	mov	r0, r3
 801109a:	3710      	adds	r7, #16
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110a0:	b480      	push	{r7}
 80110a2:	b085      	sub	sp, #20
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	460b      	mov	r3, r1
 80110aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80110b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80110b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	da0b      	bge.n	80110d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80110bc:	78fb      	ldrb	r3, [r7, #3]
 80110be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80110c2:	68f9      	ldr	r1, [r7, #12]
 80110c4:	4613      	mov	r3, r2
 80110c6:	00db      	lsls	r3, r3, #3
 80110c8:	4413      	add	r3, r2
 80110ca:	009b      	lsls	r3, r3, #2
 80110cc:	440b      	add	r3, r1
 80110ce:	3316      	adds	r3, #22
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	e00b      	b.n	80110ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80110d4:	78fb      	ldrb	r3, [r7, #3]
 80110d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80110da:	68f9      	ldr	r1, [r7, #12]
 80110dc:	4613      	mov	r3, r2
 80110de:	00db      	lsls	r3, r3, #3
 80110e0:	4413      	add	r3, r2
 80110e2:	009b      	lsls	r3, r3, #2
 80110e4:	440b      	add	r3, r1
 80110e6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80110ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3714      	adds	r7, #20
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr

080110f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	460b      	mov	r3, r1
 8011102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011104:	2300      	movs	r3, #0
 8011106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011108:	2300      	movs	r3, #0
 801110a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011112:	78fa      	ldrb	r2, [r7, #3]
 8011114:	4611      	mov	r1, r2
 8011116:	4618      	mov	r0, r3
 8011118:	f7f2 f970 	bl	80033fc <HAL_PCD_SetAddress>
 801111c:	4603      	mov	r3, r0
 801111e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011120:	7bfb      	ldrb	r3, [r7, #15]
 8011122:	4618      	mov	r0, r3
 8011124:	f000 f874 	bl	8011210 <USBD_Get_USB_Status>
 8011128:	4603      	mov	r3, r0
 801112a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801112c:	7bbb      	ldrb	r3, [r7, #14]
}
 801112e:	4618      	mov	r0, r3
 8011130:	3710      	adds	r7, #16
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}

08011136 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011136:	b580      	push	{r7, lr}
 8011138:	b086      	sub	sp, #24
 801113a:	af00      	add	r7, sp, #0
 801113c:	60f8      	str	r0, [r7, #12]
 801113e:	607a      	str	r2, [r7, #4]
 8011140:	603b      	str	r3, [r7, #0]
 8011142:	460b      	mov	r3, r1
 8011144:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011146:	2300      	movs	r3, #0
 8011148:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801114a:	2300      	movs	r3, #0
 801114c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011154:	7af9      	ldrb	r1, [r7, #11]
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	f7f2 fa78 	bl	800364e <HAL_PCD_EP_Transmit>
 801115e:	4603      	mov	r3, r0
 8011160:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011162:	7dfb      	ldrb	r3, [r7, #23]
 8011164:	4618      	mov	r0, r3
 8011166:	f000 f853 	bl	8011210 <USBD_Get_USB_Status>
 801116a:	4603      	mov	r3, r0
 801116c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801116e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011170:	4618      	mov	r0, r3
 8011172:	3718      	adds	r7, #24
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}

08011178 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b086      	sub	sp, #24
 801117c:	af00      	add	r7, sp, #0
 801117e:	60f8      	str	r0, [r7, #12]
 8011180:	607a      	str	r2, [r7, #4]
 8011182:	603b      	str	r3, [r7, #0]
 8011184:	460b      	mov	r3, r1
 8011186:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011188:	2300      	movs	r3, #0
 801118a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801118c:	2300      	movs	r3, #0
 801118e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011196:	7af9      	ldrb	r1, [r7, #11]
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	687a      	ldr	r2, [r7, #4]
 801119c:	f7f2 fa04 	bl	80035a8 <HAL_PCD_EP_Receive>
 80111a0:	4603      	mov	r3, r0
 80111a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111a4:	7dfb      	ldrb	r3, [r7, #23]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f000 f832 	bl	8011210 <USBD_Get_USB_Status>
 80111ac:	4603      	mov	r3, r0
 80111ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80111b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3718      	adds	r7, #24
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111ba:	b580      	push	{r7, lr}
 80111bc:	b082      	sub	sp, #8
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
 80111c2:	460b      	mov	r3, r1
 80111c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80111cc:	78fa      	ldrb	r2, [r7, #3]
 80111ce:	4611      	mov	r1, r2
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7f2 fa24 	bl	800361e <HAL_PCD_EP_GetRxCount>
 80111d6:	4603      	mov	r3, r0
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3708      	adds	r7, #8
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b083      	sub	sp, #12
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80111e8:	4b03      	ldr	r3, [pc, #12]	@ (80111f8 <USBD_static_malloc+0x18>)
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	370c      	adds	r7, #12
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop
 80111f8:	2000816c 	.word	0x2000816c

080111fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]

}
 8011204:	bf00      	nop
 8011206:	370c      	adds	r7, #12
 8011208:	46bd      	mov	sp, r7
 801120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120e:	4770      	bx	lr

08011210 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011210:	b480      	push	{r7}
 8011212:	b085      	sub	sp, #20
 8011214:	af00      	add	r7, sp, #0
 8011216:	4603      	mov	r3, r0
 8011218:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801121a:	2300      	movs	r3, #0
 801121c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801121e:	79fb      	ldrb	r3, [r7, #7]
 8011220:	2b03      	cmp	r3, #3
 8011222:	d817      	bhi.n	8011254 <USBD_Get_USB_Status+0x44>
 8011224:	a201      	add	r2, pc, #4	@ (adr r2, 801122c <USBD_Get_USB_Status+0x1c>)
 8011226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801122a:	bf00      	nop
 801122c:	0801123d 	.word	0x0801123d
 8011230:	08011243 	.word	0x08011243
 8011234:	08011249 	.word	0x08011249
 8011238:	0801124f 	.word	0x0801124f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801123c:	2300      	movs	r3, #0
 801123e:	73fb      	strb	r3, [r7, #15]
    break;
 8011240:	e00b      	b.n	801125a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011242:	2303      	movs	r3, #3
 8011244:	73fb      	strb	r3, [r7, #15]
    break;
 8011246:	e008      	b.n	801125a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011248:	2301      	movs	r3, #1
 801124a:	73fb      	strb	r3, [r7, #15]
    break;
 801124c:	e005      	b.n	801125a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801124e:	2303      	movs	r3, #3
 8011250:	73fb      	strb	r3, [r7, #15]
    break;
 8011252:	e002      	b.n	801125a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011254:	2303      	movs	r3, #3
 8011256:	73fb      	strb	r3, [r7, #15]
    break;
 8011258:	bf00      	nop
  }
  return usb_status;
 801125a:	7bfb      	ldrb	r3, [r7, #15]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3714      	adds	r7, #20
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr

08011268 <srand>:
 8011268:	b538      	push	{r3, r4, r5, lr}
 801126a:	4b10      	ldr	r3, [pc, #64]	@ (80112ac <srand+0x44>)
 801126c:	681d      	ldr	r5, [r3, #0]
 801126e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011270:	4604      	mov	r4, r0
 8011272:	b9b3      	cbnz	r3, 80112a2 <srand+0x3a>
 8011274:	2018      	movs	r0, #24
 8011276:	f000 fad1 	bl	801181c <malloc>
 801127a:	4602      	mov	r2, r0
 801127c:	6328      	str	r0, [r5, #48]	@ 0x30
 801127e:	b920      	cbnz	r0, 801128a <srand+0x22>
 8011280:	4b0b      	ldr	r3, [pc, #44]	@ (80112b0 <srand+0x48>)
 8011282:	480c      	ldr	r0, [pc, #48]	@ (80112b4 <srand+0x4c>)
 8011284:	2146      	movs	r1, #70	@ 0x46
 8011286:	f000 fa61 	bl	801174c <__assert_func>
 801128a:	490b      	ldr	r1, [pc, #44]	@ (80112b8 <srand+0x50>)
 801128c:	4b0b      	ldr	r3, [pc, #44]	@ (80112bc <srand+0x54>)
 801128e:	e9c0 1300 	strd	r1, r3, [r0]
 8011292:	4b0b      	ldr	r3, [pc, #44]	@ (80112c0 <srand+0x58>)
 8011294:	6083      	str	r3, [r0, #8]
 8011296:	230b      	movs	r3, #11
 8011298:	8183      	strh	r3, [r0, #12]
 801129a:	2100      	movs	r1, #0
 801129c:	2001      	movs	r0, #1
 801129e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80112a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80112a4:	2200      	movs	r2, #0
 80112a6:	611c      	str	r4, [r3, #16]
 80112a8:	615a      	str	r2, [r3, #20]
 80112aa:	bd38      	pop	{r3, r4, r5, pc}
 80112ac:	2000018c 	.word	0x2000018c
 80112b0:	08012ef8 	.word	0x08012ef8
 80112b4:	08012f0f 	.word	0x08012f0f
 80112b8:	abcd330e 	.word	0xabcd330e
 80112bc:	e66d1234 	.word	0xe66d1234
 80112c0:	0005deec 	.word	0x0005deec

080112c4 <rand>:
 80112c4:	4b16      	ldr	r3, [pc, #88]	@ (8011320 <rand+0x5c>)
 80112c6:	b510      	push	{r4, lr}
 80112c8:	681c      	ldr	r4, [r3, #0]
 80112ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80112cc:	b9b3      	cbnz	r3, 80112fc <rand+0x38>
 80112ce:	2018      	movs	r0, #24
 80112d0:	f000 faa4 	bl	801181c <malloc>
 80112d4:	4602      	mov	r2, r0
 80112d6:	6320      	str	r0, [r4, #48]	@ 0x30
 80112d8:	b920      	cbnz	r0, 80112e4 <rand+0x20>
 80112da:	4b12      	ldr	r3, [pc, #72]	@ (8011324 <rand+0x60>)
 80112dc:	4812      	ldr	r0, [pc, #72]	@ (8011328 <rand+0x64>)
 80112de:	2152      	movs	r1, #82	@ 0x52
 80112e0:	f000 fa34 	bl	801174c <__assert_func>
 80112e4:	4911      	ldr	r1, [pc, #68]	@ (801132c <rand+0x68>)
 80112e6:	4b12      	ldr	r3, [pc, #72]	@ (8011330 <rand+0x6c>)
 80112e8:	e9c0 1300 	strd	r1, r3, [r0]
 80112ec:	4b11      	ldr	r3, [pc, #68]	@ (8011334 <rand+0x70>)
 80112ee:	6083      	str	r3, [r0, #8]
 80112f0:	230b      	movs	r3, #11
 80112f2:	8183      	strh	r3, [r0, #12]
 80112f4:	2100      	movs	r1, #0
 80112f6:	2001      	movs	r0, #1
 80112f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80112fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80112fe:	480e      	ldr	r0, [pc, #56]	@ (8011338 <rand+0x74>)
 8011300:	690b      	ldr	r3, [r1, #16]
 8011302:	694c      	ldr	r4, [r1, #20]
 8011304:	4a0d      	ldr	r2, [pc, #52]	@ (801133c <rand+0x78>)
 8011306:	4358      	muls	r0, r3
 8011308:	fb02 0004 	mla	r0, r2, r4, r0
 801130c:	fba3 3202 	umull	r3, r2, r3, r2
 8011310:	3301      	adds	r3, #1
 8011312:	eb40 0002 	adc.w	r0, r0, r2
 8011316:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801131a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801131e:	bd10      	pop	{r4, pc}
 8011320:	2000018c 	.word	0x2000018c
 8011324:	08012ef8 	.word	0x08012ef8
 8011328:	08012f0f 	.word	0x08012f0f
 801132c:	abcd330e 	.word	0xabcd330e
 8011330:	e66d1234 	.word	0xe66d1234
 8011334:	0005deec 	.word	0x0005deec
 8011338:	5851f42d 	.word	0x5851f42d
 801133c:	4c957f2d 	.word	0x4c957f2d

08011340 <std>:
 8011340:	2300      	movs	r3, #0
 8011342:	b510      	push	{r4, lr}
 8011344:	4604      	mov	r4, r0
 8011346:	e9c0 3300 	strd	r3, r3, [r0]
 801134a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801134e:	6083      	str	r3, [r0, #8]
 8011350:	8181      	strh	r1, [r0, #12]
 8011352:	6643      	str	r3, [r0, #100]	@ 0x64
 8011354:	81c2      	strh	r2, [r0, #14]
 8011356:	6183      	str	r3, [r0, #24]
 8011358:	4619      	mov	r1, r3
 801135a:	2208      	movs	r2, #8
 801135c:	305c      	adds	r0, #92	@ 0x5c
 801135e:	f000 f914 	bl	801158a <memset>
 8011362:	4b0d      	ldr	r3, [pc, #52]	@ (8011398 <std+0x58>)
 8011364:	6263      	str	r3, [r4, #36]	@ 0x24
 8011366:	4b0d      	ldr	r3, [pc, #52]	@ (801139c <std+0x5c>)
 8011368:	62a3      	str	r3, [r4, #40]	@ 0x28
 801136a:	4b0d      	ldr	r3, [pc, #52]	@ (80113a0 <std+0x60>)
 801136c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801136e:	4b0d      	ldr	r3, [pc, #52]	@ (80113a4 <std+0x64>)
 8011370:	6323      	str	r3, [r4, #48]	@ 0x30
 8011372:	4b0d      	ldr	r3, [pc, #52]	@ (80113a8 <std+0x68>)
 8011374:	6224      	str	r4, [r4, #32]
 8011376:	429c      	cmp	r4, r3
 8011378:	d006      	beq.n	8011388 <std+0x48>
 801137a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801137e:	4294      	cmp	r4, r2
 8011380:	d002      	beq.n	8011388 <std+0x48>
 8011382:	33d0      	adds	r3, #208	@ 0xd0
 8011384:	429c      	cmp	r4, r3
 8011386:	d105      	bne.n	8011394 <std+0x54>
 8011388:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801138c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011390:	f000 b9ca 	b.w	8011728 <__retarget_lock_init_recursive>
 8011394:	bd10      	pop	{r4, pc}
 8011396:	bf00      	nop
 8011398:	08011505 	.word	0x08011505
 801139c:	08011527 	.word	0x08011527
 80113a0:	0801155f 	.word	0x0801155f
 80113a4:	08011583 	.word	0x08011583
 80113a8:	2000838c 	.word	0x2000838c

080113ac <stdio_exit_handler>:
 80113ac:	4a02      	ldr	r2, [pc, #8]	@ (80113b8 <stdio_exit_handler+0xc>)
 80113ae:	4903      	ldr	r1, [pc, #12]	@ (80113bc <stdio_exit_handler+0x10>)
 80113b0:	4803      	ldr	r0, [pc, #12]	@ (80113c0 <stdio_exit_handler+0x14>)
 80113b2:	f000 b869 	b.w	8011488 <_fwalk_sglue>
 80113b6:	bf00      	nop
 80113b8:	20000180 	.word	0x20000180
 80113bc:	0801205d 	.word	0x0801205d
 80113c0:	20000190 	.word	0x20000190

080113c4 <cleanup_stdio>:
 80113c4:	6841      	ldr	r1, [r0, #4]
 80113c6:	4b0c      	ldr	r3, [pc, #48]	@ (80113f8 <cleanup_stdio+0x34>)
 80113c8:	4299      	cmp	r1, r3
 80113ca:	b510      	push	{r4, lr}
 80113cc:	4604      	mov	r4, r0
 80113ce:	d001      	beq.n	80113d4 <cleanup_stdio+0x10>
 80113d0:	f000 fe44 	bl	801205c <_fflush_r>
 80113d4:	68a1      	ldr	r1, [r4, #8]
 80113d6:	4b09      	ldr	r3, [pc, #36]	@ (80113fc <cleanup_stdio+0x38>)
 80113d8:	4299      	cmp	r1, r3
 80113da:	d002      	beq.n	80113e2 <cleanup_stdio+0x1e>
 80113dc:	4620      	mov	r0, r4
 80113de:	f000 fe3d 	bl	801205c <_fflush_r>
 80113e2:	68e1      	ldr	r1, [r4, #12]
 80113e4:	4b06      	ldr	r3, [pc, #24]	@ (8011400 <cleanup_stdio+0x3c>)
 80113e6:	4299      	cmp	r1, r3
 80113e8:	d004      	beq.n	80113f4 <cleanup_stdio+0x30>
 80113ea:	4620      	mov	r0, r4
 80113ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113f0:	f000 be34 	b.w	801205c <_fflush_r>
 80113f4:	bd10      	pop	{r4, pc}
 80113f6:	bf00      	nop
 80113f8:	2000838c 	.word	0x2000838c
 80113fc:	200083f4 	.word	0x200083f4
 8011400:	2000845c 	.word	0x2000845c

08011404 <global_stdio_init.part.0>:
 8011404:	b510      	push	{r4, lr}
 8011406:	4b0b      	ldr	r3, [pc, #44]	@ (8011434 <global_stdio_init.part.0+0x30>)
 8011408:	4c0b      	ldr	r4, [pc, #44]	@ (8011438 <global_stdio_init.part.0+0x34>)
 801140a:	4a0c      	ldr	r2, [pc, #48]	@ (801143c <global_stdio_init.part.0+0x38>)
 801140c:	601a      	str	r2, [r3, #0]
 801140e:	4620      	mov	r0, r4
 8011410:	2200      	movs	r2, #0
 8011412:	2104      	movs	r1, #4
 8011414:	f7ff ff94 	bl	8011340 <std>
 8011418:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801141c:	2201      	movs	r2, #1
 801141e:	2109      	movs	r1, #9
 8011420:	f7ff ff8e 	bl	8011340 <std>
 8011424:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011428:	2202      	movs	r2, #2
 801142a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801142e:	2112      	movs	r1, #18
 8011430:	f7ff bf86 	b.w	8011340 <std>
 8011434:	200084c4 	.word	0x200084c4
 8011438:	2000838c 	.word	0x2000838c
 801143c:	080113ad 	.word	0x080113ad

08011440 <__sfp_lock_acquire>:
 8011440:	4801      	ldr	r0, [pc, #4]	@ (8011448 <__sfp_lock_acquire+0x8>)
 8011442:	f000 b972 	b.w	801172a <__retarget_lock_acquire_recursive>
 8011446:	bf00      	nop
 8011448:	200084cd 	.word	0x200084cd

0801144c <__sfp_lock_release>:
 801144c:	4801      	ldr	r0, [pc, #4]	@ (8011454 <__sfp_lock_release+0x8>)
 801144e:	f000 b96d 	b.w	801172c <__retarget_lock_release_recursive>
 8011452:	bf00      	nop
 8011454:	200084cd 	.word	0x200084cd

08011458 <__sinit>:
 8011458:	b510      	push	{r4, lr}
 801145a:	4604      	mov	r4, r0
 801145c:	f7ff fff0 	bl	8011440 <__sfp_lock_acquire>
 8011460:	6a23      	ldr	r3, [r4, #32]
 8011462:	b11b      	cbz	r3, 801146c <__sinit+0x14>
 8011464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011468:	f7ff bff0 	b.w	801144c <__sfp_lock_release>
 801146c:	4b04      	ldr	r3, [pc, #16]	@ (8011480 <__sinit+0x28>)
 801146e:	6223      	str	r3, [r4, #32]
 8011470:	4b04      	ldr	r3, [pc, #16]	@ (8011484 <__sinit+0x2c>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d1f5      	bne.n	8011464 <__sinit+0xc>
 8011478:	f7ff ffc4 	bl	8011404 <global_stdio_init.part.0>
 801147c:	e7f2      	b.n	8011464 <__sinit+0xc>
 801147e:	bf00      	nop
 8011480:	080113c5 	.word	0x080113c5
 8011484:	200084c4 	.word	0x200084c4

08011488 <_fwalk_sglue>:
 8011488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801148c:	4607      	mov	r7, r0
 801148e:	4688      	mov	r8, r1
 8011490:	4614      	mov	r4, r2
 8011492:	2600      	movs	r6, #0
 8011494:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011498:	f1b9 0901 	subs.w	r9, r9, #1
 801149c:	d505      	bpl.n	80114aa <_fwalk_sglue+0x22>
 801149e:	6824      	ldr	r4, [r4, #0]
 80114a0:	2c00      	cmp	r4, #0
 80114a2:	d1f7      	bne.n	8011494 <_fwalk_sglue+0xc>
 80114a4:	4630      	mov	r0, r6
 80114a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114aa:	89ab      	ldrh	r3, [r5, #12]
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d907      	bls.n	80114c0 <_fwalk_sglue+0x38>
 80114b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80114b4:	3301      	adds	r3, #1
 80114b6:	d003      	beq.n	80114c0 <_fwalk_sglue+0x38>
 80114b8:	4629      	mov	r1, r5
 80114ba:	4638      	mov	r0, r7
 80114bc:	47c0      	blx	r8
 80114be:	4306      	orrs	r6, r0
 80114c0:	3568      	adds	r5, #104	@ 0x68
 80114c2:	e7e9      	b.n	8011498 <_fwalk_sglue+0x10>

080114c4 <siprintf>:
 80114c4:	b40e      	push	{r1, r2, r3}
 80114c6:	b500      	push	{lr}
 80114c8:	b09c      	sub	sp, #112	@ 0x70
 80114ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80114cc:	9002      	str	r0, [sp, #8]
 80114ce:	9006      	str	r0, [sp, #24]
 80114d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80114d4:	4809      	ldr	r0, [pc, #36]	@ (80114fc <siprintf+0x38>)
 80114d6:	9107      	str	r1, [sp, #28]
 80114d8:	9104      	str	r1, [sp, #16]
 80114da:	4909      	ldr	r1, [pc, #36]	@ (8011500 <siprintf+0x3c>)
 80114dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80114e0:	9105      	str	r1, [sp, #20]
 80114e2:	6800      	ldr	r0, [r0, #0]
 80114e4:	9301      	str	r3, [sp, #4]
 80114e6:	a902      	add	r1, sp, #8
 80114e8:	f000 faaa 	bl	8011a40 <_svfiprintf_r>
 80114ec:	9b02      	ldr	r3, [sp, #8]
 80114ee:	2200      	movs	r2, #0
 80114f0:	701a      	strb	r2, [r3, #0]
 80114f2:	b01c      	add	sp, #112	@ 0x70
 80114f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80114f8:	b003      	add	sp, #12
 80114fa:	4770      	bx	lr
 80114fc:	2000018c 	.word	0x2000018c
 8011500:	ffff0208 	.word	0xffff0208

08011504 <__sread>:
 8011504:	b510      	push	{r4, lr}
 8011506:	460c      	mov	r4, r1
 8011508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801150c:	f000 f8be 	bl	801168c <_read_r>
 8011510:	2800      	cmp	r0, #0
 8011512:	bfab      	itete	ge
 8011514:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011516:	89a3      	ldrhlt	r3, [r4, #12]
 8011518:	181b      	addge	r3, r3, r0
 801151a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801151e:	bfac      	ite	ge
 8011520:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011522:	81a3      	strhlt	r3, [r4, #12]
 8011524:	bd10      	pop	{r4, pc}

08011526 <__swrite>:
 8011526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801152a:	461f      	mov	r7, r3
 801152c:	898b      	ldrh	r3, [r1, #12]
 801152e:	05db      	lsls	r3, r3, #23
 8011530:	4605      	mov	r5, r0
 8011532:	460c      	mov	r4, r1
 8011534:	4616      	mov	r6, r2
 8011536:	d505      	bpl.n	8011544 <__swrite+0x1e>
 8011538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801153c:	2302      	movs	r3, #2
 801153e:	2200      	movs	r2, #0
 8011540:	f000 f892 	bl	8011668 <_lseek_r>
 8011544:	89a3      	ldrh	r3, [r4, #12]
 8011546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801154a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801154e:	81a3      	strh	r3, [r4, #12]
 8011550:	4632      	mov	r2, r6
 8011552:	463b      	mov	r3, r7
 8011554:	4628      	mov	r0, r5
 8011556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801155a:	f000 b8a9 	b.w	80116b0 <_write_r>

0801155e <__sseek>:
 801155e:	b510      	push	{r4, lr}
 8011560:	460c      	mov	r4, r1
 8011562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011566:	f000 f87f 	bl	8011668 <_lseek_r>
 801156a:	1c43      	adds	r3, r0, #1
 801156c:	89a3      	ldrh	r3, [r4, #12]
 801156e:	bf15      	itete	ne
 8011570:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011572:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011576:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801157a:	81a3      	strheq	r3, [r4, #12]
 801157c:	bf18      	it	ne
 801157e:	81a3      	strhne	r3, [r4, #12]
 8011580:	bd10      	pop	{r4, pc}

08011582 <__sclose>:
 8011582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011586:	f000 b809 	b.w	801159c <_close_r>

0801158a <memset>:
 801158a:	4402      	add	r2, r0
 801158c:	4603      	mov	r3, r0
 801158e:	4293      	cmp	r3, r2
 8011590:	d100      	bne.n	8011594 <memset+0xa>
 8011592:	4770      	bx	lr
 8011594:	f803 1b01 	strb.w	r1, [r3], #1
 8011598:	e7f9      	b.n	801158e <memset+0x4>
	...

0801159c <_close_r>:
 801159c:	b538      	push	{r3, r4, r5, lr}
 801159e:	4d06      	ldr	r5, [pc, #24]	@ (80115b8 <_close_r+0x1c>)
 80115a0:	2300      	movs	r3, #0
 80115a2:	4604      	mov	r4, r0
 80115a4:	4608      	mov	r0, r1
 80115a6:	602b      	str	r3, [r5, #0]
 80115a8:	f7f0 fd4c 	bl	8002044 <_close>
 80115ac:	1c43      	adds	r3, r0, #1
 80115ae:	d102      	bne.n	80115b6 <_close_r+0x1a>
 80115b0:	682b      	ldr	r3, [r5, #0]
 80115b2:	b103      	cbz	r3, 80115b6 <_close_r+0x1a>
 80115b4:	6023      	str	r3, [r4, #0]
 80115b6:	bd38      	pop	{r3, r4, r5, pc}
 80115b8:	200084c8 	.word	0x200084c8

080115bc <_reclaim_reent>:
 80115bc:	4b29      	ldr	r3, [pc, #164]	@ (8011664 <_reclaim_reent+0xa8>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	4283      	cmp	r3, r0
 80115c2:	b570      	push	{r4, r5, r6, lr}
 80115c4:	4604      	mov	r4, r0
 80115c6:	d04b      	beq.n	8011660 <_reclaim_reent+0xa4>
 80115c8:	69c3      	ldr	r3, [r0, #28]
 80115ca:	b1ab      	cbz	r3, 80115f8 <_reclaim_reent+0x3c>
 80115cc:	68db      	ldr	r3, [r3, #12]
 80115ce:	b16b      	cbz	r3, 80115ec <_reclaim_reent+0x30>
 80115d0:	2500      	movs	r5, #0
 80115d2:	69e3      	ldr	r3, [r4, #28]
 80115d4:	68db      	ldr	r3, [r3, #12]
 80115d6:	5959      	ldr	r1, [r3, r5]
 80115d8:	2900      	cmp	r1, #0
 80115da:	d13b      	bne.n	8011654 <_reclaim_reent+0x98>
 80115dc:	3504      	adds	r5, #4
 80115de:	2d80      	cmp	r5, #128	@ 0x80
 80115e0:	d1f7      	bne.n	80115d2 <_reclaim_reent+0x16>
 80115e2:	69e3      	ldr	r3, [r4, #28]
 80115e4:	4620      	mov	r0, r4
 80115e6:	68d9      	ldr	r1, [r3, #12]
 80115e8:	f000 f8ce 	bl	8011788 <_free_r>
 80115ec:	69e3      	ldr	r3, [r4, #28]
 80115ee:	6819      	ldr	r1, [r3, #0]
 80115f0:	b111      	cbz	r1, 80115f8 <_reclaim_reent+0x3c>
 80115f2:	4620      	mov	r0, r4
 80115f4:	f000 f8c8 	bl	8011788 <_free_r>
 80115f8:	6961      	ldr	r1, [r4, #20]
 80115fa:	b111      	cbz	r1, 8011602 <_reclaim_reent+0x46>
 80115fc:	4620      	mov	r0, r4
 80115fe:	f000 f8c3 	bl	8011788 <_free_r>
 8011602:	69e1      	ldr	r1, [r4, #28]
 8011604:	b111      	cbz	r1, 801160c <_reclaim_reent+0x50>
 8011606:	4620      	mov	r0, r4
 8011608:	f000 f8be 	bl	8011788 <_free_r>
 801160c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801160e:	b111      	cbz	r1, 8011616 <_reclaim_reent+0x5a>
 8011610:	4620      	mov	r0, r4
 8011612:	f000 f8b9 	bl	8011788 <_free_r>
 8011616:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011618:	b111      	cbz	r1, 8011620 <_reclaim_reent+0x64>
 801161a:	4620      	mov	r0, r4
 801161c:	f000 f8b4 	bl	8011788 <_free_r>
 8011620:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011622:	b111      	cbz	r1, 801162a <_reclaim_reent+0x6e>
 8011624:	4620      	mov	r0, r4
 8011626:	f000 f8af 	bl	8011788 <_free_r>
 801162a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801162c:	b111      	cbz	r1, 8011634 <_reclaim_reent+0x78>
 801162e:	4620      	mov	r0, r4
 8011630:	f000 f8aa 	bl	8011788 <_free_r>
 8011634:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011636:	b111      	cbz	r1, 801163e <_reclaim_reent+0x82>
 8011638:	4620      	mov	r0, r4
 801163a:	f000 f8a5 	bl	8011788 <_free_r>
 801163e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011640:	b111      	cbz	r1, 8011648 <_reclaim_reent+0x8c>
 8011642:	4620      	mov	r0, r4
 8011644:	f000 f8a0 	bl	8011788 <_free_r>
 8011648:	6a23      	ldr	r3, [r4, #32]
 801164a:	b14b      	cbz	r3, 8011660 <_reclaim_reent+0xa4>
 801164c:	4620      	mov	r0, r4
 801164e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011652:	4718      	bx	r3
 8011654:	680e      	ldr	r6, [r1, #0]
 8011656:	4620      	mov	r0, r4
 8011658:	f000 f896 	bl	8011788 <_free_r>
 801165c:	4631      	mov	r1, r6
 801165e:	e7bb      	b.n	80115d8 <_reclaim_reent+0x1c>
 8011660:	bd70      	pop	{r4, r5, r6, pc}
 8011662:	bf00      	nop
 8011664:	2000018c 	.word	0x2000018c

08011668 <_lseek_r>:
 8011668:	b538      	push	{r3, r4, r5, lr}
 801166a:	4d07      	ldr	r5, [pc, #28]	@ (8011688 <_lseek_r+0x20>)
 801166c:	4604      	mov	r4, r0
 801166e:	4608      	mov	r0, r1
 8011670:	4611      	mov	r1, r2
 8011672:	2200      	movs	r2, #0
 8011674:	602a      	str	r2, [r5, #0]
 8011676:	461a      	mov	r2, r3
 8011678:	f7f0 fd0b 	bl	8002092 <_lseek>
 801167c:	1c43      	adds	r3, r0, #1
 801167e:	d102      	bne.n	8011686 <_lseek_r+0x1e>
 8011680:	682b      	ldr	r3, [r5, #0]
 8011682:	b103      	cbz	r3, 8011686 <_lseek_r+0x1e>
 8011684:	6023      	str	r3, [r4, #0]
 8011686:	bd38      	pop	{r3, r4, r5, pc}
 8011688:	200084c8 	.word	0x200084c8

0801168c <_read_r>:
 801168c:	b538      	push	{r3, r4, r5, lr}
 801168e:	4d07      	ldr	r5, [pc, #28]	@ (80116ac <_read_r+0x20>)
 8011690:	4604      	mov	r4, r0
 8011692:	4608      	mov	r0, r1
 8011694:	4611      	mov	r1, r2
 8011696:	2200      	movs	r2, #0
 8011698:	602a      	str	r2, [r5, #0]
 801169a:	461a      	mov	r2, r3
 801169c:	f7f0 fc99 	bl	8001fd2 <_read>
 80116a0:	1c43      	adds	r3, r0, #1
 80116a2:	d102      	bne.n	80116aa <_read_r+0x1e>
 80116a4:	682b      	ldr	r3, [r5, #0]
 80116a6:	b103      	cbz	r3, 80116aa <_read_r+0x1e>
 80116a8:	6023      	str	r3, [r4, #0]
 80116aa:	bd38      	pop	{r3, r4, r5, pc}
 80116ac:	200084c8 	.word	0x200084c8

080116b0 <_write_r>:
 80116b0:	b538      	push	{r3, r4, r5, lr}
 80116b2:	4d07      	ldr	r5, [pc, #28]	@ (80116d0 <_write_r+0x20>)
 80116b4:	4604      	mov	r4, r0
 80116b6:	4608      	mov	r0, r1
 80116b8:	4611      	mov	r1, r2
 80116ba:	2200      	movs	r2, #0
 80116bc:	602a      	str	r2, [r5, #0]
 80116be:	461a      	mov	r2, r3
 80116c0:	f7f0 fca4 	bl	800200c <_write>
 80116c4:	1c43      	adds	r3, r0, #1
 80116c6:	d102      	bne.n	80116ce <_write_r+0x1e>
 80116c8:	682b      	ldr	r3, [r5, #0]
 80116ca:	b103      	cbz	r3, 80116ce <_write_r+0x1e>
 80116cc:	6023      	str	r3, [r4, #0]
 80116ce:	bd38      	pop	{r3, r4, r5, pc}
 80116d0:	200084c8 	.word	0x200084c8

080116d4 <__errno>:
 80116d4:	4b01      	ldr	r3, [pc, #4]	@ (80116dc <__errno+0x8>)
 80116d6:	6818      	ldr	r0, [r3, #0]
 80116d8:	4770      	bx	lr
 80116da:	bf00      	nop
 80116dc:	2000018c 	.word	0x2000018c

080116e0 <__libc_init_array>:
 80116e0:	b570      	push	{r4, r5, r6, lr}
 80116e2:	4d0d      	ldr	r5, [pc, #52]	@ (8011718 <__libc_init_array+0x38>)
 80116e4:	4c0d      	ldr	r4, [pc, #52]	@ (801171c <__libc_init_array+0x3c>)
 80116e6:	1b64      	subs	r4, r4, r5
 80116e8:	10a4      	asrs	r4, r4, #2
 80116ea:	2600      	movs	r6, #0
 80116ec:	42a6      	cmp	r6, r4
 80116ee:	d109      	bne.n	8011704 <__libc_init_array+0x24>
 80116f0:	4d0b      	ldr	r5, [pc, #44]	@ (8011720 <__libc_init_array+0x40>)
 80116f2:	4c0c      	ldr	r4, [pc, #48]	@ (8011724 <__libc_init_array+0x44>)
 80116f4:	f000 fff0 	bl	80126d8 <_init>
 80116f8:	1b64      	subs	r4, r4, r5
 80116fa:	10a4      	asrs	r4, r4, #2
 80116fc:	2600      	movs	r6, #0
 80116fe:	42a6      	cmp	r6, r4
 8011700:	d105      	bne.n	801170e <__libc_init_array+0x2e>
 8011702:	bd70      	pop	{r4, r5, r6, pc}
 8011704:	f855 3b04 	ldr.w	r3, [r5], #4
 8011708:	4798      	blx	r3
 801170a:	3601      	adds	r6, #1
 801170c:	e7ee      	b.n	80116ec <__libc_init_array+0xc>
 801170e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011712:	4798      	blx	r3
 8011714:	3601      	adds	r6, #1
 8011716:	e7f2      	b.n	80116fe <__libc_init_array+0x1e>
 8011718:	08012fe0 	.word	0x08012fe0
 801171c:	08012fe0 	.word	0x08012fe0
 8011720:	08012fe0 	.word	0x08012fe0
 8011724:	08012fe4 	.word	0x08012fe4

08011728 <__retarget_lock_init_recursive>:
 8011728:	4770      	bx	lr

0801172a <__retarget_lock_acquire_recursive>:
 801172a:	4770      	bx	lr

0801172c <__retarget_lock_release_recursive>:
 801172c:	4770      	bx	lr

0801172e <memcpy>:
 801172e:	440a      	add	r2, r1
 8011730:	4291      	cmp	r1, r2
 8011732:	f100 33ff 	add.w	r3, r0, #4294967295
 8011736:	d100      	bne.n	801173a <memcpy+0xc>
 8011738:	4770      	bx	lr
 801173a:	b510      	push	{r4, lr}
 801173c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011740:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011744:	4291      	cmp	r1, r2
 8011746:	d1f9      	bne.n	801173c <memcpy+0xe>
 8011748:	bd10      	pop	{r4, pc}
	...

0801174c <__assert_func>:
 801174c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801174e:	4614      	mov	r4, r2
 8011750:	461a      	mov	r2, r3
 8011752:	4b09      	ldr	r3, [pc, #36]	@ (8011778 <__assert_func+0x2c>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	4605      	mov	r5, r0
 8011758:	68d8      	ldr	r0, [r3, #12]
 801175a:	b954      	cbnz	r4, 8011772 <__assert_func+0x26>
 801175c:	4b07      	ldr	r3, [pc, #28]	@ (801177c <__assert_func+0x30>)
 801175e:	461c      	mov	r4, r3
 8011760:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011764:	9100      	str	r1, [sp, #0]
 8011766:	462b      	mov	r3, r5
 8011768:	4905      	ldr	r1, [pc, #20]	@ (8011780 <__assert_func+0x34>)
 801176a:	f000 fc9f 	bl	80120ac <fiprintf>
 801176e:	f000 fcd9 	bl	8012124 <abort>
 8011772:	4b04      	ldr	r3, [pc, #16]	@ (8011784 <__assert_func+0x38>)
 8011774:	e7f4      	b.n	8011760 <__assert_func+0x14>
 8011776:	bf00      	nop
 8011778:	2000018c 	.word	0x2000018c
 801177c:	08012fa2 	.word	0x08012fa2
 8011780:	08012f74 	.word	0x08012f74
 8011784:	08012f67 	.word	0x08012f67

08011788 <_free_r>:
 8011788:	b538      	push	{r3, r4, r5, lr}
 801178a:	4605      	mov	r5, r0
 801178c:	2900      	cmp	r1, #0
 801178e:	d041      	beq.n	8011814 <_free_r+0x8c>
 8011790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011794:	1f0c      	subs	r4, r1, #4
 8011796:	2b00      	cmp	r3, #0
 8011798:	bfb8      	it	lt
 801179a:	18e4      	addlt	r4, r4, r3
 801179c:	f000 f8e8 	bl	8011970 <__malloc_lock>
 80117a0:	4a1d      	ldr	r2, [pc, #116]	@ (8011818 <_free_r+0x90>)
 80117a2:	6813      	ldr	r3, [r2, #0]
 80117a4:	b933      	cbnz	r3, 80117b4 <_free_r+0x2c>
 80117a6:	6063      	str	r3, [r4, #4]
 80117a8:	6014      	str	r4, [r2, #0]
 80117aa:	4628      	mov	r0, r5
 80117ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117b0:	f000 b8e4 	b.w	801197c <__malloc_unlock>
 80117b4:	42a3      	cmp	r3, r4
 80117b6:	d908      	bls.n	80117ca <_free_r+0x42>
 80117b8:	6820      	ldr	r0, [r4, #0]
 80117ba:	1821      	adds	r1, r4, r0
 80117bc:	428b      	cmp	r3, r1
 80117be:	bf01      	itttt	eq
 80117c0:	6819      	ldreq	r1, [r3, #0]
 80117c2:	685b      	ldreq	r3, [r3, #4]
 80117c4:	1809      	addeq	r1, r1, r0
 80117c6:	6021      	streq	r1, [r4, #0]
 80117c8:	e7ed      	b.n	80117a6 <_free_r+0x1e>
 80117ca:	461a      	mov	r2, r3
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	b10b      	cbz	r3, 80117d4 <_free_r+0x4c>
 80117d0:	42a3      	cmp	r3, r4
 80117d2:	d9fa      	bls.n	80117ca <_free_r+0x42>
 80117d4:	6811      	ldr	r1, [r2, #0]
 80117d6:	1850      	adds	r0, r2, r1
 80117d8:	42a0      	cmp	r0, r4
 80117da:	d10b      	bne.n	80117f4 <_free_r+0x6c>
 80117dc:	6820      	ldr	r0, [r4, #0]
 80117de:	4401      	add	r1, r0
 80117e0:	1850      	adds	r0, r2, r1
 80117e2:	4283      	cmp	r3, r0
 80117e4:	6011      	str	r1, [r2, #0]
 80117e6:	d1e0      	bne.n	80117aa <_free_r+0x22>
 80117e8:	6818      	ldr	r0, [r3, #0]
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	6053      	str	r3, [r2, #4]
 80117ee:	4408      	add	r0, r1
 80117f0:	6010      	str	r0, [r2, #0]
 80117f2:	e7da      	b.n	80117aa <_free_r+0x22>
 80117f4:	d902      	bls.n	80117fc <_free_r+0x74>
 80117f6:	230c      	movs	r3, #12
 80117f8:	602b      	str	r3, [r5, #0]
 80117fa:	e7d6      	b.n	80117aa <_free_r+0x22>
 80117fc:	6820      	ldr	r0, [r4, #0]
 80117fe:	1821      	adds	r1, r4, r0
 8011800:	428b      	cmp	r3, r1
 8011802:	bf04      	itt	eq
 8011804:	6819      	ldreq	r1, [r3, #0]
 8011806:	685b      	ldreq	r3, [r3, #4]
 8011808:	6063      	str	r3, [r4, #4]
 801180a:	bf04      	itt	eq
 801180c:	1809      	addeq	r1, r1, r0
 801180e:	6021      	streq	r1, [r4, #0]
 8011810:	6054      	str	r4, [r2, #4]
 8011812:	e7ca      	b.n	80117aa <_free_r+0x22>
 8011814:	bd38      	pop	{r3, r4, r5, pc}
 8011816:	bf00      	nop
 8011818:	200084d4 	.word	0x200084d4

0801181c <malloc>:
 801181c:	4b02      	ldr	r3, [pc, #8]	@ (8011828 <malloc+0xc>)
 801181e:	4601      	mov	r1, r0
 8011820:	6818      	ldr	r0, [r3, #0]
 8011822:	f000 b825 	b.w	8011870 <_malloc_r>
 8011826:	bf00      	nop
 8011828:	2000018c 	.word	0x2000018c

0801182c <sbrk_aligned>:
 801182c:	b570      	push	{r4, r5, r6, lr}
 801182e:	4e0f      	ldr	r6, [pc, #60]	@ (801186c <sbrk_aligned+0x40>)
 8011830:	460c      	mov	r4, r1
 8011832:	6831      	ldr	r1, [r6, #0]
 8011834:	4605      	mov	r5, r0
 8011836:	b911      	cbnz	r1, 801183e <sbrk_aligned+0x12>
 8011838:	f000 fc64 	bl	8012104 <_sbrk_r>
 801183c:	6030      	str	r0, [r6, #0]
 801183e:	4621      	mov	r1, r4
 8011840:	4628      	mov	r0, r5
 8011842:	f000 fc5f 	bl	8012104 <_sbrk_r>
 8011846:	1c43      	adds	r3, r0, #1
 8011848:	d103      	bne.n	8011852 <sbrk_aligned+0x26>
 801184a:	f04f 34ff 	mov.w	r4, #4294967295
 801184e:	4620      	mov	r0, r4
 8011850:	bd70      	pop	{r4, r5, r6, pc}
 8011852:	1cc4      	adds	r4, r0, #3
 8011854:	f024 0403 	bic.w	r4, r4, #3
 8011858:	42a0      	cmp	r0, r4
 801185a:	d0f8      	beq.n	801184e <sbrk_aligned+0x22>
 801185c:	1a21      	subs	r1, r4, r0
 801185e:	4628      	mov	r0, r5
 8011860:	f000 fc50 	bl	8012104 <_sbrk_r>
 8011864:	3001      	adds	r0, #1
 8011866:	d1f2      	bne.n	801184e <sbrk_aligned+0x22>
 8011868:	e7ef      	b.n	801184a <sbrk_aligned+0x1e>
 801186a:	bf00      	nop
 801186c:	200084d0 	.word	0x200084d0

08011870 <_malloc_r>:
 8011870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011874:	1ccd      	adds	r5, r1, #3
 8011876:	f025 0503 	bic.w	r5, r5, #3
 801187a:	3508      	adds	r5, #8
 801187c:	2d0c      	cmp	r5, #12
 801187e:	bf38      	it	cc
 8011880:	250c      	movcc	r5, #12
 8011882:	2d00      	cmp	r5, #0
 8011884:	4606      	mov	r6, r0
 8011886:	db01      	blt.n	801188c <_malloc_r+0x1c>
 8011888:	42a9      	cmp	r1, r5
 801188a:	d904      	bls.n	8011896 <_malloc_r+0x26>
 801188c:	230c      	movs	r3, #12
 801188e:	6033      	str	r3, [r6, #0]
 8011890:	2000      	movs	r0, #0
 8011892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011896:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801196c <_malloc_r+0xfc>
 801189a:	f000 f869 	bl	8011970 <__malloc_lock>
 801189e:	f8d8 3000 	ldr.w	r3, [r8]
 80118a2:	461c      	mov	r4, r3
 80118a4:	bb44      	cbnz	r4, 80118f8 <_malloc_r+0x88>
 80118a6:	4629      	mov	r1, r5
 80118a8:	4630      	mov	r0, r6
 80118aa:	f7ff ffbf 	bl	801182c <sbrk_aligned>
 80118ae:	1c43      	adds	r3, r0, #1
 80118b0:	4604      	mov	r4, r0
 80118b2:	d158      	bne.n	8011966 <_malloc_r+0xf6>
 80118b4:	f8d8 4000 	ldr.w	r4, [r8]
 80118b8:	4627      	mov	r7, r4
 80118ba:	2f00      	cmp	r7, #0
 80118bc:	d143      	bne.n	8011946 <_malloc_r+0xd6>
 80118be:	2c00      	cmp	r4, #0
 80118c0:	d04b      	beq.n	801195a <_malloc_r+0xea>
 80118c2:	6823      	ldr	r3, [r4, #0]
 80118c4:	4639      	mov	r1, r7
 80118c6:	4630      	mov	r0, r6
 80118c8:	eb04 0903 	add.w	r9, r4, r3
 80118cc:	f000 fc1a 	bl	8012104 <_sbrk_r>
 80118d0:	4581      	cmp	r9, r0
 80118d2:	d142      	bne.n	801195a <_malloc_r+0xea>
 80118d4:	6821      	ldr	r1, [r4, #0]
 80118d6:	1a6d      	subs	r5, r5, r1
 80118d8:	4629      	mov	r1, r5
 80118da:	4630      	mov	r0, r6
 80118dc:	f7ff ffa6 	bl	801182c <sbrk_aligned>
 80118e0:	3001      	adds	r0, #1
 80118e2:	d03a      	beq.n	801195a <_malloc_r+0xea>
 80118e4:	6823      	ldr	r3, [r4, #0]
 80118e6:	442b      	add	r3, r5
 80118e8:	6023      	str	r3, [r4, #0]
 80118ea:	f8d8 3000 	ldr.w	r3, [r8]
 80118ee:	685a      	ldr	r2, [r3, #4]
 80118f0:	bb62      	cbnz	r2, 801194c <_malloc_r+0xdc>
 80118f2:	f8c8 7000 	str.w	r7, [r8]
 80118f6:	e00f      	b.n	8011918 <_malloc_r+0xa8>
 80118f8:	6822      	ldr	r2, [r4, #0]
 80118fa:	1b52      	subs	r2, r2, r5
 80118fc:	d420      	bmi.n	8011940 <_malloc_r+0xd0>
 80118fe:	2a0b      	cmp	r2, #11
 8011900:	d917      	bls.n	8011932 <_malloc_r+0xc2>
 8011902:	1961      	adds	r1, r4, r5
 8011904:	42a3      	cmp	r3, r4
 8011906:	6025      	str	r5, [r4, #0]
 8011908:	bf18      	it	ne
 801190a:	6059      	strne	r1, [r3, #4]
 801190c:	6863      	ldr	r3, [r4, #4]
 801190e:	bf08      	it	eq
 8011910:	f8c8 1000 	streq.w	r1, [r8]
 8011914:	5162      	str	r2, [r4, r5]
 8011916:	604b      	str	r3, [r1, #4]
 8011918:	4630      	mov	r0, r6
 801191a:	f000 f82f 	bl	801197c <__malloc_unlock>
 801191e:	f104 000b 	add.w	r0, r4, #11
 8011922:	1d23      	adds	r3, r4, #4
 8011924:	f020 0007 	bic.w	r0, r0, #7
 8011928:	1ac2      	subs	r2, r0, r3
 801192a:	bf1c      	itt	ne
 801192c:	1a1b      	subne	r3, r3, r0
 801192e:	50a3      	strne	r3, [r4, r2]
 8011930:	e7af      	b.n	8011892 <_malloc_r+0x22>
 8011932:	6862      	ldr	r2, [r4, #4]
 8011934:	42a3      	cmp	r3, r4
 8011936:	bf0c      	ite	eq
 8011938:	f8c8 2000 	streq.w	r2, [r8]
 801193c:	605a      	strne	r2, [r3, #4]
 801193e:	e7eb      	b.n	8011918 <_malloc_r+0xa8>
 8011940:	4623      	mov	r3, r4
 8011942:	6864      	ldr	r4, [r4, #4]
 8011944:	e7ae      	b.n	80118a4 <_malloc_r+0x34>
 8011946:	463c      	mov	r4, r7
 8011948:	687f      	ldr	r7, [r7, #4]
 801194a:	e7b6      	b.n	80118ba <_malloc_r+0x4a>
 801194c:	461a      	mov	r2, r3
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	42a3      	cmp	r3, r4
 8011952:	d1fb      	bne.n	801194c <_malloc_r+0xdc>
 8011954:	2300      	movs	r3, #0
 8011956:	6053      	str	r3, [r2, #4]
 8011958:	e7de      	b.n	8011918 <_malloc_r+0xa8>
 801195a:	230c      	movs	r3, #12
 801195c:	6033      	str	r3, [r6, #0]
 801195e:	4630      	mov	r0, r6
 8011960:	f000 f80c 	bl	801197c <__malloc_unlock>
 8011964:	e794      	b.n	8011890 <_malloc_r+0x20>
 8011966:	6005      	str	r5, [r0, #0]
 8011968:	e7d6      	b.n	8011918 <_malloc_r+0xa8>
 801196a:	bf00      	nop
 801196c:	200084d4 	.word	0x200084d4

08011970 <__malloc_lock>:
 8011970:	4801      	ldr	r0, [pc, #4]	@ (8011978 <__malloc_lock+0x8>)
 8011972:	f7ff beda 	b.w	801172a <__retarget_lock_acquire_recursive>
 8011976:	bf00      	nop
 8011978:	200084cc 	.word	0x200084cc

0801197c <__malloc_unlock>:
 801197c:	4801      	ldr	r0, [pc, #4]	@ (8011984 <__malloc_unlock+0x8>)
 801197e:	f7ff bed5 	b.w	801172c <__retarget_lock_release_recursive>
 8011982:	bf00      	nop
 8011984:	200084cc 	.word	0x200084cc

08011988 <__ssputs_r>:
 8011988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801198c:	688e      	ldr	r6, [r1, #8]
 801198e:	461f      	mov	r7, r3
 8011990:	42be      	cmp	r6, r7
 8011992:	680b      	ldr	r3, [r1, #0]
 8011994:	4682      	mov	sl, r0
 8011996:	460c      	mov	r4, r1
 8011998:	4690      	mov	r8, r2
 801199a:	d82d      	bhi.n	80119f8 <__ssputs_r+0x70>
 801199c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80119a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80119a4:	d026      	beq.n	80119f4 <__ssputs_r+0x6c>
 80119a6:	6965      	ldr	r5, [r4, #20]
 80119a8:	6909      	ldr	r1, [r1, #16]
 80119aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80119ae:	eba3 0901 	sub.w	r9, r3, r1
 80119b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80119b6:	1c7b      	adds	r3, r7, #1
 80119b8:	444b      	add	r3, r9
 80119ba:	106d      	asrs	r5, r5, #1
 80119bc:	429d      	cmp	r5, r3
 80119be:	bf38      	it	cc
 80119c0:	461d      	movcc	r5, r3
 80119c2:	0553      	lsls	r3, r2, #21
 80119c4:	d527      	bpl.n	8011a16 <__ssputs_r+0x8e>
 80119c6:	4629      	mov	r1, r5
 80119c8:	f7ff ff52 	bl	8011870 <_malloc_r>
 80119cc:	4606      	mov	r6, r0
 80119ce:	b360      	cbz	r0, 8011a2a <__ssputs_r+0xa2>
 80119d0:	6921      	ldr	r1, [r4, #16]
 80119d2:	464a      	mov	r2, r9
 80119d4:	f7ff feab 	bl	801172e <memcpy>
 80119d8:	89a3      	ldrh	r3, [r4, #12]
 80119da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80119de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119e2:	81a3      	strh	r3, [r4, #12]
 80119e4:	6126      	str	r6, [r4, #16]
 80119e6:	6165      	str	r5, [r4, #20]
 80119e8:	444e      	add	r6, r9
 80119ea:	eba5 0509 	sub.w	r5, r5, r9
 80119ee:	6026      	str	r6, [r4, #0]
 80119f0:	60a5      	str	r5, [r4, #8]
 80119f2:	463e      	mov	r6, r7
 80119f4:	42be      	cmp	r6, r7
 80119f6:	d900      	bls.n	80119fa <__ssputs_r+0x72>
 80119f8:	463e      	mov	r6, r7
 80119fa:	6820      	ldr	r0, [r4, #0]
 80119fc:	4632      	mov	r2, r6
 80119fe:	4641      	mov	r1, r8
 8011a00:	f000 fb66 	bl	80120d0 <memmove>
 8011a04:	68a3      	ldr	r3, [r4, #8]
 8011a06:	1b9b      	subs	r3, r3, r6
 8011a08:	60a3      	str	r3, [r4, #8]
 8011a0a:	6823      	ldr	r3, [r4, #0]
 8011a0c:	4433      	add	r3, r6
 8011a0e:	6023      	str	r3, [r4, #0]
 8011a10:	2000      	movs	r0, #0
 8011a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a16:	462a      	mov	r2, r5
 8011a18:	f000 fb8b 	bl	8012132 <_realloc_r>
 8011a1c:	4606      	mov	r6, r0
 8011a1e:	2800      	cmp	r0, #0
 8011a20:	d1e0      	bne.n	80119e4 <__ssputs_r+0x5c>
 8011a22:	6921      	ldr	r1, [r4, #16]
 8011a24:	4650      	mov	r0, sl
 8011a26:	f7ff feaf 	bl	8011788 <_free_r>
 8011a2a:	230c      	movs	r3, #12
 8011a2c:	f8ca 3000 	str.w	r3, [sl]
 8011a30:	89a3      	ldrh	r3, [r4, #12]
 8011a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a36:	81a3      	strh	r3, [r4, #12]
 8011a38:	f04f 30ff 	mov.w	r0, #4294967295
 8011a3c:	e7e9      	b.n	8011a12 <__ssputs_r+0x8a>
	...

08011a40 <_svfiprintf_r>:
 8011a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a44:	4698      	mov	r8, r3
 8011a46:	898b      	ldrh	r3, [r1, #12]
 8011a48:	061b      	lsls	r3, r3, #24
 8011a4a:	b09d      	sub	sp, #116	@ 0x74
 8011a4c:	4607      	mov	r7, r0
 8011a4e:	460d      	mov	r5, r1
 8011a50:	4614      	mov	r4, r2
 8011a52:	d510      	bpl.n	8011a76 <_svfiprintf_r+0x36>
 8011a54:	690b      	ldr	r3, [r1, #16]
 8011a56:	b973      	cbnz	r3, 8011a76 <_svfiprintf_r+0x36>
 8011a58:	2140      	movs	r1, #64	@ 0x40
 8011a5a:	f7ff ff09 	bl	8011870 <_malloc_r>
 8011a5e:	6028      	str	r0, [r5, #0]
 8011a60:	6128      	str	r0, [r5, #16]
 8011a62:	b930      	cbnz	r0, 8011a72 <_svfiprintf_r+0x32>
 8011a64:	230c      	movs	r3, #12
 8011a66:	603b      	str	r3, [r7, #0]
 8011a68:	f04f 30ff 	mov.w	r0, #4294967295
 8011a6c:	b01d      	add	sp, #116	@ 0x74
 8011a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a72:	2340      	movs	r3, #64	@ 0x40
 8011a74:	616b      	str	r3, [r5, #20]
 8011a76:	2300      	movs	r3, #0
 8011a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a7a:	2320      	movs	r3, #32
 8011a7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a80:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a84:	2330      	movs	r3, #48	@ 0x30
 8011a86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011c24 <_svfiprintf_r+0x1e4>
 8011a8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a8e:	f04f 0901 	mov.w	r9, #1
 8011a92:	4623      	mov	r3, r4
 8011a94:	469a      	mov	sl, r3
 8011a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a9a:	b10a      	cbz	r2, 8011aa0 <_svfiprintf_r+0x60>
 8011a9c:	2a25      	cmp	r2, #37	@ 0x25
 8011a9e:	d1f9      	bne.n	8011a94 <_svfiprintf_r+0x54>
 8011aa0:	ebba 0b04 	subs.w	fp, sl, r4
 8011aa4:	d00b      	beq.n	8011abe <_svfiprintf_r+0x7e>
 8011aa6:	465b      	mov	r3, fp
 8011aa8:	4622      	mov	r2, r4
 8011aaa:	4629      	mov	r1, r5
 8011aac:	4638      	mov	r0, r7
 8011aae:	f7ff ff6b 	bl	8011988 <__ssputs_r>
 8011ab2:	3001      	adds	r0, #1
 8011ab4:	f000 80a7 	beq.w	8011c06 <_svfiprintf_r+0x1c6>
 8011ab8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011aba:	445a      	add	r2, fp
 8011abc:	9209      	str	r2, [sp, #36]	@ 0x24
 8011abe:	f89a 3000 	ldrb.w	r3, [sl]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	f000 809f 	beq.w	8011c06 <_svfiprintf_r+0x1c6>
 8011ac8:	2300      	movs	r3, #0
 8011aca:	f04f 32ff 	mov.w	r2, #4294967295
 8011ace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ad2:	f10a 0a01 	add.w	sl, sl, #1
 8011ad6:	9304      	str	r3, [sp, #16]
 8011ad8:	9307      	str	r3, [sp, #28]
 8011ada:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ade:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ae0:	4654      	mov	r4, sl
 8011ae2:	2205      	movs	r2, #5
 8011ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ae8:	484e      	ldr	r0, [pc, #312]	@ (8011c24 <_svfiprintf_r+0x1e4>)
 8011aea:	f7ee fb81 	bl	80001f0 <memchr>
 8011aee:	9a04      	ldr	r2, [sp, #16]
 8011af0:	b9d8      	cbnz	r0, 8011b2a <_svfiprintf_r+0xea>
 8011af2:	06d0      	lsls	r0, r2, #27
 8011af4:	bf44      	itt	mi
 8011af6:	2320      	movmi	r3, #32
 8011af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011afc:	0711      	lsls	r1, r2, #28
 8011afe:	bf44      	itt	mi
 8011b00:	232b      	movmi	r3, #43	@ 0x2b
 8011b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b06:	f89a 3000 	ldrb.w	r3, [sl]
 8011b0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b0c:	d015      	beq.n	8011b3a <_svfiprintf_r+0xfa>
 8011b0e:	9a07      	ldr	r2, [sp, #28]
 8011b10:	4654      	mov	r4, sl
 8011b12:	2000      	movs	r0, #0
 8011b14:	f04f 0c0a 	mov.w	ip, #10
 8011b18:	4621      	mov	r1, r4
 8011b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b1e:	3b30      	subs	r3, #48	@ 0x30
 8011b20:	2b09      	cmp	r3, #9
 8011b22:	d94b      	bls.n	8011bbc <_svfiprintf_r+0x17c>
 8011b24:	b1b0      	cbz	r0, 8011b54 <_svfiprintf_r+0x114>
 8011b26:	9207      	str	r2, [sp, #28]
 8011b28:	e014      	b.n	8011b54 <_svfiprintf_r+0x114>
 8011b2a:	eba0 0308 	sub.w	r3, r0, r8
 8011b2e:	fa09 f303 	lsl.w	r3, r9, r3
 8011b32:	4313      	orrs	r3, r2
 8011b34:	9304      	str	r3, [sp, #16]
 8011b36:	46a2      	mov	sl, r4
 8011b38:	e7d2      	b.n	8011ae0 <_svfiprintf_r+0xa0>
 8011b3a:	9b03      	ldr	r3, [sp, #12]
 8011b3c:	1d19      	adds	r1, r3, #4
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	9103      	str	r1, [sp, #12]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	bfbb      	ittet	lt
 8011b46:	425b      	neglt	r3, r3
 8011b48:	f042 0202 	orrlt.w	r2, r2, #2
 8011b4c:	9307      	strge	r3, [sp, #28]
 8011b4e:	9307      	strlt	r3, [sp, #28]
 8011b50:	bfb8      	it	lt
 8011b52:	9204      	strlt	r2, [sp, #16]
 8011b54:	7823      	ldrb	r3, [r4, #0]
 8011b56:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b58:	d10a      	bne.n	8011b70 <_svfiprintf_r+0x130>
 8011b5a:	7863      	ldrb	r3, [r4, #1]
 8011b5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b5e:	d132      	bne.n	8011bc6 <_svfiprintf_r+0x186>
 8011b60:	9b03      	ldr	r3, [sp, #12]
 8011b62:	1d1a      	adds	r2, r3, #4
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	9203      	str	r2, [sp, #12]
 8011b68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b6c:	3402      	adds	r4, #2
 8011b6e:	9305      	str	r3, [sp, #20]
 8011b70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011c34 <_svfiprintf_r+0x1f4>
 8011b74:	7821      	ldrb	r1, [r4, #0]
 8011b76:	2203      	movs	r2, #3
 8011b78:	4650      	mov	r0, sl
 8011b7a:	f7ee fb39 	bl	80001f0 <memchr>
 8011b7e:	b138      	cbz	r0, 8011b90 <_svfiprintf_r+0x150>
 8011b80:	9b04      	ldr	r3, [sp, #16]
 8011b82:	eba0 000a 	sub.w	r0, r0, sl
 8011b86:	2240      	movs	r2, #64	@ 0x40
 8011b88:	4082      	lsls	r2, r0
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	3401      	adds	r4, #1
 8011b8e:	9304      	str	r3, [sp, #16]
 8011b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b94:	4824      	ldr	r0, [pc, #144]	@ (8011c28 <_svfiprintf_r+0x1e8>)
 8011b96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b9a:	2206      	movs	r2, #6
 8011b9c:	f7ee fb28 	bl	80001f0 <memchr>
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	d036      	beq.n	8011c12 <_svfiprintf_r+0x1d2>
 8011ba4:	4b21      	ldr	r3, [pc, #132]	@ (8011c2c <_svfiprintf_r+0x1ec>)
 8011ba6:	bb1b      	cbnz	r3, 8011bf0 <_svfiprintf_r+0x1b0>
 8011ba8:	9b03      	ldr	r3, [sp, #12]
 8011baa:	3307      	adds	r3, #7
 8011bac:	f023 0307 	bic.w	r3, r3, #7
 8011bb0:	3308      	adds	r3, #8
 8011bb2:	9303      	str	r3, [sp, #12]
 8011bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bb6:	4433      	add	r3, r6
 8011bb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8011bba:	e76a      	b.n	8011a92 <_svfiprintf_r+0x52>
 8011bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011bc0:	460c      	mov	r4, r1
 8011bc2:	2001      	movs	r0, #1
 8011bc4:	e7a8      	b.n	8011b18 <_svfiprintf_r+0xd8>
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	3401      	adds	r4, #1
 8011bca:	9305      	str	r3, [sp, #20]
 8011bcc:	4619      	mov	r1, r3
 8011bce:	f04f 0c0a 	mov.w	ip, #10
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bd8:	3a30      	subs	r2, #48	@ 0x30
 8011bda:	2a09      	cmp	r2, #9
 8011bdc:	d903      	bls.n	8011be6 <_svfiprintf_r+0x1a6>
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d0c6      	beq.n	8011b70 <_svfiprintf_r+0x130>
 8011be2:	9105      	str	r1, [sp, #20]
 8011be4:	e7c4      	b.n	8011b70 <_svfiprintf_r+0x130>
 8011be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bea:	4604      	mov	r4, r0
 8011bec:	2301      	movs	r3, #1
 8011bee:	e7f0      	b.n	8011bd2 <_svfiprintf_r+0x192>
 8011bf0:	ab03      	add	r3, sp, #12
 8011bf2:	9300      	str	r3, [sp, #0]
 8011bf4:	462a      	mov	r2, r5
 8011bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8011c30 <_svfiprintf_r+0x1f0>)
 8011bf8:	a904      	add	r1, sp, #16
 8011bfa:	4638      	mov	r0, r7
 8011bfc:	f3af 8000 	nop.w
 8011c00:	1c42      	adds	r2, r0, #1
 8011c02:	4606      	mov	r6, r0
 8011c04:	d1d6      	bne.n	8011bb4 <_svfiprintf_r+0x174>
 8011c06:	89ab      	ldrh	r3, [r5, #12]
 8011c08:	065b      	lsls	r3, r3, #25
 8011c0a:	f53f af2d 	bmi.w	8011a68 <_svfiprintf_r+0x28>
 8011c0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c10:	e72c      	b.n	8011a6c <_svfiprintf_r+0x2c>
 8011c12:	ab03      	add	r3, sp, #12
 8011c14:	9300      	str	r3, [sp, #0]
 8011c16:	462a      	mov	r2, r5
 8011c18:	4b05      	ldr	r3, [pc, #20]	@ (8011c30 <_svfiprintf_r+0x1f0>)
 8011c1a:	a904      	add	r1, sp, #16
 8011c1c:	4638      	mov	r0, r7
 8011c1e:	f000 f879 	bl	8011d14 <_printf_i>
 8011c22:	e7ed      	b.n	8011c00 <_svfiprintf_r+0x1c0>
 8011c24:	08012fa3 	.word	0x08012fa3
 8011c28:	08012fad 	.word	0x08012fad
 8011c2c:	00000000 	.word	0x00000000
 8011c30:	08011989 	.word	0x08011989
 8011c34:	08012fa9 	.word	0x08012fa9

08011c38 <_printf_common>:
 8011c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c3c:	4616      	mov	r6, r2
 8011c3e:	4698      	mov	r8, r3
 8011c40:	688a      	ldr	r2, [r1, #8]
 8011c42:	690b      	ldr	r3, [r1, #16]
 8011c44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	bfb8      	it	lt
 8011c4c:	4613      	movlt	r3, r2
 8011c4e:	6033      	str	r3, [r6, #0]
 8011c50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011c54:	4607      	mov	r7, r0
 8011c56:	460c      	mov	r4, r1
 8011c58:	b10a      	cbz	r2, 8011c5e <_printf_common+0x26>
 8011c5a:	3301      	adds	r3, #1
 8011c5c:	6033      	str	r3, [r6, #0]
 8011c5e:	6823      	ldr	r3, [r4, #0]
 8011c60:	0699      	lsls	r1, r3, #26
 8011c62:	bf42      	ittt	mi
 8011c64:	6833      	ldrmi	r3, [r6, #0]
 8011c66:	3302      	addmi	r3, #2
 8011c68:	6033      	strmi	r3, [r6, #0]
 8011c6a:	6825      	ldr	r5, [r4, #0]
 8011c6c:	f015 0506 	ands.w	r5, r5, #6
 8011c70:	d106      	bne.n	8011c80 <_printf_common+0x48>
 8011c72:	f104 0a19 	add.w	sl, r4, #25
 8011c76:	68e3      	ldr	r3, [r4, #12]
 8011c78:	6832      	ldr	r2, [r6, #0]
 8011c7a:	1a9b      	subs	r3, r3, r2
 8011c7c:	42ab      	cmp	r3, r5
 8011c7e:	dc26      	bgt.n	8011cce <_printf_common+0x96>
 8011c80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011c84:	6822      	ldr	r2, [r4, #0]
 8011c86:	3b00      	subs	r3, #0
 8011c88:	bf18      	it	ne
 8011c8a:	2301      	movne	r3, #1
 8011c8c:	0692      	lsls	r2, r2, #26
 8011c8e:	d42b      	bmi.n	8011ce8 <_printf_common+0xb0>
 8011c90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011c94:	4641      	mov	r1, r8
 8011c96:	4638      	mov	r0, r7
 8011c98:	47c8      	blx	r9
 8011c9a:	3001      	adds	r0, #1
 8011c9c:	d01e      	beq.n	8011cdc <_printf_common+0xa4>
 8011c9e:	6823      	ldr	r3, [r4, #0]
 8011ca0:	6922      	ldr	r2, [r4, #16]
 8011ca2:	f003 0306 	and.w	r3, r3, #6
 8011ca6:	2b04      	cmp	r3, #4
 8011ca8:	bf02      	ittt	eq
 8011caa:	68e5      	ldreq	r5, [r4, #12]
 8011cac:	6833      	ldreq	r3, [r6, #0]
 8011cae:	1aed      	subeq	r5, r5, r3
 8011cb0:	68a3      	ldr	r3, [r4, #8]
 8011cb2:	bf0c      	ite	eq
 8011cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011cb8:	2500      	movne	r5, #0
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	bfc4      	itt	gt
 8011cbe:	1a9b      	subgt	r3, r3, r2
 8011cc0:	18ed      	addgt	r5, r5, r3
 8011cc2:	2600      	movs	r6, #0
 8011cc4:	341a      	adds	r4, #26
 8011cc6:	42b5      	cmp	r5, r6
 8011cc8:	d11a      	bne.n	8011d00 <_printf_common+0xc8>
 8011cca:	2000      	movs	r0, #0
 8011ccc:	e008      	b.n	8011ce0 <_printf_common+0xa8>
 8011cce:	2301      	movs	r3, #1
 8011cd0:	4652      	mov	r2, sl
 8011cd2:	4641      	mov	r1, r8
 8011cd4:	4638      	mov	r0, r7
 8011cd6:	47c8      	blx	r9
 8011cd8:	3001      	adds	r0, #1
 8011cda:	d103      	bne.n	8011ce4 <_printf_common+0xac>
 8011cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ce4:	3501      	adds	r5, #1
 8011ce6:	e7c6      	b.n	8011c76 <_printf_common+0x3e>
 8011ce8:	18e1      	adds	r1, r4, r3
 8011cea:	1c5a      	adds	r2, r3, #1
 8011cec:	2030      	movs	r0, #48	@ 0x30
 8011cee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011cf2:	4422      	add	r2, r4
 8011cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011cf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011cfc:	3302      	adds	r3, #2
 8011cfe:	e7c7      	b.n	8011c90 <_printf_common+0x58>
 8011d00:	2301      	movs	r3, #1
 8011d02:	4622      	mov	r2, r4
 8011d04:	4641      	mov	r1, r8
 8011d06:	4638      	mov	r0, r7
 8011d08:	47c8      	blx	r9
 8011d0a:	3001      	adds	r0, #1
 8011d0c:	d0e6      	beq.n	8011cdc <_printf_common+0xa4>
 8011d0e:	3601      	adds	r6, #1
 8011d10:	e7d9      	b.n	8011cc6 <_printf_common+0x8e>
	...

08011d14 <_printf_i>:
 8011d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d18:	7e0f      	ldrb	r7, [r1, #24]
 8011d1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011d1c:	2f78      	cmp	r7, #120	@ 0x78
 8011d1e:	4691      	mov	r9, r2
 8011d20:	4680      	mov	r8, r0
 8011d22:	460c      	mov	r4, r1
 8011d24:	469a      	mov	sl, r3
 8011d26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011d2a:	d807      	bhi.n	8011d3c <_printf_i+0x28>
 8011d2c:	2f62      	cmp	r7, #98	@ 0x62
 8011d2e:	d80a      	bhi.n	8011d46 <_printf_i+0x32>
 8011d30:	2f00      	cmp	r7, #0
 8011d32:	f000 80d2 	beq.w	8011eda <_printf_i+0x1c6>
 8011d36:	2f58      	cmp	r7, #88	@ 0x58
 8011d38:	f000 80b9 	beq.w	8011eae <_printf_i+0x19a>
 8011d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011d40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011d44:	e03a      	b.n	8011dbc <_printf_i+0xa8>
 8011d46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011d4a:	2b15      	cmp	r3, #21
 8011d4c:	d8f6      	bhi.n	8011d3c <_printf_i+0x28>
 8011d4e:	a101      	add	r1, pc, #4	@ (adr r1, 8011d54 <_printf_i+0x40>)
 8011d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d54:	08011dad 	.word	0x08011dad
 8011d58:	08011dc1 	.word	0x08011dc1
 8011d5c:	08011d3d 	.word	0x08011d3d
 8011d60:	08011d3d 	.word	0x08011d3d
 8011d64:	08011d3d 	.word	0x08011d3d
 8011d68:	08011d3d 	.word	0x08011d3d
 8011d6c:	08011dc1 	.word	0x08011dc1
 8011d70:	08011d3d 	.word	0x08011d3d
 8011d74:	08011d3d 	.word	0x08011d3d
 8011d78:	08011d3d 	.word	0x08011d3d
 8011d7c:	08011d3d 	.word	0x08011d3d
 8011d80:	08011ec1 	.word	0x08011ec1
 8011d84:	08011deb 	.word	0x08011deb
 8011d88:	08011e7b 	.word	0x08011e7b
 8011d8c:	08011d3d 	.word	0x08011d3d
 8011d90:	08011d3d 	.word	0x08011d3d
 8011d94:	08011ee3 	.word	0x08011ee3
 8011d98:	08011d3d 	.word	0x08011d3d
 8011d9c:	08011deb 	.word	0x08011deb
 8011da0:	08011d3d 	.word	0x08011d3d
 8011da4:	08011d3d 	.word	0x08011d3d
 8011da8:	08011e83 	.word	0x08011e83
 8011dac:	6833      	ldr	r3, [r6, #0]
 8011dae:	1d1a      	adds	r2, r3, #4
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	6032      	str	r2, [r6, #0]
 8011db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011db8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	e09d      	b.n	8011efc <_printf_i+0x1e8>
 8011dc0:	6833      	ldr	r3, [r6, #0]
 8011dc2:	6820      	ldr	r0, [r4, #0]
 8011dc4:	1d19      	adds	r1, r3, #4
 8011dc6:	6031      	str	r1, [r6, #0]
 8011dc8:	0606      	lsls	r6, r0, #24
 8011dca:	d501      	bpl.n	8011dd0 <_printf_i+0xbc>
 8011dcc:	681d      	ldr	r5, [r3, #0]
 8011dce:	e003      	b.n	8011dd8 <_printf_i+0xc4>
 8011dd0:	0645      	lsls	r5, r0, #25
 8011dd2:	d5fb      	bpl.n	8011dcc <_printf_i+0xb8>
 8011dd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011dd8:	2d00      	cmp	r5, #0
 8011dda:	da03      	bge.n	8011de4 <_printf_i+0xd0>
 8011ddc:	232d      	movs	r3, #45	@ 0x2d
 8011dde:	426d      	negs	r5, r5
 8011de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011de4:	4859      	ldr	r0, [pc, #356]	@ (8011f4c <_printf_i+0x238>)
 8011de6:	230a      	movs	r3, #10
 8011de8:	e011      	b.n	8011e0e <_printf_i+0xfa>
 8011dea:	6821      	ldr	r1, [r4, #0]
 8011dec:	6833      	ldr	r3, [r6, #0]
 8011dee:	0608      	lsls	r0, r1, #24
 8011df0:	f853 5b04 	ldr.w	r5, [r3], #4
 8011df4:	d402      	bmi.n	8011dfc <_printf_i+0xe8>
 8011df6:	0649      	lsls	r1, r1, #25
 8011df8:	bf48      	it	mi
 8011dfa:	b2ad      	uxthmi	r5, r5
 8011dfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8011dfe:	4853      	ldr	r0, [pc, #332]	@ (8011f4c <_printf_i+0x238>)
 8011e00:	6033      	str	r3, [r6, #0]
 8011e02:	bf14      	ite	ne
 8011e04:	230a      	movne	r3, #10
 8011e06:	2308      	moveq	r3, #8
 8011e08:	2100      	movs	r1, #0
 8011e0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011e0e:	6866      	ldr	r6, [r4, #4]
 8011e10:	60a6      	str	r6, [r4, #8]
 8011e12:	2e00      	cmp	r6, #0
 8011e14:	bfa2      	ittt	ge
 8011e16:	6821      	ldrge	r1, [r4, #0]
 8011e18:	f021 0104 	bicge.w	r1, r1, #4
 8011e1c:	6021      	strge	r1, [r4, #0]
 8011e1e:	b90d      	cbnz	r5, 8011e24 <_printf_i+0x110>
 8011e20:	2e00      	cmp	r6, #0
 8011e22:	d04b      	beq.n	8011ebc <_printf_i+0x1a8>
 8011e24:	4616      	mov	r6, r2
 8011e26:	fbb5 f1f3 	udiv	r1, r5, r3
 8011e2a:	fb03 5711 	mls	r7, r3, r1, r5
 8011e2e:	5dc7      	ldrb	r7, [r0, r7]
 8011e30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011e34:	462f      	mov	r7, r5
 8011e36:	42bb      	cmp	r3, r7
 8011e38:	460d      	mov	r5, r1
 8011e3a:	d9f4      	bls.n	8011e26 <_printf_i+0x112>
 8011e3c:	2b08      	cmp	r3, #8
 8011e3e:	d10b      	bne.n	8011e58 <_printf_i+0x144>
 8011e40:	6823      	ldr	r3, [r4, #0]
 8011e42:	07df      	lsls	r7, r3, #31
 8011e44:	d508      	bpl.n	8011e58 <_printf_i+0x144>
 8011e46:	6923      	ldr	r3, [r4, #16]
 8011e48:	6861      	ldr	r1, [r4, #4]
 8011e4a:	4299      	cmp	r1, r3
 8011e4c:	bfde      	ittt	le
 8011e4e:	2330      	movle	r3, #48	@ 0x30
 8011e50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011e54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011e58:	1b92      	subs	r2, r2, r6
 8011e5a:	6122      	str	r2, [r4, #16]
 8011e5c:	f8cd a000 	str.w	sl, [sp]
 8011e60:	464b      	mov	r3, r9
 8011e62:	aa03      	add	r2, sp, #12
 8011e64:	4621      	mov	r1, r4
 8011e66:	4640      	mov	r0, r8
 8011e68:	f7ff fee6 	bl	8011c38 <_printf_common>
 8011e6c:	3001      	adds	r0, #1
 8011e6e:	d14a      	bne.n	8011f06 <_printf_i+0x1f2>
 8011e70:	f04f 30ff 	mov.w	r0, #4294967295
 8011e74:	b004      	add	sp, #16
 8011e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e7a:	6823      	ldr	r3, [r4, #0]
 8011e7c:	f043 0320 	orr.w	r3, r3, #32
 8011e80:	6023      	str	r3, [r4, #0]
 8011e82:	4833      	ldr	r0, [pc, #204]	@ (8011f50 <_printf_i+0x23c>)
 8011e84:	2778      	movs	r7, #120	@ 0x78
 8011e86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011e8a:	6823      	ldr	r3, [r4, #0]
 8011e8c:	6831      	ldr	r1, [r6, #0]
 8011e8e:	061f      	lsls	r7, r3, #24
 8011e90:	f851 5b04 	ldr.w	r5, [r1], #4
 8011e94:	d402      	bmi.n	8011e9c <_printf_i+0x188>
 8011e96:	065f      	lsls	r7, r3, #25
 8011e98:	bf48      	it	mi
 8011e9a:	b2ad      	uxthmi	r5, r5
 8011e9c:	6031      	str	r1, [r6, #0]
 8011e9e:	07d9      	lsls	r1, r3, #31
 8011ea0:	bf44      	itt	mi
 8011ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8011ea6:	6023      	strmi	r3, [r4, #0]
 8011ea8:	b11d      	cbz	r5, 8011eb2 <_printf_i+0x19e>
 8011eaa:	2310      	movs	r3, #16
 8011eac:	e7ac      	b.n	8011e08 <_printf_i+0xf4>
 8011eae:	4827      	ldr	r0, [pc, #156]	@ (8011f4c <_printf_i+0x238>)
 8011eb0:	e7e9      	b.n	8011e86 <_printf_i+0x172>
 8011eb2:	6823      	ldr	r3, [r4, #0]
 8011eb4:	f023 0320 	bic.w	r3, r3, #32
 8011eb8:	6023      	str	r3, [r4, #0]
 8011eba:	e7f6      	b.n	8011eaa <_printf_i+0x196>
 8011ebc:	4616      	mov	r6, r2
 8011ebe:	e7bd      	b.n	8011e3c <_printf_i+0x128>
 8011ec0:	6833      	ldr	r3, [r6, #0]
 8011ec2:	6825      	ldr	r5, [r4, #0]
 8011ec4:	6961      	ldr	r1, [r4, #20]
 8011ec6:	1d18      	adds	r0, r3, #4
 8011ec8:	6030      	str	r0, [r6, #0]
 8011eca:	062e      	lsls	r6, r5, #24
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	d501      	bpl.n	8011ed4 <_printf_i+0x1c0>
 8011ed0:	6019      	str	r1, [r3, #0]
 8011ed2:	e002      	b.n	8011eda <_printf_i+0x1c6>
 8011ed4:	0668      	lsls	r0, r5, #25
 8011ed6:	d5fb      	bpl.n	8011ed0 <_printf_i+0x1bc>
 8011ed8:	8019      	strh	r1, [r3, #0]
 8011eda:	2300      	movs	r3, #0
 8011edc:	6123      	str	r3, [r4, #16]
 8011ede:	4616      	mov	r6, r2
 8011ee0:	e7bc      	b.n	8011e5c <_printf_i+0x148>
 8011ee2:	6833      	ldr	r3, [r6, #0]
 8011ee4:	1d1a      	adds	r2, r3, #4
 8011ee6:	6032      	str	r2, [r6, #0]
 8011ee8:	681e      	ldr	r6, [r3, #0]
 8011eea:	6862      	ldr	r2, [r4, #4]
 8011eec:	2100      	movs	r1, #0
 8011eee:	4630      	mov	r0, r6
 8011ef0:	f7ee f97e 	bl	80001f0 <memchr>
 8011ef4:	b108      	cbz	r0, 8011efa <_printf_i+0x1e6>
 8011ef6:	1b80      	subs	r0, r0, r6
 8011ef8:	6060      	str	r0, [r4, #4]
 8011efa:	6863      	ldr	r3, [r4, #4]
 8011efc:	6123      	str	r3, [r4, #16]
 8011efe:	2300      	movs	r3, #0
 8011f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f04:	e7aa      	b.n	8011e5c <_printf_i+0x148>
 8011f06:	6923      	ldr	r3, [r4, #16]
 8011f08:	4632      	mov	r2, r6
 8011f0a:	4649      	mov	r1, r9
 8011f0c:	4640      	mov	r0, r8
 8011f0e:	47d0      	blx	sl
 8011f10:	3001      	adds	r0, #1
 8011f12:	d0ad      	beq.n	8011e70 <_printf_i+0x15c>
 8011f14:	6823      	ldr	r3, [r4, #0]
 8011f16:	079b      	lsls	r3, r3, #30
 8011f18:	d413      	bmi.n	8011f42 <_printf_i+0x22e>
 8011f1a:	68e0      	ldr	r0, [r4, #12]
 8011f1c:	9b03      	ldr	r3, [sp, #12]
 8011f1e:	4298      	cmp	r0, r3
 8011f20:	bfb8      	it	lt
 8011f22:	4618      	movlt	r0, r3
 8011f24:	e7a6      	b.n	8011e74 <_printf_i+0x160>
 8011f26:	2301      	movs	r3, #1
 8011f28:	4632      	mov	r2, r6
 8011f2a:	4649      	mov	r1, r9
 8011f2c:	4640      	mov	r0, r8
 8011f2e:	47d0      	blx	sl
 8011f30:	3001      	adds	r0, #1
 8011f32:	d09d      	beq.n	8011e70 <_printf_i+0x15c>
 8011f34:	3501      	adds	r5, #1
 8011f36:	68e3      	ldr	r3, [r4, #12]
 8011f38:	9903      	ldr	r1, [sp, #12]
 8011f3a:	1a5b      	subs	r3, r3, r1
 8011f3c:	42ab      	cmp	r3, r5
 8011f3e:	dcf2      	bgt.n	8011f26 <_printf_i+0x212>
 8011f40:	e7eb      	b.n	8011f1a <_printf_i+0x206>
 8011f42:	2500      	movs	r5, #0
 8011f44:	f104 0619 	add.w	r6, r4, #25
 8011f48:	e7f5      	b.n	8011f36 <_printf_i+0x222>
 8011f4a:	bf00      	nop
 8011f4c:	08012fb4 	.word	0x08012fb4
 8011f50:	08012fc5 	.word	0x08012fc5

08011f54 <__sflush_r>:
 8011f54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f5c:	0716      	lsls	r6, r2, #28
 8011f5e:	4605      	mov	r5, r0
 8011f60:	460c      	mov	r4, r1
 8011f62:	d454      	bmi.n	801200e <__sflush_r+0xba>
 8011f64:	684b      	ldr	r3, [r1, #4]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	dc02      	bgt.n	8011f70 <__sflush_r+0x1c>
 8011f6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	dd48      	ble.n	8012002 <__sflush_r+0xae>
 8011f70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011f72:	2e00      	cmp	r6, #0
 8011f74:	d045      	beq.n	8012002 <__sflush_r+0xae>
 8011f76:	2300      	movs	r3, #0
 8011f78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011f7c:	682f      	ldr	r7, [r5, #0]
 8011f7e:	6a21      	ldr	r1, [r4, #32]
 8011f80:	602b      	str	r3, [r5, #0]
 8011f82:	d030      	beq.n	8011fe6 <__sflush_r+0x92>
 8011f84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011f86:	89a3      	ldrh	r3, [r4, #12]
 8011f88:	0759      	lsls	r1, r3, #29
 8011f8a:	d505      	bpl.n	8011f98 <__sflush_r+0x44>
 8011f8c:	6863      	ldr	r3, [r4, #4]
 8011f8e:	1ad2      	subs	r2, r2, r3
 8011f90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011f92:	b10b      	cbz	r3, 8011f98 <__sflush_r+0x44>
 8011f94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011f96:	1ad2      	subs	r2, r2, r3
 8011f98:	2300      	movs	r3, #0
 8011f9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011f9c:	6a21      	ldr	r1, [r4, #32]
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	47b0      	blx	r6
 8011fa2:	1c43      	adds	r3, r0, #1
 8011fa4:	89a3      	ldrh	r3, [r4, #12]
 8011fa6:	d106      	bne.n	8011fb6 <__sflush_r+0x62>
 8011fa8:	6829      	ldr	r1, [r5, #0]
 8011faa:	291d      	cmp	r1, #29
 8011fac:	d82b      	bhi.n	8012006 <__sflush_r+0xb2>
 8011fae:	4a2a      	ldr	r2, [pc, #168]	@ (8012058 <__sflush_r+0x104>)
 8011fb0:	410a      	asrs	r2, r1
 8011fb2:	07d6      	lsls	r6, r2, #31
 8011fb4:	d427      	bmi.n	8012006 <__sflush_r+0xb2>
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	6062      	str	r2, [r4, #4]
 8011fba:	04d9      	lsls	r1, r3, #19
 8011fbc:	6922      	ldr	r2, [r4, #16]
 8011fbe:	6022      	str	r2, [r4, #0]
 8011fc0:	d504      	bpl.n	8011fcc <__sflush_r+0x78>
 8011fc2:	1c42      	adds	r2, r0, #1
 8011fc4:	d101      	bne.n	8011fca <__sflush_r+0x76>
 8011fc6:	682b      	ldr	r3, [r5, #0]
 8011fc8:	b903      	cbnz	r3, 8011fcc <__sflush_r+0x78>
 8011fca:	6560      	str	r0, [r4, #84]	@ 0x54
 8011fcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011fce:	602f      	str	r7, [r5, #0]
 8011fd0:	b1b9      	cbz	r1, 8012002 <__sflush_r+0xae>
 8011fd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011fd6:	4299      	cmp	r1, r3
 8011fd8:	d002      	beq.n	8011fe0 <__sflush_r+0x8c>
 8011fda:	4628      	mov	r0, r5
 8011fdc:	f7ff fbd4 	bl	8011788 <_free_r>
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	6363      	str	r3, [r4, #52]	@ 0x34
 8011fe4:	e00d      	b.n	8012002 <__sflush_r+0xae>
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	4628      	mov	r0, r5
 8011fea:	47b0      	blx	r6
 8011fec:	4602      	mov	r2, r0
 8011fee:	1c50      	adds	r0, r2, #1
 8011ff0:	d1c9      	bne.n	8011f86 <__sflush_r+0x32>
 8011ff2:	682b      	ldr	r3, [r5, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d0c6      	beq.n	8011f86 <__sflush_r+0x32>
 8011ff8:	2b1d      	cmp	r3, #29
 8011ffa:	d001      	beq.n	8012000 <__sflush_r+0xac>
 8011ffc:	2b16      	cmp	r3, #22
 8011ffe:	d11e      	bne.n	801203e <__sflush_r+0xea>
 8012000:	602f      	str	r7, [r5, #0]
 8012002:	2000      	movs	r0, #0
 8012004:	e022      	b.n	801204c <__sflush_r+0xf8>
 8012006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801200a:	b21b      	sxth	r3, r3
 801200c:	e01b      	b.n	8012046 <__sflush_r+0xf2>
 801200e:	690f      	ldr	r7, [r1, #16]
 8012010:	2f00      	cmp	r7, #0
 8012012:	d0f6      	beq.n	8012002 <__sflush_r+0xae>
 8012014:	0793      	lsls	r3, r2, #30
 8012016:	680e      	ldr	r6, [r1, #0]
 8012018:	bf08      	it	eq
 801201a:	694b      	ldreq	r3, [r1, #20]
 801201c:	600f      	str	r7, [r1, #0]
 801201e:	bf18      	it	ne
 8012020:	2300      	movne	r3, #0
 8012022:	eba6 0807 	sub.w	r8, r6, r7
 8012026:	608b      	str	r3, [r1, #8]
 8012028:	f1b8 0f00 	cmp.w	r8, #0
 801202c:	dde9      	ble.n	8012002 <__sflush_r+0xae>
 801202e:	6a21      	ldr	r1, [r4, #32]
 8012030:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012032:	4643      	mov	r3, r8
 8012034:	463a      	mov	r2, r7
 8012036:	4628      	mov	r0, r5
 8012038:	47b0      	blx	r6
 801203a:	2800      	cmp	r0, #0
 801203c:	dc08      	bgt.n	8012050 <__sflush_r+0xfc>
 801203e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012046:	81a3      	strh	r3, [r4, #12]
 8012048:	f04f 30ff 	mov.w	r0, #4294967295
 801204c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012050:	4407      	add	r7, r0
 8012052:	eba8 0800 	sub.w	r8, r8, r0
 8012056:	e7e7      	b.n	8012028 <__sflush_r+0xd4>
 8012058:	dfbffffe 	.word	0xdfbffffe

0801205c <_fflush_r>:
 801205c:	b538      	push	{r3, r4, r5, lr}
 801205e:	690b      	ldr	r3, [r1, #16]
 8012060:	4605      	mov	r5, r0
 8012062:	460c      	mov	r4, r1
 8012064:	b913      	cbnz	r3, 801206c <_fflush_r+0x10>
 8012066:	2500      	movs	r5, #0
 8012068:	4628      	mov	r0, r5
 801206a:	bd38      	pop	{r3, r4, r5, pc}
 801206c:	b118      	cbz	r0, 8012076 <_fflush_r+0x1a>
 801206e:	6a03      	ldr	r3, [r0, #32]
 8012070:	b90b      	cbnz	r3, 8012076 <_fflush_r+0x1a>
 8012072:	f7ff f9f1 	bl	8011458 <__sinit>
 8012076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d0f3      	beq.n	8012066 <_fflush_r+0xa>
 801207e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012080:	07d0      	lsls	r0, r2, #31
 8012082:	d404      	bmi.n	801208e <_fflush_r+0x32>
 8012084:	0599      	lsls	r1, r3, #22
 8012086:	d402      	bmi.n	801208e <_fflush_r+0x32>
 8012088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801208a:	f7ff fb4e 	bl	801172a <__retarget_lock_acquire_recursive>
 801208e:	4628      	mov	r0, r5
 8012090:	4621      	mov	r1, r4
 8012092:	f7ff ff5f 	bl	8011f54 <__sflush_r>
 8012096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012098:	07da      	lsls	r2, r3, #31
 801209a:	4605      	mov	r5, r0
 801209c:	d4e4      	bmi.n	8012068 <_fflush_r+0xc>
 801209e:	89a3      	ldrh	r3, [r4, #12]
 80120a0:	059b      	lsls	r3, r3, #22
 80120a2:	d4e1      	bmi.n	8012068 <_fflush_r+0xc>
 80120a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80120a6:	f7ff fb41 	bl	801172c <__retarget_lock_release_recursive>
 80120aa:	e7dd      	b.n	8012068 <_fflush_r+0xc>

080120ac <fiprintf>:
 80120ac:	b40e      	push	{r1, r2, r3}
 80120ae:	b503      	push	{r0, r1, lr}
 80120b0:	4601      	mov	r1, r0
 80120b2:	ab03      	add	r3, sp, #12
 80120b4:	4805      	ldr	r0, [pc, #20]	@ (80120cc <fiprintf+0x20>)
 80120b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80120ba:	6800      	ldr	r0, [r0, #0]
 80120bc:	9301      	str	r3, [sp, #4]
 80120be:	f000 f88f 	bl	80121e0 <_vfiprintf_r>
 80120c2:	b002      	add	sp, #8
 80120c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80120c8:	b003      	add	sp, #12
 80120ca:	4770      	bx	lr
 80120cc:	2000018c 	.word	0x2000018c

080120d0 <memmove>:
 80120d0:	4288      	cmp	r0, r1
 80120d2:	b510      	push	{r4, lr}
 80120d4:	eb01 0402 	add.w	r4, r1, r2
 80120d8:	d902      	bls.n	80120e0 <memmove+0x10>
 80120da:	4284      	cmp	r4, r0
 80120dc:	4623      	mov	r3, r4
 80120de:	d807      	bhi.n	80120f0 <memmove+0x20>
 80120e0:	1e43      	subs	r3, r0, #1
 80120e2:	42a1      	cmp	r1, r4
 80120e4:	d008      	beq.n	80120f8 <memmove+0x28>
 80120e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80120ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80120ee:	e7f8      	b.n	80120e2 <memmove+0x12>
 80120f0:	4402      	add	r2, r0
 80120f2:	4601      	mov	r1, r0
 80120f4:	428a      	cmp	r2, r1
 80120f6:	d100      	bne.n	80120fa <memmove+0x2a>
 80120f8:	bd10      	pop	{r4, pc}
 80120fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80120fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012102:	e7f7      	b.n	80120f4 <memmove+0x24>

08012104 <_sbrk_r>:
 8012104:	b538      	push	{r3, r4, r5, lr}
 8012106:	4d06      	ldr	r5, [pc, #24]	@ (8012120 <_sbrk_r+0x1c>)
 8012108:	2300      	movs	r3, #0
 801210a:	4604      	mov	r4, r0
 801210c:	4608      	mov	r0, r1
 801210e:	602b      	str	r3, [r5, #0]
 8012110:	f7ef ffcc 	bl	80020ac <_sbrk>
 8012114:	1c43      	adds	r3, r0, #1
 8012116:	d102      	bne.n	801211e <_sbrk_r+0x1a>
 8012118:	682b      	ldr	r3, [r5, #0]
 801211a:	b103      	cbz	r3, 801211e <_sbrk_r+0x1a>
 801211c:	6023      	str	r3, [r4, #0]
 801211e:	bd38      	pop	{r3, r4, r5, pc}
 8012120:	200084c8 	.word	0x200084c8

08012124 <abort>:
 8012124:	b508      	push	{r3, lr}
 8012126:	2006      	movs	r0, #6
 8012128:	f000 fa2e 	bl	8012588 <raise>
 801212c:	2001      	movs	r0, #1
 801212e:	f7ef ff45 	bl	8001fbc <_exit>

08012132 <_realloc_r>:
 8012132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012136:	4680      	mov	r8, r0
 8012138:	4615      	mov	r5, r2
 801213a:	460c      	mov	r4, r1
 801213c:	b921      	cbnz	r1, 8012148 <_realloc_r+0x16>
 801213e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012142:	4611      	mov	r1, r2
 8012144:	f7ff bb94 	b.w	8011870 <_malloc_r>
 8012148:	b92a      	cbnz	r2, 8012156 <_realloc_r+0x24>
 801214a:	f7ff fb1d 	bl	8011788 <_free_r>
 801214e:	2400      	movs	r4, #0
 8012150:	4620      	mov	r0, r4
 8012152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012156:	f000 fa33 	bl	80125c0 <_malloc_usable_size_r>
 801215a:	4285      	cmp	r5, r0
 801215c:	4606      	mov	r6, r0
 801215e:	d802      	bhi.n	8012166 <_realloc_r+0x34>
 8012160:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012164:	d8f4      	bhi.n	8012150 <_realloc_r+0x1e>
 8012166:	4629      	mov	r1, r5
 8012168:	4640      	mov	r0, r8
 801216a:	f7ff fb81 	bl	8011870 <_malloc_r>
 801216e:	4607      	mov	r7, r0
 8012170:	2800      	cmp	r0, #0
 8012172:	d0ec      	beq.n	801214e <_realloc_r+0x1c>
 8012174:	42b5      	cmp	r5, r6
 8012176:	462a      	mov	r2, r5
 8012178:	4621      	mov	r1, r4
 801217a:	bf28      	it	cs
 801217c:	4632      	movcs	r2, r6
 801217e:	f7ff fad6 	bl	801172e <memcpy>
 8012182:	4621      	mov	r1, r4
 8012184:	4640      	mov	r0, r8
 8012186:	f7ff faff 	bl	8011788 <_free_r>
 801218a:	463c      	mov	r4, r7
 801218c:	e7e0      	b.n	8012150 <_realloc_r+0x1e>

0801218e <__sfputc_r>:
 801218e:	6893      	ldr	r3, [r2, #8]
 8012190:	3b01      	subs	r3, #1
 8012192:	2b00      	cmp	r3, #0
 8012194:	b410      	push	{r4}
 8012196:	6093      	str	r3, [r2, #8]
 8012198:	da08      	bge.n	80121ac <__sfputc_r+0x1e>
 801219a:	6994      	ldr	r4, [r2, #24]
 801219c:	42a3      	cmp	r3, r4
 801219e:	db01      	blt.n	80121a4 <__sfputc_r+0x16>
 80121a0:	290a      	cmp	r1, #10
 80121a2:	d103      	bne.n	80121ac <__sfputc_r+0x1e>
 80121a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121a8:	f000 b932 	b.w	8012410 <__swbuf_r>
 80121ac:	6813      	ldr	r3, [r2, #0]
 80121ae:	1c58      	adds	r0, r3, #1
 80121b0:	6010      	str	r0, [r2, #0]
 80121b2:	7019      	strb	r1, [r3, #0]
 80121b4:	4608      	mov	r0, r1
 80121b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121ba:	4770      	bx	lr

080121bc <__sfputs_r>:
 80121bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121be:	4606      	mov	r6, r0
 80121c0:	460f      	mov	r7, r1
 80121c2:	4614      	mov	r4, r2
 80121c4:	18d5      	adds	r5, r2, r3
 80121c6:	42ac      	cmp	r4, r5
 80121c8:	d101      	bne.n	80121ce <__sfputs_r+0x12>
 80121ca:	2000      	movs	r0, #0
 80121cc:	e007      	b.n	80121de <__sfputs_r+0x22>
 80121ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121d2:	463a      	mov	r2, r7
 80121d4:	4630      	mov	r0, r6
 80121d6:	f7ff ffda 	bl	801218e <__sfputc_r>
 80121da:	1c43      	adds	r3, r0, #1
 80121dc:	d1f3      	bne.n	80121c6 <__sfputs_r+0xa>
 80121de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080121e0 <_vfiprintf_r>:
 80121e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e4:	460d      	mov	r5, r1
 80121e6:	b09d      	sub	sp, #116	@ 0x74
 80121e8:	4614      	mov	r4, r2
 80121ea:	4698      	mov	r8, r3
 80121ec:	4606      	mov	r6, r0
 80121ee:	b118      	cbz	r0, 80121f8 <_vfiprintf_r+0x18>
 80121f0:	6a03      	ldr	r3, [r0, #32]
 80121f2:	b90b      	cbnz	r3, 80121f8 <_vfiprintf_r+0x18>
 80121f4:	f7ff f930 	bl	8011458 <__sinit>
 80121f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80121fa:	07d9      	lsls	r1, r3, #31
 80121fc:	d405      	bmi.n	801220a <_vfiprintf_r+0x2a>
 80121fe:	89ab      	ldrh	r3, [r5, #12]
 8012200:	059a      	lsls	r2, r3, #22
 8012202:	d402      	bmi.n	801220a <_vfiprintf_r+0x2a>
 8012204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012206:	f7ff fa90 	bl	801172a <__retarget_lock_acquire_recursive>
 801220a:	89ab      	ldrh	r3, [r5, #12]
 801220c:	071b      	lsls	r3, r3, #28
 801220e:	d501      	bpl.n	8012214 <_vfiprintf_r+0x34>
 8012210:	692b      	ldr	r3, [r5, #16]
 8012212:	b99b      	cbnz	r3, 801223c <_vfiprintf_r+0x5c>
 8012214:	4629      	mov	r1, r5
 8012216:	4630      	mov	r0, r6
 8012218:	f000 f938 	bl	801248c <__swsetup_r>
 801221c:	b170      	cbz	r0, 801223c <_vfiprintf_r+0x5c>
 801221e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012220:	07dc      	lsls	r4, r3, #31
 8012222:	d504      	bpl.n	801222e <_vfiprintf_r+0x4e>
 8012224:	f04f 30ff 	mov.w	r0, #4294967295
 8012228:	b01d      	add	sp, #116	@ 0x74
 801222a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801222e:	89ab      	ldrh	r3, [r5, #12]
 8012230:	0598      	lsls	r0, r3, #22
 8012232:	d4f7      	bmi.n	8012224 <_vfiprintf_r+0x44>
 8012234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012236:	f7ff fa79 	bl	801172c <__retarget_lock_release_recursive>
 801223a:	e7f3      	b.n	8012224 <_vfiprintf_r+0x44>
 801223c:	2300      	movs	r3, #0
 801223e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012240:	2320      	movs	r3, #32
 8012242:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012246:	f8cd 800c 	str.w	r8, [sp, #12]
 801224a:	2330      	movs	r3, #48	@ 0x30
 801224c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80123fc <_vfiprintf_r+0x21c>
 8012250:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012254:	f04f 0901 	mov.w	r9, #1
 8012258:	4623      	mov	r3, r4
 801225a:	469a      	mov	sl, r3
 801225c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012260:	b10a      	cbz	r2, 8012266 <_vfiprintf_r+0x86>
 8012262:	2a25      	cmp	r2, #37	@ 0x25
 8012264:	d1f9      	bne.n	801225a <_vfiprintf_r+0x7a>
 8012266:	ebba 0b04 	subs.w	fp, sl, r4
 801226a:	d00b      	beq.n	8012284 <_vfiprintf_r+0xa4>
 801226c:	465b      	mov	r3, fp
 801226e:	4622      	mov	r2, r4
 8012270:	4629      	mov	r1, r5
 8012272:	4630      	mov	r0, r6
 8012274:	f7ff ffa2 	bl	80121bc <__sfputs_r>
 8012278:	3001      	adds	r0, #1
 801227a:	f000 80a7 	beq.w	80123cc <_vfiprintf_r+0x1ec>
 801227e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012280:	445a      	add	r2, fp
 8012282:	9209      	str	r2, [sp, #36]	@ 0x24
 8012284:	f89a 3000 	ldrb.w	r3, [sl]
 8012288:	2b00      	cmp	r3, #0
 801228a:	f000 809f 	beq.w	80123cc <_vfiprintf_r+0x1ec>
 801228e:	2300      	movs	r3, #0
 8012290:	f04f 32ff 	mov.w	r2, #4294967295
 8012294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012298:	f10a 0a01 	add.w	sl, sl, #1
 801229c:	9304      	str	r3, [sp, #16]
 801229e:	9307      	str	r3, [sp, #28]
 80122a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80122a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80122a6:	4654      	mov	r4, sl
 80122a8:	2205      	movs	r2, #5
 80122aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122ae:	4853      	ldr	r0, [pc, #332]	@ (80123fc <_vfiprintf_r+0x21c>)
 80122b0:	f7ed ff9e 	bl	80001f0 <memchr>
 80122b4:	9a04      	ldr	r2, [sp, #16]
 80122b6:	b9d8      	cbnz	r0, 80122f0 <_vfiprintf_r+0x110>
 80122b8:	06d1      	lsls	r1, r2, #27
 80122ba:	bf44      	itt	mi
 80122bc:	2320      	movmi	r3, #32
 80122be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122c2:	0713      	lsls	r3, r2, #28
 80122c4:	bf44      	itt	mi
 80122c6:	232b      	movmi	r3, #43	@ 0x2b
 80122c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122cc:	f89a 3000 	ldrb.w	r3, [sl]
 80122d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80122d2:	d015      	beq.n	8012300 <_vfiprintf_r+0x120>
 80122d4:	9a07      	ldr	r2, [sp, #28]
 80122d6:	4654      	mov	r4, sl
 80122d8:	2000      	movs	r0, #0
 80122da:	f04f 0c0a 	mov.w	ip, #10
 80122de:	4621      	mov	r1, r4
 80122e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122e4:	3b30      	subs	r3, #48	@ 0x30
 80122e6:	2b09      	cmp	r3, #9
 80122e8:	d94b      	bls.n	8012382 <_vfiprintf_r+0x1a2>
 80122ea:	b1b0      	cbz	r0, 801231a <_vfiprintf_r+0x13a>
 80122ec:	9207      	str	r2, [sp, #28]
 80122ee:	e014      	b.n	801231a <_vfiprintf_r+0x13a>
 80122f0:	eba0 0308 	sub.w	r3, r0, r8
 80122f4:	fa09 f303 	lsl.w	r3, r9, r3
 80122f8:	4313      	orrs	r3, r2
 80122fa:	9304      	str	r3, [sp, #16]
 80122fc:	46a2      	mov	sl, r4
 80122fe:	e7d2      	b.n	80122a6 <_vfiprintf_r+0xc6>
 8012300:	9b03      	ldr	r3, [sp, #12]
 8012302:	1d19      	adds	r1, r3, #4
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	9103      	str	r1, [sp, #12]
 8012308:	2b00      	cmp	r3, #0
 801230a:	bfbb      	ittet	lt
 801230c:	425b      	neglt	r3, r3
 801230e:	f042 0202 	orrlt.w	r2, r2, #2
 8012312:	9307      	strge	r3, [sp, #28]
 8012314:	9307      	strlt	r3, [sp, #28]
 8012316:	bfb8      	it	lt
 8012318:	9204      	strlt	r2, [sp, #16]
 801231a:	7823      	ldrb	r3, [r4, #0]
 801231c:	2b2e      	cmp	r3, #46	@ 0x2e
 801231e:	d10a      	bne.n	8012336 <_vfiprintf_r+0x156>
 8012320:	7863      	ldrb	r3, [r4, #1]
 8012322:	2b2a      	cmp	r3, #42	@ 0x2a
 8012324:	d132      	bne.n	801238c <_vfiprintf_r+0x1ac>
 8012326:	9b03      	ldr	r3, [sp, #12]
 8012328:	1d1a      	adds	r2, r3, #4
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	9203      	str	r2, [sp, #12]
 801232e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012332:	3402      	adds	r4, #2
 8012334:	9305      	str	r3, [sp, #20]
 8012336:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801240c <_vfiprintf_r+0x22c>
 801233a:	7821      	ldrb	r1, [r4, #0]
 801233c:	2203      	movs	r2, #3
 801233e:	4650      	mov	r0, sl
 8012340:	f7ed ff56 	bl	80001f0 <memchr>
 8012344:	b138      	cbz	r0, 8012356 <_vfiprintf_r+0x176>
 8012346:	9b04      	ldr	r3, [sp, #16]
 8012348:	eba0 000a 	sub.w	r0, r0, sl
 801234c:	2240      	movs	r2, #64	@ 0x40
 801234e:	4082      	lsls	r2, r0
 8012350:	4313      	orrs	r3, r2
 8012352:	3401      	adds	r4, #1
 8012354:	9304      	str	r3, [sp, #16]
 8012356:	f814 1b01 	ldrb.w	r1, [r4], #1
 801235a:	4829      	ldr	r0, [pc, #164]	@ (8012400 <_vfiprintf_r+0x220>)
 801235c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012360:	2206      	movs	r2, #6
 8012362:	f7ed ff45 	bl	80001f0 <memchr>
 8012366:	2800      	cmp	r0, #0
 8012368:	d03f      	beq.n	80123ea <_vfiprintf_r+0x20a>
 801236a:	4b26      	ldr	r3, [pc, #152]	@ (8012404 <_vfiprintf_r+0x224>)
 801236c:	bb1b      	cbnz	r3, 80123b6 <_vfiprintf_r+0x1d6>
 801236e:	9b03      	ldr	r3, [sp, #12]
 8012370:	3307      	adds	r3, #7
 8012372:	f023 0307 	bic.w	r3, r3, #7
 8012376:	3308      	adds	r3, #8
 8012378:	9303      	str	r3, [sp, #12]
 801237a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801237c:	443b      	add	r3, r7
 801237e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012380:	e76a      	b.n	8012258 <_vfiprintf_r+0x78>
 8012382:	fb0c 3202 	mla	r2, ip, r2, r3
 8012386:	460c      	mov	r4, r1
 8012388:	2001      	movs	r0, #1
 801238a:	e7a8      	b.n	80122de <_vfiprintf_r+0xfe>
 801238c:	2300      	movs	r3, #0
 801238e:	3401      	adds	r4, #1
 8012390:	9305      	str	r3, [sp, #20]
 8012392:	4619      	mov	r1, r3
 8012394:	f04f 0c0a 	mov.w	ip, #10
 8012398:	4620      	mov	r0, r4
 801239a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801239e:	3a30      	subs	r2, #48	@ 0x30
 80123a0:	2a09      	cmp	r2, #9
 80123a2:	d903      	bls.n	80123ac <_vfiprintf_r+0x1cc>
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d0c6      	beq.n	8012336 <_vfiprintf_r+0x156>
 80123a8:	9105      	str	r1, [sp, #20]
 80123aa:	e7c4      	b.n	8012336 <_vfiprintf_r+0x156>
 80123ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80123b0:	4604      	mov	r4, r0
 80123b2:	2301      	movs	r3, #1
 80123b4:	e7f0      	b.n	8012398 <_vfiprintf_r+0x1b8>
 80123b6:	ab03      	add	r3, sp, #12
 80123b8:	9300      	str	r3, [sp, #0]
 80123ba:	462a      	mov	r2, r5
 80123bc:	4b12      	ldr	r3, [pc, #72]	@ (8012408 <_vfiprintf_r+0x228>)
 80123be:	a904      	add	r1, sp, #16
 80123c0:	4630      	mov	r0, r6
 80123c2:	f3af 8000 	nop.w
 80123c6:	4607      	mov	r7, r0
 80123c8:	1c78      	adds	r0, r7, #1
 80123ca:	d1d6      	bne.n	801237a <_vfiprintf_r+0x19a>
 80123cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80123ce:	07d9      	lsls	r1, r3, #31
 80123d0:	d405      	bmi.n	80123de <_vfiprintf_r+0x1fe>
 80123d2:	89ab      	ldrh	r3, [r5, #12]
 80123d4:	059a      	lsls	r2, r3, #22
 80123d6:	d402      	bmi.n	80123de <_vfiprintf_r+0x1fe>
 80123d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80123da:	f7ff f9a7 	bl	801172c <__retarget_lock_release_recursive>
 80123de:	89ab      	ldrh	r3, [r5, #12]
 80123e0:	065b      	lsls	r3, r3, #25
 80123e2:	f53f af1f 	bmi.w	8012224 <_vfiprintf_r+0x44>
 80123e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123e8:	e71e      	b.n	8012228 <_vfiprintf_r+0x48>
 80123ea:	ab03      	add	r3, sp, #12
 80123ec:	9300      	str	r3, [sp, #0]
 80123ee:	462a      	mov	r2, r5
 80123f0:	4b05      	ldr	r3, [pc, #20]	@ (8012408 <_vfiprintf_r+0x228>)
 80123f2:	a904      	add	r1, sp, #16
 80123f4:	4630      	mov	r0, r6
 80123f6:	f7ff fc8d 	bl	8011d14 <_printf_i>
 80123fa:	e7e4      	b.n	80123c6 <_vfiprintf_r+0x1e6>
 80123fc:	08012fa3 	.word	0x08012fa3
 8012400:	08012fad 	.word	0x08012fad
 8012404:	00000000 	.word	0x00000000
 8012408:	080121bd 	.word	0x080121bd
 801240c:	08012fa9 	.word	0x08012fa9

08012410 <__swbuf_r>:
 8012410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012412:	460e      	mov	r6, r1
 8012414:	4614      	mov	r4, r2
 8012416:	4605      	mov	r5, r0
 8012418:	b118      	cbz	r0, 8012422 <__swbuf_r+0x12>
 801241a:	6a03      	ldr	r3, [r0, #32]
 801241c:	b90b      	cbnz	r3, 8012422 <__swbuf_r+0x12>
 801241e:	f7ff f81b 	bl	8011458 <__sinit>
 8012422:	69a3      	ldr	r3, [r4, #24]
 8012424:	60a3      	str	r3, [r4, #8]
 8012426:	89a3      	ldrh	r3, [r4, #12]
 8012428:	071a      	lsls	r2, r3, #28
 801242a:	d501      	bpl.n	8012430 <__swbuf_r+0x20>
 801242c:	6923      	ldr	r3, [r4, #16]
 801242e:	b943      	cbnz	r3, 8012442 <__swbuf_r+0x32>
 8012430:	4621      	mov	r1, r4
 8012432:	4628      	mov	r0, r5
 8012434:	f000 f82a 	bl	801248c <__swsetup_r>
 8012438:	b118      	cbz	r0, 8012442 <__swbuf_r+0x32>
 801243a:	f04f 37ff 	mov.w	r7, #4294967295
 801243e:	4638      	mov	r0, r7
 8012440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012442:	6823      	ldr	r3, [r4, #0]
 8012444:	6922      	ldr	r2, [r4, #16]
 8012446:	1a98      	subs	r0, r3, r2
 8012448:	6963      	ldr	r3, [r4, #20]
 801244a:	b2f6      	uxtb	r6, r6
 801244c:	4283      	cmp	r3, r0
 801244e:	4637      	mov	r7, r6
 8012450:	dc05      	bgt.n	801245e <__swbuf_r+0x4e>
 8012452:	4621      	mov	r1, r4
 8012454:	4628      	mov	r0, r5
 8012456:	f7ff fe01 	bl	801205c <_fflush_r>
 801245a:	2800      	cmp	r0, #0
 801245c:	d1ed      	bne.n	801243a <__swbuf_r+0x2a>
 801245e:	68a3      	ldr	r3, [r4, #8]
 8012460:	3b01      	subs	r3, #1
 8012462:	60a3      	str	r3, [r4, #8]
 8012464:	6823      	ldr	r3, [r4, #0]
 8012466:	1c5a      	adds	r2, r3, #1
 8012468:	6022      	str	r2, [r4, #0]
 801246a:	701e      	strb	r6, [r3, #0]
 801246c:	6962      	ldr	r2, [r4, #20]
 801246e:	1c43      	adds	r3, r0, #1
 8012470:	429a      	cmp	r2, r3
 8012472:	d004      	beq.n	801247e <__swbuf_r+0x6e>
 8012474:	89a3      	ldrh	r3, [r4, #12]
 8012476:	07db      	lsls	r3, r3, #31
 8012478:	d5e1      	bpl.n	801243e <__swbuf_r+0x2e>
 801247a:	2e0a      	cmp	r6, #10
 801247c:	d1df      	bne.n	801243e <__swbuf_r+0x2e>
 801247e:	4621      	mov	r1, r4
 8012480:	4628      	mov	r0, r5
 8012482:	f7ff fdeb 	bl	801205c <_fflush_r>
 8012486:	2800      	cmp	r0, #0
 8012488:	d0d9      	beq.n	801243e <__swbuf_r+0x2e>
 801248a:	e7d6      	b.n	801243a <__swbuf_r+0x2a>

0801248c <__swsetup_r>:
 801248c:	b538      	push	{r3, r4, r5, lr}
 801248e:	4b29      	ldr	r3, [pc, #164]	@ (8012534 <__swsetup_r+0xa8>)
 8012490:	4605      	mov	r5, r0
 8012492:	6818      	ldr	r0, [r3, #0]
 8012494:	460c      	mov	r4, r1
 8012496:	b118      	cbz	r0, 80124a0 <__swsetup_r+0x14>
 8012498:	6a03      	ldr	r3, [r0, #32]
 801249a:	b90b      	cbnz	r3, 80124a0 <__swsetup_r+0x14>
 801249c:	f7fe ffdc 	bl	8011458 <__sinit>
 80124a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124a4:	0719      	lsls	r1, r3, #28
 80124a6:	d422      	bmi.n	80124ee <__swsetup_r+0x62>
 80124a8:	06da      	lsls	r2, r3, #27
 80124aa:	d407      	bmi.n	80124bc <__swsetup_r+0x30>
 80124ac:	2209      	movs	r2, #9
 80124ae:	602a      	str	r2, [r5, #0]
 80124b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124b4:	81a3      	strh	r3, [r4, #12]
 80124b6:	f04f 30ff 	mov.w	r0, #4294967295
 80124ba:	e033      	b.n	8012524 <__swsetup_r+0x98>
 80124bc:	0758      	lsls	r0, r3, #29
 80124be:	d512      	bpl.n	80124e6 <__swsetup_r+0x5a>
 80124c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80124c2:	b141      	cbz	r1, 80124d6 <__swsetup_r+0x4a>
 80124c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80124c8:	4299      	cmp	r1, r3
 80124ca:	d002      	beq.n	80124d2 <__swsetup_r+0x46>
 80124cc:	4628      	mov	r0, r5
 80124ce:	f7ff f95b 	bl	8011788 <_free_r>
 80124d2:	2300      	movs	r3, #0
 80124d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80124d6:	89a3      	ldrh	r3, [r4, #12]
 80124d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80124dc:	81a3      	strh	r3, [r4, #12]
 80124de:	2300      	movs	r3, #0
 80124e0:	6063      	str	r3, [r4, #4]
 80124e2:	6923      	ldr	r3, [r4, #16]
 80124e4:	6023      	str	r3, [r4, #0]
 80124e6:	89a3      	ldrh	r3, [r4, #12]
 80124e8:	f043 0308 	orr.w	r3, r3, #8
 80124ec:	81a3      	strh	r3, [r4, #12]
 80124ee:	6923      	ldr	r3, [r4, #16]
 80124f0:	b94b      	cbnz	r3, 8012506 <__swsetup_r+0x7a>
 80124f2:	89a3      	ldrh	r3, [r4, #12]
 80124f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80124f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80124fc:	d003      	beq.n	8012506 <__swsetup_r+0x7a>
 80124fe:	4621      	mov	r1, r4
 8012500:	4628      	mov	r0, r5
 8012502:	f000 f88b 	bl	801261c <__smakebuf_r>
 8012506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801250a:	f013 0201 	ands.w	r2, r3, #1
 801250e:	d00a      	beq.n	8012526 <__swsetup_r+0x9a>
 8012510:	2200      	movs	r2, #0
 8012512:	60a2      	str	r2, [r4, #8]
 8012514:	6962      	ldr	r2, [r4, #20]
 8012516:	4252      	negs	r2, r2
 8012518:	61a2      	str	r2, [r4, #24]
 801251a:	6922      	ldr	r2, [r4, #16]
 801251c:	b942      	cbnz	r2, 8012530 <__swsetup_r+0xa4>
 801251e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012522:	d1c5      	bne.n	80124b0 <__swsetup_r+0x24>
 8012524:	bd38      	pop	{r3, r4, r5, pc}
 8012526:	0799      	lsls	r1, r3, #30
 8012528:	bf58      	it	pl
 801252a:	6962      	ldrpl	r2, [r4, #20]
 801252c:	60a2      	str	r2, [r4, #8]
 801252e:	e7f4      	b.n	801251a <__swsetup_r+0x8e>
 8012530:	2000      	movs	r0, #0
 8012532:	e7f7      	b.n	8012524 <__swsetup_r+0x98>
 8012534:	2000018c 	.word	0x2000018c

08012538 <_raise_r>:
 8012538:	291f      	cmp	r1, #31
 801253a:	b538      	push	{r3, r4, r5, lr}
 801253c:	4605      	mov	r5, r0
 801253e:	460c      	mov	r4, r1
 8012540:	d904      	bls.n	801254c <_raise_r+0x14>
 8012542:	2316      	movs	r3, #22
 8012544:	6003      	str	r3, [r0, #0]
 8012546:	f04f 30ff 	mov.w	r0, #4294967295
 801254a:	bd38      	pop	{r3, r4, r5, pc}
 801254c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801254e:	b112      	cbz	r2, 8012556 <_raise_r+0x1e>
 8012550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012554:	b94b      	cbnz	r3, 801256a <_raise_r+0x32>
 8012556:	4628      	mov	r0, r5
 8012558:	f000 f830 	bl	80125bc <_getpid_r>
 801255c:	4622      	mov	r2, r4
 801255e:	4601      	mov	r1, r0
 8012560:	4628      	mov	r0, r5
 8012562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012566:	f000 b817 	b.w	8012598 <_kill_r>
 801256a:	2b01      	cmp	r3, #1
 801256c:	d00a      	beq.n	8012584 <_raise_r+0x4c>
 801256e:	1c59      	adds	r1, r3, #1
 8012570:	d103      	bne.n	801257a <_raise_r+0x42>
 8012572:	2316      	movs	r3, #22
 8012574:	6003      	str	r3, [r0, #0]
 8012576:	2001      	movs	r0, #1
 8012578:	e7e7      	b.n	801254a <_raise_r+0x12>
 801257a:	2100      	movs	r1, #0
 801257c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012580:	4620      	mov	r0, r4
 8012582:	4798      	blx	r3
 8012584:	2000      	movs	r0, #0
 8012586:	e7e0      	b.n	801254a <_raise_r+0x12>

08012588 <raise>:
 8012588:	4b02      	ldr	r3, [pc, #8]	@ (8012594 <raise+0xc>)
 801258a:	4601      	mov	r1, r0
 801258c:	6818      	ldr	r0, [r3, #0]
 801258e:	f7ff bfd3 	b.w	8012538 <_raise_r>
 8012592:	bf00      	nop
 8012594:	2000018c 	.word	0x2000018c

08012598 <_kill_r>:
 8012598:	b538      	push	{r3, r4, r5, lr}
 801259a:	4d07      	ldr	r5, [pc, #28]	@ (80125b8 <_kill_r+0x20>)
 801259c:	2300      	movs	r3, #0
 801259e:	4604      	mov	r4, r0
 80125a0:	4608      	mov	r0, r1
 80125a2:	4611      	mov	r1, r2
 80125a4:	602b      	str	r3, [r5, #0]
 80125a6:	f7ef fcf9 	bl	8001f9c <_kill>
 80125aa:	1c43      	adds	r3, r0, #1
 80125ac:	d102      	bne.n	80125b4 <_kill_r+0x1c>
 80125ae:	682b      	ldr	r3, [r5, #0]
 80125b0:	b103      	cbz	r3, 80125b4 <_kill_r+0x1c>
 80125b2:	6023      	str	r3, [r4, #0]
 80125b4:	bd38      	pop	{r3, r4, r5, pc}
 80125b6:	bf00      	nop
 80125b8:	200084c8 	.word	0x200084c8

080125bc <_getpid_r>:
 80125bc:	f7ef bce6 	b.w	8001f8c <_getpid>

080125c0 <_malloc_usable_size_r>:
 80125c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125c4:	1f18      	subs	r0, r3, #4
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	bfbc      	itt	lt
 80125ca:	580b      	ldrlt	r3, [r1, r0]
 80125cc:	18c0      	addlt	r0, r0, r3
 80125ce:	4770      	bx	lr

080125d0 <__swhatbuf_r>:
 80125d0:	b570      	push	{r4, r5, r6, lr}
 80125d2:	460c      	mov	r4, r1
 80125d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125d8:	2900      	cmp	r1, #0
 80125da:	b096      	sub	sp, #88	@ 0x58
 80125dc:	4615      	mov	r5, r2
 80125de:	461e      	mov	r6, r3
 80125e0:	da0d      	bge.n	80125fe <__swhatbuf_r+0x2e>
 80125e2:	89a3      	ldrh	r3, [r4, #12]
 80125e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80125e8:	f04f 0100 	mov.w	r1, #0
 80125ec:	bf14      	ite	ne
 80125ee:	2340      	movne	r3, #64	@ 0x40
 80125f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80125f4:	2000      	movs	r0, #0
 80125f6:	6031      	str	r1, [r6, #0]
 80125f8:	602b      	str	r3, [r5, #0]
 80125fa:	b016      	add	sp, #88	@ 0x58
 80125fc:	bd70      	pop	{r4, r5, r6, pc}
 80125fe:	466a      	mov	r2, sp
 8012600:	f000 f848 	bl	8012694 <_fstat_r>
 8012604:	2800      	cmp	r0, #0
 8012606:	dbec      	blt.n	80125e2 <__swhatbuf_r+0x12>
 8012608:	9901      	ldr	r1, [sp, #4]
 801260a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801260e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012612:	4259      	negs	r1, r3
 8012614:	4159      	adcs	r1, r3
 8012616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801261a:	e7eb      	b.n	80125f4 <__swhatbuf_r+0x24>

0801261c <__smakebuf_r>:
 801261c:	898b      	ldrh	r3, [r1, #12]
 801261e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012620:	079d      	lsls	r5, r3, #30
 8012622:	4606      	mov	r6, r0
 8012624:	460c      	mov	r4, r1
 8012626:	d507      	bpl.n	8012638 <__smakebuf_r+0x1c>
 8012628:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801262c:	6023      	str	r3, [r4, #0]
 801262e:	6123      	str	r3, [r4, #16]
 8012630:	2301      	movs	r3, #1
 8012632:	6163      	str	r3, [r4, #20]
 8012634:	b003      	add	sp, #12
 8012636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012638:	ab01      	add	r3, sp, #4
 801263a:	466a      	mov	r2, sp
 801263c:	f7ff ffc8 	bl	80125d0 <__swhatbuf_r>
 8012640:	9f00      	ldr	r7, [sp, #0]
 8012642:	4605      	mov	r5, r0
 8012644:	4639      	mov	r1, r7
 8012646:	4630      	mov	r0, r6
 8012648:	f7ff f912 	bl	8011870 <_malloc_r>
 801264c:	b948      	cbnz	r0, 8012662 <__smakebuf_r+0x46>
 801264e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012652:	059a      	lsls	r2, r3, #22
 8012654:	d4ee      	bmi.n	8012634 <__smakebuf_r+0x18>
 8012656:	f023 0303 	bic.w	r3, r3, #3
 801265a:	f043 0302 	orr.w	r3, r3, #2
 801265e:	81a3      	strh	r3, [r4, #12]
 8012660:	e7e2      	b.n	8012628 <__smakebuf_r+0xc>
 8012662:	89a3      	ldrh	r3, [r4, #12]
 8012664:	6020      	str	r0, [r4, #0]
 8012666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801266a:	81a3      	strh	r3, [r4, #12]
 801266c:	9b01      	ldr	r3, [sp, #4]
 801266e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012672:	b15b      	cbz	r3, 801268c <__smakebuf_r+0x70>
 8012674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012678:	4630      	mov	r0, r6
 801267a:	f000 f81d 	bl	80126b8 <_isatty_r>
 801267e:	b128      	cbz	r0, 801268c <__smakebuf_r+0x70>
 8012680:	89a3      	ldrh	r3, [r4, #12]
 8012682:	f023 0303 	bic.w	r3, r3, #3
 8012686:	f043 0301 	orr.w	r3, r3, #1
 801268a:	81a3      	strh	r3, [r4, #12]
 801268c:	89a3      	ldrh	r3, [r4, #12]
 801268e:	431d      	orrs	r5, r3
 8012690:	81a5      	strh	r5, [r4, #12]
 8012692:	e7cf      	b.n	8012634 <__smakebuf_r+0x18>

08012694 <_fstat_r>:
 8012694:	b538      	push	{r3, r4, r5, lr}
 8012696:	4d07      	ldr	r5, [pc, #28]	@ (80126b4 <_fstat_r+0x20>)
 8012698:	2300      	movs	r3, #0
 801269a:	4604      	mov	r4, r0
 801269c:	4608      	mov	r0, r1
 801269e:	4611      	mov	r1, r2
 80126a0:	602b      	str	r3, [r5, #0]
 80126a2:	f7ef fcdb 	bl	800205c <_fstat>
 80126a6:	1c43      	adds	r3, r0, #1
 80126a8:	d102      	bne.n	80126b0 <_fstat_r+0x1c>
 80126aa:	682b      	ldr	r3, [r5, #0]
 80126ac:	b103      	cbz	r3, 80126b0 <_fstat_r+0x1c>
 80126ae:	6023      	str	r3, [r4, #0]
 80126b0:	bd38      	pop	{r3, r4, r5, pc}
 80126b2:	bf00      	nop
 80126b4:	200084c8 	.word	0x200084c8

080126b8 <_isatty_r>:
 80126b8:	b538      	push	{r3, r4, r5, lr}
 80126ba:	4d06      	ldr	r5, [pc, #24]	@ (80126d4 <_isatty_r+0x1c>)
 80126bc:	2300      	movs	r3, #0
 80126be:	4604      	mov	r4, r0
 80126c0:	4608      	mov	r0, r1
 80126c2:	602b      	str	r3, [r5, #0]
 80126c4:	f7ef fcda 	bl	800207c <_isatty>
 80126c8:	1c43      	adds	r3, r0, #1
 80126ca:	d102      	bne.n	80126d2 <_isatty_r+0x1a>
 80126cc:	682b      	ldr	r3, [r5, #0]
 80126ce:	b103      	cbz	r3, 80126d2 <_isatty_r+0x1a>
 80126d0:	6023      	str	r3, [r4, #0]
 80126d2:	bd38      	pop	{r3, r4, r5, pc}
 80126d4:	200084c8 	.word	0x200084c8

080126d8 <_init>:
 80126d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126da:	bf00      	nop
 80126dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126de:	bc08      	pop	{r3}
 80126e0:	469e      	mov	lr, r3
 80126e2:	4770      	bx	lr

080126e4 <_fini>:
 80126e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126e6:	bf00      	nop
 80126e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126ea:	bc08      	pop	{r3}
 80126ec:	469e      	mov	lr, r3
 80126ee:	4770      	bx	lr
