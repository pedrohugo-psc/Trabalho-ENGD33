
STM32F411CEU6_robot_datalogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012770  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  08012910  08012910  00013910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013210  08013210  00015174  2**0
                  CONTENTS
  4 .ARM          00000008  08013210  08013210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013218  08013218  00015174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013218  08013218  00014218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801321c  0801321c  0001421c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000174  20000000  08013220  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000082fc  20000174  08013394  00015174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008470  08013394  00015470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a8c  00000000  00000000  000151a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006797  00000000  00000000  0003cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021a0  00000000  00000000  000433c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019a1  00000000  00000000  00045568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020503  00000000  00000000  00046f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e1d2  00000000  00000000  0006740c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5f0e  00000000  00000000  000955de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b4ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009514  00000000  00000000  0013b530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00144a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080128f8 	.word	0x080128f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	080128f8 	.word	0x080128f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SDcard_get_queue_handle>:

TaskHandle_t SDCard_get_task_handle(void){
	return SDcard_task_handle;
}

QueueHandle_t SDcard_get_queue_handle(void){
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	return SDcard_queue_handle;
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <SDcard_get_queue_handle+0x14>)
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	200021fc 	.word	0x200021fc

08000598 <path_select>:

static bool path_select(char* path, size_t buff_size, data_type_t data_type){
 8000598:	b5b0      	push	{r4, r5, r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	4613      	mov	r3, r2
 80005a4:	71fb      	strb	r3, [r7, #7]
	if(buff_size < 50*sizeof(char)){
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	2b31      	cmp	r3, #49	@ 0x31
 80005aa:	d815      	bhi.n	80005d8 <path_select+0x40>
		USB_PRINT("path buffer size too small\n\r");
 80005ac:	4b91      	ldr	r3, [pc, #580]	@ (80007f4 <path_select+0x25c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2101      	movs	r1, #1
 80005b2:	4618      	mov	r0, r3
 80005b4:	f00d fefc 	bl	800e3b0 <xQueueSemaphoreTake>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d003      	beq.n	80005c6 <path_select+0x2e>
 80005be:	211c      	movs	r1, #28
 80005c0:	488d      	ldr	r0, [pc, #564]	@ (80007f8 <path_select+0x260>)
 80005c2:	f010 fb0f 	bl	8010be4 <CDC_Transmit_FS>
 80005c6:	4b8b      	ldr	r3, [pc, #556]	@ (80007f4 <path_select+0x25c>)
 80005c8:	6818      	ldr	r0, [r3, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	f00d fc6c 	bl	800deac <xQueueGenericSend>
		return false;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e108      	b.n	80007ea <path_select+0x252>
	}
	*path = '\0';
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
	switch(data_type){
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b10      	cmp	r3, #16
 80005e2:	f200 80eb 	bhi.w	80007bc <path_select+0x224>
 80005e6:	a201      	add	r2, pc, #4	@ (adr r2, 80005ec <path_select+0x54>)
 80005e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ec:	08000631 	.word	0x08000631
 80005f0:	08000647 	.word	0x08000647
 80005f4:	0800065f 	.word	0x0800065f
 80005f8:	08000675 	.word	0x08000675
 80005fc:	0800068d 	.word	0x0800068d
 8000600:	080006a3 	.word	0x080006a3
 8000604:	080006bb 	.word	0x080006bb
 8000608:	080006d3 	.word	0x080006d3
 800060c:	080006ef 	.word	0x080006ef
 8000610:	08000709 	.word	0x08000709
 8000614:	0800071d 	.word	0x0800071d
 8000618:	08000737 	.word	0x08000737
 800061c:	0800074f 	.word	0x0800074f
 8000620:	08000767 	.word	0x08000767
 8000624:	08000777 	.word	0x08000777
 8000628:	0800078b 	.word	0x0800078b
 800062c:	0800079f 	.word	0x0800079f
				case CORRENTE:
					strcpy(path, "CORRENTE.csv");
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4a72      	ldr	r2, [pc, #456]	@ (80007fc <path_select+0x264>)
 8000634:	461c      	mov	r4, r3
 8000636:	4613      	mov	r3, r2
 8000638:	cb07      	ldmia	r3!, {r0, r1, r2}
 800063a:	6020      	str	r0, [r4, #0]
 800063c:	6061      	str	r1, [r4, #4]
 800063e:	60a2      	str	r2, [r4, #8]
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	7323      	strb	r3, [r4, #12]
					break;
 8000644:	e0d0      	b.n	80007e8 <path_select+0x250>
				case VEL_ANG_MOTOR:
					strcpy(path, "VEL_ANG_MOTOR.csv");
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4a6d      	ldr	r2, [pc, #436]	@ (8000800 <path_select+0x268>)
 800064a:	461d      	mov	r5, r3
 800064c:	4614      	mov	r4, r2
 800064e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000650:	6028      	str	r0, [r5, #0]
 8000652:	6069      	str	r1, [r5, #4]
 8000654:	60aa      	str	r2, [r5, #8]
 8000656:	60eb      	str	r3, [r5, #12]
 8000658:	8823      	ldrh	r3, [r4, #0]
 800065a:	822b      	strh	r3, [r5, #16]
					break;
 800065c:	e0c4      	b.n	80007e8 <path_select+0x250>
				case ACEL_LIN:
					strcpy(path, "ACEL_LIN.csv");
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4a68      	ldr	r2, [pc, #416]	@ (8000804 <path_select+0x26c>)
 8000662:	461c      	mov	r4, r3
 8000664:	4613      	mov	r3, r2
 8000666:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000668:	6020      	str	r0, [r4, #0]
 800066a:	6061      	str	r1, [r4, #4]
 800066c:	60a2      	str	r2, [r4, #8]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	7323      	strb	r3, [r4, #12]
					break;
 8000672:	e0b9      	b.n	80007e8 <path_select+0x250>
				case VEL_ANG_GIRO:
					strcpy(path, "VEL_ANG_GIRO.csv");
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4a64      	ldr	r2, [pc, #400]	@ (8000808 <path_select+0x270>)
 8000678:	461d      	mov	r5, r3
 800067a:	4614      	mov	r4, r2
 800067c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800067e:	6028      	str	r0, [r5, #0]
 8000680:	6069      	str	r1, [r5, #4]
 8000682:	60aa      	str	r2, [r5, #8]
 8000684:	60eb      	str	r3, [r5, #12]
 8000686:	7823      	ldrb	r3, [r4, #0]
 8000688:	742b      	strb	r3, [r5, #16]
					break;
 800068a:	e0ad      	b.n	80007e8 <path_select+0x250>
				case CAMPO_MAG:
					strcpy(path, "CAMPO_MAG.csv");
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4a5f      	ldr	r2, [pc, #380]	@ (800080c <path_select+0x274>)
 8000690:	461c      	mov	r4, r3
 8000692:	4613      	mov	r3, r2
 8000694:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000696:	6020      	str	r0, [r4, #0]
 8000698:	6061      	str	r1, [r4, #4]
 800069a:	60a2      	str	r2, [r4, #8]
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	81a3      	strh	r3, [r4, #12]
					break;
 80006a0:	e0a2      	b.n	80007e8 <path_select+0x250>
				case A_CTRL_TRACAO:
					strcpy(path, "A_CTRL_TRACAO.csv");
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4a5a      	ldr	r2, [pc, #360]	@ (8000810 <path_select+0x278>)
 80006a6:	461d      	mov	r5, r3
 80006a8:	4614      	mov	r4, r2
 80006aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ac:	6028      	str	r0, [r5, #0]
 80006ae:	6069      	str	r1, [r5, #4]
 80006b0:	60aa      	str	r2, [r5, #8]
 80006b2:	60eb      	str	r3, [r5, #12]
 80006b4:	8823      	ldrh	r3, [r4, #0]
 80006b6:	822b      	strh	r3, [r5, #16]
					break;
 80006b8:	e096      	b.n	80007e8 <path_select+0x250>
				case G_CTRL_TRACAO:
					strcpy(path, "G_CTRL_TRACAO.csv");
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4a55      	ldr	r2, [pc, #340]	@ (8000814 <path_select+0x27c>)
 80006be:	461d      	mov	r5, r3
 80006c0:	4614      	mov	r4, r2
 80006c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c4:	6028      	str	r0, [r5, #0]
 80006c6:	6069      	str	r1, [r5, #4]
 80006c8:	60aa      	str	r2, [r5, #8]
 80006ca:	60eb      	str	r3, [r5, #12]
 80006cc:	8823      	ldrh	r3, [r4, #0]
 80006ce:	822b      	strh	r3, [r5, #16]
					break;
 80006d0:	e08a      	b.n	80007e8 <path_select+0x250>
				case G_CTRL_TRACAO_RX:
					strcpy(path, "G_CTRL_TRACAO_RX.csv");
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	4a50      	ldr	r2, [pc, #320]	@ (8000818 <path_select+0x280>)
 80006d6:	461d      	mov	r5, r3
 80006d8:	4614      	mov	r4, r2
 80006da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006dc:	6028      	str	r0, [r5, #0]
 80006de:	6069      	str	r1, [r5, #4]
 80006e0:	60aa      	str	r2, [r5, #8]
 80006e2:	60eb      	str	r3, [r5, #12]
 80006e4:	6820      	ldr	r0, [r4, #0]
 80006e6:	6128      	str	r0, [r5, #16]
 80006e8:	7923      	ldrb	r3, [r4, #4]
 80006ea:	752b      	strb	r3, [r5, #20]
					break;
 80006ec:	e07c      	b.n	80007e8 <path_select+0x250>
				case A_CTRL_VEL:
					strcpy(path, "A_CTRL_VEL.csv");
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4a4a      	ldr	r2, [pc, #296]	@ (800081c <path_select+0x284>)
 80006f2:	461c      	mov	r4, r3
 80006f4:	4613      	mov	r3, r2
 80006f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80006f8:	6020      	str	r0, [r4, #0]
 80006fa:	6061      	str	r1, [r4, #4]
 80006fc:	60a2      	str	r2, [r4, #8]
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	789b      	ldrb	r3, [r3, #2]
 8000702:	81a2      	strh	r2, [r4, #12]
 8000704:	73a3      	strb	r3, [r4, #14]
					break;
 8000706:	e06f      	b.n	80007e8 <path_select+0x250>
				case S_POINT_VEL:
					strcpy(path, "S_POINT_VEL.csv");
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4a45      	ldr	r2, [pc, #276]	@ (8000820 <path_select+0x288>)
 800070c:	461c      	mov	r4, r3
 800070e:	4615      	mov	r5, r2
 8000710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000712:	6020      	str	r0, [r4, #0]
 8000714:	6061      	str	r1, [r4, #4]
 8000716:	60a2      	str	r2, [r4, #8]
 8000718:	60e3      	str	r3, [r4, #12]
					break;
 800071a:	e065      	b.n	80007e8 <path_select+0x250>
				case G_CTRL_VEL:
					strcpy(path, "G_CTRL_VEL.csv");
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4a41      	ldr	r2, [pc, #260]	@ (8000824 <path_select+0x28c>)
 8000720:	461c      	mov	r4, r3
 8000722:	4613      	mov	r3, r2
 8000724:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000726:	6020      	str	r0, [r4, #0]
 8000728:	6061      	str	r1, [r4, #4]
 800072a:	60a2      	str	r2, [r4, #8]
 800072c:	881a      	ldrh	r2, [r3, #0]
 800072e:	789b      	ldrb	r3, [r3, #2]
 8000730:	81a2      	strh	r2, [r4, #12]
 8000732:	73a3      	strb	r3, [r4, #14]
					break;
 8000734:	e058      	b.n	80007e8 <path_select+0x250>
				case G_CTRL_VEL_RX:
					strcpy(path, "G_CTRL_VEL_RX.csv");
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	4a3b      	ldr	r2, [pc, #236]	@ (8000828 <path_select+0x290>)
 800073a:	461d      	mov	r5, r3
 800073c:	4614      	mov	r4, r2
 800073e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000740:	6028      	str	r0, [r5, #0]
 8000742:	6069      	str	r1, [r5, #4]
 8000744:	60aa      	str	r2, [r5, #8]
 8000746:	60eb      	str	r3, [r5, #12]
 8000748:	8823      	ldrh	r3, [r4, #0]
 800074a:	822b      	strh	r3, [r5, #16]
					break;
 800074c:	e04c      	b.n	80007e8 <path_select+0x250>
				case ANG_ROT_BASE:
					strcpy(path, "ANG_ROT_BASE.csv");
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	4a36      	ldr	r2, [pc, #216]	@ (800082c <path_select+0x294>)
 8000752:	461d      	mov	r5, r3
 8000754:	4614      	mov	r4, r2
 8000756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000758:	6028      	str	r0, [r5, #0]
 800075a:	6069      	str	r1, [r5, #4]
 800075c:	60aa      	str	r2, [r5, #8]
 800075e:	60eb      	str	r3, [r5, #12]
 8000760:	7823      	ldrb	r3, [r4, #0]
 8000762:	742b      	strb	r3, [r5, #16]
					break;
 8000764:	e040      	b.n	80007e8 <path_select+0x250>
				case GPS:
					strcpy(path, "GPS.csv");
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4931      	ldr	r1, [pc, #196]	@ (8000830 <path_select+0x298>)
 800076a:	461a      	mov	r2, r3
 800076c:	460b      	mov	r3, r1
 800076e:	cb03      	ldmia	r3!, {r0, r1}
 8000770:	6010      	str	r0, [r2, #0]
 8000772:	6051      	str	r1, [r2, #4]
					break;
 8000774:	e038      	b.n	80007e8 <path_select+0x250>
				case A_CTRL_POSI:
					strcpy(path, "A_CTRL_POSI.csv");
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	4a2e      	ldr	r2, [pc, #184]	@ (8000834 <path_select+0x29c>)
 800077a:	461c      	mov	r4, r3
 800077c:	4615      	mov	r5, r2
 800077e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000780:	6020      	str	r0, [r4, #0]
 8000782:	6061      	str	r1, [r4, #4]
 8000784:	60a2      	str	r2, [r4, #8]
 8000786:	60e3      	str	r3, [r4, #12]
					break;
 8000788:	e02e      	b.n	80007e8 <path_select+0x250>
				case G_CTRL_POSI:
					strcpy(path, "G_CTRL_POSI.csv");
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	4a2a      	ldr	r2, [pc, #168]	@ (8000838 <path_select+0x2a0>)
 800078e:	461c      	mov	r4, r3
 8000790:	4615      	mov	r5, r2
 8000792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000794:	6020      	str	r0, [r4, #0]
 8000796:	6061      	str	r1, [r4, #4]
 8000798:	60a2      	str	r2, [r4, #8]
 800079a:	60e3      	str	r3, [r4, #12]
					break;
 800079c:	e024      	b.n	80007e8 <path_select+0x250>
				case G_CTRL_POSI_RX:
					strcpy(path, "G_CTRL_POSI_RX.csv");
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4a26      	ldr	r2, [pc, #152]	@ (800083c <path_select+0x2a4>)
 80007a2:	461d      	mov	r5, r3
 80007a4:	4614      	mov	r4, r2
 80007a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007a8:	6028      	str	r0, [r5, #0]
 80007aa:	6069      	str	r1, [r5, #4]
 80007ac:	60aa      	str	r2, [r5, #8]
 80007ae:	60eb      	str	r3, [r5, #12]
 80007b0:	8823      	ldrh	r3, [r4, #0]
 80007b2:	78a2      	ldrb	r2, [r4, #2]
 80007b4:	822b      	strh	r3, [r5, #16]
 80007b6:	4613      	mov	r3, r2
 80007b8:	74ab      	strb	r3, [r5, #18]
					break;
 80007ba:	e015      	b.n	80007e8 <path_select+0x250>
				default:
					USB_PRINT("type not supported\n\r");
 80007bc:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <path_select+0x25c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00d fdf4 	bl	800e3b0 <xQueueSemaphoreTake>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <path_select+0x23e>
 80007ce:	2114      	movs	r1, #20
 80007d0:	481b      	ldr	r0, [pc, #108]	@ (8000840 <path_select+0x2a8>)
 80007d2:	f010 fa07 	bl	8010be4 <CDC_Transmit_FS>
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <path_select+0x25c>)
 80007d8:	6818      	ldr	r0, [r3, #0]
 80007da:	2300      	movs	r3, #0
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	f00d fb64 	bl	800deac <xQueueGenericSend>
					return false;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e000      	b.n	80007ea <path_select+0x252>
			}
	return true;
 80007e8:	2301      	movs	r3, #1
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bdb0      	pop	{r4, r5, r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200021f8 	.word	0x200021f8
 80007f8:	08012910 	.word	0x08012910
 80007fc:	08012930 	.word	0x08012930
 8000800:	08012940 	.word	0x08012940
 8000804:	08012954 	.word	0x08012954
 8000808:	08012964 	.word	0x08012964
 800080c:	08012978 	.word	0x08012978
 8000810:	08012988 	.word	0x08012988
 8000814:	0801299c 	.word	0x0801299c
 8000818:	080129b0 	.word	0x080129b0
 800081c:	080129c8 	.word	0x080129c8
 8000820:	080129d8 	.word	0x080129d8
 8000824:	080129e8 	.word	0x080129e8
 8000828:	080129f8 	.word	0x080129f8
 800082c:	08012a0c 	.word	0x08012a0c
 8000830:	08012a20 	.word	0x08012a20
 8000834:	08012a28 	.word	0x08012a28
 8000838:	08012a38 	.word	0x08012a38
 800083c:	08012a48 	.word	0x08012a48
 8000840:	08012a5c 	.word	0x08012a5c

08000844 <reset_files>:

static bool reset_files(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b0a8      	sub	sp, #160	@ 0xa0
 8000848:	af00      	add	r7, sp, #0
	int er = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	char path[50];
	char buffer[100];

	for(int i = 0; i < NumberOfTypes; i++){
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000856:	e090      	b.n	800097a <reset_files+0x136>
		er = path_select(path, sizeof(path), i);
 8000858:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800085c:	b2da      	uxtb	r2, r3
 800085e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000862:	2132      	movs	r1, #50	@ 0x32
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fe97 	bl	8000598 <path_select>
 800086a:	4603      	mov	r3, r0
 800086c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if(!er){
 8000870:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000874:	2b00      	cmp	r3, #0
 8000876:	d115      	bne.n	80008a4 <reset_files+0x60>
			USB_PRINT("error selecting path\n\r\r");
 8000878:	4b45      	ldr	r3, [pc, #276]	@ (8000990 <reset_files+0x14c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2101      	movs	r1, #1
 800087e:	4618      	mov	r0, r3
 8000880:	f00d fd96 	bl	800e3b0 <xQueueSemaphoreTake>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d003      	beq.n	8000892 <reset_files+0x4e>
 800088a:	2117      	movs	r1, #23
 800088c:	4841      	ldr	r0, [pc, #260]	@ (8000994 <reset_files+0x150>)
 800088e:	f010 f9a9 	bl	8010be4 <CDC_Transmit_FS>
 8000892:	4b3f      	ldr	r3, [pc, #252]	@ (8000990 <reset_files+0x14c>)
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	2300      	movs	r3, #0
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	f00d fb06 	bl	800deac <xQueueGenericSend>
			return false;
 80008a0:	2300      	movs	r3, #0
 80008a2:	e070      	b.n	8000986 <reset_files+0x142>
		}

		er = f_stat(path, NULL);
 80008a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f00c fab3 	bl	800ce16 <f_stat>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if(er != FR_OK){
 80008b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d027      	beq.n	800090e <reset_files+0xca>
			if(er == FR_NO_FILE) continue;
 80008be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	d053      	beq.n	800096e <reset_files+0x12a>
			sprintf(buffer, "error: %d\n\r", er);
 80008c6:	463b      	mov	r3, r7
 80008c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80008cc:	4932      	ldr	r1, [pc, #200]	@ (8000998 <reset_files+0x154>)
 80008ce:	4618      	mov	r0, r3
 80008d0:	f010 ff08 	bl	80116e4 <siprintf>
			USB_PRINT(buffer);
 80008d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000990 <reset_files+0x14c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2101      	movs	r1, #1
 80008da:	4618      	mov	r0, r3
 80008dc:	f00d fd68 	bl	800e3b0 <xQueueSemaphoreTake>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00a      	beq.n	80008fc <reset_files+0xb8>
 80008e6:	463b      	mov	r3, r7
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fc79 	bl	80001e0 <strlen>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	463b      	mov	r3, r7
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f010 f974 	bl	8010be4 <CDC_Transmit_FS>
 80008fc:	4b24      	ldr	r3, [pc, #144]	@ (8000990 <reset_files+0x14c>)
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	2300      	movs	r3, #0
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	f00d fad1 	bl	800deac <xQueueGenericSend>
			return false;
 800090a:	2300      	movs	r3, #0
 800090c:	e03b      	b.n	8000986 <reset_files+0x142>
		}

		er = f_unlink(path);
 800090e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000912:	4618      	mov	r0, r3
 8000914:	f00c fab8 	bl	800ce88 <f_unlink>
 8000918:	4603      	mov	r3, r0
 800091a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if(er != FR_OK){
 800091e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000922:	2b00      	cmp	r3, #0
 8000924:	d024      	beq.n	8000970 <reset_files+0x12c>
			sprintf(buffer, "error: %d\n\r", er);
 8000926:	463b      	mov	r3, r7
 8000928:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800092c:	491a      	ldr	r1, [pc, #104]	@ (8000998 <reset_files+0x154>)
 800092e:	4618      	mov	r0, r3
 8000930:	f010 fed8 	bl	80116e4 <siprintf>
			USB_PRINT(buffer);
 8000934:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <reset_files+0x14c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2101      	movs	r1, #1
 800093a:	4618      	mov	r0, r3
 800093c:	f00d fd38 	bl	800e3b0 <xQueueSemaphoreTake>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d00a      	beq.n	800095c <reset_files+0x118>
 8000946:	463b      	mov	r3, r7
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fc49 	bl	80001e0 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29a      	uxth	r2, r3
 8000952:	463b      	mov	r3, r7
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f010 f944 	bl	8010be4 <CDC_Transmit_FS>
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <reset_files+0x14c>)
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	2300      	movs	r3, #0
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	f00d faa1 	bl	800deac <xQueueGenericSend>
			return false;
 800096a:	2300      	movs	r3, #0
 800096c:	e00b      	b.n	8000986 <reset_files+0x142>
			if(er == FR_NO_FILE) continue;
 800096e:	bf00      	nop
	for(int i = 0; i < NumberOfTypes; i++){
 8000970:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000974:	3301      	adds	r3, #1
 8000976:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800097a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800097e:	2b10      	cmp	r3, #16
 8000980:	f77f af6a 	ble.w	8000858 <reset_files+0x14>
		}
	}
	return true;
 8000984:	2301      	movs	r3, #1
}
 8000986:	4618      	mov	r0, r3
 8000988:	37a0      	adds	r7, #160	@ 0xa0
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200021f8 	.word	0x200021f8
 8000994:	08012a74 	.word	0x08012a74
 8000998:	08012a8c 	.word	0x08012a8c

0800099c <SDcard_task>:

static void SDcard_task(void* arg){
 800099c:	b580      	push	{r7, lr}
 800099e:	b0b2      	sub	sp, #200	@ 0xc8
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	6078      	str	r0, [r7, #4]
	SD_data_t data = {0};
 80009a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
 80009b4:	615a      	str	r2, [r3, #20]
	char buffer[100];
	char path[50];
	int er = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	for(;;){
		if(xQueueReceive(SDcard_queue_handle, &data, portMAX_DELAY) != pdTRUE){
 80009bc:	4b9f      	ldr	r3, [pc, #636]	@ (8000c3c <SDcard_task+0x2a0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295
 80009c8:	4618      	mov	r0, r3
 80009ca:	f00d fc0f 	bl	800e1ec <xQueueReceive>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d014      	beq.n	80009fe <SDcard_task+0x62>
			USB_PRINT("error receive from queue\n\r");
 80009d4:	4b9a      	ldr	r3, [pc, #616]	@ (8000c40 <SDcard_task+0x2a4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f00d fce8 	bl	800e3b0 <xQueueSemaphoreTake>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <SDcard_task+0x52>
 80009e6:	211a      	movs	r1, #26
 80009e8:	4896      	ldr	r0, [pc, #600]	@ (8000c44 <SDcard_task+0x2a8>)
 80009ea:	f010 f8fb 	bl	8010be4 <CDC_Transmit_FS>
 80009ee:	4b94      	ldr	r3, [pc, #592]	@ (8000c40 <SDcard_task+0x2a4>)
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	2300      	movs	r3, #0
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	f00d fa58 	bl	800deac <xQueueGenericSend>
			continue;
 80009fc:	e11d      	b.n	8000c3a <SDcard_task+0x29e>
		}

		er = path_select(path, sizeof(path), data.data_type);
 80009fe:	f897 20b0 	ldrb.w	r2, [r7, #176]	@ 0xb0
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	2132      	movs	r1, #50	@ 0x32
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fdc5 	bl	8000598 <path_select>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		if(!er){
 8000a14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d114      	bne.n	8000a46 <SDcard_task+0xaa>
			USB_PRINT("error selecting path\n\r");
 8000a1c:	4b88      	ldr	r3, [pc, #544]	@ (8000c40 <SDcard_task+0x2a4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2101      	movs	r1, #1
 8000a22:	4618      	mov	r0, r3
 8000a24:	f00d fcc4 	bl	800e3b0 <xQueueSemaphoreTake>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <SDcard_task+0x9a>
 8000a2e:	2116      	movs	r1, #22
 8000a30:	4885      	ldr	r0, [pc, #532]	@ (8000c48 <SDcard_task+0x2ac>)
 8000a32:	f010 f8d7 	bl	8010be4 <CDC_Transmit_FS>
 8000a36:	4b82      	ldr	r3, [pc, #520]	@ (8000c40 <SDcard_task+0x2a4>)
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f00d fa34 	bl	800deac <xQueueGenericSend>
			continue;
 8000a44:	e0f9      	b.n	8000c3a <SDcard_task+0x29e>
		}

		er = f_stat(path, NULL);
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f00c f9e2 	bl	800ce16 <f_stat>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		if(er == FR_NO_FILE){
 8000a58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d137      	bne.n	8000ad0 <SDcard_task+0x134>
			f_open(&fil, path, FA_CREATE_ALWAYS | FA_WRITE);
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	220a      	movs	r2, #10
 8000a66:	4619      	mov	r1, r3
 8000a68:	4878      	ldr	r0, [pc, #480]	@ (8000c4c <SDcard_task+0x2b0>)
 8000a6a:	f00b fa4d 	bl	800bf08 <f_open>
			f_printf(&fil, "%s\n\r", path);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	461a      	mov	r2, r3
 8000a74:	4976      	ldr	r1, [pc, #472]	@ (8000c50 <SDcard_task+0x2b4>)
 8000a76:	4875      	ldr	r0, [pc, #468]	@ (8000c4c <SDcard_task+0x2b0>)
 8000a78:	f00c fb8a 	bl	800d190 <f_printf>
			if(data.array_size == 1){
 8000a7c:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d104      	bne.n	8000a8e <SDcard_task+0xf2>
				f_puts("timestamp,value\n\r", &fil);
 8000a84:	4971      	ldr	r1, [pc, #452]	@ (8000c4c <SDcard_task+0x2b0>)
 8000a86:	4873      	ldr	r0, [pc, #460]	@ (8000c54 <SDcard_task+0x2b8>)
 8000a88:	f00c fb5e 	bl	800d148 <f_puts>
 8000a8c:	e01d      	b.n	8000aca <SDcard_task+0x12e>
			}
			else if(data.array_size == 3){
 8000a8e:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d104      	bne.n	8000aa0 <SDcard_task+0x104>
				f_puts("timestamp,value1,value2,value3\n\r", &fil);
 8000a96:	496d      	ldr	r1, [pc, #436]	@ (8000c4c <SDcard_task+0x2b0>)
 8000a98:	486f      	ldr	r0, [pc, #444]	@ (8000c58 <SDcard_task+0x2bc>)
 8000a9a:	f00c fb55 	bl	800d148 <f_puts>
 8000a9e:	e014      	b.n	8000aca <SDcard_task+0x12e>
			}
			else{
				USB_PRINT("incompatible array size\n\r");
 8000aa0:	4b67      	ldr	r3, [pc, #412]	@ (8000c40 <SDcard_task+0x2a4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f00d fc82 	bl	800e3b0 <xQueueSemaphoreTake>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <SDcard_task+0x11e>
 8000ab2:	2119      	movs	r1, #25
 8000ab4:	4869      	ldr	r0, [pc, #420]	@ (8000c5c <SDcard_task+0x2c0>)
 8000ab6:	f010 f895 	bl	8010be4 <CDC_Transmit_FS>
 8000aba:	4b61      	ldr	r3, [pc, #388]	@ (8000c40 <SDcard_task+0x2a4>)
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f00d f9f2 	bl	800deac <xQueueGenericSend>
				continue;
 8000ac8:	e0b7      	b.n	8000c3a <SDcard_task+0x29e>
			}
			f_close(&fil);
 8000aca:	4860      	ldr	r0, [pc, #384]	@ (8000c4c <SDcard_task+0x2b0>)
 8000acc:	f00b ff55 	bl	800c97a <f_close>
		}

		er = f_open(&fil, path, FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2233      	movs	r2, #51	@ 0x33
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	485c      	ldr	r0, [pc, #368]	@ (8000c4c <SDcard_task+0x2b0>)
 8000ada:	f00b fa15 	bl	800bf08 <f_open>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		if(er != FR_OK){
 8000ae4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d025      	beq.n	8000b38 <SDcard_task+0x19c>
			sprintf(buffer, "error: %d\n\r", er);
 8000aec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000af0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8000af4:	495a      	ldr	r1, [pc, #360]	@ (8000c60 <SDcard_task+0x2c4>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	f010 fdf4 	bl	80116e4 <siprintf>
			USB_PRINT(buffer);
 8000afc:	4b50      	ldr	r3, [pc, #320]	@ (8000c40 <SDcard_task+0x2a4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2101      	movs	r1, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f00d fc54 	bl	800e3b0 <xQueueSemaphoreTake>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00c      	beq.n	8000b28 <SDcard_task+0x18c>
 8000b0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fb64 	bl	80001e0 <strlen>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b20:	4611      	mov	r1, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f010 f85e 	bl	8010be4 <CDC_Transmit_FS>
 8000b28:	4b45      	ldr	r3, [pc, #276]	@ (8000c40 <SDcard_task+0x2a4>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	f00d f9bb 	bl	800deac <xQueueGenericSend>
			continue;
 8000b36:	e080      	b.n	8000c3a <SDcard_task+0x29e>
		}

		if(data.array_size == 1){
 8000b38:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d108      	bne.n	8000b52 <SDcard_task+0x1b6>
			f_printf(&fil, "%u,%d\n\r", data.timestamp, data.value[0]);
 8000b40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8000b44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000b48:	4946      	ldr	r1, [pc, #280]	@ (8000c64 <SDcard_task+0x2c8>)
 8000b4a:	4840      	ldr	r0, [pc, #256]	@ (8000c4c <SDcard_task+0x2b0>)
 8000b4c:	f00c fb20 	bl	800d190 <f_printf>
 8000b50:	e029      	b.n	8000ba6 <SDcard_task+0x20a>
		}
		else if(data.array_size == 3){
 8000b52:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d110      	bne.n	8000b7c <SDcard_task+0x1e0>
			f_printf(&fil, "%u,%d,%d,%d\n\r", data.timestamp, data.value[0], data.value[1], data.value[2]);
 8000b5a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8000b5e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8000b62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000b66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8000b6a:	9201      	str	r2, [sp, #4]
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	4603      	mov	r3, r0
 8000b70:	460a      	mov	r2, r1
 8000b72:	493d      	ldr	r1, [pc, #244]	@ (8000c68 <SDcard_task+0x2cc>)
 8000b74:	4835      	ldr	r0, [pc, #212]	@ (8000c4c <SDcard_task+0x2b0>)
 8000b76:	f00c fb0b 	bl	800d190 <f_printf>
 8000b7a:	e014      	b.n	8000ba6 <SDcard_task+0x20a>
		}
		else {
			USB_PRINT("incompatible array size\n\r");
 8000b7c:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <SDcard_task+0x2a4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f00d fc14 	bl	800e3b0 <xQueueSemaphoreTake>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <SDcard_task+0x1fa>
 8000b8e:	2119      	movs	r1, #25
 8000b90:	4832      	ldr	r0, [pc, #200]	@ (8000c5c <SDcard_task+0x2c0>)
 8000b92:	f010 f827 	bl	8010be4 <CDC_Transmit_FS>
 8000b96:	4b2a      	ldr	r3, [pc, #168]	@ (8000c40 <SDcard_task+0x2a4>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f00d f984 	bl	800deac <xQueueGenericSend>
			continue;
 8000ba4:	e049      	b.n	8000c3a <SDcard_task+0x29e>
		}


		f_lseek(&fil, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4828      	ldr	r0, [pc, #160]	@ (8000c4c <SDcard_task+0x2b0>)
 8000baa:	f00b ff10 	bl	800c9ce <f_lseek>
		while(f_gets(buffer, sizeof(buffer), &fil))
 8000bae:	e023      	b.n	8000bf8 <SDcard_task+0x25c>
		{
			USB_PRINT(buffer);
 8000bb0:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <SDcard_task+0x2a4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f00d fbfa 	bl	800e3b0 <xQueueSemaphoreTake>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00c      	beq.n	8000bdc <SDcard_task+0x240>
 8000bc2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fb0a 	bl	80001e0 <strlen>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f010 f804 	bl	8010be4 <CDC_Transmit_FS>
 8000bdc:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <SDcard_task+0x2a4>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	2300      	movs	r3, #0
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	f00d f961 	bl	800deac <xQueueGenericSend>
			memset(buffer,0,sizeof(buffer));
 8000bea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bee:	2264      	movs	r2, #100	@ 0x64
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f010 fdd9 	bl	80117aa <memset>
		while(f_gets(buffer, sizeof(buffer), &fil))
 8000bf8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bfc:	4a13      	ldr	r2, [pc, #76]	@ (8000c4c <SDcard_task+0x2b0>)
 8000bfe:	2164      	movs	r1, #100	@ 0x64
 8000c00:	4618      	mov	r0, r3
 8000c02:	f00c f9ec 	bl	800cfde <f_gets>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1d1      	bne.n	8000bb0 <SDcard_task+0x214>
		}
		USB_PRINT("\n\r");
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <SDcard_task+0x2a4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2101      	movs	r1, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	f00d fbcc 	bl	800e3b0 <xQueueSemaphoreTake>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <SDcard_task+0x28a>
 8000c1e:	2102      	movs	r1, #2
 8000c20:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <SDcard_task+0x2d0>)
 8000c22:	f00f ffdf 	bl	8010be4 <CDC_Transmit_FS>
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <SDcard_task+0x2a4>)
 8000c28:	6818      	ldr	r0, [r3, #0]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	f00d f93c 	bl	800deac <xQueueGenericSend>
		f_close(&fil);
 8000c34:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <SDcard_task+0x2b0>)
 8000c36:	f00b fea0 	bl	800c97a <f_close>
		if(xQueueReceive(SDcard_queue_handle, &data, portMAX_DELAY) != pdTRUE){
 8000c3a:	e6bf      	b.n	80009bc <SDcard_task+0x20>
 8000c3c:	200021fc 	.word	0x200021fc
 8000c40:	200021f8 	.word	0x200021f8
 8000c44:	08012a98 	.word	0x08012a98
 8000c48:	08012ab4 	.word	0x08012ab4
 8000c4c:	200011c8 	.word	0x200011c8
 8000c50:	08012acc 	.word	0x08012acc
 8000c54:	08012ad4 	.word	0x08012ad4
 8000c58:	08012ae8 	.word	0x08012ae8
 8000c5c:	08012b0c 	.word	0x08012b0c
 8000c60:	08012a8c 	.word	0x08012a8c
 8000c64:	08012b28 	.word	0x08012b28
 8000c68:	08012b30 	.word	0x08012b30
 8000c6c:	08012b40 	.word	0x08012b40

08000c70 <SDcard_start>:

	}
}

int SDcard_start(void){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af02      	add	r7, sp, #8
	print_smpr_handle = xSemaphoreCreateBinary();
 8000c76:	2203      	movs	r2, #3
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f00d f8b7 	bl	800ddee <xQueueGenericCreate>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4a2d      	ldr	r2, [pc, #180]	@ (8000d38 <SDcard_start+0xc8>)
 8000c84:	6013      	str	r3, [r2, #0]
	SDcard_queue_handle = xQueueCreate(20, sizeof(SD_data_t));
 8000c86:	2200      	movs	r2, #0
 8000c88:	2118      	movs	r1, #24
 8000c8a:	2014      	movs	r0, #20
 8000c8c:	f00d f8af 	bl	800ddee <xQueueGenericCreate>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a2a      	ldr	r2, [pc, #168]	@ (8000d3c <SDcard_start+0xcc>)
 8000c94:	6013      	str	r3, [r2, #0]
	if(f_mount(&fs, "", 0) != FR_OK){
 8000c96:	2200      	movs	r2, #0
 8000c98:	4929      	ldr	r1, [pc, #164]	@ (8000d40 <SDcard_start+0xd0>)
 8000c9a:	482a      	ldr	r0, [pc, #168]	@ (8000d44 <SDcard_start+0xd4>)
 8000c9c:	f00b f8ee 	bl	800be7c <f_mount>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d015      	beq.n	8000cd2 <SDcard_start+0x62>
		USB_PRINT("fail mount sd card\n\r");
 8000ca6:	4b24      	ldr	r3, [pc, #144]	@ (8000d38 <SDcard_start+0xc8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2101      	movs	r1, #1
 8000cac:	4618      	mov	r0, r3
 8000cae:	f00d fb7f 	bl	800e3b0 <xQueueSemaphoreTake>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <SDcard_start+0x50>
 8000cb8:	2114      	movs	r1, #20
 8000cba:	4823      	ldr	r0, [pc, #140]	@ (8000d48 <SDcard_start+0xd8>)
 8000cbc:	f00f ff92 	bl	8010be4 <CDC_Transmit_FS>
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <SDcard_start+0xc8>)
 8000cc2:	6818      	ldr	r0, [r3, #0]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f00d f8ef 	bl	800deac <xQueueGenericSend>
		return false;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e02e      	b.n	8000d30 <SDcard_start+0xc0>
	}
	if(reset_files() != true){
 8000cd2:	f7ff fdb7 	bl	8000844 <reset_files>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f083 0301 	eor.w	r3, r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d015      	beq.n	8000d0e <SDcard_start+0x9e>
		USB_PRINT("fail reseting files\n\r");
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <SDcard_start+0xc8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00d fb61 	bl	800e3b0 <xQueueSemaphoreTake>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <SDcard_start+0x8c>
 8000cf4:	2115      	movs	r1, #21
 8000cf6:	4815      	ldr	r0, [pc, #84]	@ (8000d4c <SDcard_start+0xdc>)
 8000cf8:	f00f ff74 	bl	8010be4 <CDC_Transmit_FS>
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <SDcard_start+0xc8>)
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	2300      	movs	r3, #0
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	f00d f8d1 	bl	800deac <xQueueGenericSend>
		return false;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e010      	b.n	8000d30 <SDcard_start+0xc0>
	}
	if(xTaskCreate(SDcard_task, "SDcard_task", 128*5, NULL, 26, NULL) != pdPASS) return false;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	231a      	movs	r3, #26
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2300      	movs	r3, #0
 8000d18:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000d1c:	490c      	ldr	r1, [pc, #48]	@ (8000d50 <SDcard_start+0xe0>)
 8000d1e:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <SDcard_start+0xe4>)
 8000d20:	f00d fe3c 	bl	800e99c <xTaskCreate>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d001      	beq.n	8000d2e <SDcard_start+0xbe>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <SDcard_start+0xc0>
	return true;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200021f8 	.word	0x200021f8
 8000d3c:	200021fc 	.word	0x200021fc
 8000d40:	08012b44 	.word	0x08012b44
 8000d44:	20000190 	.word	0x20000190
 8000d48:	08012b48 	.word	0x08012b48
 8000d4c:	08012b60 	.word	0x08012b60
 8000d50:	08012b78 	.word	0x08012b78
 8000d54:	0800099d 	.word	0x0800099d

08000d58 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2110      	movs	r1, #16
 8000d60:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <SELECT+0x18>)
 8000d62:	f001 fe61 	bl	8002a28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f001 fbd4 	bl	8002514 <HAL_Delay>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40020000 	.word	0x40020000

08000d74 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	4803      	ldr	r0, [pc, #12]	@ (8000d8c <DESELECT+0x18>)
 8000d7e:	f001 fe53 	bl	8002a28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f001 fbc6 	bl	8002514 <HAL_Delay>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40020000 	.word	0x40020000

08000d90 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d9a:	bf00      	nop
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <SPI_TxByte+0x30>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d1f8      	bne.n	8000d9c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000daa:	1df9      	adds	r1, r7, #7
 8000dac:	2364      	movs	r3, #100	@ 0x64
 8000dae:	2201      	movs	r2, #1
 8000db0:	4803      	ldr	r0, [pc, #12]	@ (8000dc0 <SPI_TxByte+0x30>)
 8000db2:	f004 f8d4 	bl	8004f5e <HAL_SPI_Transmit>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000222c 	.word	0x2000222c

08000dc4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000dd0:	bf00      	nop
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <SPI_TxBuffer+0x30>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d1f8      	bne.n	8000dd2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000de0:	887a      	ldrh	r2, [r7, #2]
 8000de2:	2364      	movs	r3, #100	@ 0x64
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <SPI_TxBuffer+0x30>)
 8000de8:	f004 f8b9 	bl	8004f5e <HAL_SPI_Transmit>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	2000222c 	.word	0x2000222c

08000df8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000dfe:	23ff      	movs	r3, #255	@ 0xff
 8000e00:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e02:	bf00      	nop
 8000e04:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <SPI_RxByte+0x34>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d1f8      	bne.n	8000e04 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000e12:	1dba      	adds	r2, r7, #6
 8000e14:	1df9      	adds	r1, r7, #7
 8000e16:	2364      	movs	r3, #100	@ 0x64
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	4803      	ldr	r0, [pc, #12]	@ (8000e2c <SPI_RxByte+0x34>)
 8000e1e:	f004 f9e1 	bl	80051e4 <HAL_SPI_TransmitReceive>

	return data;
 8000e22:	79bb      	ldrb	r3, [r7, #6]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000222c 	.word	0x2000222c

08000e30 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000e38:	f7ff ffde 	bl	8000df8 <SPI_RxByte>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	701a      	strb	r2, [r3, #0]
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <SD_ReadyWait+0x30>)
 8000e54:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e58:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000e5a:	f7ff ffcd 	bl	8000df8 <SPI_RxByte>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2bff      	cmp	r3, #255	@ 0xff
 8000e66:	d003      	beq.n	8000e70 <SD_ReadyWait+0x24>
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <SD_ReadyWait+0x30>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1f4      	bne.n	8000e5a <SD_ReadyWait+0xe>

	return res;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20002202 	.word	0x20002202

08000e80 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000e86:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000e8a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000e8c:	f7ff ff72 	bl	8000d74 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	e005      	b.n	8000ea2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000e96:	20ff      	movs	r0, #255	@ 0xff
 8000e98:	f7ff ff7a 	bl	8000d90 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	2b09      	cmp	r3, #9
 8000ea6:	ddf6      	ble.n	8000e96 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000ea8:	f7ff ff56 	bl	8000d58 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000eac:	2340      	movs	r3, #64	@ 0x40
 8000eae:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ec0:	2395      	movs	r3, #149	@ 0x95
 8000ec2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2106      	movs	r1, #6
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff7b 	bl	8000dc4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000ece:	e002      	b.n	8000ed6 <SD_PowerOn+0x56>
	{
		cnt--;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000ed6:	f7ff ff8f 	bl	8000df8 <SPI_RxByte>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d002      	beq.n	8000ee6 <SD_PowerOn+0x66>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f4      	bne.n	8000ed0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000ee6:	f7ff ff45 	bl	8000d74 <DESELECT>
	SPI_TxByte(0XFF);
 8000eea:	20ff      	movs	r0, #255	@ 0xff
 8000eec:	f7ff ff50 	bl	8000d90 <SPI_TxByte>

	PowerFlag = 1;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <SD_PowerOn+0x80>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20002205 	.word	0x20002205

08000f04 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <SD_PowerOff+0x14>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	20002205 	.word	0x20002205

08000f1c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000f20:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <SD_CheckPower+0x14>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20002205 	.word	0x20002205

08000f34 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <SD_RxDataBlock+0x58>)
 8000f40:	22c8      	movs	r2, #200	@ 0xc8
 8000f42:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000f44:	f7ff ff58 	bl	8000df8 <SPI_RxByte>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2bff      	cmp	r3, #255	@ 0xff
 8000f50:	d103      	bne.n	8000f5a <SD_RxDataBlock+0x26>
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <SD_RxDataBlock+0x58>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f4      	bne.n	8000f44 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f5e:	d001      	beq.n	8000f64 <SD_RxDataBlock+0x30>
 8000f60:	2300      	movs	r3, #0
 8000f62:	e00f      	b.n	8000f84 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff60 	bl	8000e30 <SPI_RxBytePtr>
	} while(len--);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	1e5a      	subs	r2, r3, #1
 8000f74:	603a      	str	r2, [r7, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f4      	bne.n	8000f64 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000f7a:	f7ff ff3d 	bl	8000df8 <SPI_RxByte>
	SPI_RxByte();
 8000f7e:	f7ff ff3b 	bl	8000df8 <SPI_RxByte>

	return TRUE;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20002200 	.word	0x20002200

08000f90 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000fa0:	f7ff ff54 	bl	8000e4c <SD_ReadyWait>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2bff      	cmp	r3, #255	@ 0xff
 8000fa8:	d001      	beq.n	8000fae <SD_TxDataBlock+0x1e>
 8000faa:	2300      	movs	r3, #0
 8000fac:	e02f      	b.n	800100e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff feed 	bl	8000d90 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	2bfd      	cmp	r3, #253	@ 0xfd
 8000fba:	d020      	beq.n	8000ffe <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000fbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff feff 	bl	8000dc4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000fc6:	f7ff ff17 	bl	8000df8 <SPI_RxByte>
		SPI_RxByte();
 8000fca:	f7ff ff15 	bl	8000df8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000fce:	e00b      	b.n	8000fe8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000fd0:	f7ff ff12 	bl	8000df8 <SPI_RxByte>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	2b05      	cmp	r3, #5
 8000fe0:	d006      	beq.n	8000ff0 <SD_TxDataBlock+0x60>
			i++;
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	2b40      	cmp	r3, #64	@ 0x40
 8000fec:	d9f0      	bls.n	8000fd0 <SD_TxDataBlock+0x40>
 8000fee:	e000      	b.n	8000ff2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000ff0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ff00 	bl	8000df8 <SPI_RxByte>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0fa      	beq.n	8000ff4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	f003 031f 	and.w	r3, r3, #31
 8001004:	2b05      	cmp	r3, #5
 8001006:	d101      	bne.n	800100c <SD_TxDataBlock+0x7c>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <SD_TxDataBlock+0x7e>

	return FALSE;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	6039      	str	r1, [r7, #0]
 8001020:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001022:	f7ff ff13 	bl	8000e4c <SD_ReadyWait>
 8001026:	4603      	mov	r3, r0
 8001028:	2bff      	cmp	r3, #255	@ 0xff
 800102a:	d001      	beq.n	8001030 <SD_SendCmd+0x1a>
 800102c:	23ff      	movs	r3, #255	@ 0xff
 800102e:	e042      	b.n	80010b6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff feac 	bl	8000d90 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	0e1b      	lsrs	r3, r3, #24
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fea6 	bl	8000d90 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	0c1b      	lsrs	r3, r3, #16
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fea0 	bl	8000d90 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	b2db      	uxtb	r3, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fe9a 	bl	8000d90 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe95 	bl	8000d90 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b40      	cmp	r3, #64	@ 0x40
 800106a:	d102      	bne.n	8001072 <SD_SendCmd+0x5c>
 800106c:	2395      	movs	r3, #149	@ 0x95
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	e007      	b.n	8001082 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b48      	cmp	r3, #72	@ 0x48
 8001076:	d102      	bne.n	800107e <SD_SendCmd+0x68>
 8001078:	2387      	movs	r3, #135	@ 0x87
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e001      	b.n	8001082 <SD_SendCmd+0x6c>
	else crc = 1;
 800107e:	2301      	movs	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fe83 	bl	8000d90 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b4c      	cmp	r3, #76	@ 0x4c
 800108e:	d101      	bne.n	8001094 <SD_SendCmd+0x7e>
 8001090:	f7ff feb2 	bl	8000df8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001094:	230a      	movs	r3, #10
 8001096:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001098:	f7ff feae 	bl	8000df8 <SPI_RxByte>
 800109c:	4603      	mov	r3, r0
 800109e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80010a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	da05      	bge.n	80010b4 <SD_SendCmd+0x9e>
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	73bb      	strb	r3, [r7, #14]
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f1      	bne.n	8001098 <SD_SendCmd+0x82>

	return res;
 80010b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SD_disk_initialize+0x14>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e0d1      	b.n	8001278 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80010d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001280 <SD_disk_initialize+0x1c0>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <SD_disk_initialize+0x2a>
 80010e2:	4b67      	ldr	r3, [pc, #412]	@ (8001280 <SD_disk_initialize+0x1c0>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	e0c6      	b.n	8001278 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80010ea:	f7ff fec9 	bl	8000e80 <SD_PowerOn>

	/* slave select */
	SELECT();
 80010ee:	f7ff fe33 	bl	8000d58 <SELECT>

	/* check disk type */
	type = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80010f6:	2100      	movs	r1, #0
 80010f8:	2040      	movs	r0, #64	@ 0x40
 80010fa:	f7ff ff8c 	bl	8001016 <SD_SendCmd>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b01      	cmp	r3, #1
 8001102:	f040 80a1 	bne.w	8001248 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001106:	4b5f      	ldr	r3, [pc, #380]	@ (8001284 <SD_disk_initialize+0x1c4>)
 8001108:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800110c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800110e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001112:	2048      	movs	r0, #72	@ 0x48
 8001114:	f7ff ff7f 	bl	8001016 <SD_SendCmd>
 8001118:	4603      	mov	r3, r0
 800111a:	2b01      	cmp	r3, #1
 800111c:	d155      	bne.n	80011ca <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e00c      	b.n	800113e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001124:	7bfc      	ldrb	r4, [r7, #15]
 8001126:	f7ff fe67 	bl	8000df8 <SPI_RxByte>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	f104 0310 	add.w	r3, r4, #16
 8001132:	443b      	add	r3, r7
 8001134:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	3301      	adds	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2b03      	cmp	r3, #3
 8001142:	d9ef      	bls.n	8001124 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001144:	7abb      	ldrb	r3, [r7, #10]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d17e      	bne.n	8001248 <SD_disk_initialize+0x188>
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	2baa      	cmp	r3, #170	@ 0xaa
 800114e:	d17b      	bne.n	8001248 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001150:	2100      	movs	r1, #0
 8001152:	2077      	movs	r0, #119	@ 0x77
 8001154:	f7ff ff5f 	bl	8001016 <SD_SendCmd>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d807      	bhi.n	800116e <SD_disk_initialize+0xae>
 800115e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001162:	2069      	movs	r0, #105	@ 0x69
 8001164:	f7ff ff57 	bl	8001016 <SD_SendCmd>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800116e:	4b45      	ldr	r3, [pc, #276]	@ (8001284 <SD_disk_initialize+0x1c4>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1ec      	bne.n	8001150 <SD_disk_initialize+0x90>
 8001176:	e000      	b.n	800117a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001178:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800117a:	4b42      	ldr	r3, [pc, #264]	@ (8001284 <SD_disk_initialize+0x1c4>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d062      	beq.n	8001248 <SD_disk_initialize+0x188>
 8001182:	2100      	movs	r1, #0
 8001184:	207a      	movs	r0, #122	@ 0x7a
 8001186:	f7ff ff46 	bl	8001016 <SD_SendCmd>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d15b      	bne.n	8001248 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e00c      	b.n	80011b0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001196:	7bfc      	ldrb	r4, [r7, #15]
 8001198:	f7ff fe2e 	bl	8000df8 <SPI_RxByte>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	f104 0310 	add.w	r3, r4, #16
 80011a4:	443b      	add	r3, r7
 80011a6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	3301      	adds	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d9ef      	bls.n	8001196 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80011b6:	7a3b      	ldrb	r3, [r7, #8]
 80011b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SD_disk_initialize+0x104>
 80011c0:	230c      	movs	r3, #12
 80011c2:	e000      	b.n	80011c6 <SD_disk_initialize+0x106>
 80011c4:	2304      	movs	r3, #4
 80011c6:	73bb      	strb	r3, [r7, #14]
 80011c8:	e03e      	b.n	8001248 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80011ca:	2100      	movs	r1, #0
 80011cc:	2077      	movs	r0, #119	@ 0x77
 80011ce:	f7ff ff22 	bl	8001016 <SD_SendCmd>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d808      	bhi.n	80011ea <SD_disk_initialize+0x12a>
 80011d8:	2100      	movs	r1, #0
 80011da:	2069      	movs	r0, #105	@ 0x69
 80011dc:	f7ff ff1b 	bl	8001016 <SD_SendCmd>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d801      	bhi.n	80011ea <SD_disk_initialize+0x12a>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e000      	b.n	80011ec <SD_disk_initialize+0x12c>
 80011ea:	2301      	movs	r3, #1
 80011ec:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80011ee:	7bbb      	ldrb	r3, [r7, #14]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d10e      	bne.n	8001212 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80011f4:	2100      	movs	r1, #0
 80011f6:	2077      	movs	r0, #119	@ 0x77
 80011f8:	f7ff ff0d 	bl	8001016 <SD_SendCmd>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d80e      	bhi.n	8001220 <SD_disk_initialize+0x160>
 8001202:	2100      	movs	r1, #0
 8001204:	2069      	movs	r0, #105	@ 0x69
 8001206:	f7ff ff06 	bl	8001016 <SD_SendCmd>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d107      	bne.n	8001220 <SD_disk_initialize+0x160>
 8001210:	e00c      	b.n	800122c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001212:	2100      	movs	r1, #0
 8001214:	2041      	movs	r0, #65	@ 0x41
 8001216:	f7ff fefe 	bl	8001016 <SD_SendCmd>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <SD_disk_initialize+0x1c4>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e2      	bne.n	80011ee <SD_disk_initialize+0x12e>
 8001228:	e000      	b.n	800122c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800122a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <SD_disk_initialize+0x1c4>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <SD_disk_initialize+0x184>
 8001234:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001238:	2050      	movs	r0, #80	@ 0x50
 800123a:	f7ff feec 	bl	8001016 <SD_SendCmd>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SD_disk_initialize+0x188>
 8001244:	2300      	movs	r3, #0
 8001246:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001248:	4a0f      	ldr	r2, [pc, #60]	@ (8001288 <SD_disk_initialize+0x1c8>)
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800124e:	f7ff fd91 	bl	8000d74 <DESELECT>
	SPI_RxByte();
 8001252:	f7ff fdd1 	bl	8000df8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d008      	beq.n	800126e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800125c:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <SD_disk_initialize+0x1c0>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <SD_disk_initialize+0x1c0>)
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	e001      	b.n	8001272 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800126e:	f7ff fe49 	bl	8000f04 <SD_PowerOff>
	}

	return Stat;
 8001272:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <SD_disk_initialize+0x1c0>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	bd90      	pop	{r4, r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	20002200 	.word	0x20002200
 8001288:	20002204 	.word	0x20002204

0800128c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SD_disk_status+0x14>
 800129c:	2301      	movs	r3, #1
 800129e:	e002      	b.n	80012a6 <SD_disk_status+0x1a>
	return Stat;
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <SD_disk_status+0x28>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b2db      	uxtb	r3, r3
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000000 	.word	0x20000000

080012b8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	4603      	mov	r3, r0
 80012c6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <SD_disk_read+0x1c>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <SD_disk_read+0x20>
 80012d4:	2304      	movs	r3, #4
 80012d6:	e051      	b.n	800137c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <SD_disk_read+0xcc>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SD_disk_read+0x32>
 80012e6:	2303      	movs	r3, #3
 80012e8:	e048      	b.n	800137c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80012ea:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <SD_disk_read+0xd0>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <SD_disk_read+0x44>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	025b      	lsls	r3, r3, #9
 80012fa:	607b      	str	r3, [r7, #4]

	SELECT();
 80012fc:	f7ff fd2c 	bl	8000d58 <SELECT>

	if (count == 1)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d111      	bne.n	800132a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	2051      	movs	r0, #81	@ 0x51
 800130a:	f7ff fe84 	bl	8001016 <SD_SendCmd>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d129      	bne.n	8001368 <SD_disk_read+0xb0>
 8001314:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001318:	68b8      	ldr	r0, [r7, #8]
 800131a:	f7ff fe0b 	bl	8000f34 <SD_RxDataBlock>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d021      	beq.n	8001368 <SD_disk_read+0xb0>
 8001324:	2300      	movs	r3, #0
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	e01e      	b.n	8001368 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	2052      	movs	r0, #82	@ 0x52
 800132e:	f7ff fe72 	bl	8001016 <SD_SendCmd>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d117      	bne.n	8001368 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001338:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800133c:	68b8      	ldr	r0, [r7, #8]
 800133e:	f7ff fdf9 	bl	8000f34 <SD_RxDataBlock>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00a      	beq.n	800135e <SD_disk_read+0xa6>
				buff += 512;
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800134e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	3b01      	subs	r3, #1
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ed      	bne.n	8001338 <SD_disk_read+0x80>
 800135c:	e000      	b.n	8001360 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800135e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001360:	2100      	movs	r1, #0
 8001362:	204c      	movs	r0, #76	@ 0x4c
 8001364:	f7ff fe57 	bl	8001016 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001368:	f7ff fd04 	bl	8000d74 <DESELECT>
	SPI_RxByte();
 800136c:	f7ff fd44 	bl	8000df8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	20002204 	.word	0x20002204

0800138c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	4603      	mov	r3, r0
 800139a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <SD_disk_write+0x1c>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <SD_disk_write+0x20>
 80013a8:	2304      	movs	r3, #4
 80013aa:	e06b      	b.n	8001484 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80013ac:	4b37      	ldr	r3, [pc, #220]	@ (800148c <SD_disk_write+0x100>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SD_disk_write+0x32>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e062      	b.n	8001484 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80013be:	4b33      	ldr	r3, [pc, #204]	@ (800148c <SD_disk_write+0x100>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SD_disk_write+0x44>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e059      	b.n	8001484 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80013d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <SD_disk_write+0x104>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <SD_disk_write+0x56>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	025b      	lsls	r3, r3, #9
 80013e0:	607b      	str	r3, [r7, #4]

	SELECT();
 80013e2:	f7ff fcb9 	bl	8000d58 <SELECT>

	if (count == 1)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d110      	bne.n	800140e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	2058      	movs	r0, #88	@ 0x58
 80013f0:	f7ff fe11 	bl	8001016 <SD_SendCmd>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d13a      	bne.n	8001470 <SD_disk_write+0xe4>
 80013fa:	21fe      	movs	r1, #254	@ 0xfe
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f7ff fdc7 	bl	8000f90 <SD_TxDataBlock>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d033      	beq.n	8001470 <SD_disk_write+0xe4>
			count = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	e030      	b.n	8001470 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800140e:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <SD_disk_write+0x104>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800141a:	2100      	movs	r1, #0
 800141c:	2077      	movs	r0, #119	@ 0x77
 800141e:	f7ff fdfa 	bl	8001016 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001422:	6839      	ldr	r1, [r7, #0]
 8001424:	2057      	movs	r0, #87	@ 0x57
 8001426:	f7ff fdf6 	bl	8001016 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	2059      	movs	r0, #89	@ 0x59
 800142e:	f7ff fdf2 	bl	8001016 <SD_SendCmd>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d11b      	bne.n	8001470 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001438:	21fc      	movs	r1, #252	@ 0xfc
 800143a:	68b8      	ldr	r0, [r7, #8]
 800143c:	f7ff fda8 	bl	8000f90 <SD_TxDataBlock>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00a      	beq.n	800145c <SD_disk_write+0xd0>
				buff += 512;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800144c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	3b01      	subs	r3, #1
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1ee      	bne.n	8001438 <SD_disk_write+0xac>
 800145a:	e000      	b.n	800145e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800145c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800145e:	21fd      	movs	r1, #253	@ 0xfd
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff fd95 	bl	8000f90 <SD_TxDataBlock>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <SD_disk_write+0xe4>
			{
				count = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001470:	f7ff fc80 	bl	8000d74 <DESELECT>
	SPI_RxByte();
 8001474:	f7ff fcc0 	bl	8000df8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000000 	.word	0x20000000
 8001490:	20002204 	.word	0x20002204

08001494 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b08b      	sub	sp, #44	@ 0x2c
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	603a      	str	r2, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
 80014a0:	460b      	mov	r3, r1
 80014a2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SD_disk_ioctl+0x1e>
 80014ae:	2304      	movs	r3, #4
 80014b0:	e113      	b.n	80016da <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80014b8:	79bb      	ldrb	r3, [r7, #6]
 80014ba:	2b05      	cmp	r3, #5
 80014bc:	d124      	bne.n	8001508 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d012      	beq.n	80014ec <SD_disk_ioctl+0x58>
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	dc1a      	bgt.n	8001500 <SD_disk_ioctl+0x6c>
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <SD_disk_ioctl+0x40>
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d006      	beq.n	80014e0 <SD_disk_ioctl+0x4c>
 80014d2:	e015      	b.n	8001500 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80014d4:	f7ff fd16 	bl	8000f04 <SD_PowerOff>
			res = RES_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014de:	e0fa      	b.n	80016d6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80014e0:	f7ff fcce 	bl	8000e80 <SD_PowerOn>
			res = RES_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014ea:	e0f4      	b.n	80016d6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	1c5c      	adds	r4, r3, #1
 80014f0:	f7ff fd14 	bl	8000f1c <SD_CheckPower>
 80014f4:	4603      	mov	r3, r0
 80014f6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80014f8:	2300      	movs	r3, #0
 80014fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014fe:	e0ea      	b.n	80016d6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001500:	2304      	movs	r3, #4
 8001502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001506:	e0e6      	b.n	80016d6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001508:	4b76      	ldr	r3, [pc, #472]	@ (80016e4 <SD_disk_ioctl+0x250>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SD_disk_ioctl+0x86>
 8001516:	2303      	movs	r3, #3
 8001518:	e0df      	b.n	80016da <SD_disk_ioctl+0x246>

		SELECT();
 800151a:	f7ff fc1d 	bl	8000d58 <SELECT>

		switch (ctrl)
 800151e:	79bb      	ldrb	r3, [r7, #6]
 8001520:	2b0d      	cmp	r3, #13
 8001522:	f200 80c9 	bhi.w	80016b8 <SD_disk_ioctl+0x224>
 8001526:	a201      	add	r2, pc, #4	@ (adr r2, 800152c <SD_disk_ioctl+0x98>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	08001623 	.word	0x08001623
 8001530:	08001565 	.word	0x08001565
 8001534:	08001613 	.word	0x08001613
 8001538:	080016b9 	.word	0x080016b9
 800153c:	080016b9 	.word	0x080016b9
 8001540:	080016b9 	.word	0x080016b9
 8001544:	080016b9 	.word	0x080016b9
 8001548:	080016b9 	.word	0x080016b9
 800154c:	080016b9 	.word	0x080016b9
 8001550:	080016b9 	.word	0x080016b9
 8001554:	080016b9 	.word	0x080016b9
 8001558:	08001635 	.word	0x08001635
 800155c:	08001659 	.word	0x08001659
 8001560:	0800167d 	.word	0x0800167d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001564:	2100      	movs	r1, #0
 8001566:	2049      	movs	r0, #73	@ 0x49
 8001568:	f7ff fd55 	bl	8001016 <SD_SendCmd>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 80a6 	bne.w	80016c0 <SD_disk_ioctl+0x22c>
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2110      	movs	r1, #16
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fcda 	bl	8000f34 <SD_RxDataBlock>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 809c 	beq.w	80016c0 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001588:	7b3b      	ldrb	r3, [r7, #12]
 800158a:	099b      	lsrs	r3, r3, #6
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d10d      	bne.n	80015ae <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001592:	7d7b      	ldrb	r3, [r7, #21]
 8001594:	461a      	mov	r2, r3
 8001596:	7d3b      	ldrb	r3, [r7, #20]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b29b      	uxth	r3, r3
 800159c:	4413      	add	r3, r2
 800159e:	b29b      	uxth	r3, r3
 80015a0:	3301      	adds	r3, #1
 80015a2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80015a4:	8bfb      	ldrh	r3, [r7, #30]
 80015a6:	029a      	lsls	r2, r3, #10
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e02d      	b.n	800160a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80015ae:	7c7b      	ldrb	r3, [r7, #17]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	7dbb      	ldrb	r3, [r7, #22]
 80015b8:	09db      	lsrs	r3, r3, #7
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4413      	add	r3, r2
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	7d7b      	ldrb	r3, [r7, #21]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f003 0306 	and.w	r3, r3, #6
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4413      	add	r3, r2
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	3302      	adds	r3, #2
 80015d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80015d6:	7d3b      	ldrb	r3, [r7, #20]
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	7cfb      	ldrb	r3, [r7, #19]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	7cbb      	ldrb	r3, [r7, #18]
 80015ea:	029b      	lsls	r3, r3, #10
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80015fc:	8bfa      	ldrh	r2, [r7, #30]
 80015fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001602:	3b09      	subs	r3, #9
 8001604:	409a      	lsls	r2, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001610:	e056      	b.n	80016c0 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001618:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001620:	e055      	b.n	80016ce <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001622:	f7ff fc13 	bl	8000e4c <SD_ReadyWait>
 8001626:	4603      	mov	r3, r0
 8001628:	2bff      	cmp	r3, #255	@ 0xff
 800162a:	d14b      	bne.n	80016c4 <SD_disk_ioctl+0x230>
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001632:	e047      	b.n	80016c4 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001634:	2100      	movs	r1, #0
 8001636:	2049      	movs	r0, #73	@ 0x49
 8001638:	f7ff fced 	bl	8001016 <SD_SendCmd>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d142      	bne.n	80016c8 <SD_disk_ioctl+0x234>
 8001642:	2110      	movs	r1, #16
 8001644:	6a38      	ldr	r0, [r7, #32]
 8001646:	f7ff fc75 	bl	8000f34 <SD_RxDataBlock>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d03b      	beq.n	80016c8 <SD_disk_ioctl+0x234>
 8001650:	2300      	movs	r3, #0
 8001652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001656:	e037      	b.n	80016c8 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001658:	2100      	movs	r1, #0
 800165a:	204a      	movs	r0, #74	@ 0x4a
 800165c:	f7ff fcdb 	bl	8001016 <SD_SendCmd>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d132      	bne.n	80016cc <SD_disk_ioctl+0x238>
 8001666:	2110      	movs	r1, #16
 8001668:	6a38      	ldr	r0, [r7, #32]
 800166a:	f7ff fc63 	bl	8000f34 <SD_RxDataBlock>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d02b      	beq.n	80016cc <SD_disk_ioctl+0x238>
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800167a:	e027      	b.n	80016cc <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800167c:	2100      	movs	r1, #0
 800167e:	207a      	movs	r0, #122	@ 0x7a
 8001680:	f7ff fcc9 	bl	8001016 <SD_SendCmd>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d116      	bne.n	80016b8 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001690:	e00b      	b.n	80016aa <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001692:	6a3c      	ldr	r4, [r7, #32]
 8001694:	1c63      	adds	r3, r4, #1
 8001696:	623b      	str	r3, [r7, #32]
 8001698:	f7ff fbae 	bl	8000df8 <SPI_RxByte>
 800169c:	4603      	mov	r3, r0
 800169e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80016a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016a4:	3301      	adds	r3, #1
 80016a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80016aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d9ef      	bls.n	8001692 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80016b8:	2304      	movs	r3, #4
 80016ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80016be:	e006      	b.n	80016ce <SD_disk_ioctl+0x23a>
			break;
 80016c0:	bf00      	nop
 80016c2:	e004      	b.n	80016ce <SD_disk_ioctl+0x23a>
			break;
 80016c4:	bf00      	nop
 80016c6:	e002      	b.n	80016ce <SD_disk_ioctl+0x23a>
			break;
 80016c8:	bf00      	nop
 80016ca:	e000      	b.n	80016ce <SD_disk_ioctl+0x23a>
			break;
 80016cc:	bf00      	nop
		}

		DESELECT();
 80016ce:	f7ff fb51 	bl	8000d74 <DESELECT>
		SPI_RxByte();
 80016d2:	f7ff fb91 	bl	8000df8 <SPI_RxByte>
	}

	return res;
 80016d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80016da:	4618      	mov	r0, r3
 80016dc:	372c      	adds	r7, #44	@ 0x2c
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000000 	.word	0x20000000

080016e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80016ec:	4a04      	ldr	r2, [pc, #16]	@ (8001700 <MX_FREERTOS_Init+0x18>)
 80016ee:	2100      	movs	r1, #0
 80016f0:	4804      	ldr	r0, [pc, #16]	@ (8001704 <MX_FREERTOS_Init+0x1c>)
 80016f2:	f00c f91b 	bl	800d92c <osThreadNew>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a03      	ldr	r2, [pc, #12]	@ (8001708 <MX_FREERTOS_Init+0x20>)
 80016fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	08012cb4 	.word	0x08012cb4
 8001704:	0800170d 	.word	0x0800170d
 8001708:	20002208 	.word	0x20002208

0800170c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001714:	f00f f9a8 	bl	8010a68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  vTaskDelay(3000);
 8001718:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800171c:	f00d fb90 	bl	800ee40 <vTaskDelay>
  if(!SDcard_start()){
 8001720:	f7ff faa6 	bl	8000c70 <SDcard_start>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d114      	bne.n	8001754 <StartDefaultTask+0x48>
	  USB_PRINT("error starting sd card\n");
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <StartDefaultTask+0x90>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2101      	movs	r1, #1
 8001730:	4618      	mov	r0, r3
 8001732:	f00c fe3d 	bl	800e3b0 <xQueueSemaphoreTake>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <StartDefaultTask+0x38>
 800173c:	2117      	movs	r1, #23
 800173e:	4818      	ldr	r0, [pc, #96]	@ (80017a0 <StartDefaultTask+0x94>)
 8001740:	f00f fa50 	bl	8010be4 <CDC_Transmit_FS>
 8001744:	4b15      	ldr	r3, [pc, #84]	@ (800179c <StartDefaultTask+0x90>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	2300      	movs	r3, #0
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	f00c fbad 	bl	800deac <xQueueGenericSend>
	  return;
 8001752:	e020      	b.n	8001796 <StartDefaultTask+0x8a>
  }
  if(!start_send_data_tasks()){
 8001754:	f000 f8e8 	bl	8001928 <start_send_data_tasks>
 8001758:	4603      	mov	r3, r0
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d013      	beq.n	800178c <StartDefaultTask+0x80>
	  USB_PRINT("error starting send data tasks\n");
 8001764:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <StartDefaultTask+0x90>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	4618      	mov	r0, r3
 800176c:	f00c fe20 	bl	800e3b0 <xQueueSemaphoreTake>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <StartDefaultTask+0x72>
 8001776:	211f      	movs	r1, #31
 8001778:	480a      	ldr	r0, [pc, #40]	@ (80017a4 <StartDefaultTask+0x98>)
 800177a:	f00f fa33 	bl	8010be4 <CDC_Transmit_FS>
 800177e:	4b07      	ldr	r3, [pc, #28]	@ (800179c <StartDefaultTask+0x90>)
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	2300      	movs	r3, #0
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	f00c fb90 	bl	800deac <xQueueGenericSend>


  /* Infinite loop */
  for(;;)
  {
    vTaskDelay(1000);
 800178c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001790:	f00d fb56 	bl	800ee40 <vTaskDelay>
 8001794:	e7fa      	b.n	800178c <StartDefaultTask+0x80>
  }
  /* USER CODE END StartDefaultTask */
}
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200021f8 	.word	0x200021f8
 80017a0:	08012b90 	.word	0x08012b90
 80017a4:	08012ba8 	.word	0x08012ba8

080017a8 <send_data>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void send_data(void* arg){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b098      	sub	sp, #96	@ 0x60
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	uint32_t settings_in_bits = (uint32_t)arg;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	657b      	str	r3, [r7, #84]	@ 0x54
	QueueHandle_t SDcard_queue = SDcard_get_queue_handle();
 80017b4:	f7fe fee4 	bl	8000580 <SDcard_get_queue_handle>
 80017b8:	6538      	str	r0, [r7, #80]	@ 0x50
	uint16_t period_ms = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint8_t array_size = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	data_type_t type = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	char buf [35];
	int n = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	65bb      	str	r3, [r7, #88]	@ 0x58

	if(settings_in_bits>>31){
 80017d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da03      	bge.n	80017de <send_data+0x36>
		array_size = 3;
 80017d6:	2303      	movs	r3, #3
 80017d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80017dc:	e002      	b.n	80017e4 <send_data+0x3c>
	} else {
		array_size = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	period_ms = (settings_in_bits<<1)>>16;
 80017e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	0c1b      	lsrs	r3, r3, #16
 80017ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	type = (settings_in_bits<<16)>>16;
 80017ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	srand(type);
 80017f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80017f8:	4618      	mov	r0, r3
 80017fa:	f00f fe45 	bl	8011488 <srand>
	TickType_t LastWakeTime = xTaskGetTickCount();
 80017fe:	f00d fc71 	bl	800f0e4 <xTaskGetTickCount>
 8001802:	4603      	mov	r3, r0
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
	for(;;){
		if(n == 3) break;
 8001806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001808:	2b03      	cmp	r3, #3
 800180a:	d103      	bne.n	8001814 <send_data+0x6c>
			sprintf(buf, "fail send data to queue - %d\n", data.data_type);
			USB_PRINT(buf);
		}
		n++;
	}
	vTaskDelete(NULL);
 800180c:	2000      	movs	r0, #0
 800180e:	f00d fa23 	bl	800ec58 <vTaskDelete>
}
 8001812:	e07e      	b.n	8001912 <send_data+0x16a>
		vTaskDelayUntil(&LastWakeTime, pdMS_TO_TICKS(period_ms));
 8001814:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001818:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800181c:	fb02 f303 	mul.w	r3, r2, r3
 8001820:	4a3d      	ldr	r2, [pc, #244]	@ (8001918 <send_data+0x170>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	099a      	lsrs	r2, r3, #6
 8001828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f00d fa86 	bl	800ed40 <vTaskDelayUntil>
			.value = {rand()%100,rand()%100,rand()%100},
 8001834:	f00f fe56 	bl	80114e4 <rand>
 8001838:	4602      	mov	r2, r0
 800183a:	4b38      	ldr	r3, [pc, #224]	@ (800191c <send_data+0x174>)
 800183c:	fb83 1302 	smull	r1, r3, r3, r2
 8001840:	1159      	asrs	r1, r3, #5
 8001842:	17d3      	asrs	r3, r2, #31
 8001844:	1acb      	subs	r3, r1, r3
 8001846:	2164      	movs	r1, #100	@ 0x64
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	1ad3      	subs	r3, r2, r3
		SD_data_t data = {
 800184e:	60fb      	str	r3, [r7, #12]
			.value = {rand()%100,rand()%100,rand()%100},
 8001850:	f00f fe48 	bl	80114e4 <rand>
 8001854:	4602      	mov	r2, r0
 8001856:	4b31      	ldr	r3, [pc, #196]	@ (800191c <send_data+0x174>)
 8001858:	fb83 1302 	smull	r1, r3, r3, r2
 800185c:	1159      	asrs	r1, r3, #5
 800185e:	17d3      	asrs	r3, r2, #31
 8001860:	1acb      	subs	r3, r1, r3
 8001862:	2164      	movs	r1, #100	@ 0x64
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	1ad3      	subs	r3, r2, r3
		SD_data_t data = {
 800186a:	613b      	str	r3, [r7, #16]
			.value = {rand()%100,rand()%100,rand()%100},
 800186c:	f00f fe3a 	bl	80114e4 <rand>
 8001870:	4602      	mov	r2, r0
 8001872:	4b2a      	ldr	r3, [pc, #168]	@ (800191c <send_data+0x174>)
 8001874:	fb83 1302 	smull	r1, r3, r3, r2
 8001878:	1159      	asrs	r1, r3, #5
 800187a:	17d3      	asrs	r3, r2, #31
 800187c:	1acb      	subs	r3, r1, r3
 800187e:	2164      	movs	r1, #100	@ 0x64
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	1ad3      	subs	r3, r2, r3
		SD_data_t data = {
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800188c:	763b      	strb	r3, [r7, #24]
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001896:	f887 3020 	strb.w	r3, [r7, #32]
		if(xQueueSend(SDcard_queue, (void*)&data, pdMS_TO_TICKS(period_ms)/2) != pdTRUE){
 800189a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800189e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001918 <send_data+0x170>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	09da      	lsrs	r2, r3, #7
 80018ae:	f107 010c 	add.w	r1, r7, #12
 80018b2:	2300      	movs	r3, #0
 80018b4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80018b6:	f00c faf9 	bl	800deac <xQueueGenericSend>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d024      	beq.n	800190a <send_data+0x162>
			sprintf(buf, "fail send data to queue - %d\n", data.data_type);
 80018c0:	7e3b      	ldrb	r3, [r7, #24]
 80018c2:	461a      	mov	r2, r3
 80018c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018c8:	4915      	ldr	r1, [pc, #84]	@ (8001920 <send_data+0x178>)
 80018ca:	4618      	mov	r0, r3
 80018cc:	f00f ff0a 	bl	80116e4 <siprintf>
			USB_PRINT(buf);
 80018d0:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <send_data+0x17c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2101      	movs	r1, #1
 80018d6:	4618      	mov	r0, r3
 80018d8:	f00c fd6a 	bl	800e3b0 <xQueueSemaphoreTake>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00c      	beq.n	80018fc <send_data+0x154>
 80018e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fc7a 	bl	80001e0 <strlen>
 80018ec:	4603      	mov	r3, r0
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f00f f974 	bl	8010be4 <CDC_Transmit_FS>
 80018fc:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <send_data+0x17c>)
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	2300      	movs	r3, #0
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	f00c fad1 	bl	800deac <xQueueGenericSend>
		n++;
 800190a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800190c:	3301      	adds	r3, #1
 800190e:	65bb      	str	r3, [r7, #88]	@ 0x58
	for(;;){
 8001910:	e779      	b.n	8001806 <send_data+0x5e>
}
 8001912:	3760      	adds	r7, #96	@ 0x60
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	10624dd3 	.word	0x10624dd3
 800191c:	51eb851f 	.word	0x51eb851f
 8001920:	08012bc8 	.word	0x08012bc8
 8001924:	200021f8 	.word	0x200021f8

08001928 <start_send_data_tasks>:


static bool start_send_data_tasks(void){
 8001928:	b580      	push	{r7, lr}
 800192a:	b08c      	sub	sp, #48	@ 0x30
 800192c:	af02      	add	r7, sp, #8
	BaseType_t ret = pdTRUE;
 800192e:	2301      	movs	r3, #1
 8001930:	607b      	str	r3, [r7, #4]
	uint32_t settings_in_bits = 0UL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	@ 0x24

	settings_in_bits = 0<<31; //1 element array
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
	settings_in_bits += 1<<15; // time in ms
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(one_1)/sizeof(one_1[0]); i++){
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
 8001946:	e021      	b.n	800198c <start_send_data_tasks+0x64>
	  settings_in_bits += one_1[i]; //type of data
 8001948:	4a9c      	ldr	r2, [pc, #624]	@ (8001bbc <start_send_data_tasks+0x294>)
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	4413      	add	r3, r2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	4413      	add	r3, r2
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	2200      	movs	r2, #0
 800195c:	9201      	str	r2, [sp, #4]
 800195e:	2219      	movs	r2, #25
 8001960:	9200      	str	r2, [sp, #0]
 8001962:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001966:	4996      	ldr	r1, [pc, #600]	@ (8001bc0 <start_send_data_tasks+0x298>)
 8001968:	4896      	ldr	r0, [pc, #600]	@ (8001bc4 <start_send_data_tasks+0x29c>)
 800196a:	f00d f817 	bl	800e99c <xTaskCreate>
 800196e:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d001      	beq.n	800197a <start_send_data_tasks+0x52>
 8001976:	2300      	movs	r3, #0
 8001978:	e13d      	b.n	8001bf6 <start_send_data_tasks+0x2ce>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001980:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(one_1)/sizeof(one_1[0]); i++){
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	3301      	adds	r3, #1
 800198a:	623b      	str	r3, [r7, #32]
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d9da      	bls.n	8001948 <start_send_data_tasks+0x20>
	}

	settings_in_bits = 0<<31; //1 element array
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
	settings_in_bits += 10<<15; // time in ms
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	f503 23a0 	add.w	r3, r3, #327680	@ 0x50000
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(one_10)/sizeof(one_10[0]); i++){
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e021      	b.n	80019e8 <start_send_data_tasks+0xc0>
	  settings_in_bits += one_10[i]; //type of data
 80019a4:	4a88      	ldr	r2, [pc, #544]	@ (8001bc8 <start_send_data_tasks+0x2a0>)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	4413      	add	r3, r2
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	4413      	add	r3, r2
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 80019b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b6:	2200      	movs	r2, #0
 80019b8:	9201      	str	r2, [sp, #4]
 80019ba:	2219      	movs	r2, #25
 80019bc:	9200      	str	r2, [sp, #0]
 80019be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019c2:	497f      	ldr	r1, [pc, #508]	@ (8001bc0 <start_send_data_tasks+0x298>)
 80019c4:	487f      	ldr	r0, [pc, #508]	@ (8001bc4 <start_send_data_tasks+0x29c>)
 80019c6:	f00c ffe9 	bl	800e99c <xTaskCreate>
 80019ca:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d001      	beq.n	80019d6 <start_send_data_tasks+0xae>
 80019d2:	2300      	movs	r3, #0
 80019d4:	e10f      	b.n	8001bf6 <start_send_data_tasks+0x2ce>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80019dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(one_10)/sizeof(one_10[0]); i++){
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3301      	adds	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d9da      	bls.n	80019a4 <start_send_data_tasks+0x7c>
	}

	settings_in_bits = 0<<31; //1 element array
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
	settings_in_bits += 100<<15; // time in ms
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	f503 1348 	add.w	r3, r3, #3276800	@ 0x320000
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(one_100)/sizeof(one_100[0]); i++){
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
 80019fe:	e01e      	b.n	8001a3e <start_send_data_tasks+0x116>
	  settings_in_bits += one_100[i]; //type of data
 8001a00:	230e      	movs	r3, #14
 8001a02:	461a      	mov	r2, r3
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	4413      	add	r3, r2
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	9201      	str	r2, [sp, #4]
 8001a10:	2219      	movs	r2, #25
 8001a12:	9200      	str	r2, [sp, #0]
 8001a14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a18:	4969      	ldr	r1, [pc, #420]	@ (8001bc0 <start_send_data_tasks+0x298>)
 8001a1a:	486a      	ldr	r0, [pc, #424]	@ (8001bc4 <start_send_data_tasks+0x29c>)
 8001a1c:	f00c ffbe 	bl	800e99c <xTaskCreate>
 8001a20:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d001      	beq.n	8001a2c <start_send_data_tasks+0x104>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e0e4      	b.n	8001bf6 <start_send_data_tasks+0x2ce>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001a32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(one_100)/sizeof(one_100[0]); i++){
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0dd      	beq.n	8001a00 <start_send_data_tasks+0xd8>
	}

	settings_in_bits = 1<<31; //3 element array
 8001a44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
	settings_in_bits += 1<<15; // time in ms
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(three_1)/sizeof(three_1[0]); i++){
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e01e      	b.n	8001a96 <start_send_data_tasks+0x16e>
	  settings_in_bits += three_1[i]; //type of data
 8001a58:	2306      	movs	r3, #6
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5e:	4413      	add	r3, r2
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	2200      	movs	r2, #0
 8001a66:	9201      	str	r2, [sp, #4]
 8001a68:	2219      	movs	r2, #25
 8001a6a:	9200      	str	r2, [sp, #0]
 8001a6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a70:	4953      	ldr	r1, [pc, #332]	@ (8001bc0 <start_send_data_tasks+0x298>)
 8001a72:	4854      	ldr	r0, [pc, #336]	@ (8001bc4 <start_send_data_tasks+0x29c>)
 8001a74:	f00c ff92 	bl	800e99c <xTaskCreate>
 8001a78:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d001      	beq.n	8001a84 <start_send_data_tasks+0x15c>
 8001a80:	2300      	movs	r3, #0
 8001a82:	e0b8      	b.n	8001bf6 <start_send_data_tasks+0x2ce>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001a8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(three_1)/sizeof(three_1[0]); i++){
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0dd      	beq.n	8001a58 <start_send_data_tasks+0x130>
	}
	settings_in_bits = 1<<31; //3 element array
 8001a9c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
	settings_in_bits += 10<<15; // time in ms
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	f503 23a0 	add.w	r3, r3, #327680	@ 0x50000
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(three_10)/sizeof(three_10[0]); i++){
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	e021      	b.n	8001af4 <start_send_data_tasks+0x1cc>
	  settings_in_bits += three_10[i]; //type of data
 8001ab0:	4a46      	ldr	r2, [pc, #280]	@ (8001bcc <start_send_data_tasks+0x2a4>)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	4413      	add	r3, r2
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	9201      	str	r2, [sp, #4]
 8001ac6:	2219      	movs	r2, #25
 8001ac8:	9200      	str	r2, [sp, #0]
 8001aca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ace:	493c      	ldr	r1, [pc, #240]	@ (8001bc0 <start_send_data_tasks+0x298>)
 8001ad0:	483c      	ldr	r0, [pc, #240]	@ (8001bc4 <start_send_data_tasks+0x29c>)
 8001ad2:	f00c ff63 	bl	800e99c <xTaskCreate>
 8001ad6:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d001      	beq.n	8001ae2 <start_send_data_tasks+0x1ba>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e089      	b.n	8001bf6 <start_send_data_tasks+0x2ce>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001ae8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(three_10)/sizeof(three_10[0]); i++){
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	3301      	adds	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d9da      	bls.n	8001ab0 <start_send_data_tasks+0x188>
	}

	settings_in_bits = 1<<31; //3 element array
 8001afa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
	settings_in_bits += 100<<15; // time in ms
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	f503 1348 	add.w	r3, r3, #3276800	@ 0x320000
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(three_100)/sizeof(three_100[0]); i++){
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e021      	b.n	8001b52 <start_send_data_tasks+0x22a>
	  settings_in_bits += three_100[i]; //type of data
 8001b0e:	4a30      	ldr	r2, [pc, #192]	@ (8001bd0 <start_send_data_tasks+0x2a8>)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	4413      	add	r3, r2
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	2200      	movs	r2, #0
 8001b22:	9201      	str	r2, [sp, #4]
 8001b24:	2219      	movs	r2, #25
 8001b26:	9200      	str	r2, [sp, #0]
 8001b28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b2c:	4924      	ldr	r1, [pc, #144]	@ (8001bc0 <start_send_data_tasks+0x298>)
 8001b2e:	4825      	ldr	r0, [pc, #148]	@ (8001bc4 <start_send_data_tasks+0x29c>)
 8001b30:	f00c ff34 	bl	800e99c <xTaskCreate>
 8001b34:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d001      	beq.n	8001b40 <start_send_data_tasks+0x218>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e05a      	b.n	8001bf6 <start_send_data_tasks+0x2ce>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001b46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(three_100)/sizeof(three_100[0]); i++){
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d9da      	bls.n	8001b0e <start_send_data_tasks+0x1e6>
	}

	settings_in_bits = 1<<31; //3 element array
 8001b58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
	settings_in_bits += rand()%1000<<15; // time in ms
 8001b5e:	f00f fcc1 	bl	80114e4 <rand>
 8001b62:	4602      	mov	r2, r0
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <start_send_data_tasks+0x2ac>)
 8001b66:	fb83 1302 	smull	r1, r3, r3, r2
 8001b6a:	1199      	asrs	r1, r3, #6
 8001b6c:	17d3      	asrs	r3, r2, #31
 8001b6e:	1acb      	subs	r3, r1, r3
 8001b70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	03db      	lsls	r3, r3, #15
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	4413      	add	r3, r2
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(three_ap)/sizeof(three_ap[0]); i++){
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	e031      	b.n	8001bee <start_send_data_tasks+0x2c6>
	  settings_in_bits += three_ap[i]; //type of data
 8001b8a:	4a13      	ldr	r2, [pc, #76]	@ (8001bd8 <start_send_data_tasks+0x2b0>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4413      	add	r3, r2
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	4413      	add	r3, r2
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	9201      	str	r2, [sp, #4]
 8001ba0:	2219      	movs	r2, #25
 8001ba2:	9200      	str	r2, [sp, #0]
 8001ba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ba8:	4905      	ldr	r1, [pc, #20]	@ (8001bc0 <start_send_data_tasks+0x298>)
 8001baa:	4806      	ldr	r0, [pc, #24]	@ (8001bc4 <start_send_data_tasks+0x29c>)
 8001bac:	f00c fef6 	bl	800e99c <xTaskCreate>
 8001bb0:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d011      	beq.n	8001bdc <start_send_data_tasks+0x2b4>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e01c      	b.n	8001bf6 <start_send_data_tasks+0x2ce>
 8001bbc:	08012c9c 	.word	0x08012c9c
 8001bc0:	08012be8 	.word	0x08012be8
 8001bc4:	080017a9 	.word	0x080017a9
 8001bc8:	08012ca0 	.word	0x08012ca0
 8001bcc:	08012ca4 	.word	0x08012ca4
 8001bd0:	08012cac 	.word	0x08012cac
 8001bd4:	10624dd3 	.word	0x10624dd3
 8001bd8:	08012cb0 	.word	0x08012cb0
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001be2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < sizeof(three_ap)/sizeof(three_ap[0]); i++){
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d9ca      	bls.n	8001b8a <start_send_data_tasks+0x262>
	}
	return true;
 8001bf4:	2301      	movs	r3, #1
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3728      	adds	r7, #40	@ 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop

08001c00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
 8001c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <MX_GPIO_Init+0x98>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c98 <MX_GPIO_Init+0x98>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <MX_GPIO_Init+0x98>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <MX_GPIO_Init+0x98>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	4a17      	ldr	r2, [pc, #92]	@ (8001c98 <MX_GPIO_Init+0x98>)
 8001c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <MX_GPIO_Init+0x98>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <MX_GPIO_Init+0x98>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <MX_GPIO_Init+0x98>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <MX_GPIO_Init+0x98>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	480b      	ldr	r0, [pc, #44]	@ (8001c9c <MX_GPIO_Init+0x9c>)
 8001c70:	f000 feda 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001c74:	2310      	movs	r3, #16
 8001c76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4804      	ldr	r0, [pc, #16]	@ (8001c9c <MX_GPIO_Init+0x9c>)
 8001c8c:	f000 fd48 	bl	8002720 <HAL_GPIO_Init>

}
 8001c90:	bf00      	nop
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca4:	f000 fbf4 	bl	8002490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca8:	f000 f812 	bl	8001cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cac:	f7ff ffa8 	bl	8001c00 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001cb0:	f000 f91c 	bl	8001eec <MX_SPI1_Init>
  MX_FATFS_Init();
 8001cb4:	f005 fc9e 	bl	80075f4 <MX_FATFS_Init>
  MX_RTC_Init();
 8001cb8:	f000 f892 	bl	8001de0 <MX_RTC_Init>
  MX_TIM2_Init();
 8001cbc:	f000 fb52 	bl	8002364 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001cc0:	f00b fdea 	bl	800d898 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001cc4:	f7ff fd10 	bl	80016e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001cc8:	f00b fe0a 	bl	800d8e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <main+0x2c>

08001cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b094      	sub	sp, #80	@ 0x50
 8001cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd6:	f107 0320 	add.w	r3, r7, #32
 8001cda:	2230      	movs	r2, #48	@ 0x30
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f00f fd63 	bl	80117aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001da8 <SystemClock_Config+0xd8>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	4a2a      	ldr	r2, [pc, #168]	@ (8001da8 <SystemClock_Config+0xd8>)
 8001cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d04:	4b28      	ldr	r3, [pc, #160]	@ (8001da8 <SystemClock_Config+0xd8>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d10:	2300      	movs	r3, #0
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	4b25      	ldr	r3, [pc, #148]	@ (8001dac <SystemClock_Config+0xdc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d1c:	4a23      	ldr	r2, [pc, #140]	@ (8001dac <SystemClock_Config+0xdc>)
 8001d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b21      	ldr	r3, [pc, #132]	@ (8001dac <SystemClock_Config+0xdc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001d30:	2307      	movs	r3, #7
 8001d32:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d42:	2310      	movs	r3, #16
 8001d44:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d46:	2302      	movs	r3, #2
 8001d48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001d50:	230f      	movs	r3, #15
 8001d52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001d54:	2390      	movs	r3, #144	@ 0x90
 8001d56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001d5c:	2305      	movs	r3, #5
 8001d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d60:	f107 0320 	add.w	r3, r7, #32
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 f8c9 	bl	8003efc <HAL_RCC_OscConfig>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001d70:	f000 f830 	bl	8001dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d74:	230f      	movs	r3, #15
 8001d76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d88:	f107 030c 	add.w	r3, r7, #12
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 fb2c 	bl	80043ec <HAL_RCC_ClockConfig>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001d9a:	f000 f81b 	bl	8001dd4 <Error_Handler>
  }
}
 8001d9e:	bf00      	nop
 8001da0:	3750      	adds	r7, #80	@ 0x50
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40007000 	.word	0x40007000

08001db0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a04      	ldr	r2, [pc, #16]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d101      	bne.n	8001dc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dc2:	f000 fb87 	bl	80024d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40010000 	.word	0x40010000

08001dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd8:	b672      	cpsid	i
}
 8001dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <Error_Handler+0x8>

08001de0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001df4:	2300      	movs	r3, #0
 8001df6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001df8:	4b24      	ldr	r3, [pc, #144]	@ (8001e8c <MX_RTC_Init+0xac>)
 8001dfa:	4a25      	ldr	r2, [pc, #148]	@ (8001e90 <MX_RTC_Init+0xb0>)
 8001dfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001dfe:	4b23      	ldr	r3, [pc, #140]	@ (8001e8c <MX_RTC_Init+0xac>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e04:	4b21      	ldr	r3, [pc, #132]	@ (8001e8c <MX_RTC_Init+0xac>)
 8001e06:	227f      	movs	r2, #127	@ 0x7f
 8001e08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e0a:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <MX_RTC_Init+0xac>)
 8001e0c:	22ff      	movs	r2, #255	@ 0xff
 8001e0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e10:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <MX_RTC_Init+0xac>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e16:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <MX_RTC_Init+0xac>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <MX_RTC_Init+0xac>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e22:	481a      	ldr	r0, [pc, #104]	@ (8001e8c <MX_RTC_Init+0xac>)
 8001e24:	f002 fdd0 	bl	80049c8 <HAL_RTC_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001e2e:	f7ff ffd1 	bl	8001dd4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	480f      	ldr	r0, [pc, #60]	@ (8001e8c <MX_RTC_Init+0xac>)
 8001e4e:	f002 fe3e 	bl	8004ace <HAL_RTC_SetTime>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001e58:	f7ff ffbc 	bl	8001dd4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001e60:	2301      	movs	r3, #1
 8001e62:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001e64:	2301      	movs	r3, #1
 8001e66:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4619      	mov	r1, r3
 8001e72:	4806      	ldr	r0, [pc, #24]	@ (8001e8c <MX_RTC_Init+0xac>)
 8001e74:	f002 fec5 	bl	8004c02 <HAL_RTC_SetDate>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001e7e:	f7ff ffa9 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000220c 	.word	0x2000220c
 8001e90:	40002800 	.word	0x40002800

08001e94 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
 8001eac:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee4 <HAL_RTC_MspInit+0x50>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d111      	bne.n	8001edc <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ebc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ec0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fc8e 	bl	80047e8 <HAL_RCCEx_PeriphCLKConfig>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001ed2:	f7ff ff7f 	bl	8001dd4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ed6:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <HAL_RTC_MspInit+0x54>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40002800 	.word	0x40002800
 8001ee8:	42470e3c 	.word	0x42470e3c

08001eec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ef0:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <MX_SPI1_Init+0x64>)
 8001ef2:	4a18      	ldr	r2, [pc, #96]	@ (8001f54 <MX_SPI1_Init+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ef6:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <MX_SPI1_Init+0x64>)
 8001ef8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001efc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001efe:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <MX_SPI1_Init+0x64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f04:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <MX_SPI1_Init+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f0a:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <MX_SPI1_Init+0x64>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <MX_SPI1_Init+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <MX_SPI1_Init+0x64>)
 8001f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <MX_SPI1_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <MX_SPI1_Init+0x64>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <MX_SPI1_Init+0x64>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f30:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <MX_SPI1_Init+0x64>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <MX_SPI1_Init+0x64>)
 8001f38:	220a      	movs	r2, #10
 8001f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f3c:	4804      	ldr	r0, [pc, #16]	@ (8001f50 <MX_SPI1_Init+0x64>)
 8001f3e:	f002 ff85 	bl	8004e4c <HAL_SPI_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f48:	f7ff ff44 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2000222c 	.word	0x2000222c
 8001f54:	40013000 	.word	0x40013000

08001f58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	@ 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a19      	ldr	r2, [pc, #100]	@ (8001fdc <HAL_SPI_MspInit+0x84>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d12b      	bne.n	8001fd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b18      	ldr	r3, [pc, #96]	@ (8001fe0 <HAL_SPI_MspInit+0x88>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	4a17      	ldr	r2, [pc, #92]	@ (8001fe0 <HAL_SPI_MspInit+0x88>)
 8001f84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f8a:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <HAL_SPI_MspInit+0x88>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <HAL_SPI_MspInit+0x88>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	4a10      	ldr	r2, [pc, #64]	@ (8001fe0 <HAL_SPI_MspInit+0x88>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <HAL_SPI_MspInit+0x88>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fb2:	23e0      	movs	r3, #224	@ 0xe0
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4805      	ldr	r0, [pc, #20]	@ (8001fe4 <HAL_SPI_MspInit+0x8c>)
 8001fce:	f000 fba7 	bl	8002720 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	3728      	adds	r7, #40	@ 0x28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40013000 	.word	0x40013000
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020000 	.word	0x40020000

08001fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_MspInit+0x54>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	4a11      	ldr	r2, [pc, #68]	@ (800203c <HAL_MspInit+0x54>)
 8001ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <HAL_MspInit+0x54>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_MspInit+0x54>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <HAL_MspInit+0x54>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002018:	6413      	str	r3, [r2, #64]	@ 0x40
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_MspInit+0x54>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	210f      	movs	r1, #15
 800202a:	f06f 0001 	mvn.w	r0, #1
 800202e:	f000 fb4d 	bl	80026cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08c      	sub	sp, #48	@ 0x30
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	4b2e      	ldr	r3, [pc, #184]	@ (8002110 <HAL_InitTick+0xd0>)
 8002056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002058:	4a2d      	ldr	r2, [pc, #180]	@ (8002110 <HAL_InitTick+0xd0>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002060:	4b2b      	ldr	r3, [pc, #172]	@ (8002110 <HAL_InitTick+0xd0>)
 8002062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800206c:	f107 020c 	add.w	r2, r7, #12
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f002 fb84 	bl	8004784 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800207c:	f002 fb6e 	bl	800475c <HAL_RCC_GetPCLK2Freq>
 8002080:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002084:	4a23      	ldr	r2, [pc, #140]	@ (8002114 <HAL_InitTick+0xd4>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	0c9b      	lsrs	r3, r3, #18
 800208c:	3b01      	subs	r3, #1
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002090:	4b21      	ldr	r3, [pc, #132]	@ (8002118 <HAL_InitTick+0xd8>)
 8002092:	4a22      	ldr	r2, [pc, #136]	@ (800211c <HAL_InitTick+0xdc>)
 8002094:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002096:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <HAL_InitTick+0xd8>)
 8002098:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800209c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800209e:	4a1e      	ldr	r2, [pc, #120]	@ (8002118 <HAL_InitTick+0xd8>)
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <HAL_InitTick+0xd8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <HAL_InitTick+0xd8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b0:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <HAL_InitTick+0xd8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80020b6:	4818      	ldr	r0, [pc, #96]	@ (8002118 <HAL_InitTick+0xd8>)
 80020b8:	f003 fb20 	bl	80056fc <HAL_TIM_Base_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80020c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d11b      	bne.n	8002102 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80020ca:	4813      	ldr	r0, [pc, #76]	@ (8002118 <HAL_InitTick+0xd8>)
 80020cc:	f003 fb66 	bl	800579c <HAL_TIM_Base_Start_IT>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80020d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d111      	bne.n	8002102 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020de:	2019      	movs	r0, #25
 80020e0:	f000 fb10 	bl	8002704 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	d808      	bhi.n	80020fc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80020ea:	2200      	movs	r2, #0
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	2019      	movs	r0, #25
 80020f0:	f000 faec 	bl	80026cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002120 <HAL_InitTick+0xe0>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e002      	b.n	8002102 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002102:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002106:	4618      	mov	r0, r3
 8002108:	3730      	adds	r7, #48	@ 0x30
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	431bde83 	.word	0x431bde83
 8002118:	20002284 	.word	0x20002284
 800211c:	40010000 	.word	0x40010000
 8002120:	20000008 	.word	0x20000008

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <NMI_Handler+0x4>

0800212c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <MemManage_Handler+0x4>

0800213c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <UsageFault_Handler+0x4>

0800214c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(Timer1 > 0)
 8002160:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <TIM1_UP_TIM10_IRQHandler+0x18>
		Timer1--;
 8002168:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <TIM1_UP_TIM10_IRQHandler+0x38>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8002172:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <TIM1_UP_TIM10_IRQHandler+0x2c>
		Timer2--;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8002186:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002188:	4804      	ldr	r0, [pc, #16]	@ (800219c <TIM1_UP_TIM10_IRQHandler+0x40>)
 800218a:	f003 fb69 	bl	8005860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20002200 	.word	0x20002200
 8002198:	20002202 	.word	0x20002202
 800219c:	20002284 	.word	0x20002284

080021a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80021a4:	4802      	ldr	r0, [pc, #8]	@ (80021b0 <OTG_FS_IRQHandler+0x10>)
 80021a6:	f000 fd9c 	bl	8002ce2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20007c20 	.word	0x20007c20

080021b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return 1;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_kill>:

int _kill(int pid, int sig)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ce:	f00f fb91 	bl	80118f4 <__errno>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2216      	movs	r2, #22
 80021d6:	601a      	str	r2, [r3, #0]
  return -1;
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_exit>:

void _exit (int status)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ffe7 	bl	80021c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021f6:	bf00      	nop
 80021f8:	e7fd      	b.n	80021f6 <_exit+0x12>

080021fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e00a      	b.n	8002222 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800220c:	f3af 8000 	nop.w
 8002210:	4601      	mov	r1, r0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	60ba      	str	r2, [r7, #8]
 8002218:	b2ca      	uxtb	r2, r1
 800221a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3301      	adds	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	dbf0      	blt.n	800220c <_read+0x12>
  }

  return len;
 800222a:	687b      	ldr	r3, [r7, #4]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	e009      	b.n	800225a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	60ba      	str	r2, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3301      	adds	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	429a      	cmp	r2, r3
 8002260:	dbf1      	blt.n	8002246 <_write+0x12>
  }
  return len;
 8002262:	687b      	ldr	r3, [r7, #4]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_close>:

int _close(int file)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002294:	605a      	str	r2, [r3, #4]
  return 0;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_isatty>:

int _isatty(int file)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022ac:	2301      	movs	r3, #1
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b085      	sub	sp, #20
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022dc:	4a14      	ldr	r2, [pc, #80]	@ (8002330 <_sbrk+0x5c>)
 80022de:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <_sbrk+0x60>)
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e8:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f0:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <_sbrk+0x64>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	@ (800233c <_sbrk+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d207      	bcs.n	8002314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002304:	f00f faf6 	bl	80118f4 <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	220c      	movs	r2, #12
 800230c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	e009      	b.n	8002328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002314:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	4a05      	ldr	r2, [pc, #20]	@ (8002338 <_sbrk+0x64>)
 8002324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20020000 	.word	0x20020000
 8002334:	00000400 	.word	0x00000400
 8002338:	200022cc 	.word	0x200022cc
 800233c:	20008470 	.word	0x20008470

08002340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <SystemInit+0x20>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234a:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <SystemInit+0x20>)
 800234c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002350:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002378:	463b      	mov	r3, r7
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002380:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <MX_TIM2_Init+0x94>)
 8002382:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002386:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002388:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <MX_TIM2_Init+0x94>)
 800238a:	2200      	movs	r2, #0
 800238c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238e:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <MX_TIM2_Init+0x94>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002394:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <MX_TIM2_Init+0x94>)
 8002396:	f04f 32ff 	mov.w	r2, #4294967295
 800239a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239c:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <MX_TIM2_Init+0x94>)
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a2:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <MX_TIM2_Init+0x94>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023a8:	4813      	ldr	r0, [pc, #76]	@ (80023f8 <MX_TIM2_Init+0x94>)
 80023aa:	f003 f9a7 	bl	80056fc <HAL_TIM_Base_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80023b4:	f7ff fd0e 	bl	8001dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	4619      	mov	r1, r3
 80023c4:	480c      	ldr	r0, [pc, #48]	@ (80023f8 <MX_TIM2_Init+0x94>)
 80023c6:	f003 fb3b 	bl	8005a40 <HAL_TIM_ConfigClockSource>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80023d0:	f7ff fd00 	bl	8001dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023dc:	463b      	mov	r3, r7
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <MX_TIM2_Init+0x94>)
 80023e2:	f003 fd43 	bl	8005e6c <HAL_TIMEx_MasterConfigSynchronization>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80023ec:	f7ff fcf2 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023f0:	bf00      	nop
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	200022d0 	.word	0x200022d0

080023fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800240c:	d10d      	bne.n	800242a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	4a08      	ldr	r2, [pc, #32]	@ (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6413      	str	r3, [r2, #64]	@ 0x40
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800

0800243c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002474 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002440:	f7ff ff7e 	bl	8002340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002444:	480c      	ldr	r0, [pc, #48]	@ (8002478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002446:	490d      	ldr	r1, [pc, #52]	@ (800247c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002448:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800244c:	e002      	b.n	8002454 <LoopCopyDataInit>

0800244e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002452:	3304      	adds	r3, #4

08002454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002458:	d3f9      	bcc.n	800244e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245a:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800245c:	4c0a      	ldr	r4, [pc, #40]	@ (8002488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002460:	e001      	b.n	8002466 <LoopFillZerobss>

08002462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002464:	3204      	adds	r2, #4

08002466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002468:	d3fb      	bcc.n	8002462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800246a:	f00f fa49 	bl	8011900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246e:	f7ff fc17 	bl	8001ca0 <main>
  bx  lr    
 8002472:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800247c:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8002480:	08013220 	.word	0x08013220
  ldr r2, =_sbss
 8002484:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8002488:	20008470 	.word	0x20008470

0800248c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC_IRQHandler>
	...

08002490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002494:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0d      	ldr	r2, [pc, #52]	@ (80024d0 <HAL_Init+0x40>)
 800249a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800249e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0a      	ldr	r2, [pc, #40]	@ (80024d0 <HAL_Init+0x40>)
 80024a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a07      	ldr	r2, [pc, #28]	@ (80024d0 <HAL_Init+0x40>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b8:	2003      	movs	r0, #3
 80024ba:	f000 f8fc 	bl	80026b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024be:	200f      	movs	r0, #15
 80024c0:	f7ff fdbe 	bl	8002040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c4:	f7ff fd90 	bl	8001fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	2000000c 	.word	0x2000000c
 80024f8:	20002318 	.word	0x20002318

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	@ (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20002318 	.word	0x20002318

08002514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff ffee 	bl	80024fc <HAL_GetTick>
 8002520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d005      	beq.n	800253a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252e:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <HAL_Delay+0x44>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800253a:	bf00      	nop
 800253c:	f7ff ffde 	bl	80024fc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d8f7      	bhi.n	800253c <HAL_Delay+0x28>
  {
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2000000c 	.word	0x2000000c

0800255c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002578:	4013      	ands	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002584:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258e:	4a04      	ldr	r2, [pc, #16]	@ (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	60d3      	str	r3, [r2, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a8:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <__NVIC_GetPriorityGrouping+0x18>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	f003 0307 	and.w	r3, r3, #7
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	db0b      	blt.n	80025ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	4907      	ldr	r1, [pc, #28]	@ (80025f8 <__NVIC_EnableIRQ+0x38>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2001      	movs	r0, #1
 80025e2:	fa00 f202 	lsl.w	r2, r0, r2
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000e100 	.word	0xe000e100

080025fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	@ (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	@ (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	@ 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	2b04      	cmp	r3, #4
 800266c:	bf28      	it	cs
 800266e:	2304      	movcs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3304      	adds	r3, #4
 8002676:	2b06      	cmp	r3, #6
 8002678:	d902      	bls.n	8002680 <NVIC_EncodePriority+0x30>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3b03      	subs	r3, #3
 800267e:	e000      	b.n	8002682 <NVIC_EncodePriority+0x32>
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 32ff 	mov.w	r2, #4294967295
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	4313      	orrs	r3, r2
         );
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	@ 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ff4c 	bl	800255c <__NVIC_SetPriorityGrouping>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026de:	f7ff ff61 	bl	80025a4 <__NVIC_GetPriorityGrouping>
 80026e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	6978      	ldr	r0, [r7, #20]
 80026ea:	f7ff ffb1 	bl	8002650 <NVIC_EncodePriority>
 80026ee:	4602      	mov	r2, r0
 80026f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff80 	bl	80025fc <__NVIC_SetPriority>
}
 80026fc:	bf00      	nop
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff54 	bl	80025c0 <__NVIC_EnableIRQ>
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	@ 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e159      	b.n	80029f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8148 	bne.w	80029ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d005      	beq.n	8002772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	2b02      	cmp	r3, #2
 8002770:	d130      	bne.n	80027d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2203      	movs	r2, #3
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 0201 	and.w	r2, r3, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d017      	beq.n	8002810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d123      	bne.n	8002864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a2 	beq.w	80029ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b57      	ldr	r3, [pc, #348]	@ (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	4a56      	ldr	r2, [pc, #344]	@ (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b6:	4b54      	ldr	r3, [pc, #336]	@ (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c2:	4a52      	ldr	r2, [pc, #328]	@ (8002a0c <HAL_GPIO_Init+0x2ec>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a49      	ldr	r2, [pc, #292]	@ (8002a10 <HAL_GPIO_Init+0x2f0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d019      	beq.n	8002922 <HAL_GPIO_Init+0x202>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a48      	ldr	r2, [pc, #288]	@ (8002a14 <HAL_GPIO_Init+0x2f4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_Init+0x1fe>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a47      	ldr	r2, [pc, #284]	@ (8002a18 <HAL_GPIO_Init+0x2f8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00d      	beq.n	800291a <HAL_GPIO_Init+0x1fa>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a46      	ldr	r2, [pc, #280]	@ (8002a1c <HAL_GPIO_Init+0x2fc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <HAL_GPIO_Init+0x1f6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a45      	ldr	r2, [pc, #276]	@ (8002a20 <HAL_GPIO_Init+0x300>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_GPIO_Init+0x1f2>
 800290e:	2304      	movs	r3, #4
 8002910:	e008      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002912:	2307      	movs	r3, #7
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002916:	2303      	movs	r3, #3
 8002918:	e004      	b.n	8002924 <HAL_GPIO_Init+0x204>
 800291a:	2302      	movs	r3, #2
 800291c:	e002      	b.n	8002924 <HAL_GPIO_Init+0x204>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002922:	2300      	movs	r3, #0
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f002 0203 	and.w	r2, r2, #3
 800292a:	0092      	lsls	r2, r2, #2
 800292c:	4093      	lsls	r3, r2
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002934:	4935      	ldr	r1, [pc, #212]	@ (8002a0c <HAL_GPIO_Init+0x2ec>)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3302      	adds	r3, #2
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002942:	4b38      	ldr	r3, [pc, #224]	@ (8002a24 <HAL_GPIO_Init+0x304>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002966:	4a2f      	ldr	r2, [pc, #188]	@ (8002a24 <HAL_GPIO_Init+0x304>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800296c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a24 <HAL_GPIO_Init+0x304>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002990:	4a24      	ldr	r2, [pc, #144]	@ (8002a24 <HAL_GPIO_Init+0x304>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002996:	4b23      	ldr	r3, [pc, #140]	@ (8002a24 <HAL_GPIO_Init+0x304>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002a24 <HAL_GPIO_Init+0x304>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c0:	4b18      	ldr	r3, [pc, #96]	@ (8002a24 <HAL_GPIO_Init+0x304>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002a24 <HAL_GPIO_Init+0x304>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3301      	adds	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	f67f aea2 	bls.w	800273c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3724      	adds	r7, #36	@ 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40013800 	.word	0x40013800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40020400 	.word	0x40020400
 8002a18:	40020800 	.word	0x40020800
 8002a1c:	40020c00 	.word	0x40020c00
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a38:	787b      	ldrb	r3, [r7, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a44:	e003      	b.n	8002a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	041a      	lsls	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	619a      	str	r2, [r3, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af02      	add	r7, sp, #8
 8002a60:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e101      	b.n	8002c70 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f00e f9f4 	bl	8010e74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a9a:	d102      	bne.n	8002aa2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f003 fb79 	bl	800619e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	7c1a      	ldrb	r2, [r3, #16]
 8002ab4:	f88d 2000 	strb.w	r2, [sp]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002abc:	f003 fa58 	bl	8005f70 <USB_CoreInit>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0ce      	b.n	8002c70 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 fb71 	bl	80061c0 <USB_SetCurrentMode>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0bf      	b.n	8002c70 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	73fb      	strb	r3, [r7, #15]
 8002af4:	e04a      	b.n	8002b8c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3315      	adds	r3, #21
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	3314      	adds	r3, #20
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	b298      	uxth	r0, r3
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	332e      	adds	r3, #46	@ 0x2e
 8002b32:	4602      	mov	r2, r0
 8002b34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	3318      	adds	r3, #24
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	331c      	adds	r3, #28
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3320      	adds	r3, #32
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3324      	adds	r3, #36	@ 0x24
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	791b      	ldrb	r3, [r3, #4]
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d3af      	bcc.n	8002af6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
 8002b9a:	e044      	b.n	8002c26 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	3301      	adds	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	791b      	ldrb	r3, [r3, #4]
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d3b5      	bcc.n	8002b9c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7c1a      	ldrb	r2, [r3, #16]
 8002c38:	f88d 2000 	strb.w	r2, [sp]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c40:	f003 fb0a 	bl	8006258 <USB_DevInit>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00c      	b.n	8002c70 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f004 fb4e 	bl	800730a <USB_DevDisconnect>

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_PCD_Start+0x1c>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e022      	b.n	8002cda <HAL_PCD_Start+0x62>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f003 fa5b 	bl	800617c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f004 fafc 	bl	80072c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ce2:	b590      	push	{r4, r7, lr}
 8002ce4:	b08d      	sub	sp, #52	@ 0x34
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 fbba 	bl	8007472 <USB_GetMode>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f040 848c 	bne.w	800361e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f004 fb1e 	bl	800734c <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8482 	beq.w	800361c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 fb0b 	bl	800734c <USB_ReadInterrupts>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d107      	bne.n	8002d50 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f002 0202 	and.w	r2, r2, #2
 8002d4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f004 faf9 	bl	800734c <USB_ReadInterrupts>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d161      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0210 	bic.w	r2, r2, #16
 8002d72:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f003 020f 	and.w	r2, r3, #15
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	3304      	adds	r3, #4
 8002d92:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	0c5b      	lsrs	r3, r3, #17
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d124      	bne.n	8002dea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d035      	beq.n	8002e18 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002db6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6a38      	ldr	r0, [r7, #32]
 8002dc0:	f004 f930 	bl	8007024 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dd0:	441a      	add	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de2:	441a      	add	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	615a      	str	r2, [r3, #20]
 8002de8:	e016      	b.n	8002e18 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	0c5b      	lsrs	r3, r3, #17
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d110      	bne.n	8002e18 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	4619      	mov	r1, r3
 8002e00:	6a38      	ldr	r0, [r7, #32]
 8002e02:	f004 f90f 	bl	8007024 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e12:	441a      	add	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0210 	orr.w	r2, r2, #16
 8002e26:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f004 fa8d 	bl	800734c <USB_ReadInterrupts>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e38:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e3c:	f040 80a7 	bne.w	8002f8e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f004 fa92 	bl	8007372 <USB_ReadDevAllOutEpInterrupt>
 8002e4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002e50:	e099      	b.n	8002f86 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 808e 	beq.w	8002f7a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f004 fab6 	bl	80073da <USB_ReadDevOutEPInterrupt>
 8002e6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e86:	461a      	mov	r2, r3
 8002e88:	2301      	movs	r3, #1
 8002e8a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fea2 	bl	8003bd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00c      	beq.n	8002eb8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2308      	movs	r3, #8
 8002eae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002eb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 ff78 	bl	8003da8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d030      	beq.n	8002f40 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee6:	2b80      	cmp	r3, #128	@ 0x80
 8002ee8:	d109      	bne.n	8002efe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ef8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002efc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	4413      	add	r3, r2
 8002f10:	3304      	adds	r3, #4
 8002f12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	78db      	ldrb	r3, [r3, #3]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d108      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f00e f89f 	bl	801106c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f56:	461a      	mov	r2, r3
 8002f58:	2320      	movs	r3, #32
 8002f5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d009      	beq.n	8002f7a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f72:	461a      	mov	r2, r3
 8002f74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f47f af62 	bne.w	8002e52 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f004 f9da 	bl	800734c <USB_ReadInterrupts>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fa2:	f040 80db 	bne.w	800315c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f004 f9fb 	bl	80073a6 <USB_ReadDevAllInEpInterrupt>
 8002fb0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002fb6:	e0cd      	b.n	8003154 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80c2 	beq.w	8003148 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f004 fa21 	bl	8007416 <USB_ReadDevInEPInterrupt>
 8002fd4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d057      	beq.n	8003090 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69f9      	ldr	r1, [r7, #28]
 8002ffc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003000:	4013      	ands	r3, r2
 8003002:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003010:	461a      	mov	r2, r3
 8003012:	2301      	movs	r3, #1
 8003014:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	799b      	ldrb	r3, [r3, #6]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d132      	bne.n	8003084 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	3320      	adds	r3, #32
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003034:	4613      	mov	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4403      	add	r3, r0
 800303e:	331c      	adds	r3, #28
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4419      	add	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4403      	add	r3, r0
 8003052:	3320      	adds	r3, #32
 8003054:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	2b00      	cmp	r3, #0
 800305a:	d113      	bne.n	8003084 <HAL_PCD_IRQHandler+0x3a2>
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	3324      	adds	r3, #36	@ 0x24
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d108      	bne.n	8003084 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800307c:	461a      	mov	r2, r3
 800307e:	2101      	movs	r1, #1
 8003080:	f004 fa28 	bl	80074d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f00d ff73 	bl	8010f76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030a6:	461a      	mov	r2, r3
 80030a8:	2308      	movs	r3, #8
 80030aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030c2:	461a      	mov	r2, r3
 80030c4:	2310      	movs	r3, #16
 80030c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d008      	beq.n	80030e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030de:	461a      	mov	r2, r3
 80030e0:	2340      	movs	r3, #64	@ 0x40
 80030e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d023      	beq.n	8003136 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80030ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030f0:	6a38      	ldr	r0, [r7, #32]
 80030f2:	f003 fa15 	bl	8006520 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80030f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3310      	adds	r3, #16
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	3304      	adds	r3, #4
 8003108:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	78db      	ldrb	r3, [r3, #3]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d108      	bne.n	8003124 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2200      	movs	r2, #0
 8003116:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4619      	mov	r1, r3
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f00d ffb6 	bl	8011090 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003130:	461a      	mov	r2, r3
 8003132:	2302      	movs	r3, #2
 8003134:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003140:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fcbb 	bl	8003abe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	3301      	adds	r3, #1
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800314e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003156:	2b00      	cmp	r3, #0
 8003158:	f47f af2e 	bne.w	8002fb8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f004 f8f3 	bl	800734c <USB_ReadInterrupts>
 8003166:	4603      	mov	r3, r0
 8003168:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800316c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003170:	d122      	bne.n	80031b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800318c:	2b01      	cmp	r3, #1
 800318e:	d108      	bne.n	80031a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003198:	2100      	movs	r1, #0
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fea2 	bl	8003ee4 <HAL_PCDEx_LPM_Callback>
 80031a0:	e002      	b.n	80031a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f00d ff54 	bl	8011050 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80031b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f004 f8c5 	bl	800734c <USB_ReadInterrupts>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031cc:	d112      	bne.n	80031f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d102      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f00d ff10 	bl	8011004 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80031f2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f004 f8a7 	bl	800734c <USB_ReadInterrupts>
 80031fe:	4603      	mov	r3, r0
 8003200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003208:	f040 80b7 	bne.w	800337a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2110      	movs	r1, #16
 8003226:	4618      	mov	r0, r3
 8003228:	f003 f97a 	bl	8006520 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322c:	2300      	movs	r3, #0
 800322e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003230:	e046      	b.n	80032c0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800323e:	461a      	mov	r2, r3
 8003240:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003244:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003256:	0151      	lsls	r1, r2, #5
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	440a      	add	r2, r1
 800325c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003260:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003264:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003272:	461a      	mov	r2, r3
 8003274:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003278:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800327a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800328a:	0151      	lsls	r1, r2, #5
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	440a      	add	r2, r1
 8003290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003294:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003298:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800329a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032aa:	0151      	lsls	r1, r2, #5
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	440a      	add	r2, r1
 80032b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80032b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032bc:	3301      	adds	r3, #1
 80032be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	791b      	ldrb	r3, [r3, #4]
 80032c4:	461a      	mov	r2, r3
 80032c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d3b2      	bcc.n	8003232 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032da:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80032de:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7bdb      	ldrb	r3, [r3, #15]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d016      	beq.n	8003316 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032f8:	f043 030b 	orr.w	r3, r3, #11
 80032fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800330e:	f043 030b 	orr.w	r3, r3, #11
 8003312:	6453      	str	r3, [r2, #68]	@ 0x44
 8003314:	e015      	b.n	8003342 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003324:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003328:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800332c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800333c:	f043 030b 	orr.w	r3, r3, #11
 8003340:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003350:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003354:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003364:	461a      	mov	r2, r3
 8003366:	f004 f8b5 	bl	80074d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f003 ffe4 	bl	800734c <USB_ReadInterrupts>
 8003384:	4603      	mov	r3, r0
 8003386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800338a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800338e:	d123      	bne.n	80033d8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f004 f87a 	bl	800748e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 f937 	bl	8006612 <USB_GetDevSpeed>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681c      	ldr	r4, [r3, #0]
 80033b0:	f001 f9c8 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 80033b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033ba:	461a      	mov	r2, r3
 80033bc:	4620      	mov	r0, r4
 80033be:	f002 fe3b 	bl	8006038 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f00d fdff 	bl	8010fc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80033d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f003 ffb5 	bl	800734c <USB_ReadInterrupts>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d10a      	bne.n	8003402 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f00d fddc 	bl	8010faa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f002 0208 	and.w	r2, r2, #8
 8003400:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f003 ffa0 	bl	800734c <USB_ReadInterrupts>
 800340c:	4603      	mov	r3, r0
 800340e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003412:	2b80      	cmp	r3, #128	@ 0x80
 8003414:	d123      	bne.n	800345e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003422:	2301      	movs	r3, #1
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
 8003426:	e014      	b.n	8003452 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d105      	bne.n	800344c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	b2db      	uxtb	r3, r3
 8003444:	4619      	mov	r1, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fb08 	bl	8003a5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	3301      	adds	r3, #1
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	791b      	ldrb	r3, [r3, #4]
 8003456:	461a      	mov	r2, r3
 8003458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345a:	4293      	cmp	r3, r2
 800345c:	d3e4      	bcc.n	8003428 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f003 ff72 	bl	800734c <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800346e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003472:	d13c      	bne.n	80034ee <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003474:	2301      	movs	r3, #1
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
 8003478:	e02b      	b.n	80034d2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3318      	adds	r3, #24
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d115      	bne.n	80034cc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	da12      	bge.n	80034cc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3317      	adds	r3, #23
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	4619      	mov	r1, r3
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fac8 	bl	8003a5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	3301      	adds	r3, #1
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	791b      	ldrb	r3, [r3, #4]
 80034d6:	461a      	mov	r2, r3
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	4293      	cmp	r3, r2
 80034dc:	d3cd      	bcc.n	800347a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80034ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f003 ff2a 	bl	800734c <USB_ReadInterrupts>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003502:	d156      	bne.n	80035b2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003504:	2301      	movs	r3, #1
 8003506:	627b      	str	r3, [r7, #36]	@ 0x24
 8003508:	e045      	b.n	8003596 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d12e      	bne.n	8003590 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003532:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003534:	2b00      	cmp	r3, #0
 8003536:	da2b      	bge.n	8003590 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003544:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003548:	429a      	cmp	r2, r3
 800354a:	d121      	bne.n	8003590 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003588:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800358c:	6053      	str	r3, [r2, #4]
            break;
 800358e:	e008      	b.n	80035a2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	3301      	adds	r3, #1
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	791b      	ldrb	r3, [r3, #4]
 800359a:	461a      	mov	r2, r3
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	4293      	cmp	r3, r2
 80035a0:	d3b3      	bcc.n	800350a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80035b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f003 fec8 	bl	800734c <USB_ReadInterrupts>
 80035bc:	4603      	mov	r3, r0
 80035be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c6:	d10a      	bne.n	80035de <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f00d fd73 	bl	80110b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80035dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f003 feb2 	bl	800734c <USB_ReadInterrupts>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d115      	bne.n	800361e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f00d fd63 	bl	80110d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	e000      	b.n	800361e <HAL_PCD_IRQHandler+0x93c>
      return;
 800361c:	bf00      	nop
    }
  }
}
 800361e:	3734      	adds	r7, #52	@ 0x34
 8003620:	46bd      	mov	sp, r7
 8003622:	bd90      	pop	{r4, r7, pc}

08003624 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_PCD_SetAddress+0x1a>
 800363a:	2302      	movs	r3, #2
 800363c:	e012      	b.n	8003664 <HAL_PCD_SetAddress+0x40>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f003 fe11 	bl	800727c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	4608      	mov	r0, r1
 8003676:	4611      	mov	r1, r2
 8003678:	461a      	mov	r2, r3
 800367a:	4603      	mov	r3, r0
 800367c:	70fb      	strb	r3, [r7, #3]
 800367e:	460b      	mov	r3, r1
 8003680:	803b      	strh	r3, [r7, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800368a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800368e:	2b00      	cmp	r3, #0
 8003690:	da0f      	bge.n	80036b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 020f 	and.w	r2, r3, #15
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	3310      	adds	r3, #16
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	3304      	adds	r3, #4
 80036a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	705a      	strb	r2, [r3, #1]
 80036b0:	e00f      	b.n	80036d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	f003 020f 	and.w	r2, r3, #15
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	3304      	adds	r3, #4
 80036ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036de:	883a      	ldrh	r2, [r7, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	78ba      	ldrb	r2, [r7, #2]
 80036e8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	785b      	ldrb	r3, [r3, #1]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d004      	beq.n	80036fc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036fc:	78bb      	ldrb	r3, [r7, #2]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d102      	bne.n	8003708 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_PCD_EP_Open+0xaa>
 8003712:	2302      	movs	r3, #2
 8003714:	e00e      	b.n	8003734 <HAL_PCD_EP_Open+0xc8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68f9      	ldr	r1, [r7, #12]
 8003724:	4618      	mov	r0, r3
 8003726:	f002 ff99 	bl	800665c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003732:	7afb      	ldrb	r3, [r7, #11]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800374c:	2b00      	cmp	r3, #0
 800374e:	da0f      	bge.n	8003770 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	f003 020f 	and.w	r2, r3, #15
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	3310      	adds	r3, #16
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	705a      	strb	r2, [r3, #1]
 800376e:	e00f      	b.n	8003790 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 020f 	and.w	r2, r3, #15
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	3304      	adds	r3, #4
 8003788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	b2da      	uxtb	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_PCD_EP_Close+0x6e>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e00e      	b.n	80037c8 <HAL_PCD_EP_Close+0x8c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68f9      	ldr	r1, [r7, #12]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f002 ffd7 	bl	800676c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	460b      	mov	r3, r1
 80037de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e0:	7afb      	ldrb	r3, [r7, #11]
 80037e2:	f003 020f 	and.w	r2, r3, #15
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	3304      	adds	r3, #4
 80037f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2200      	movs	r2, #0
 800380a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2200      	movs	r2, #0
 8003810:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003812:	7afb      	ldrb	r3, [r7, #11]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	b2da      	uxtb	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	799b      	ldrb	r3, [r3, #6]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d102      	bne.n	800382c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	799b      	ldrb	r3, [r3, #6]
 8003834:	461a      	mov	r2, r3
 8003836:	6979      	ldr	r1, [r7, #20]
 8003838:	f003 f874 	bl	8006924 <USB_EPStartXfer>

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	f003 020f 	and.w	r2, r3, #15
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003868:	681b      	ldr	r3, [r3, #0]
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	460b      	mov	r3, r1
 8003884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003886:	7afb      	ldrb	r3, [r7, #11]
 8003888:	f003 020f 	and.w	r2, r3, #15
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	3310      	adds	r3, #16
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	3304      	adds	r3, #4
 800389c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2200      	movs	r2, #0
 80038ae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2201      	movs	r2, #1
 80038b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b6:	7afb      	ldrb	r3, [r7, #11]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	799b      	ldrb	r3, [r3, #6]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d102      	bne.n	80038d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	799b      	ldrb	r3, [r3, #6]
 80038d8:	461a      	mov	r2, r3
 80038da:	6979      	ldr	r1, [r7, #20]
 80038dc:	f003 f822 	bl	8006924 <USB_EPStartXfer>

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	7912      	ldrb	r2, [r2, #4]
 8003900:	4293      	cmp	r3, r2
 8003902:	d901      	bls.n	8003908 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e04f      	b.n	80039a8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800390c:	2b00      	cmp	r3, #0
 800390e:	da0f      	bge.n	8003930 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	f003 020f 	and.w	r2, r3, #15
 8003916:	4613      	mov	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	3310      	adds	r3, #16
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	705a      	strb	r2, [r3, #1]
 800392e:	e00d      	b.n	800394c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	3304      	adds	r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_PCD_EP_SetStall+0x82>
 8003968:	2302      	movs	r3, #2
 800396a:	e01d      	b.n	80039a8 <HAL_PCD_EP_SetStall+0xbe>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68f9      	ldr	r1, [r7, #12]
 800397a:	4618      	mov	r0, r3
 800397c:	f003 fbaa 	bl	80070d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	7999      	ldrb	r1, [r3, #6]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003998:	461a      	mov	r2, r3
 800399a:	f003 fd9b 	bl	80074d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	7912      	ldrb	r2, [r2, #4]
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e042      	b.n	8003a54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da0f      	bge.n	80039f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 020f 	and.w	r2, r3, #15
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	3310      	adds	r3, #16
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	3304      	adds	r3, #4
 80039ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	705a      	strb	r2, [r3, #1]
 80039f4:	e00f      	b.n	8003a16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 020f 	and.w	r2, r3, #15
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_PCD_EP_ClrStall+0x86>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e00e      	b.n	8003a54 <HAL_PCD_EP_ClrStall+0xa4>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68f9      	ldr	r1, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f003 fbb3 	bl	80071b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	da0c      	bge.n	8003a8a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 020f 	and.w	r2, r3, #15
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	3310      	adds	r3, #16
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	e00c      	b.n	8003aa4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	f003 020f 	and.w	r2, r3, #15
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68f9      	ldr	r1, [r7, #12]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f003 f9d2 	bl	8006e54 <USB_EPStopXfer>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ab4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b08a      	sub	sp, #40	@ 0x28
 8003ac2:	af02      	add	r7, sp, #8
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	3310      	adds	r3, #16
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d901      	bls.n	8003af6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e06b      	b.n	8003bce <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d902      	bls.n	8003b12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3303      	adds	r3, #3
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b1a:	e02a      	b.n	8003b72 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d902      	bls.n	8003b38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	3303      	adds	r3, #3
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68d9      	ldr	r1, [r3, #12]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	4603      	mov	r3, r0
 8003b54:	6978      	ldr	r0, [r7, #20]
 8003b56:	f003 fa27 	bl	8006fa8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	441a      	add	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	441a      	add	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d809      	bhi.n	8003b9c <PCD_WriteEmptyTxFifo+0xde>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d203      	bcs.n	8003b9c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1bf      	bne.n	8003b1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d811      	bhi.n	8003bcc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	2201      	movs	r2, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	6939      	ldr	r1, [r7, #16]
 8003bc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bc8:	4013      	ands	r3, r2
 8003bca:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	333c      	adds	r3, #60	@ 0x3c
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	799b      	ldrb	r3, [r3, #6]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d17b      	bne.n	8003d06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4a61      	ldr	r2, [pc, #388]	@ (8003da0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	f240 80b9 	bls.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80b3 	beq.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c40:	6093      	str	r3, [r2, #8]
 8003c42:	e0a7      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	6093      	str	r3, [r2, #8]
 8003c60:	e098      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f040 8093 	bne.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	4a4b      	ldr	r2, [pc, #300]	@ (8003da0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d90f      	bls.n	8003c96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c92:	6093      	str	r3, [r2, #8]
 8003c94:	e07e      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3304      	adds	r3, #4
 8003caa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a1a      	ldr	r2, [r3, #32]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	0159      	lsls	r1, r3, #5
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d114      	bne.n	8003cf8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	f003 fbf6 	bl	80074d4 <USB_EP0_OutStart>
 8003ce8:	e006      	b.n	8003cf8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	441a      	add	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f00d f91e 	bl	8010f40 <HAL_PCD_DataOutStageCallback>
 8003d04:	e046      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	4a26      	ldr	r2, [pc, #152]	@ (8003da4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d124      	bne.n	8003d58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d24:	461a      	mov	r2, r3
 8003d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d2a:	6093      	str	r3, [r2, #8]
 8003d2c:	e032      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d44:	461a      	mov	r2, r3
 8003d46:	2320      	movs	r3, #32
 8003d48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f00d f8f5 	bl	8010f40 <HAL_PCD_DataOutStageCallback>
 8003d56:	e01d      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d114      	bne.n	8003d88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d108      	bne.n	8003d88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d80:	461a      	mov	r2, r3
 8003d82:	2100      	movs	r1, #0
 8003d84:	f003 fba6 	bl	80074d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f00d f8d6 	bl	8010f40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	4f54300a 	.word	0x4f54300a
 8003da4:	4f54310a 	.word	0x4f54310a

08003da8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	333c      	adds	r3, #60	@ 0x3c
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a15      	ldr	r2, [pc, #84]	@ (8003e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d90e      	bls.n	8003dfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df4:	461a      	mov	r2, r3
 8003df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f00d f88d 	bl	8010f1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a0a      	ldr	r2, [pc, #40]	@ (8003e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d90c      	bls.n	8003e24 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	799b      	ldrb	r3, [r3, #6]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d108      	bne.n	8003e24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2101      	movs	r1, #1
 8003e20:	f003 fb58 	bl	80074d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	4f54300a 	.word	0x4f54300a

08003e34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
 8003e40:	4613      	mov	r3, r2
 8003e42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d107      	bne.n	8003e62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e52:	883b      	ldrh	r3, [r7, #0]
 8003e54:	0419      	lsls	r1, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e60:	e028      	b.n	8003eb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e00d      	b.n	8003e92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	3340      	adds	r3, #64	@ 0x40
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4413      	add	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d3ec      	bcc.n	8003e76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e9c:	883b      	ldrh	r3, [r7, #0]
 8003e9e:	0418      	lsls	r0, r3, #16
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	4302      	orrs	r2, r0
 8003eac:	3340      	adds	r3, #64	@ 0x40
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e267      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d075      	beq.n	8004006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f1a:	4b88      	ldr	r3, [pc, #544]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d00c      	beq.n	8003f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f26:	4b85      	ldr	r3, [pc, #532]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d112      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f32:	4b82      	ldr	r3, [pc, #520]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f3e:	d10b      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f40:	4b7e      	ldr	r3, [pc, #504]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d05b      	beq.n	8004004 <HAL_RCC_OscConfig+0x108>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d157      	bne.n	8004004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e242      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f60:	d106      	bne.n	8003f70 <HAL_RCC_OscConfig+0x74>
 8003f62:	4b76      	ldr	r3, [pc, #472]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a75      	ldr	r2, [pc, #468]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e01d      	b.n	8003fac <HAL_RCC_OscConfig+0xb0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x98>
 8003f7a:	4b70      	ldr	r3, [pc, #448]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6f      	ldr	r2, [pc, #444]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b6d      	ldr	r3, [pc, #436]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6c      	ldr	r2, [pc, #432]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0xb0>
 8003f94:	4b69      	ldr	r3, [pc, #420]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a68      	ldr	r2, [pc, #416]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b66      	ldr	r3, [pc, #408]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a65      	ldr	r2, [pc, #404]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fe faa2 	bl	80024fc <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fe fa9e 	bl	80024fc <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	@ 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e207      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b5b      	ldr	r3, [pc, #364]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0xc0>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fa8e 	bl	80024fc <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fe fa8a 	bl	80024fc <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	@ 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1f3      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	4b51      	ldr	r3, [pc, #324]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0xe8>
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004012:	4b4a      	ldr	r3, [pc, #296]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401e:	4b47      	ldr	r3, [pc, #284]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004026:	2b08      	cmp	r3, #8
 8004028:	d11c      	bne.n	8004064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402a:	4b44      	ldr	r3, [pc, #272]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	4b41      	ldr	r3, [pc, #260]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x152>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e1c7      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b3b      	ldr	r3, [pc, #236]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4937      	ldr	r1, [pc, #220]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	e03a      	b.n	80040da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d020      	beq.n	80040ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406c:	4b34      	ldr	r3, [pc, #208]	@ (8004140 <HAL_RCC_OscConfig+0x244>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fe fa43 	bl	80024fc <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407a:	f7fe fa3f 	bl	80024fc <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e1a8      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408c:	4b2b      	ldr	r3, [pc, #172]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b28      	ldr	r3, [pc, #160]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4925      	ldr	r1, [pc, #148]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	e015      	b.n	80040da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b24      	ldr	r3, [pc, #144]	@ (8004140 <HAL_RCC_OscConfig+0x244>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fe fa22 	bl	80024fc <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040bc:	f7fe fa1e 	bl	80024fc <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e187      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ce:	4b1b      	ldr	r3, [pc, #108]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d036      	beq.n	8004154 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d016      	beq.n	800411c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ee:	4b15      	ldr	r3, [pc, #84]	@ (8004144 <HAL_RCC_OscConfig+0x248>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fe fa02 	bl	80024fc <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fe f9fe 	bl	80024fc <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e167      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410e:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x200>
 800411a:	e01b      	b.n	8004154 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411c:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <HAL_RCC_OscConfig+0x248>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004122:	f7fe f9eb 	bl	80024fc <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004128:	e00e      	b.n	8004148 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412a:	f7fe f9e7 	bl	80024fc <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d907      	bls.n	8004148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e150      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
 800413c:	40023800 	.word	0x40023800
 8004140:	42470000 	.word	0x42470000
 8004144:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004148:	4b88      	ldr	r3, [pc, #544]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800414a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1ea      	bne.n	800412a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8097 	beq.w	8004290 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004166:	4b81      	ldr	r3, [pc, #516]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10f      	bne.n	8004192 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	4b7d      	ldr	r3, [pc, #500]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	4a7c      	ldr	r2, [pc, #496]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004180:	6413      	str	r3, [r2, #64]	@ 0x40
 8004182:	4b7a      	ldr	r3, [pc, #488]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800418e:	2301      	movs	r3, #1
 8004190:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004192:	4b77      	ldr	r3, [pc, #476]	@ (8004370 <HAL_RCC_OscConfig+0x474>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d118      	bne.n	80041d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800419e:	4b74      	ldr	r3, [pc, #464]	@ (8004370 <HAL_RCC_OscConfig+0x474>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a73      	ldr	r2, [pc, #460]	@ (8004370 <HAL_RCC_OscConfig+0x474>)
 80041a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041aa:	f7fe f9a7 	bl	80024fc <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b2:	f7fe f9a3 	bl	80024fc <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e10c      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004370 <HAL_RCC_OscConfig+0x474>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_OscConfig+0x2ea>
 80041d8:	4b64      	ldr	r3, [pc, #400]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041dc:	4a63      	ldr	r2, [pc, #396]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e4:	e01c      	b.n	8004220 <HAL_RCC_OscConfig+0x324>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b05      	cmp	r3, #5
 80041ec:	d10c      	bne.n	8004208 <HAL_RCC_OscConfig+0x30c>
 80041ee:	4b5f      	ldr	r3, [pc, #380]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	4a5e      	ldr	r2, [pc, #376]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041f4:	f043 0304 	orr.w	r3, r3, #4
 80041f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041fa:	4b5c      	ldr	r3, [pc, #368]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fe:	4a5b      	ldr	r2, [pc, #364]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	6713      	str	r3, [r2, #112]	@ 0x70
 8004206:	e00b      	b.n	8004220 <HAL_RCC_OscConfig+0x324>
 8004208:	4b58      	ldr	r3, [pc, #352]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420c:	4a57      	ldr	r2, [pc, #348]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	6713      	str	r3, [r2, #112]	@ 0x70
 8004214:	4b55      	ldr	r3, [pc, #340]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004218:	4a54      	ldr	r2, [pc, #336]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800421a:	f023 0304 	bic.w	r3, r3, #4
 800421e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d015      	beq.n	8004254 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fe f968 	bl	80024fc <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422e:	e00a      	b.n	8004246 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004230:	f7fe f964 	bl	80024fc <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e0cb      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004246:	4b49      	ldr	r3, [pc, #292]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0ee      	beq.n	8004230 <HAL_RCC_OscConfig+0x334>
 8004252:	e014      	b.n	800427e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004254:	f7fe f952 	bl	80024fc <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800425a:	e00a      	b.n	8004272 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800425c:	f7fe f94e 	bl	80024fc <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e0b5      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004272:	4b3e      	ldr	r3, [pc, #248]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1ee      	bne.n	800425c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d105      	bne.n	8004290 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004284:	4b39      	ldr	r3, [pc, #228]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	4a38      	ldr	r2, [pc, #224]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800428a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800428e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 80a1 	beq.w	80043dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800429a:	4b34      	ldr	r3, [pc, #208]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d05c      	beq.n	8004360 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d141      	bne.n	8004332 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	4b31      	ldr	r3, [pc, #196]	@ (8004374 <HAL_RCC_OscConfig+0x478>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fe f922 	bl	80024fc <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fe f91e 	bl	80024fc <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e087      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ce:	4b27      	ldr	r3, [pc, #156]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69da      	ldr	r2, [r3, #28]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	019b      	lsls	r3, r3, #6
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	3b01      	subs	r3, #1
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	061b      	lsls	r3, r3, #24
 80042fe:	491b      	ldr	r1, [pc, #108]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004300:	4313      	orrs	r3, r2
 8004302:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004304:	4b1b      	ldr	r3, [pc, #108]	@ (8004374 <HAL_RCC_OscConfig+0x478>)
 8004306:	2201      	movs	r2, #1
 8004308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430a:	f7fe f8f7 	bl	80024fc <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004312:	f7fe f8f3 	bl	80024fc <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e05c      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004324:	4b11      	ldr	r3, [pc, #68]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x416>
 8004330:	e054      	b.n	80043dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	4b10      	ldr	r3, [pc, #64]	@ (8004374 <HAL_RCC_OscConfig+0x478>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fe f8e0 	bl	80024fc <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004340:	f7fe f8dc 	bl	80024fc <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e045      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	4b06      	ldr	r3, [pc, #24]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x444>
 800435e:	e03d      	b.n	80043dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d107      	bne.n	8004378 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e038      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
 800436c:	40023800 	.word	0x40023800
 8004370:	40007000 	.word	0x40007000
 8004374:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004378:	4b1b      	ldr	r3, [pc, #108]	@ (80043e8 <HAL_RCC_OscConfig+0x4ec>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d028      	beq.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d121      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d11a      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043a8:	4013      	ands	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d111      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	3b01      	subs	r3, #1
 80043c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d107      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800

080043ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0cc      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004400:	4b68      	ldr	r3, [pc, #416]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d90c      	bls.n	8004428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	4b65      	ldr	r3, [pc, #404]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004416:	4b63      	ldr	r3, [pc, #396]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0b8      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004440:	4b59      	ldr	r3, [pc, #356]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4a58      	ldr	r2, [pc, #352]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800444a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004458:	4b53      	ldr	r3, [pc, #332]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4a52      	ldr	r2, [pc, #328]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004464:	4b50      	ldr	r3, [pc, #320]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	494d      	ldr	r1, [pc, #308]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d044      	beq.n	800450c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d107      	bne.n	800449a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	4b47      	ldr	r3, [pc, #284]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d119      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e07f      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d003      	beq.n	80044aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d107      	bne.n	80044ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044aa:	4b3f      	ldr	r3, [pc, #252]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e06f      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ba:	4b3b      	ldr	r3, [pc, #236]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e067      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ca:	4b37      	ldr	r3, [pc, #220]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f023 0203 	bic.w	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4934      	ldr	r1, [pc, #208]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044dc:	f7fe f80e 	bl	80024fc <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e4:	f7fe f80a 	bl	80024fc <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e04f      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fa:	4b2b      	ldr	r3, [pc, #172]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 020c 	and.w	r2, r3, #12
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	429a      	cmp	r2, r3
 800450a:	d1eb      	bne.n	80044e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800450c:	4b25      	ldr	r3, [pc, #148]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d20c      	bcs.n	8004534 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b22      	ldr	r3, [pc, #136]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b20      	ldr	r3, [pc, #128]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d001      	beq.n	8004534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e032      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004540:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4916      	ldr	r1, [pc, #88]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800455e:	4b12      	ldr	r3, [pc, #72]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	490e      	ldr	r1, [pc, #56]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004572:	f000 f821 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8004576:	4602      	mov	r2, r0
 8004578:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	490a      	ldr	r1, [pc, #40]	@ (80045ac <HAL_RCC_ClockConfig+0x1c0>)
 8004584:	5ccb      	ldrb	r3, [r1, r3]
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	4a09      	ldr	r2, [pc, #36]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 800458c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800458e:	4b09      	ldr	r3, [pc, #36]	@ (80045b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fd fd54 	bl	8002040 <HAL_InitTick>

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40023c00 	.word	0x40023c00
 80045a8:	40023800 	.word	0x40023800
 80045ac:	08012cd8 	.word	0x08012cd8
 80045b0:	20000004 	.word	0x20000004
 80045b4:	20000008 	.word	0x20000008

080045b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045bc:	b090      	sub	sp, #64	@ 0x40
 80045be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c4:	2300      	movs	r3, #0
 80045c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045c8:	2300      	movs	r3, #0
 80045ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045d0:	4b59      	ldr	r3, [pc, #356]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x180>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 030c 	and.w	r3, r3, #12
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d00d      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x40>
 80045dc:	2b08      	cmp	r3, #8
 80045de:	f200 80a1 	bhi.w	8004724 <HAL_RCC_GetSysClockFreq+0x16c>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0x34>
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d003      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ea:	e09b      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045ec:	4b53      	ldr	r3, [pc, #332]	@ (800473c <HAL_RCC_GetSysClockFreq+0x184>)
 80045ee:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80045f0:	e09b      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045f2:	4b53      	ldr	r3, [pc, #332]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x188>)
 80045f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045f6:	e098      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x180>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004600:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004602:	4b4d      	ldr	r3, [pc, #308]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x180>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d028      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800460e:	4b4a      	ldr	r3, [pc, #296]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x180>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	099b      	lsrs	r3, r3, #6
 8004614:	2200      	movs	r2, #0
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	627a      	str	r2, [r7, #36]	@ 0x24
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004620:	2100      	movs	r1, #0
 8004622:	4b47      	ldr	r3, [pc, #284]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x188>)
 8004624:	fb03 f201 	mul.w	r2, r3, r1
 8004628:	2300      	movs	r3, #0
 800462a:	fb00 f303 	mul.w	r3, r0, r3
 800462e:	4413      	add	r3, r2
 8004630:	4a43      	ldr	r2, [pc, #268]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x188>)
 8004632:	fba0 1202 	umull	r1, r2, r0, r2
 8004636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004638:	460a      	mov	r2, r1
 800463a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800463c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800463e:	4413      	add	r3, r2
 8004640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004644:	2200      	movs	r2, #0
 8004646:	61bb      	str	r3, [r7, #24]
 8004648:	61fa      	str	r2, [r7, #28]
 800464a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800464e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004652:	f7fb fe1d 	bl	8000290 <__aeabi_uldivmod>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4613      	mov	r3, r2
 800465c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800465e:	e053      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004660:	4b35      	ldr	r3, [pc, #212]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x180>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	099b      	lsrs	r3, r3, #6
 8004666:	2200      	movs	r2, #0
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	617a      	str	r2, [r7, #20]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004672:	f04f 0b00 	mov.w	fp, #0
 8004676:	4652      	mov	r2, sl
 8004678:	465b      	mov	r3, fp
 800467a:	f04f 0000 	mov.w	r0, #0
 800467e:	f04f 0100 	mov.w	r1, #0
 8004682:	0159      	lsls	r1, r3, #5
 8004684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004688:	0150      	lsls	r0, r2, #5
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	ebb2 080a 	subs.w	r8, r2, sl
 8004692:	eb63 090b 	sbc.w	r9, r3, fp
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046aa:	ebb2 0408 	subs.w	r4, r2, r8
 80046ae:	eb63 0509 	sbc.w	r5, r3, r9
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	00eb      	lsls	r3, r5, #3
 80046bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046c0:	00e2      	lsls	r2, r4, #3
 80046c2:	4614      	mov	r4, r2
 80046c4:	461d      	mov	r5, r3
 80046c6:	eb14 030a 	adds.w	r3, r4, sl
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	eb45 030b 	adc.w	r3, r5, fp
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046de:	4629      	mov	r1, r5
 80046e0:	028b      	lsls	r3, r1, #10
 80046e2:	4621      	mov	r1, r4
 80046e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046e8:	4621      	mov	r1, r4
 80046ea:	028a      	lsls	r2, r1, #10
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f2:	2200      	movs	r2, #0
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	60fa      	str	r2, [r7, #12]
 80046f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046fc:	f7fb fdc8 	bl	8000290 <__aeabi_uldivmod>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4613      	mov	r3, r2
 8004706:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004708:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x180>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	3301      	adds	r3, #1
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004718:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004722:	e002      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b05      	ldr	r3, [pc, #20]	@ (800473c <HAL_RCC_GetSysClockFreq+0x184>)
 8004726:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800472a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800472c:	4618      	mov	r0, r3
 800472e:	3740      	adds	r7, #64	@ 0x40
 8004730:	46bd      	mov	sp, r7
 8004732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800
 800473c:	00f42400 	.word	0x00f42400
 8004740:	017d7840 	.word	0x017d7840

08004744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004748:	4b03      	ldr	r3, [pc, #12]	@ (8004758 <HAL_RCC_GetHCLKFreq+0x14>)
 800474a:	681b      	ldr	r3, [r3, #0]
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20000004 	.word	0x20000004

0800475c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004760:	f7ff fff0 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 8004764:	4602      	mov	r2, r0
 8004766:	4b05      	ldr	r3, [pc, #20]	@ (800477c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	0b5b      	lsrs	r3, r3, #13
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	4903      	ldr	r1, [pc, #12]	@ (8004780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004772:	5ccb      	ldrb	r3, [r1, r3]
 8004774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004778:	4618      	mov	r0, r3
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40023800 	.word	0x40023800
 8004780:	08012ce8 	.word	0x08012ce8

08004784 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	220f      	movs	r2, #15
 8004792:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004794:	4b12      	ldr	r3, [pc, #72]	@ (80047e0 <HAL_RCC_GetClockConfig+0x5c>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 0203 	and.w	r2, r3, #3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80047a0:	4b0f      	ldr	r3, [pc, #60]	@ (80047e0 <HAL_RCC_GetClockConfig+0x5c>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80047ac:	4b0c      	ldr	r3, [pc, #48]	@ (80047e0 <HAL_RCC_GetClockConfig+0x5c>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80047b8:	4b09      	ldr	r3, [pc, #36]	@ (80047e0 <HAL_RCC_GetClockConfig+0x5c>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	08db      	lsrs	r3, r3, #3
 80047be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047c6:	4b07      	ldr	r3, [pc, #28]	@ (80047e4 <HAL_RCC_GetClockConfig+0x60>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0207 	and.w	r2, r3, #7
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	601a      	str	r2, [r3, #0]
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40023800 	.word	0x40023800
 80047e4:	40023c00 	.word	0x40023c00

080047e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d105      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800480c:	2b00      	cmp	r3, #0
 800480e:	d038      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004810:	4b68      	ldr	r3, [pc, #416]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004816:	f7fd fe71 	bl	80024fc <HAL_GetTick>
 800481a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800481e:	f7fd fe6d 	bl	80024fc <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e0bd      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004830:	4b61      	ldr	r3, [pc, #388]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f0      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	019b      	lsls	r3, r3, #6
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	071b      	lsls	r3, r3, #28
 800484e:	495a      	ldr	r1, [pc, #360]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004856:	4b57      	ldr	r3, [pc, #348]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004858:	2201      	movs	r2, #1
 800485a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800485c:	f7fd fe4e 	bl	80024fc <HAL_GetTick>
 8004860:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004864:	f7fd fe4a 	bl	80024fc <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e09a      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004876:	4b50      	ldr	r3, [pc, #320]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 8083 	beq.w	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	4b48      	ldr	r3, [pc, #288]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004898:	4a47      	ldr	r2, [pc, #284]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800489e:	6413      	str	r3, [r2, #64]	@ 0x40
 80048a0:	4b45      	ldr	r3, [pc, #276]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80048ac:	4b43      	ldr	r3, [pc, #268]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a42      	ldr	r2, [pc, #264]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048b6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048b8:	f7fd fe20 	bl	80024fc <HAL_GetTick>
 80048bc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048c0:	f7fd fe1c 	bl	80024fc <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e06c      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048d2:	4b3a      	ldr	r3, [pc, #232]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048de:	4b36      	ldr	r3, [pc, #216]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d02f      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d028      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048fc:	4b2e      	ldr	r3, [pc, #184]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004904:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004906:	4b2e      	ldr	r3, [pc, #184]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800490c:	4b2c      	ldr	r3, [pc, #176]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004912:	4a29      	ldr	r2, [pc, #164]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004918:	4b27      	ldr	r3, [pc, #156]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b01      	cmp	r3, #1
 8004922:	d114      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004924:	f7fd fdea 	bl	80024fc <HAL_GetTick>
 8004928:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492a:	e00a      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492c:	f7fd fde6 	bl	80024fc <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e034      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004942:	4b1d      	ldr	r3, [pc, #116]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0ee      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800495a:	d10d      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800495c:	4b16      	ldr	r3, [pc, #88]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800496c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004970:	4911      	ldr	r1, [pc, #68]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
 8004976:	e005      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004978:	4b0f      	ldr	r3, [pc, #60]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4a0e      	ldr	r2, [pc, #56]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004982:	6093      	str	r3, [r2, #8]
 8004984:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004986:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004990:	4909      	ldr	r1, [pc, #36]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004992:	4313      	orrs	r3, r2
 8004994:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	7d1a      	ldrb	r2, [r3, #20]
 80049a6:	4b07      	ldr	r3, [pc, #28]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80049a8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	42470068 	.word	0x42470068
 80049b8:	40023800 	.word	0x40023800
 80049bc:	40007000 	.word	0x40007000
 80049c0:	42470e40 	.word	0x42470e40
 80049c4:	424711e0 	.word	0x424711e0

080049c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e073      	b.n	8004ac6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	7f5b      	ldrb	r3, [r3, #29]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d105      	bne.n	80049f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fd fa50 	bl	8001e94 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d055      	beq.n	8004ab4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	22ca      	movs	r2, #202	@ 0xca
 8004a0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2253      	movs	r2, #83	@ 0x53
 8004a16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f99d 	bl	8004d58 <RTC_EnterInitMode>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d12c      	bne.n	8004a82 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a3a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6899      	ldr	r1, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68d2      	ldr	r2, [r2, #12]
 8004a62:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6919      	ldr	r1, [r3, #16]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	041a      	lsls	r2, r3, #16
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f9a4 	bl	8004dc6 <RTC_ExitInitMode>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d110      	bne.n	8004aaa <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a96:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	22ff      	movs	r2, #255	@ 0xff
 8004ab0:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ab2:	e001      	b.n	8004ab8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d102      	bne.n	8004ac4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ace:	b590      	push	{r4, r7, lr}
 8004ad0:	b087      	sub	sp, #28
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	7f1b      	ldrb	r3, [r3, #28]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_RTC_SetTime+0x1c>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e087      	b.n	8004bfa <HAL_RTC_SetTime+0x12c>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2202      	movs	r2, #2
 8004af4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d126      	bne.n	8004b4a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d102      	bne.n	8004b10 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 f97b 	bl	8004e10 <RTC_ByteToBcd2>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	785b      	ldrb	r3, [r3, #1]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f974 	bl	8004e10 <RTC_ByteToBcd2>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b2c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	789b      	ldrb	r3, [r3, #2]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f96c 	bl	8004e10 <RTC_ByteToBcd2>
 8004b38:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b3a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	78db      	ldrb	r3, [r3, #3]
 8004b42:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	e018      	b.n	8004b7c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	785b      	ldrb	r3, [r3, #1]
 8004b68:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004b6a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004b70:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	78db      	ldrb	r3, [r3, #3]
 8004b76:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	22ca      	movs	r2, #202	@ 0xca
 8004b82:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2253      	movs	r2, #83	@ 0x53
 8004b8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f8e3 	bl	8004d58 <RTC_EnterInitMode>
 8004b92:	4603      	mov	r3, r0
 8004b94:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004b96:	7cfb      	ldrb	r3, [r7, #19]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d120      	bne.n	8004bde <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004ba6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004baa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004bba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6899      	ldr	r1, [r3, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f8f6 	bl	8004dc6 <RTC_ExitInitMode>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004bde:	7cfb      	ldrb	r3, [r7, #19]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	22ff      	movs	r2, #255	@ 0xff
 8004bf0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]

  return status;
 8004bf8:	7cfb      	ldrb	r3, [r7, #19]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd90      	pop	{r4, r7, pc}

08004c02 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c02:	b590      	push	{r4, r7, lr}
 8004c04:	b087      	sub	sp, #28
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	7f1b      	ldrb	r3, [r3, #28]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_RTC_SetDate+0x1c>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e071      	b.n	8004d02 <HAL_RTC_SetDate+0x100>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2202      	movs	r2, #2
 8004c28:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10e      	bne.n	8004c4e <HAL_RTC_SetDate+0x4c>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	785b      	ldrb	r3, [r3, #1]
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	785b      	ldrb	r3, [r3, #1]
 8004c40:	f023 0310 	bic.w	r3, r3, #16
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	330a      	adds	r3, #10
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d11c      	bne.n	8004c8e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	78db      	ldrb	r3, [r3, #3]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f8d9 	bl	8004e10 <RTC_ByteToBcd2>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f8d2 	bl	8004e10 <RTC_ByteToBcd2>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c70:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	789b      	ldrb	r3, [r3, #2]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f8ca 	bl	8004e10 <RTC_ByteToBcd2>
 8004c7c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c7e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e00e      	b.n	8004cac <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	78db      	ldrb	r3, [r3, #3]
 8004c92:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	785b      	ldrb	r3, [r3, #1]
 8004c98:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c9a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004ca0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	22ca      	movs	r2, #202	@ 0xca
 8004cb2:	625a      	str	r2, [r3, #36]	@ 0x24
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2253      	movs	r2, #83	@ 0x53
 8004cba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f84b 	bl	8004d58 <RTC_EnterInitMode>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004cc6:	7cfb      	ldrb	r3, [r7, #19]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10c      	bne.n	8004ce6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004cd6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004cda:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f872 	bl	8004dc6 <RTC_ExitInitMode>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004ce6:	7cfb      	ldrb	r3, [r7, #19]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	22ff      	movs	r2, #255	@ 0xff
 8004cf8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]

  return status;
 8004d00:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd90      	pop	{r4, r7, pc}
	...

08004d0c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d54 <HAL_RTC_WaitForSynchro+0x48>)
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d20:	f7fd fbec 	bl	80024fc <HAL_GetTick>
 8004d24:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d26:	e009      	b.n	8004d3c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d28:	f7fd fbe8 	bl	80024fc <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d36:	d901      	bls.n	8004d3c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e007      	b.n	8004d4c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0ee      	beq.n	8004d28 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	00013f5f 	.word	0x00013f5f

08004d58 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d122      	bne.n	8004dbc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d84:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d86:	f7fd fbb9 	bl	80024fc <HAL_GetTick>
 8004d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d8c:	e00c      	b.n	8004da8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d8e:	f7fd fbb5 	bl	80024fc <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d9c:	d904      	bls.n	8004da8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2204      	movs	r2, #4
 8004da2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d102      	bne.n	8004dbc <RTC_EnterInitMode+0x64>
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d1e8      	bne.n	8004d8e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004de0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff ff8b 	bl	8004d0c <HAL_RTC_WaitForSynchro>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2204      	movs	r2, #4
 8004e00:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004e1e:	e005      	b.n	8004e2c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3301      	adds	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	3b0a      	subs	r3, #10
 8004e2a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	2b09      	cmp	r3, #9
 8004e30:	d8f6      	bhi.n	8004e20 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	b2db      	uxtb	r3, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e07b      	b.n	8004f56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e6e:	d009      	beq.n	8004e84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	61da      	str	r2, [r3, #28]
 8004e76:	e005      	b.n	8004e84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fd f85a 	bl	8001f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f08:	ea42 0103 	orr.w	r1, r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	f003 0104 	and.w	r1, r3, #4
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	f003 0210 	and.w	r2, r3, #16
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b088      	sub	sp, #32
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	603b      	str	r3, [r7, #0]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_SPI_Transmit+0x22>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e12d      	b.n	80051dc <HAL_SPI_Transmit+0x27e>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f88:	f7fd fab8 	bl	80024fc <HAL_GetTick>
 8004f8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d002      	beq.n	8004fa4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fa2:	e116      	b.n	80051d2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_SPI_Transmit+0x52>
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fb4:	e10d      	b.n	80051d2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2203      	movs	r2, #3
 8004fba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	88fa      	ldrh	r2, [r7, #6]
 8004fce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	88fa      	ldrh	r2, [r7, #6]
 8004fd4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ffc:	d10f      	bne.n	800501e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800500c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800501c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005028:	2b40      	cmp	r3, #64	@ 0x40
 800502a:	d007      	beq.n	800503c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800503a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005044:	d14f      	bne.n	80050e6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <HAL_SPI_Transmit+0xf6>
 800504e:	8afb      	ldrh	r3, [r7, #22]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d142      	bne.n	80050da <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005058:	881a      	ldrh	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005064:	1c9a      	adds	r2, r3, #2
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005078:	e02f      	b.n	80050da <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b02      	cmp	r3, #2
 8005086:	d112      	bne.n	80050ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508c:	881a      	ldrh	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005098:	1c9a      	adds	r2, r3, #2
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050ac:	e015      	b.n	80050da <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ae:	f7fd fa25 	bl	80024fc <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d803      	bhi.n	80050c6 <HAL_SPI_Transmit+0x168>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d102      	bne.n	80050cc <HAL_SPI_Transmit+0x16e>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d106      	bne.n	80050da <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80050d8:	e07b      	b.n	80051d2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ca      	bne.n	800507a <HAL_SPI_Transmit+0x11c>
 80050e4:	e050      	b.n	8005188 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_SPI_Transmit+0x196>
 80050ee:	8afb      	ldrh	r3, [r7, #22]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d144      	bne.n	800517e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	7812      	ldrb	r2, [r2, #0]
 8005100:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800511a:	e030      	b.n	800517e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b02      	cmp	r3, #2
 8005128:	d113      	bne.n	8005152 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	7812      	ldrb	r2, [r2, #0]
 8005136:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005150:	e015      	b.n	800517e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005152:	f7fd f9d3 	bl	80024fc <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d803      	bhi.n	800516a <HAL_SPI_Transmit+0x20c>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d102      	bne.n	8005170 <HAL_SPI_Transmit+0x212>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800517c:	e029      	b.n	80051d2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1c9      	bne.n	800511c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	6839      	ldr	r1, [r7, #0]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fa61 	bl	8005654 <SPI_EndRxTxTransaction>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051a6:	2300      	movs	r3, #0
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e003      	b.n	80051d2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80051da:	7ffb      	ldrb	r3, [r7, #31]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3720      	adds	r7, #32
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08c      	sub	sp, #48	@ 0x30
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051f2:	2301      	movs	r3, #1
 80051f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_SPI_TransmitReceive+0x26>
 8005206:	2302      	movs	r3, #2
 8005208:	e198      	b.n	800553c <HAL_SPI_TransmitReceive+0x358>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005212:	f7fd f973 	bl	80024fc <HAL_GetTick>
 8005216:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005228:	887b      	ldrh	r3, [r7, #2]
 800522a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800522c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005230:	2b01      	cmp	r3, #1
 8005232:	d00f      	beq.n	8005254 <HAL_SPI_TransmitReceive+0x70>
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800523a:	d107      	bne.n	800524c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d103      	bne.n	800524c <HAL_SPI_TransmitReceive+0x68>
 8005244:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005248:	2b04      	cmp	r3, #4
 800524a:	d003      	beq.n	8005254 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800524c:	2302      	movs	r3, #2
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005252:	e16d      	b.n	8005530 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_SPI_TransmitReceive+0x82>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <HAL_SPI_TransmitReceive+0x82>
 8005260:	887b      	ldrh	r3, [r7, #2]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800526c:	e160      	b.n	8005530 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b04      	cmp	r3, #4
 8005278:	d003      	beq.n	8005282 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2205      	movs	r2, #5
 800527e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	887a      	ldrh	r2, [r7, #2]
 8005292:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	887a      	ldrh	r2, [r7, #2]
 8005298:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	887a      	ldrh	r2, [r7, #2]
 80052a4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	887a      	ldrh	r2, [r7, #2]
 80052aa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c2:	2b40      	cmp	r3, #64	@ 0x40
 80052c4:	d007      	beq.n	80052d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052de:	d17c      	bne.n	80053da <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <HAL_SPI_TransmitReceive+0x10a>
 80052e8:	8b7b      	ldrh	r3, [r7, #26]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d16a      	bne.n	80053c4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f2:	881a      	ldrh	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fe:	1c9a      	adds	r2, r3, #2
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005312:	e057      	b.n	80053c4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d11b      	bne.n	800535a <HAL_SPI_TransmitReceive+0x176>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d016      	beq.n	800535a <HAL_SPI_TransmitReceive+0x176>
 800532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532e:	2b01      	cmp	r3, #1
 8005330:	d113      	bne.n	800535a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005336:	881a      	ldrh	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005342:	1c9a      	adds	r2, r3, #2
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b01      	cmp	r3, #1
 8005366:	d119      	bne.n	800539c <HAL_SPI_TransmitReceive+0x1b8>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d014      	beq.n	800539c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537c:	b292      	uxth	r2, r2
 800537e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	1c9a      	adds	r2, r3, #2
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005398:	2301      	movs	r3, #1
 800539a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800539c:	f7fd f8ae 	bl	80024fc <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d80b      	bhi.n	80053c4 <HAL_SPI_TransmitReceive+0x1e0>
 80053ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b2:	d007      	beq.n	80053c4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80053c2:	e0b5      	b.n	8005530 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1a2      	bne.n	8005314 <HAL_SPI_TransmitReceive+0x130>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d19d      	bne.n	8005314 <HAL_SPI_TransmitReceive+0x130>
 80053d8:	e080      	b.n	80054dc <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_SPI_TransmitReceive+0x204>
 80053e2:	8b7b      	ldrh	r3, [r7, #26]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d16f      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	330c      	adds	r3, #12
 80053f2:	7812      	ldrb	r2, [r2, #0]
 80053f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800540e:	e05b      	b.n	80054c8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b02      	cmp	r3, #2
 800541c:	d11c      	bne.n	8005458 <HAL_SPI_TransmitReceive+0x274>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d017      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x274>
 8005428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542a:	2b01      	cmp	r3, #1
 800542c:	d114      	bne.n	8005458 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	330c      	adds	r3, #12
 8005438:	7812      	ldrb	r2, [r2, #0]
 800543a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b01      	cmp	r3, #1
 8005464:	d119      	bne.n	800549a <HAL_SPI_TransmitReceive+0x2b6>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d014      	beq.n	800549a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005496:	2301      	movs	r3, #1
 8005498:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800549a:	f7fd f82f 	bl	80024fc <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d803      	bhi.n	80054b2 <HAL_SPI_TransmitReceive+0x2ce>
 80054aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d102      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x2d4>
 80054b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d107      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80054c6:	e033      	b.n	8005530 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d19e      	bne.n	8005410 <HAL_SPI_TransmitReceive+0x22c>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d199      	bne.n	8005410 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f8b7 	bl	8005654 <SPI_EndRxTxTransaction>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d006      	beq.n	80054fa <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80054f8:	e01a      	b.n	8005530 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005526:	e003      	b.n	8005530 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005538:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800553c:	4618      	mov	r0, r3
 800553e:	3730      	adds	r7, #48	@ 0x30
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	4613      	mov	r3, r2
 8005552:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005554:	f7fc ffd2 	bl	80024fc <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	4413      	add	r3, r2
 8005562:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005564:	f7fc ffca 	bl	80024fc <HAL_GetTick>
 8005568:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800556a:	4b39      	ldr	r3, [pc, #228]	@ (8005650 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	015b      	lsls	r3, r3, #5
 8005570:	0d1b      	lsrs	r3, r3, #20
 8005572:	69fa      	ldr	r2, [r7, #28]
 8005574:	fb02 f303 	mul.w	r3, r2, r3
 8005578:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800557a:	e054      	b.n	8005626 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	d050      	beq.n	8005626 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005584:	f7fc ffba 	bl	80024fc <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	429a      	cmp	r2, r3
 8005592:	d902      	bls.n	800559a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d13d      	bne.n	8005616 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055b2:	d111      	bne.n	80055d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055bc:	d004      	beq.n	80055c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c6:	d107      	bne.n	80055d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e0:	d10f      	bne.n	8005602 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005600:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e017      	b.n	8005646 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	3b01      	subs	r3, #1
 8005624:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4013      	ands	r3, r2
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	429a      	cmp	r2, r3
 8005634:	bf0c      	ite	eq
 8005636:	2301      	moveq	r3, #1
 8005638:	2300      	movne	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	429a      	cmp	r2, r3
 8005642:	d19b      	bne.n	800557c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3720      	adds	r7, #32
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000004 	.word	0x20000004

08005654 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2201      	movs	r2, #1
 8005668:	2102      	movs	r1, #2
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff ff6a 	bl	8005544 <SPI_WaitFlagStateUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567a:	f043 0220 	orr.w	r2, r3, #32
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e032      	b.n	80056ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005686:	4b1b      	ldr	r3, [pc, #108]	@ (80056f4 <SPI_EndRxTxTransaction+0xa0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1b      	ldr	r2, [pc, #108]	@ (80056f8 <SPI_EndRxTxTransaction+0xa4>)
 800568c:	fba2 2303 	umull	r2, r3, r2, r3
 8005690:	0d5b      	lsrs	r3, r3, #21
 8005692:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056a4:	d112      	bne.n	80056cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2180      	movs	r1, #128	@ 0x80
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f7ff ff47 	bl	8005544 <SPI_WaitFlagStateUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d016      	beq.n	80056ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c0:	f043 0220 	orr.w	r2, r3, #32
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e00f      	b.n	80056ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e2:	2b80      	cmp	r3, #128	@ 0x80
 80056e4:	d0f2      	beq.n	80056cc <SPI_EndRxTxTransaction+0x78>
 80056e6:	e000      	b.n	80056ea <SPI_EndRxTxTransaction+0x96>
        break;
 80056e8:	bf00      	nop
  }

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000004 	.word	0x20000004
 80056f8:	165e9f81 	.word	0x165e9f81

080056fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e041      	b.n	8005792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fc fe6a 	bl	80023fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3304      	adds	r3, #4
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f000 fa70 	bl	8005c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d001      	beq.n	80057b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e044      	b.n	800583e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a1e      	ldr	r2, [pc, #120]	@ (800584c <HAL_TIM_Base_Start_IT+0xb0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d018      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x6c>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057de:	d013      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x6c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005850 <HAL_TIM_Base_Start_IT+0xb4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00e      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x6c>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a19      	ldr	r2, [pc, #100]	@ (8005854 <HAL_TIM_Base_Start_IT+0xb8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d009      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x6c>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a17      	ldr	r2, [pc, #92]	@ (8005858 <HAL_TIM_Base_Start_IT+0xbc>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d004      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x6c>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a16      	ldr	r2, [pc, #88]	@ (800585c <HAL_TIM_Base_Start_IT+0xc0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d111      	bne.n	800582c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b06      	cmp	r3, #6
 8005818:	d010      	beq.n	800583c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f042 0201 	orr.w	r2, r2, #1
 8005828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582a:	e007      	b.n	800583c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0201 	orr.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40010000 	.word	0x40010000
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800
 8005858:	40000c00 	.word	0x40000c00
 800585c:	40014000 	.word	0x40014000

08005860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d020      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01b      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0202 	mvn.w	r2, #2
 8005894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f999 	bl	8005be2 <HAL_TIM_IC_CaptureCallback>
 80058b0:	e005      	b.n	80058be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f98b 	bl	8005bce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f99c 	bl	8005bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d020      	beq.n	8005910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01b      	beq.n	8005910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0204 	mvn.w	r2, #4
 80058e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f973 	bl	8005be2 <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f965 	bl	8005bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f976 	bl	8005bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d020      	beq.n	800595c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0208 	mvn.w	r2, #8
 800592c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2204      	movs	r2, #4
 8005932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f94d 	bl	8005be2 <HAL_TIM_IC_CaptureCallback>
 8005948:	e005      	b.n	8005956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f93f 	bl	8005bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f950 	bl	8005bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	d020      	beq.n	80059a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01b      	beq.n	80059a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0210 	mvn.w	r2, #16
 8005978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2208      	movs	r2, #8
 800597e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f927 	bl	8005be2 <HAL_TIM_IC_CaptureCallback>
 8005994:	e005      	b.n	80059a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f919 	bl	8005bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f92a 	bl	8005bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00c      	beq.n	80059cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0201 	mvn.w	r2, #1
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fc f9f2 	bl	8001db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00c      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80059e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fab6 	bl	8005f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00c      	beq.n	8005a14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f8fb 	bl	8005c0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00c      	beq.n	8005a38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d007      	beq.n	8005a38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0220 	mvn.w	r2, #32
 8005a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fa88 	bl	8005f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_TIM_ConfigClockSource+0x1c>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e0b4      	b.n	8005bc6 <HAL_TIM_ConfigClockSource+0x186>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a94:	d03e      	beq.n	8005b14 <HAL_TIM_ConfigClockSource+0xd4>
 8005a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a9a:	f200 8087 	bhi.w	8005bac <HAL_TIM_ConfigClockSource+0x16c>
 8005a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa2:	f000 8086 	beq.w	8005bb2 <HAL_TIM_ConfigClockSource+0x172>
 8005aa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aaa:	d87f      	bhi.n	8005bac <HAL_TIM_ConfigClockSource+0x16c>
 8005aac:	2b70      	cmp	r3, #112	@ 0x70
 8005aae:	d01a      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0xa6>
 8005ab0:	2b70      	cmp	r3, #112	@ 0x70
 8005ab2:	d87b      	bhi.n	8005bac <HAL_TIM_ConfigClockSource+0x16c>
 8005ab4:	2b60      	cmp	r3, #96	@ 0x60
 8005ab6:	d050      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x11a>
 8005ab8:	2b60      	cmp	r3, #96	@ 0x60
 8005aba:	d877      	bhi.n	8005bac <HAL_TIM_ConfigClockSource+0x16c>
 8005abc:	2b50      	cmp	r3, #80	@ 0x50
 8005abe:	d03c      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0xfa>
 8005ac0:	2b50      	cmp	r3, #80	@ 0x50
 8005ac2:	d873      	bhi.n	8005bac <HAL_TIM_ConfigClockSource+0x16c>
 8005ac4:	2b40      	cmp	r3, #64	@ 0x40
 8005ac6:	d058      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x13a>
 8005ac8:	2b40      	cmp	r3, #64	@ 0x40
 8005aca:	d86f      	bhi.n	8005bac <HAL_TIM_ConfigClockSource+0x16c>
 8005acc:	2b30      	cmp	r3, #48	@ 0x30
 8005ace:	d064      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x15a>
 8005ad0:	2b30      	cmp	r3, #48	@ 0x30
 8005ad2:	d86b      	bhi.n	8005bac <HAL_TIM_ConfigClockSource+0x16c>
 8005ad4:	2b20      	cmp	r3, #32
 8005ad6:	d060      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x15a>
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d867      	bhi.n	8005bac <HAL_TIM_ConfigClockSource+0x16c>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d05c      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x15a>
 8005ae0:	2b10      	cmp	r3, #16
 8005ae2:	d05a      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x15a>
 8005ae4:	e062      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005af6:	f000 f999 	bl	8005e2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	609a      	str	r2, [r3, #8]
      break;
 8005b12:	e04f      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b24:	f000 f982 	bl	8005e2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b36:	609a      	str	r2, [r3, #8]
      break;
 8005b38:	e03c      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b46:	461a      	mov	r2, r3
 8005b48:	f000 f8f6 	bl	8005d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2150      	movs	r1, #80	@ 0x50
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 f94f 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 8005b58:	e02c      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b66:	461a      	mov	r2, r3
 8005b68:	f000 f915 	bl	8005d96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2160      	movs	r1, #96	@ 0x60
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 f93f 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 8005b78:	e01c      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b86:	461a      	mov	r2, r3
 8005b88:	f000 f8d6 	bl	8005d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2140      	movs	r1, #64	@ 0x40
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f92f 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 8005b98:	e00c      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	f000 f926 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 8005baa:	e003      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb0:	e000      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a3a      	ldr	r2, [pc, #232]	@ (8005d1c <TIM_Base_SetConfig+0xfc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00f      	beq.n	8005c58 <TIM_Base_SetConfig+0x38>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3e:	d00b      	beq.n	8005c58 <TIM_Base_SetConfig+0x38>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a37      	ldr	r2, [pc, #220]	@ (8005d20 <TIM_Base_SetConfig+0x100>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d007      	beq.n	8005c58 <TIM_Base_SetConfig+0x38>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a36      	ldr	r2, [pc, #216]	@ (8005d24 <TIM_Base_SetConfig+0x104>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_Base_SetConfig+0x38>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a35      	ldr	r2, [pc, #212]	@ (8005d28 <TIM_Base_SetConfig+0x108>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d108      	bne.n	8005c6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8005d1c <TIM_Base_SetConfig+0xfc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01b      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c78:	d017      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a28      	ldr	r2, [pc, #160]	@ (8005d20 <TIM_Base_SetConfig+0x100>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d013      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a27      	ldr	r2, [pc, #156]	@ (8005d24 <TIM_Base_SetConfig+0x104>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00f      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a26      	ldr	r2, [pc, #152]	@ (8005d28 <TIM_Base_SetConfig+0x108>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00b      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a25      	ldr	r2, [pc, #148]	@ (8005d2c <TIM_Base_SetConfig+0x10c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d007      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a24      	ldr	r2, [pc, #144]	@ (8005d30 <TIM_Base_SetConfig+0x110>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a23      	ldr	r2, [pc, #140]	@ (8005d34 <TIM_Base_SetConfig+0x114>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d108      	bne.n	8005cbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8005d1c <TIM_Base_SetConfig+0xfc>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d103      	bne.n	8005cf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d105      	bne.n	8005d0e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	611a      	str	r2, [r3, #16]
  }
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40010000 	.word	0x40010000
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800
 8005d28:	40000c00 	.word	0x40000c00
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800

08005d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f023 0201 	bic.w	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f023 030a 	bic.w	r3, r3, #10
 8005d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b087      	sub	sp, #28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	f023 0210 	bic.w	r2, r3, #16
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	031b      	lsls	r3, r3, #12
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005dd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b085      	sub	sp, #20
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f043 0307 	orr.w	r3, r3, #7
 8005e18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	609a      	str	r2, [r3, #8]
}
 8005e20:	bf00      	nop
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	021a      	lsls	r2, r3, #8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	609a      	str	r2, [r3, #8]
}
 8005e60:	bf00      	nop
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e050      	b.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d018      	beq.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed0:	d013      	beq.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a18      	ldr	r2, [pc, #96]	@ (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00e      	beq.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a16      	ldr	r2, [pc, #88]	@ (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d009      	beq.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a15      	ldr	r2, [pc, #84]	@ (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d004      	beq.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a13      	ldr	r2, [pc, #76]	@ (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d10c      	bne.n	8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	40010000 	.word	0x40010000
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40000c00 	.word	0x40000c00
 8005f44:	40014000 	.word	0x40014000

08005f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f70:	b084      	sub	sp, #16
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	f107 001c 	add.w	r0, r7, #28
 8005f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d123      	bne.n	8005fd2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005f9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d105      	bne.n	8005fc6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 fae2 	bl	8007590 <USB_CoreReset>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]
 8005fd0:	e01b      	b.n	800600a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f001 fad6 	bl	8007590 <USB_CoreReset>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fe8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d106      	bne.n	8005ffe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ffc:	e005      	b.n	800600a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006002:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800600a:	7fbb      	ldrb	r3, [r7, #30]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d10b      	bne.n	8006028 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f043 0206 	orr.w	r2, r3, #6
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f043 0220 	orr.w	r2, r3, #32
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006034:	b004      	add	sp, #16
 8006036:	4770      	bx	lr

08006038 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	4613      	mov	r3, r2
 8006044:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d165      	bne.n	8006118 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4a41      	ldr	r2, [pc, #260]	@ (8006154 <USB_SetTurnaroundTime+0x11c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d906      	bls.n	8006062 <USB_SetTurnaroundTime+0x2a>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4a40      	ldr	r2, [pc, #256]	@ (8006158 <USB_SetTurnaroundTime+0x120>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d202      	bcs.n	8006062 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800605c:	230f      	movs	r3, #15
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	e062      	b.n	8006128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	4a3c      	ldr	r2, [pc, #240]	@ (8006158 <USB_SetTurnaroundTime+0x120>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d306      	bcc.n	8006078 <USB_SetTurnaroundTime+0x40>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4a3b      	ldr	r2, [pc, #236]	@ (800615c <USB_SetTurnaroundTime+0x124>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d202      	bcs.n	8006078 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006072:	230e      	movs	r3, #14
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	e057      	b.n	8006128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4a38      	ldr	r2, [pc, #224]	@ (800615c <USB_SetTurnaroundTime+0x124>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d306      	bcc.n	800608e <USB_SetTurnaroundTime+0x56>
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4a37      	ldr	r2, [pc, #220]	@ (8006160 <USB_SetTurnaroundTime+0x128>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d202      	bcs.n	800608e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006088:	230d      	movs	r3, #13
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e04c      	b.n	8006128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	4a33      	ldr	r2, [pc, #204]	@ (8006160 <USB_SetTurnaroundTime+0x128>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d306      	bcc.n	80060a4 <USB_SetTurnaroundTime+0x6c>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	4a32      	ldr	r2, [pc, #200]	@ (8006164 <USB_SetTurnaroundTime+0x12c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d802      	bhi.n	80060a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800609e:	230c      	movs	r3, #12
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	e041      	b.n	8006128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	4a2f      	ldr	r2, [pc, #188]	@ (8006164 <USB_SetTurnaroundTime+0x12c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d906      	bls.n	80060ba <USB_SetTurnaroundTime+0x82>
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4a2e      	ldr	r2, [pc, #184]	@ (8006168 <USB_SetTurnaroundTime+0x130>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d802      	bhi.n	80060ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80060b4:	230b      	movs	r3, #11
 80060b6:	617b      	str	r3, [r7, #20]
 80060b8:	e036      	b.n	8006128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006168 <USB_SetTurnaroundTime+0x130>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d906      	bls.n	80060d0 <USB_SetTurnaroundTime+0x98>
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	4a29      	ldr	r2, [pc, #164]	@ (800616c <USB_SetTurnaroundTime+0x134>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d802      	bhi.n	80060d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80060ca:	230a      	movs	r3, #10
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	e02b      	b.n	8006128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4a26      	ldr	r2, [pc, #152]	@ (800616c <USB_SetTurnaroundTime+0x134>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d906      	bls.n	80060e6 <USB_SetTurnaroundTime+0xae>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4a25      	ldr	r2, [pc, #148]	@ (8006170 <USB_SetTurnaroundTime+0x138>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d202      	bcs.n	80060e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80060e0:	2309      	movs	r3, #9
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	e020      	b.n	8006128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	4a21      	ldr	r2, [pc, #132]	@ (8006170 <USB_SetTurnaroundTime+0x138>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d306      	bcc.n	80060fc <USB_SetTurnaroundTime+0xc4>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	4a20      	ldr	r2, [pc, #128]	@ (8006174 <USB_SetTurnaroundTime+0x13c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d802      	bhi.n	80060fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80060f6:	2308      	movs	r3, #8
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	e015      	b.n	8006128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006174 <USB_SetTurnaroundTime+0x13c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d906      	bls.n	8006112 <USB_SetTurnaroundTime+0xda>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4a1c      	ldr	r2, [pc, #112]	@ (8006178 <USB_SetTurnaroundTime+0x140>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d202      	bcs.n	8006112 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800610c:	2307      	movs	r3, #7
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	e00a      	b.n	8006128 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006112:	2306      	movs	r3, #6
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	e007      	b.n	8006128 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d102      	bne.n	8006124 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800611e:	2309      	movs	r3, #9
 8006120:	617b      	str	r3, [r7, #20]
 8006122:	e001      	b.n	8006128 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006124:	2309      	movs	r3, #9
 8006126:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	029b      	lsls	r3, r3, #10
 800613c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006140:	431a      	orrs	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	00d8acbf 	.word	0x00d8acbf
 8006158:	00e4e1c0 	.word	0x00e4e1c0
 800615c:	00f42400 	.word	0x00f42400
 8006160:	01067380 	.word	0x01067380
 8006164:	011a499f 	.word	0x011a499f
 8006168:	01312cff 	.word	0x01312cff
 800616c:	014ca43f 	.word	0x014ca43f
 8006170:	016e3600 	.word	0x016e3600
 8006174:	01a6ab1f 	.word	0x01a6ab1f
 8006178:	01e84800 	.word	0x01e84800

0800617c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f043 0201 	orr.w	r2, r3, #1
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f023 0201 	bic.w	r2, r3, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d115      	bne.n	800620e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061ee:	200a      	movs	r0, #10
 80061f0:	f7fc f990 	bl	8002514 <HAL_Delay>
      ms += 10U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	330a      	adds	r3, #10
 80061f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f001 f939 	bl	8007472 <USB_GetMode>
 8006200:	4603      	mov	r3, r0
 8006202:	2b01      	cmp	r3, #1
 8006204:	d01e      	beq.n	8006244 <USB_SetCurrentMode+0x84>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2bc7      	cmp	r3, #199	@ 0xc7
 800620a:	d9f0      	bls.n	80061ee <USB_SetCurrentMode+0x2e>
 800620c:	e01a      	b.n	8006244 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d115      	bne.n	8006240 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006220:	200a      	movs	r0, #10
 8006222:	f7fc f977 	bl	8002514 <HAL_Delay>
      ms += 10U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	330a      	adds	r3, #10
 800622a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 f920 	bl	8007472 <USB_GetMode>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <USB_SetCurrentMode+0x84>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2bc7      	cmp	r3, #199	@ 0xc7
 800623c:	d9f0      	bls.n	8006220 <USB_SetCurrentMode+0x60>
 800623e:	e001      	b.n	8006244 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e005      	b.n	8006250 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2bc8      	cmp	r3, #200	@ 0xc8
 8006248:	d101      	bne.n	800624e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006258:	b084      	sub	sp, #16
 800625a:	b580      	push	{r7, lr}
 800625c:	b086      	sub	sp, #24
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006272:	2300      	movs	r3, #0
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	e009      	b.n	800628c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	3340      	adds	r3, #64	@ 0x40
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	2200      	movs	r2, #0
 8006284:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	3301      	adds	r3, #1
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2b0e      	cmp	r3, #14
 8006290:	d9f2      	bls.n	8006278 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006292:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006296:	2b00      	cmp	r3, #0
 8006298:	d11c      	bne.n	80062d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062a8:	f043 0302 	orr.w	r3, r3, #2
 80062ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80062d2:	e00b      	b.n	80062ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062f2:	461a      	mov	r2, r3
 80062f4:	2300      	movs	r3, #0
 80062f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d10d      	bne.n	800631c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006304:	2b00      	cmp	r3, #0
 8006306:	d104      	bne.n	8006312 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006308:	2100      	movs	r1, #0
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f968 	bl	80065e0 <USB_SetDevSpeed>
 8006310:	e008      	b.n	8006324 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006312:	2101      	movs	r1, #1
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f963 	bl	80065e0 <USB_SetDevSpeed>
 800631a:	e003      	b.n	8006324 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800631c:	2103      	movs	r1, #3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f95e 	bl	80065e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006324:	2110      	movs	r1, #16
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f8fa 	bl	8006520 <USB_FlushTxFifo>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f924 	bl	8006584 <USB_FlushRxFifo>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800634c:	461a      	mov	r2, r3
 800634e:	2300      	movs	r3, #0
 8006350:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006358:	461a      	mov	r2, r3
 800635a:	2300      	movs	r3, #0
 800635c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006364:	461a      	mov	r2, r3
 8006366:	2300      	movs	r3, #0
 8006368:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800636a:	2300      	movs	r3, #0
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	e043      	b.n	80063f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006382:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006386:	d118      	bne.n	80063ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10a      	bne.n	80063a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800639a:	461a      	mov	r2, r3
 800639c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e013      	b.n	80063cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b0:	461a      	mov	r2, r3
 80063b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	e008      	b.n	80063cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c6:	461a      	mov	r2, r3
 80063c8:	2300      	movs	r3, #0
 80063ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d8:	461a      	mov	r2, r3
 80063da:	2300      	movs	r3, #0
 80063dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ea:	461a      	mov	r2, r3
 80063ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	3301      	adds	r3, #1
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063fc:	461a      	mov	r2, r3
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	4293      	cmp	r3, r2
 8006402:	d3b5      	bcc.n	8006370 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006404:	2300      	movs	r3, #0
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	e043      	b.n	8006492 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800641c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006420:	d118      	bne.n	8006454 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006434:	461a      	mov	r2, r3
 8006436:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	e013      	b.n	8006466 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800644a:	461a      	mov	r2, r3
 800644c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	e008      	b.n	8006466 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006460:	461a      	mov	r2, r3
 8006462:	2300      	movs	r3, #0
 8006464:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006472:	461a      	mov	r2, r3
 8006474:	2300      	movs	r3, #0
 8006476:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006484:	461a      	mov	r2, r3
 8006486:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800648a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	3301      	adds	r3, #1
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006496:	461a      	mov	r2, r3
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	4293      	cmp	r3, r2
 800649c:	d3b5      	bcc.n	800640a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80064be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d105      	bne.n	80064d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f043 0210 	orr.w	r2, r3, #16
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699a      	ldr	r2, [r3, #24]
 80064d8:	4b10      	ldr	r3, [pc, #64]	@ (800651c <USB_DevInit+0x2c4>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	f043 0208 	orr.w	r2, r3, #8
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d107      	bne.n	800650c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006504:	f043 0304 	orr.w	r3, r3, #4
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006518:	b004      	add	sp, #16
 800651a:	4770      	bx	lr
 800651c:	803c3800 	.word	0x803c3800

08006520 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3301      	adds	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800653a:	d901      	bls.n	8006540 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e01b      	b.n	8006578 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	daf2      	bge.n	800652e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	019b      	lsls	r3, r3, #6
 8006550:	f043 0220 	orr.w	r2, r3, #32
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3301      	adds	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006564:	d901      	bls.n	800656a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e006      	b.n	8006578 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b20      	cmp	r3, #32
 8006574:	d0f0      	beq.n	8006558 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800659c:	d901      	bls.n	80065a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e018      	b.n	80065d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	daf2      	bge.n	8006590 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2210      	movs	r2, #16
 80065b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3301      	adds	r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065c0:	d901      	bls.n	80065c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e006      	b.n	80065d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d0f0      	beq.n	80065b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006600:	4313      	orrs	r3, r2
 8006602:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006612:	b480      	push	{r7}
 8006614:	b087      	sub	sp, #28
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0306 	and.w	r3, r3, #6
 800662a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d102      	bne.n	8006638 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006632:	2300      	movs	r3, #0
 8006634:	75fb      	strb	r3, [r7, #23]
 8006636:	e00a      	b.n	800664e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b02      	cmp	r3, #2
 800663c:	d002      	beq.n	8006644 <USB_GetDevSpeed+0x32>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b06      	cmp	r3, #6
 8006642:	d102      	bne.n	800664a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006644:	2302      	movs	r3, #2
 8006646:	75fb      	strb	r3, [r7, #23]
 8006648:	e001      	b.n	800664e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800664a:	230f      	movs	r3, #15
 800664c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800664e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006650:	4618      	mov	r0, r3
 8006652:	371c      	adds	r7, #28
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d13a      	bne.n	80066ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800667e:	69da      	ldr	r2, [r3, #28]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	2101      	movs	r1, #1
 800668a:	fa01 f303 	lsl.w	r3, r1, r3
 800668e:	b29b      	uxth	r3, r3
 8006690:	68f9      	ldr	r1, [r7, #12]
 8006692:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006696:	4313      	orrs	r3, r2
 8006698:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d155      	bne.n	800675c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	791b      	ldrb	r3, [r3, #4]
 80066ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	059b      	lsls	r3, r3, #22
 80066d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066d4:	4313      	orrs	r3, r2
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	e036      	b.n	800675c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f4:	69da      	ldr	r2, [r3, #28]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	2101      	movs	r1, #1
 8006700:	fa01 f303 	lsl.w	r3, r1, r3
 8006704:	041b      	lsls	r3, r3, #16
 8006706:	68f9      	ldr	r1, [r7, #12]
 8006708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800670c:	4313      	orrs	r3, r2
 800670e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d11a      	bne.n	800675c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	791b      	ldrb	r3, [r3, #4]
 8006740:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006742:	430b      	orrs	r3, r1
 8006744:	4313      	orrs	r3, r2
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	440a      	add	r2, r1
 800674e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800675a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	785b      	ldrb	r3, [r3, #1]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d161      	bne.n	800684c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800679a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800679e:	d11f      	bne.n	80067e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	0151      	lsls	r1, r2, #5
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	440a      	add	r2, r1
 80067d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	2101      	movs	r1, #1
 80067f2:	fa01 f303 	lsl.w	r3, r1, r3
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	43db      	mvns	r3, r3
 80067fa:	68f9      	ldr	r1, [r7, #12]
 80067fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006800:	4013      	ands	r3, r2
 8006802:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	f003 030f 	and.w	r3, r3, #15
 8006814:	2101      	movs	r1, #1
 8006816:	fa01 f303 	lsl.w	r3, r1, r3
 800681a:	b29b      	uxth	r3, r3
 800681c:	43db      	mvns	r3, r3
 800681e:	68f9      	ldr	r1, [r7, #12]
 8006820:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006824:	4013      	ands	r3, r2
 8006826:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	0159      	lsls	r1, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	440b      	add	r3, r1
 800683e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006842:	4619      	mov	r1, r3
 8006844:	4b35      	ldr	r3, [pc, #212]	@ (800691c <USB_DeactivateEndpoint+0x1b0>)
 8006846:	4013      	ands	r3, r2
 8006848:	600b      	str	r3, [r1, #0]
 800684a:	e060      	b.n	800690e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800685e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006862:	d11f      	bne.n	80068a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800687e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006882:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	440a      	add	r2, r1
 800689a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800689e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	f003 030f 	and.w	r3, r3, #15
 80068b4:	2101      	movs	r1, #1
 80068b6:	fa01 f303 	lsl.w	r3, r1, r3
 80068ba:	041b      	lsls	r3, r3, #16
 80068bc:	43db      	mvns	r3, r3
 80068be:	68f9      	ldr	r1, [r7, #12]
 80068c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068c4:	4013      	ands	r3, r2
 80068c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ce:	69da      	ldr	r2, [r3, #28]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	f003 030f 	and.w	r3, r3, #15
 80068d8:	2101      	movs	r1, #1
 80068da:	fa01 f303 	lsl.w	r3, r1, r3
 80068de:	041b      	lsls	r3, r3, #16
 80068e0:	43db      	mvns	r3, r3
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068e8:	4013      	ands	r3, r2
 80068ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	0159      	lsls	r1, r3, #5
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	440b      	add	r3, r1
 8006902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006906:	4619      	mov	r1, r3
 8006908:	4b05      	ldr	r3, [pc, #20]	@ (8006920 <USB_DeactivateEndpoint+0x1b4>)
 800690a:	4013      	ands	r3, r2
 800690c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	ec337800 	.word	0xec337800
 8006920:	eff37800 	.word	0xeff37800

08006924 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08a      	sub	sp, #40	@ 0x28
 8006928:	af02      	add	r7, sp, #8
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b01      	cmp	r3, #1
 8006942:	f040 817a 	bne.w	8006c3a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d132      	bne.n	80069b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006968:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800696c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	440a      	add	r2, r1
 8006988:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800698c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006990:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	0151      	lsls	r1, r2, #5
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	440a      	add	r2, r1
 80069a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ac:	0cdb      	lsrs	r3, r3, #19
 80069ae:	04db      	lsls	r3, r3, #19
 80069b0:	6113      	str	r3, [r2, #16]
 80069b2:	e092      	b.n	8006ada <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	0151      	lsls	r1, r2, #5
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	440a      	add	r2, r1
 80069ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ce:	0cdb      	lsrs	r3, r3, #19
 80069d0:	04db      	lsls	r3, r3, #19
 80069d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80069f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80069f6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d11a      	bne.n	8006a34 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	691a      	ldr	r2, [r3, #16]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d903      	bls.n	8006a12 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	0151      	lsls	r1, r2, #5
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	440a      	add	r2, r1
 8006a28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a30:	6113      	str	r3, [r2, #16]
 8006a32:	e01b      	b.n	8006a6c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a40:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	6919      	ldr	r1, [r3, #16]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	440b      	add	r3, r1
 8006a4c:	1e59      	subs	r1, r3, #1
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a56:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a58:	4ba2      	ldr	r3, [pc, #648]	@ (8006ce4 <USB_EPStartXfer+0x3c0>)
 8006a5a:	400b      	ands	r3, r1
 8006a5c:	69b9      	ldr	r1, [r7, #24]
 8006a5e:	0148      	lsls	r0, r1, #5
 8006a60:	69f9      	ldr	r1, [r7, #28]
 8006a62:	4401      	add	r1, r0
 8006a64:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a82:	69b9      	ldr	r1, [r7, #24]
 8006a84:	0148      	lsls	r0, r1, #5
 8006a86:	69f9      	ldr	r1, [r7, #28]
 8006a88:	4401      	add	r1, r0
 8006a8a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	791b      	ldrb	r3, [r3, #4]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d11f      	bne.n	8006ada <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ab4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006ab8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	0151      	lsls	r1, r2, #5
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	440a      	add	r2, r1
 8006ad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ad4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ad8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006ada:	79fb      	ldrb	r3, [r7, #7]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d14b      	bne.n	8006b78 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d009      	beq.n	8006afc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006af4:	461a      	mov	r2, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	791b      	ldrb	r3, [r3, #4]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d128      	bne.n	8006b56 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d110      	bne.n	8006b36 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	0151      	lsls	r1, r2, #5
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	440a      	add	r2, r1
 8006b2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	e00f      	b.n	8006b56 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	0151      	lsls	r1, r2, #5
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	440a      	add	r2, r1
 8006b4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	0151      	lsls	r1, r2, #5
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	440a      	add	r2, r1
 8006b6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b70:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	e165      	b.n	8006e44 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	0151      	lsls	r1, r2, #5
 8006b8a:	69fa      	ldr	r2, [r7, #28]
 8006b8c:	440a      	add	r2, r1
 8006b8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	791b      	ldrb	r3, [r3, #4]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d015      	beq.n	8006bcc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 814d 	beq.w	8006e44 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	2101      	movs	r1, #1
 8006bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc0:	69f9      	ldr	r1, [r7, #28]
 8006bc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	634b      	str	r3, [r1, #52]	@ 0x34
 8006bca:	e13b      	b.n	8006e44 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d110      	bne.n	8006bfe <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bf6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	e00f      	b.n	8006c1e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	68d9      	ldr	r1, [r3, #12]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	781a      	ldrb	r2, [r3, #0]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	b298      	uxth	r0, r3
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4603      	mov	r3, r0
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 f9b8 	bl	8006fa8 <USB_WritePacket>
 8006c38:	e104      	b.n	8006e44 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c54:	0cdb      	lsrs	r3, r3, #19
 8006c56:	04db      	lsls	r3, r3, #19
 8006c58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	0151      	lsls	r1, r2, #5
 8006c6c:	69fa      	ldr	r2, [r7, #28]
 8006c6e:	440a      	add	r2, r1
 8006c70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c74:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c78:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c7c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d131      	bne.n	8006ce8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca8:	691a      	ldr	r2, [r3, #16]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cb2:	69b9      	ldr	r1, [r7, #24]
 8006cb4:	0148      	lsls	r0, r1, #5
 8006cb6:	69f9      	ldr	r1, [r7, #28]
 8006cb8:	4401      	add	r1, r0
 8006cba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	0151      	lsls	r1, r2, #5
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	440a      	add	r2, r1
 8006cd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ce0:	6113      	str	r3, [r2, #16]
 8006ce2:	e061      	b.n	8006da8 <USB_EPStartXfer+0x484>
 8006ce4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d123      	bne.n	8006d38 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cfc:	691a      	ldr	r2, [r3, #16]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d06:	69b9      	ldr	r1, [r7, #24]
 8006d08:	0148      	lsls	r0, r1, #5
 8006d0a:	69f9      	ldr	r1, [r7, #28]
 8006d0c:	4401      	add	r1, r0
 8006d0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d12:	4313      	orrs	r3, r2
 8006d14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	0151      	lsls	r1, r2, #5
 8006d28:	69fa      	ldr	r2, [r7, #28]
 8006d2a:	440a      	add	r2, r1
 8006d2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d34:	6113      	str	r3, [r2, #16]
 8006d36:	e037      	b.n	8006da8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	4413      	add	r3, r2
 8006d42:	1e5a      	subs	r2, r3, #1
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	8afa      	ldrh	r2, [r7, #22]
 8006d54:	fb03 f202 	mul.w	r2, r3, r2
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	8afb      	ldrh	r3, [r7, #22]
 8006d6c:	04d9      	lsls	r1, r3, #19
 8006d6e:	4b38      	ldr	r3, [pc, #224]	@ (8006e50 <USB_EPStartXfer+0x52c>)
 8006d70:	400b      	ands	r3, r1
 8006d72:	69b9      	ldr	r1, [r7, #24]
 8006d74:	0148      	lsls	r0, r1, #5
 8006d76:	69f9      	ldr	r1, [r7, #28]
 8006d78:	4401      	add	r1, r0
 8006d7a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d8e:	691a      	ldr	r2, [r3, #16]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d98:	69b9      	ldr	r1, [r7, #24]
 8006d9a:	0148      	lsls	r0, r1, #5
 8006d9c:	69f9      	ldr	r1, [r7, #28]
 8006d9e:	4401      	add	r1, r0
 8006da0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006da4:	4313      	orrs	r3, r2
 8006da6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006da8:	79fb      	ldrb	r3, [r7, #7]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d10d      	bne.n	8006dca <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	68d9      	ldr	r1, [r3, #12]
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc6:	460a      	mov	r2, r1
 8006dc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	791b      	ldrb	r3, [r3, #4]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d128      	bne.n	8006e24 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d110      	bne.n	8006e04 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	0151      	lsls	r1, r2, #5
 8006df4:	69fa      	ldr	r2, [r7, #28]
 8006df6:	440a      	add	r2, r1
 8006df8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dfc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	e00f      	b.n	8006e24 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	0151      	lsls	r1, r2, #5
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	440a      	add	r2, r1
 8006e1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	0151      	lsls	r1, r2, #5
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	440a      	add	r2, r1
 8006e3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e3e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3720      	adds	r7, #32
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	1ff80000 	.word	0x1ff80000

08006e54 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d14a      	bne.n	8006f08 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e8a:	f040 8086 	bne.w	8006f9a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	7812      	ldrb	r2, [r2, #0]
 8006ea2:	0151      	lsls	r1, r2, #5
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	440a      	add	r2, r1
 8006ea8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006eb0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	7812      	ldrb	r2, [r2, #0]
 8006ec6:	0151      	lsls	r1, r2, #5
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	440a      	add	r2, r1
 8006ecc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ed0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ed4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d902      	bls.n	8006eec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	75fb      	strb	r3, [r7, #23]
          break;
 8006eea:	e056      	b.n	8006f9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f04:	d0e7      	beq.n	8006ed6 <USB_EPStopXfer+0x82>
 8006f06:	e048      	b.n	8006f9a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f20:	d13b      	bne.n	8006f9a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	7812      	ldrb	r2, [r2, #0]
 8006f36:	0151      	lsls	r1, r2, #5
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	440a      	add	r2, r1
 8006f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f44:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	7812      	ldrb	r2, [r2, #0]
 8006f5a:	0151      	lsls	r1, r2, #5
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	440a      	add	r2, r1
 8006f60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d902      	bls.n	8006f80 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f7e:	e00c      	b.n	8006f9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f98:	d0e7      	beq.n	8006f6a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b089      	sub	sp, #36	@ 0x24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	71fb      	strb	r3, [r7, #7]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d123      	bne.n	8007016 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006fce:	88bb      	ldrh	r3, [r7, #4]
 8006fd0:	3303      	adds	r3, #3
 8006fd2:	089b      	lsrs	r3, r3, #2
 8006fd4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61bb      	str	r3, [r7, #24]
 8006fda:	e018      	b.n	800700e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	031a      	lsls	r2, r3, #12
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fe8:	461a      	mov	r2, r3
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	3301      	adds	r3, #1
 8007000:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	3301      	adds	r3, #1
 8007006:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	3301      	adds	r3, #1
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	429a      	cmp	r2, r3
 8007014:	d3e2      	bcc.n	8006fdc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3724      	adds	r7, #36	@ 0x24
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007024:	b480      	push	{r7}
 8007026:	b08b      	sub	sp, #44	@ 0x2c
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	089b      	lsrs	r3, r3, #2
 800703e:	b29b      	uxth	r3, r3
 8007040:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007042:	88fb      	ldrh	r3, [r7, #6]
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800704a:	2300      	movs	r3, #0
 800704c:	623b      	str	r3, [r7, #32]
 800704e:	e014      	b.n	800707a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705a:	601a      	str	r2, [r3, #0]
    pDest++;
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	3301      	adds	r3, #1
 8007060:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	3301      	adds	r3, #1
 8007066:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	3301      	adds	r3, #1
 800706c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	3301      	adds	r3, #1
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	3301      	adds	r3, #1
 8007078:	623b      	str	r3, [r7, #32]
 800707a:	6a3a      	ldr	r2, [r7, #32]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	429a      	cmp	r2, r3
 8007080:	d3e6      	bcc.n	8007050 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007082:	8bfb      	ldrh	r3, [r7, #30]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01e      	beq.n	80070c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007092:	461a      	mov	r2, r3
 8007094:	f107 0310 	add.w	r3, r7, #16
 8007098:	6812      	ldr	r2, [r2, #0]
 800709a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	fa22 f303 	lsr.w	r3, r2, r3
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	701a      	strb	r2, [r3, #0]
      i++;
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	3301      	adds	r3, #1
 80070b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	3301      	adds	r3, #1
 80070b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80070ba:	8bfb      	ldrh	r3, [r7, #30]
 80070bc:	3b01      	subs	r3, #1
 80070be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80070c0:	8bfb      	ldrh	r3, [r7, #30]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1ea      	bne.n	800709c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	372c      	adds	r7, #44	@ 0x2c
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	785b      	ldrb	r3, [r3, #1]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d12c      	bne.n	800714a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	db12      	blt.n	8007128 <USB_EPSetStall+0x54>
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00f      	beq.n	8007128 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	0151      	lsls	r1, r2, #5
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	440a      	add	r2, r1
 800711e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007122:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007126:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	440a      	add	r2, r1
 800713e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007142:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	e02b      	b.n	80071a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	db12      	blt.n	8007182 <USB_EPSetStall+0xae>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00f      	beq.n	8007182 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	0151      	lsls	r1, r2, #5
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	440a      	add	r2, r1
 8007178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800717c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007180:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	440a      	add	r2, r1
 8007198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800719c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d128      	bne.n	800721e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	0151      	lsls	r1, r2, #5
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	440a      	add	r2, r1
 80071e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	791b      	ldrb	r3, [r3, #4]
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d003      	beq.n	80071fc <USB_EPClearStall+0x4c>
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	791b      	ldrb	r3, [r3, #4]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d138      	bne.n	800726e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	440a      	add	r2, r1
 8007212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	e027      	b.n	800726e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	0151      	lsls	r1, r2, #5
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	440a      	add	r2, r1
 8007234:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007238:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800723c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	791b      	ldrb	r3, [r3, #4]
 8007242:	2b03      	cmp	r3, #3
 8007244:	d003      	beq.n	800724e <USB_EPClearStall+0x9e>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	791b      	ldrb	r3, [r3, #4]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d10f      	bne.n	800726e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	440a      	add	r2, r1
 8007264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800726c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800729a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800729e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80072b0:	68f9      	ldr	r1, [r7, #12]
 80072b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072b6:	4313      	orrs	r3, r2
 80072b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072e2:	f023 0303 	bic.w	r3, r3, #3
 80072e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072f6:	f023 0302 	bic.w	r3, r3, #2
 80072fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800730a:	b480      	push	{r7}
 800730c:	b085      	sub	sp, #20
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007324:	f023 0303 	bic.w	r3, r3, #3
 8007328:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007338:	f043 0302 	orr.w	r3, r3, #2
 800733c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4013      	ands	r3, r2
 8007362:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007364:	68fb      	ldr	r3, [r7, #12]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007372:	b480      	push	{r7}
 8007374:	b085      	sub	sp, #20
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	4013      	ands	r3, r2
 8007394:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	0c1b      	lsrs	r3, r3, #16
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b085      	sub	sp, #20
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	4013      	ands	r3, r2
 80073c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	b29b      	uxth	r3, r3
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073da:	b480      	push	{r7}
 80073dc:	b085      	sub	sp, #20
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	460b      	mov	r3, r1
 80073e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80073ea:	78fb      	ldrb	r3, [r7, #3]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	4013      	ands	r3, r2
 8007406:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007408:	68bb      	ldr	r3, [r7, #8]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007416:	b480      	push	{r7}
 8007418:	b087      	sub	sp, #28
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	460b      	mov	r3, r1
 8007420:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007438:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800743a:	78fb      	ldrb	r3, [r7, #3]
 800743c:	f003 030f 	and.w	r3, r3, #15
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	fa22 f303 	lsr.w	r3, r2, r3
 8007446:	01db      	lsls	r3, r3, #7
 8007448:	b2db      	uxtb	r3, r3
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4013      	ands	r3, r2
 8007462:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007464:	68bb      	ldr	r3, [r7, #8]
}
 8007466:	4618      	mov	r0, r3
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	f003 0301 	and.w	r3, r3, #1
}
 8007482:	4618      	mov	r0, r3
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800748e:	b480      	push	{r7}
 8007490:	b085      	sub	sp, #20
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80074ac:	f023 0307 	bic.w	r3, r3, #7
 80074b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	460b      	mov	r3, r1
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	333c      	adds	r3, #60	@ 0x3c
 80074ea:	3304      	adds	r3, #4
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4a26      	ldr	r2, [pc, #152]	@ (800758c <USB_EP0_OutStart+0xb8>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d90a      	bls.n	800750e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007504:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007508:	d101      	bne.n	800750e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	e037      	b.n	800757e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007514:	461a      	mov	r2, r3
 8007516:	2300      	movs	r3, #0
 8007518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007528:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800752c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800753c:	f043 0318 	orr.w	r3, r3, #24
 8007540:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007550:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007554:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007556:	7afb      	ldrb	r3, [r7, #11]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d10f      	bne.n	800757c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007576:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800757a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	371c      	adds	r7, #28
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	4f54300a 	.word	0x4f54300a

08007590 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3301      	adds	r3, #1
 80075a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075a8:	d901      	bls.n	80075ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e01b      	b.n	80075e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	daf2      	bge.n	800759c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f043 0201 	orr.w	r2, r3, #1
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3301      	adds	r3, #1
 80075ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075d2:	d901      	bls.n	80075d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e006      	b.n	80075e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d0f0      	beq.n	80075c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80075f8:	4904      	ldr	r1, [pc, #16]	@ (800760c <MX_FATFS_Init+0x18>)
 80075fa:	4805      	ldr	r0, [pc, #20]	@ (8007610 <MX_FATFS_Init+0x1c>)
 80075fc:	f006 f832 	bl	800d664 <FATFS_LinkDriver>
 8007600:	4603      	mov	r3, r0
 8007602:	461a      	mov	r2, r3
 8007604:	4b03      	ldr	r3, [pc, #12]	@ (8007614 <MX_FATFS_Init+0x20>)
 8007606:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007608:	bf00      	nop
 800760a:	bd80      	pop	{r7, pc}
 800760c:	20002320 	.word	0x20002320
 8007610:	20000010 	.word	0x20000010
 8007614:	2000231c 	.word	0x2000231c

08007618 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800761c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800761e:	4618      	mov	r0, r3
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8007632:	79fb      	ldrb	r3, [r7, #7]
 8007634:	4618      	mov	r0, r3
 8007636:	f7f9 fd43 	bl	80010c0 <SD_disk_initialize>
 800763a:	4603      	mov	r3, r0
 800763c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b082      	sub	sp, #8
 800764a:	af00      	add	r7, sp, #0
 800764c:	4603      	mov	r3, r0
 800764e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	4618      	mov	r0, r3
 8007654:	f7f9 fe1a 	bl	800128c <SD_disk_status>
 8007658:	4603      	mov	r3, r0
 800765a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	607a      	str	r2, [r7, #4]
 800766e:	603b      	str	r3, [r7, #0]
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8007674:	7bf8      	ldrb	r0, [r7, #15]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	68b9      	ldr	r1, [r7, #8]
 800767c:	f7f9 fe1c 	bl	80012b8 <SD_disk_read>
 8007680:	4603      	mov	r3, r0
 8007682:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	607a      	str	r2, [r7, #4]
 8007696:	603b      	str	r3, [r7, #0]
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800769c:	7bf8      	ldrb	r0, [r7, #15]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	68b9      	ldr	r1, [r7, #8]
 80076a4:	f7f9 fe72 	bl	800138c <SD_disk_write>
 80076a8:	4603      	mov	r3, r0
 80076aa:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	603a      	str	r2, [r7, #0]
 80076be:	71fb      	strb	r3, [r7, #7]
 80076c0:	460b      	mov	r3, r1
 80076c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	79b9      	ldrb	r1, [r7, #6]
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7f9 fee2 	bl	8001494 <SD_disk_ioctl>
 80076d0:	4603      	mov	r3, r0
 80076d2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80076e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80076ec:	f009 fe88 	bl	8011400 <USBD_static_malloc>
 80076f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d109      	bne.n	800770c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	32b0      	adds	r2, #176	@ 0xb0
 8007702:	2100      	movs	r1, #0
 8007704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007708:	2302      	movs	r3, #2
 800770a:	e0d4      	b.n	80078b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800770c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007710:	2100      	movs	r1, #0
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f00a f849 	bl	80117aa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	32b0      	adds	r2, #176	@ 0xb0
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	32b0      	adds	r2, #176	@ 0xb0
 8007732:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	7c1b      	ldrb	r3, [r3, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d138      	bne.n	80077b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007744:	4b5e      	ldr	r3, [pc, #376]	@ (80078c0 <USBD_CDC_Init+0x1e4>)
 8007746:	7819      	ldrb	r1, [r3, #0]
 8007748:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800774c:	2202      	movs	r2, #2
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f009 fd33 	bl	80111ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007754:	4b5a      	ldr	r3, [pc, #360]	@ (80078c0 <USBD_CDC_Init+0x1e4>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 020f 	and.w	r2, r3, #15
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	440b      	add	r3, r1
 8007768:	3324      	adds	r3, #36	@ 0x24
 800776a:	2201      	movs	r2, #1
 800776c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800776e:	4b55      	ldr	r3, [pc, #340]	@ (80078c4 <USBD_CDC_Init+0x1e8>)
 8007770:	7819      	ldrb	r1, [r3, #0]
 8007772:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007776:	2202      	movs	r2, #2
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f009 fd1e 	bl	80111ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800777e:	4b51      	ldr	r3, [pc, #324]	@ (80078c4 <USBD_CDC_Init+0x1e8>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	f003 020f 	and.w	r2, r3, #15
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007796:	2201      	movs	r2, #1
 8007798:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800779a:	4b4b      	ldr	r3, [pc, #300]	@ (80078c8 <USBD_CDC_Init+0x1ec>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	f003 020f 	and.w	r2, r3, #15
 80077a2:	6879      	ldr	r1, [r7, #4]
 80077a4:	4613      	mov	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	440b      	add	r3, r1
 80077ae:	3326      	adds	r3, #38	@ 0x26
 80077b0:	2210      	movs	r2, #16
 80077b2:	801a      	strh	r2, [r3, #0]
 80077b4:	e035      	b.n	8007822 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077b6:	4b42      	ldr	r3, [pc, #264]	@ (80078c0 <USBD_CDC_Init+0x1e4>)
 80077b8:	7819      	ldrb	r1, [r3, #0]
 80077ba:	2340      	movs	r3, #64	@ 0x40
 80077bc:	2202      	movs	r2, #2
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f009 fcfb 	bl	80111ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077c4:	4b3e      	ldr	r3, [pc, #248]	@ (80078c0 <USBD_CDC_Init+0x1e4>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	f003 020f 	and.w	r2, r3, #15
 80077cc:	6879      	ldr	r1, [r7, #4]
 80077ce:	4613      	mov	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	440b      	add	r3, r1
 80077d8:	3324      	adds	r3, #36	@ 0x24
 80077da:	2201      	movs	r2, #1
 80077dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80077de:	4b39      	ldr	r3, [pc, #228]	@ (80078c4 <USBD_CDC_Init+0x1e8>)
 80077e0:	7819      	ldrb	r1, [r3, #0]
 80077e2:	2340      	movs	r3, #64	@ 0x40
 80077e4:	2202      	movs	r2, #2
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f009 fce7 	bl	80111ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80077ec:	4b35      	ldr	r3, [pc, #212]	@ (80078c4 <USBD_CDC_Init+0x1e8>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	f003 020f 	and.w	r2, r3, #15
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	440b      	add	r3, r1
 8007800:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007804:	2201      	movs	r2, #1
 8007806:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007808:	4b2f      	ldr	r3, [pc, #188]	@ (80078c8 <USBD_CDC_Init+0x1ec>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	f003 020f 	and.w	r2, r3, #15
 8007810:	6879      	ldr	r1, [r7, #4]
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	440b      	add	r3, r1
 800781c:	3326      	adds	r3, #38	@ 0x26
 800781e:	2210      	movs	r2, #16
 8007820:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007822:	4b29      	ldr	r3, [pc, #164]	@ (80078c8 <USBD_CDC_Init+0x1ec>)
 8007824:	7819      	ldrb	r1, [r3, #0]
 8007826:	2308      	movs	r3, #8
 8007828:	2203      	movs	r2, #3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f009 fcc5 	bl	80111ba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007830:	4b25      	ldr	r3, [pc, #148]	@ (80078c8 <USBD_CDC_Init+0x1ec>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	f003 020f 	and.w	r2, r3, #15
 8007838:	6879      	ldr	r1, [r7, #4]
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	440b      	add	r3, r1
 8007844:	3324      	adds	r3, #36	@ 0x24
 8007846:	2201      	movs	r2, #1
 8007848:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	33b0      	adds	r3, #176	@ 0xb0
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007880:	2302      	movs	r3, #2
 8007882:	e018      	b.n	80078b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	7c1b      	ldrb	r3, [r3, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800788c:	4b0d      	ldr	r3, [pc, #52]	@ (80078c4 <USBD_CDC_Init+0x1e8>)
 800788e:	7819      	ldrb	r1, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007896:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f009 fd7c 	bl	8011398 <USBD_LL_PrepareReceive>
 80078a0:	e008      	b.n	80078b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078a2:	4b08      	ldr	r3, [pc, #32]	@ (80078c4 <USBD_CDC_Init+0x1e8>)
 80078a4:	7819      	ldrb	r1, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078ac:	2340      	movs	r3, #64	@ 0x40
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f009 fd72 	bl	8011398 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	200000ab 	.word	0x200000ab
 80078c4:	200000ac 	.word	0x200000ac
 80078c8:	200000ad 	.word	0x200000ad

080078cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80078d8:	4b3a      	ldr	r3, [pc, #232]	@ (80079c4 <USBD_CDC_DeInit+0xf8>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f009 fc91 	bl	8011206 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80078e4:	4b37      	ldr	r3, [pc, #220]	@ (80079c4 <USBD_CDC_DeInit+0xf8>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	f003 020f 	and.w	r2, r3, #15
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	4613      	mov	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	440b      	add	r3, r1
 80078f8:	3324      	adds	r3, #36	@ 0x24
 80078fa:	2200      	movs	r2, #0
 80078fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80078fe:	4b32      	ldr	r3, [pc, #200]	@ (80079c8 <USBD_CDC_DeInit+0xfc>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f009 fc7e 	bl	8011206 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800790a:	4b2f      	ldr	r3, [pc, #188]	@ (80079c8 <USBD_CDC_DeInit+0xfc>)
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	f003 020f 	and.w	r2, r3, #15
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	440b      	add	r3, r1
 800791e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007922:	2200      	movs	r2, #0
 8007924:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007926:	4b29      	ldr	r3, [pc, #164]	@ (80079cc <USBD_CDC_DeInit+0x100>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f009 fc6a 	bl	8011206 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007932:	4b26      	ldr	r3, [pc, #152]	@ (80079cc <USBD_CDC_DeInit+0x100>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	f003 020f 	and.w	r2, r3, #15
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	4613      	mov	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	3324      	adds	r3, #36	@ 0x24
 8007948:	2200      	movs	r2, #0
 800794a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800794c:	4b1f      	ldr	r3, [pc, #124]	@ (80079cc <USBD_CDC_DeInit+0x100>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	f003 020f 	and.w	r2, r3, #15
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	440b      	add	r3, r1
 8007960:	3326      	adds	r3, #38	@ 0x26
 8007962:	2200      	movs	r2, #0
 8007964:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	32b0      	adds	r2, #176	@ 0xb0
 8007970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01f      	beq.n	80079b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	33b0      	adds	r3, #176	@ 0xb0
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	32b0      	adds	r2, #176	@ 0xb0
 8007996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799a:	4618      	mov	r0, r3
 800799c:	f009 fd3e 	bl	801141c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	32b0      	adds	r2, #176	@ 0xb0
 80079aa:	2100      	movs	r1, #0
 80079ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	200000ab 	.word	0x200000ab
 80079c8:	200000ac 	.word	0x200000ac
 80079cc:	200000ad 	.word	0x200000ad

080079d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	32b0      	adds	r2, #176	@ 0xb0
 80079e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e0bf      	b.n	8007b80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d050      	beq.n	8007aae <USBD_CDC_Setup+0xde>
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	f040 80af 	bne.w	8007b70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	88db      	ldrh	r3, [r3, #6]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d03a      	beq.n	8007a90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	b25b      	sxtb	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	da1b      	bge.n	8007a5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	33b0      	adds	r3, #176	@ 0xb0
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007a3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	88d2      	ldrh	r2, [r2, #6]
 8007a40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	88db      	ldrh	r3, [r3, #6]
 8007a46:	2b07      	cmp	r3, #7
 8007a48:	bf28      	it	cs
 8007a4a:	2307      	movcs	r3, #7
 8007a4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	89fa      	ldrh	r2, [r7, #14]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fd87 	bl	8009568 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007a5a:	e090      	b.n	8007b7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	785a      	ldrb	r2, [r3, #1]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	88db      	ldrh	r3, [r3, #6]
 8007a6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8007a6c:	d803      	bhi.n	8007a76 <USBD_CDC_Setup+0xa6>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	88db      	ldrh	r3, [r3, #6]
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	e000      	b.n	8007a78 <USBD_CDC_Setup+0xa8>
 8007a76:	2240      	movs	r2, #64	@ 0x40
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007a7e:	6939      	ldr	r1, [r7, #16]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007a86:	461a      	mov	r2, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 fd99 	bl	80095c0 <USBD_CtlPrepareRx>
      break;
 8007a8e:	e076      	b.n	8007b7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	33b0      	adds	r3, #176	@ 0xb0
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	7850      	ldrb	r0, [r2, #1]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	4798      	blx	r3
      break;
 8007aac:	e067      	b.n	8007b7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	2b0b      	cmp	r3, #11
 8007ab4:	d851      	bhi.n	8007b5a <USBD_CDC_Setup+0x18a>
 8007ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8007abc <USBD_CDC_Setup+0xec>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007aed 	.word	0x08007aed
 8007ac0:	08007b69 	.word	0x08007b69
 8007ac4:	08007b5b 	.word	0x08007b5b
 8007ac8:	08007b5b 	.word	0x08007b5b
 8007acc:	08007b5b 	.word	0x08007b5b
 8007ad0:	08007b5b 	.word	0x08007b5b
 8007ad4:	08007b5b 	.word	0x08007b5b
 8007ad8:	08007b5b 	.word	0x08007b5b
 8007adc:	08007b5b 	.word	0x08007b5b
 8007ae0:	08007b5b 	.word	0x08007b5b
 8007ae4:	08007b17 	.word	0x08007b17
 8007ae8:	08007b41 	.word	0x08007b41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d107      	bne.n	8007b08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007af8:	f107 030a 	add.w	r3, r7, #10
 8007afc:	2202      	movs	r2, #2
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 fd31 	bl	8009568 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b06:	e032      	b.n	8007b6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 fcbb 	bl	8009486 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b10:	2303      	movs	r3, #3
 8007b12:	75fb      	strb	r3, [r7, #23]
          break;
 8007b14:	e02b      	b.n	8007b6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d107      	bne.n	8007b32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b22:	f107 030d 	add.w	r3, r7, #13
 8007b26:	2201      	movs	r2, #1
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 fd1c 	bl	8009568 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b30:	e01d      	b.n	8007b6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 fca6 	bl	8009486 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b3e:	e016      	b.n	8007b6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d00f      	beq.n	8007b6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f001 fc99 	bl	8009486 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b54:	2303      	movs	r3, #3
 8007b56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b58:	e008      	b.n	8007b6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 fc92 	bl	8009486 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b62:	2303      	movs	r3, #3
 8007b64:	75fb      	strb	r3, [r7, #23]
          break;
 8007b66:	e002      	b.n	8007b6e <USBD_CDC_Setup+0x19e>
          break;
 8007b68:	bf00      	nop
 8007b6a:	e008      	b.n	8007b7e <USBD_CDC_Setup+0x1ae>
          break;
 8007b6c:	bf00      	nop
      }
      break;
 8007b6e:	e006      	b.n	8007b7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 fc87 	bl	8009486 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	32b0      	adds	r2, #176	@ 0xb0
 8007ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e065      	b.n	8007c7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	32b0      	adds	r2, #176	@ 0xb0
 8007bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	f003 020f 	and.w	r2, r3, #15
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	3318      	adds	r3, #24
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d02f      	beq.n	8007c3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007bdc:	78fb      	ldrb	r3, [r7, #3]
 8007bde:	f003 020f 	and.w	r2, r3, #15
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	3318      	adds	r3, #24
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	78fb      	ldrb	r3, [r7, #3]
 8007bf4:	f003 010f 	and.w	r1, r3, #15
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	440b      	add	r3, r1
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4403      	add	r3, r0
 8007c04:	331c      	adds	r3, #28
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c0c:	fb01 f303 	mul.w	r3, r1, r3
 8007c10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d112      	bne.n	8007c3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	f003 020f 	and.w	r2, r3, #15
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	3318      	adds	r3, #24
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c2e:	78f9      	ldrb	r1, [r7, #3]
 8007c30:	2300      	movs	r3, #0
 8007c32:	2200      	movs	r2, #0
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f009 fb8e 	bl	8011356 <USBD_LL_Transmit>
 8007c3a:	e01f      	b.n	8007c7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	33b0      	adds	r3, #176	@ 0xb0
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d010      	beq.n	8007c7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	33b0      	adds	r3, #176	@ 0xb0
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007c78:	78fa      	ldrb	r2, [r7, #3]
 8007c7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	32b0      	adds	r2, #176	@ 0xb0
 8007c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	32b0      	adds	r2, #176	@ 0xb0
 8007cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e01a      	b.n	8007cee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f009 fb8c 	bl	80113da <USBD_LL_GetRxDataSize>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	33b0      	adds	r3, #176	@ 0xb0
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007ce8:	4611      	mov	r1, r2
 8007cea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	32b0      	adds	r2, #176	@ 0xb0
 8007d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e024      	b.n	8007d62 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	33b0      	adds	r3, #176	@ 0xb0
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d019      	beq.n	8007d60 <USBD_CDC_EP0_RxReady+0x6a>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007d32:	2bff      	cmp	r3, #255	@ 0xff
 8007d34:	d014      	beq.n	8007d60 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	33b0      	adds	r3, #176	@ 0xb0
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007d4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	22ff      	movs	r2, #255	@ 0xff
 8007d5c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d74:	2182      	movs	r1, #130	@ 0x82
 8007d76:	4818      	ldr	r0, [pc, #96]	@ (8007dd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d78:	f000 fd4f 	bl	800881a <USBD_GetEpDesc>
 8007d7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d7e:	2101      	movs	r1, #1
 8007d80:	4815      	ldr	r0, [pc, #84]	@ (8007dd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d82:	f000 fd4a 	bl	800881a <USBD_GetEpDesc>
 8007d86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d88:	2181      	movs	r1, #129	@ 0x81
 8007d8a:	4813      	ldr	r0, [pc, #76]	@ (8007dd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d8c:	f000 fd45 	bl	800881a <USBD_GetEpDesc>
 8007d90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2210      	movs	r2, #16
 8007d9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d006      	beq.n	8007db2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dac:	711a      	strb	r2, [r3, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d006      	beq.n	8007dc6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dc0:	711a      	strb	r2, [r3, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2243      	movs	r2, #67	@ 0x43
 8007dca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007dcc:	4b02      	ldr	r3, [pc, #8]	@ (8007dd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000068 	.word	0x20000068

08007ddc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007de4:	2182      	movs	r1, #130	@ 0x82
 8007de6:	4818      	ldr	r0, [pc, #96]	@ (8007e48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007de8:	f000 fd17 	bl	800881a <USBD_GetEpDesc>
 8007dec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007dee:	2101      	movs	r1, #1
 8007df0:	4815      	ldr	r0, [pc, #84]	@ (8007e48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007df2:	f000 fd12 	bl	800881a <USBD_GetEpDesc>
 8007df6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007df8:	2181      	movs	r1, #129	@ 0x81
 8007dfa:	4813      	ldr	r0, [pc, #76]	@ (8007e48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007dfc:	f000 fd0d 	bl	800881a <USBD_GetEpDesc>
 8007e00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	2210      	movs	r2, #16
 8007e0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d006      	beq.n	8007e22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	2200      	movs	r2, #0
 8007e18:	711a      	strb	r2, [r3, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f042 0202 	orr.w	r2, r2, #2
 8007e20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d006      	beq.n	8007e36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	711a      	strb	r2, [r3, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f042 0202 	orr.w	r2, r2, #2
 8007e34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2243      	movs	r2, #67	@ 0x43
 8007e3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e3c:	4b02      	ldr	r3, [pc, #8]	@ (8007e48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000068 	.word	0x20000068

08007e4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e54:	2182      	movs	r1, #130	@ 0x82
 8007e56:	4818      	ldr	r0, [pc, #96]	@ (8007eb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e58:	f000 fcdf 	bl	800881a <USBD_GetEpDesc>
 8007e5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e5e:	2101      	movs	r1, #1
 8007e60:	4815      	ldr	r0, [pc, #84]	@ (8007eb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e62:	f000 fcda 	bl	800881a <USBD_GetEpDesc>
 8007e66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e68:	2181      	movs	r1, #129	@ 0x81
 8007e6a:	4813      	ldr	r0, [pc, #76]	@ (8007eb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e6c:	f000 fcd5 	bl	800881a <USBD_GetEpDesc>
 8007e70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2210      	movs	r2, #16
 8007e7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d006      	beq.n	8007e92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e8c:	711a      	strb	r2, [r3, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d006      	beq.n	8007ea6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ea0:	711a      	strb	r2, [r3, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2243      	movs	r2, #67	@ 0x43
 8007eaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007eac:	4b02      	ldr	r3, [pc, #8]	@ (8007eb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000068 	.word	0x20000068

08007ebc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	220a      	movs	r2, #10
 8007ec8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007eca:	4b03      	ldr	r3, [pc, #12]	@ (8007ed8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	20000024 	.word	0x20000024

08007edc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e009      	b.n	8007f04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	33b0      	adds	r3, #176	@ 0xb0
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	32b0      	adds	r2, #176	@ 0xb0
 8007f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e008      	b.n	8007f48 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	371c      	adds	r7, #28
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	32b0      	adds	r2, #176	@ 0xb0
 8007f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e004      	b.n	8007f82 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3714      	adds	r7, #20
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
	...

08007f90 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	32b0      	adds	r2, #176	@ 0xb0
 8007fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e025      	b.n	8008002 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d11f      	bne.n	8008000 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007fc8:	4b10      	ldr	r3, [pc, #64]	@ (800800c <USBD_CDC_TransmitPacket+0x7c>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	f003 020f 	and.w	r2, r3, #15
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4403      	add	r3, r0
 8007fe2:	3318      	adds	r3, #24
 8007fe4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007fe6:	4b09      	ldr	r3, [pc, #36]	@ (800800c <USBD_CDC_TransmitPacket+0x7c>)
 8007fe8:	7819      	ldrb	r1, [r3, #0]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f009 f9ad 	bl	8011356 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008000:	7bfb      	ldrb	r3, [r7, #15]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	200000ab 	.word	0x200000ab

08008010 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	32b0      	adds	r2, #176	@ 0xb0
 8008022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008026:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	32b0      	adds	r2, #176	@ 0xb0
 8008032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800803a:	2303      	movs	r3, #3
 800803c:	e018      	b.n	8008070 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	7c1b      	ldrb	r3, [r3, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008046:	4b0c      	ldr	r3, [pc, #48]	@ (8008078 <USBD_CDC_ReceivePacket+0x68>)
 8008048:	7819      	ldrb	r1, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008050:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f009 f99f 	bl	8011398 <USBD_LL_PrepareReceive>
 800805a:	e008      	b.n	800806e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800805c:	4b06      	ldr	r3, [pc, #24]	@ (8008078 <USBD_CDC_ReceivePacket+0x68>)
 800805e:	7819      	ldrb	r1, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008066:	2340      	movs	r3, #64	@ 0x40
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f009 f995 	bl	8011398 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	200000ac 	.word	0x200000ac

0800807c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008090:	2303      	movs	r3, #3
 8008092:	e01f      	b.n	80080d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	79fa      	ldrb	r2, [r7, #7]
 80080c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f009 f80f 	bl	80110ec <USBD_LL_Init>
 80080ce:	4603      	mov	r3, r0
 80080d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e025      	b.n	8008140 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	32ae      	adds	r2, #174	@ 0xae
 8008106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00f      	beq.n	8008130 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	32ae      	adds	r2, #174	@ 0xae
 800811a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008120:	f107 020e 	add.w	r2, r7, #14
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
 8008128:	4602      	mov	r2, r0
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f009 f817 	bl	8011184 <USBD_LL_Start>
 8008156:	4603      	mov	r3, r0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008168:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800818c:	2b00      	cmp	r3, #0
 800818e:	d009      	beq.n	80081a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	78fa      	ldrb	r2, [r7, #3]
 800819a:	4611      	mov	r1, r2
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	4798      	blx	r3
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	78fa      	ldrb	r2, [r7, #3]
 80081c8:	4611      	mov	r1, r2
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	4798      	blx	r3
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80081d4:	2303      	movs	r3, #3
 80081d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 f90c 	bl	8009412 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008208:	461a      	mov	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008216:	f003 031f 	and.w	r3, r3, #31
 800821a:	2b02      	cmp	r3, #2
 800821c:	d01a      	beq.n	8008254 <USBD_LL_SetupStage+0x72>
 800821e:	2b02      	cmp	r3, #2
 8008220:	d822      	bhi.n	8008268 <USBD_LL_SetupStage+0x86>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d002      	beq.n	800822c <USBD_LL_SetupStage+0x4a>
 8008226:	2b01      	cmp	r3, #1
 8008228:	d00a      	beq.n	8008240 <USBD_LL_SetupStage+0x5e>
 800822a:	e01d      	b.n	8008268 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fb63 	bl	8008900 <USBD_StdDevReq>
 800823a:	4603      	mov	r3, r0
 800823c:	73fb      	strb	r3, [r7, #15]
      break;
 800823e:	e020      	b.n	8008282 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fbcb 	bl	80089e4 <USBD_StdItfReq>
 800824e:	4603      	mov	r3, r0
 8008250:	73fb      	strb	r3, [r7, #15]
      break;
 8008252:	e016      	b.n	8008282 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fc2d 	bl	8008abc <USBD_StdEPReq>
 8008262:	4603      	mov	r3, r0
 8008264:	73fb      	strb	r3, [r7, #15]
      break;
 8008266:	e00c      	b.n	8008282 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800826e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008272:	b2db      	uxtb	r3, r3
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f008 ffe4 	bl	8011244 <USBD_LL_StallEP>
 800827c:	4603      	mov	r3, r0
 800827e:	73fb      	strb	r3, [r7, #15]
      break;
 8008280:	bf00      	nop
  }

  return ret;
 8008282:	7bfb      	ldrb	r3, [r7, #15]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	460b      	mov	r3, r1
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800829e:	7afb      	ldrb	r3, [r7, #11]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d16e      	bne.n	8008382 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80082aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	f040 8098 	bne.w	80083e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d913      	bls.n	80082ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	1ad2      	subs	r2, r2, r3
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	4293      	cmp	r3, r2
 80082dc:	bf28      	it	cs
 80082de:	4613      	movcs	r3, r2
 80082e0:	461a      	mov	r2, r3
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f001 f988 	bl	80095fa <USBD_CtlContinueRx>
 80082ea:	e07d      	b.n	80083e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082f2:	f003 031f 	and.w	r3, r3, #31
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d014      	beq.n	8008324 <USBD_LL_DataOutStage+0x98>
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d81d      	bhi.n	800833a <USBD_LL_DataOutStage+0xae>
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d002      	beq.n	8008308 <USBD_LL_DataOutStage+0x7c>
 8008302:	2b01      	cmp	r3, #1
 8008304:	d003      	beq.n	800830e <USBD_LL_DataOutStage+0x82>
 8008306:	e018      	b.n	800833a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	75bb      	strb	r3, [r7, #22]
            break;
 800830c:	e018      	b.n	8008340 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008314:	b2db      	uxtb	r3, r3
 8008316:	4619      	mov	r1, r3
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 fa64 	bl	80087e6 <USBD_CoreFindIF>
 800831e:	4603      	mov	r3, r0
 8008320:	75bb      	strb	r3, [r7, #22]
            break;
 8008322:	e00d      	b.n	8008340 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800832a:	b2db      	uxtb	r3, r3
 800832c:	4619      	mov	r1, r3
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 fa66 	bl	8008800 <USBD_CoreFindEP>
 8008334:	4603      	mov	r3, r0
 8008336:	75bb      	strb	r3, [r7, #22]
            break;
 8008338:	e002      	b.n	8008340 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	75bb      	strb	r3, [r7, #22]
            break;
 800833e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008340:	7dbb      	ldrb	r3, [r7, #22]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d119      	bne.n	800837a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b03      	cmp	r3, #3
 8008350:	d113      	bne.n	800837a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008352:	7dba      	ldrb	r2, [r7, #22]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	32ae      	adds	r2, #174	@ 0xae
 8008358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008362:	7dba      	ldrb	r2, [r7, #22]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800836a:	7dba      	ldrb	r2, [r7, #22]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	32ae      	adds	r2, #174	@ 0xae
 8008370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f001 f94e 	bl	800961c <USBD_CtlSendStatus>
 8008380:	e032      	b.n	80083e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008382:	7afb      	ldrb	r3, [r7, #11]
 8008384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008388:	b2db      	uxtb	r3, r3
 800838a:	4619      	mov	r1, r3
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 fa37 	bl	8008800 <USBD_CoreFindEP>
 8008392:	4603      	mov	r3, r0
 8008394:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008396:	7dbb      	ldrb	r3, [r7, #22]
 8008398:	2bff      	cmp	r3, #255	@ 0xff
 800839a:	d025      	beq.n	80083e8 <USBD_LL_DataOutStage+0x15c>
 800839c:	7dbb      	ldrb	r3, [r7, #22]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d122      	bne.n	80083e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d117      	bne.n	80083de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80083ae:	7dba      	ldrb	r2, [r7, #22]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	32ae      	adds	r2, #174	@ 0xae
 80083b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00f      	beq.n	80083de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80083be:	7dba      	ldrb	r2, [r7, #22]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80083c6:	7dba      	ldrb	r2, [r7, #22]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	32ae      	adds	r2, #174	@ 0xae
 80083cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	7afa      	ldrb	r2, [r7, #11]
 80083d4:	4611      	mov	r1, r2
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	4798      	blx	r3
 80083da:	4603      	mov	r3, r0
 80083dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80083de:	7dfb      	ldrb	r3, [r7, #23]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	e000      	b.n	80083ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b086      	sub	sp, #24
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	460b      	mov	r3, r1
 80083fc:	607a      	str	r2, [r7, #4]
 80083fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008400:	7afb      	ldrb	r3, [r7, #11]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d16f      	bne.n	80084e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3314      	adds	r3, #20
 800840a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008412:	2b02      	cmp	r3, #2
 8008414:	d15a      	bne.n	80084cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	689a      	ldr	r2, [r3, #8]
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	429a      	cmp	r2, r3
 8008420:	d914      	bls.n	800844c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	1ad2      	subs	r2, r2, r3
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	461a      	mov	r2, r3
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f001 f8b0 	bl	800959e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800843e:	2300      	movs	r3, #0
 8008440:	2200      	movs	r2, #0
 8008442:	2100      	movs	r1, #0
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f008 ffa7 	bl	8011398 <USBD_LL_PrepareReceive>
 800844a:	e03f      	b.n	80084cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	429a      	cmp	r2, r3
 8008456:	d11c      	bne.n	8008492 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008460:	429a      	cmp	r2, r3
 8008462:	d316      	bcc.n	8008492 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800846e:	429a      	cmp	r2, r3
 8008470:	d20f      	bcs.n	8008492 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008472:	2200      	movs	r2, #0
 8008474:	2100      	movs	r1, #0
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f001 f891 	bl	800959e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008484:	2300      	movs	r3, #0
 8008486:	2200      	movs	r2, #0
 8008488:	2100      	movs	r1, #0
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f008 ff84 	bl	8011398 <USBD_LL_PrepareReceive>
 8008490:	e01c      	b.n	80084cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b03      	cmp	r3, #3
 800849c:	d10f      	bne.n	80084be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d009      	beq.n	80084be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084be:	2180      	movs	r1, #128	@ 0x80
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f008 febf 	bl	8011244 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f001 f8bb 	bl	8009642 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d03a      	beq.n	800854c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f7ff fe42 	bl	8008160 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80084e4:	e032      	b.n	800854c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	4619      	mov	r1, r3
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 f985 	bl	8008800 <USBD_CoreFindEP>
 80084f6:	4603      	mov	r3, r0
 80084f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	2bff      	cmp	r3, #255	@ 0xff
 80084fe:	d025      	beq.n	800854c <USBD_LL_DataInStage+0x15a>
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d122      	bne.n	800854c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b03      	cmp	r3, #3
 8008510:	d11c      	bne.n	800854c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008512:	7dfa      	ldrb	r2, [r7, #23]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	32ae      	adds	r2, #174	@ 0xae
 8008518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d014      	beq.n	800854c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008522:	7dfa      	ldrb	r2, [r7, #23]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800852a:	7dfa      	ldrb	r2, [r7, #23]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	32ae      	adds	r2, #174	@ 0xae
 8008530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	7afa      	ldrb	r2, [r7, #11]
 8008538:	4611      	mov	r1, r2
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	4798      	blx	r3
 800853e:	4603      	mov	r3, r0
 8008540:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008542:	7dbb      	ldrb	r3, [r7, #22]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008548:	7dbb      	ldrb	r3, [r7, #22]
 800854a:	e000      	b.n	800854e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800858e:	2b00      	cmp	r3, #0
 8008590:	d014      	beq.n	80085bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00e      	beq.n	80085bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	6852      	ldr	r2, [r2, #4]
 80085aa:	b2d2      	uxtb	r2, r2
 80085ac:	4611      	mov	r1, r2
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80085b8:	2303      	movs	r3, #3
 80085ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085bc:	2340      	movs	r3, #64	@ 0x40
 80085be:	2200      	movs	r2, #0
 80085c0:	2100      	movs	r1, #0
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f008 fdf9 	bl	80111ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2240      	movs	r2, #64	@ 0x40
 80085d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085d8:	2340      	movs	r3, #64	@ 0x40
 80085da:	2200      	movs	r2, #0
 80085dc:	2180      	movs	r1, #128	@ 0x80
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f008 fdeb 	bl	80111ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2240      	movs	r2, #64	@ 0x40
 80085ee:	621a      	str	r2, [r3, #32]

  return ret;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	460b      	mov	r3, r1
 8008604:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b04      	cmp	r3, #4
 800862c:	d006      	beq.n	800863c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008634:	b2da      	uxtb	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2204      	movs	r2, #4
 8008640:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008652:	b480      	push	{r7}
 8008654:	b083      	sub	sp, #12
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b04      	cmp	r3, #4
 8008664:	d106      	bne.n	8008674 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800866c:	b2da      	uxtb	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b082      	sub	sp, #8
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b03      	cmp	r3, #3
 8008694:	d110      	bne.n	80086b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00b      	beq.n	80086b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d005      	beq.n	80086b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	460b      	mov	r3, r1
 80086cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	32ae      	adds	r2, #174	@ 0xae
 80086d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e01c      	b.n	800871e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d115      	bne.n	800871c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	32ae      	adds	r2, #174	@ 0xae
 80086fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00b      	beq.n	800871c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	32ae      	adds	r2, #174	@ 0xae
 800870e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	78fa      	ldrb	r2, [r7, #3]
 8008716:	4611      	mov	r1, r2
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b082      	sub	sp, #8
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	460b      	mov	r3, r1
 8008730:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	32ae      	adds	r2, #174	@ 0xae
 800873c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008744:	2303      	movs	r3, #3
 8008746:	e01c      	b.n	8008782 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b03      	cmp	r3, #3
 8008752:	d115      	bne.n	8008780 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	32ae      	adds	r2, #174	@ 0xae
 800875e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00b      	beq.n	8008780 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	32ae      	adds	r2, #174	@ 0xae
 8008772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008778:	78fa      	ldrb	r2, [r7, #3]
 800877a:	4611      	mov	r1, r2
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00e      	beq.n	80087dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	6852      	ldr	r2, [r2, #4]
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	4611      	mov	r1, r2
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80087d8:	2303      	movs	r3, #3
 80087da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	460b      	mov	r3, r1
 80087f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80087f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800880c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800880e:	4618      	mov	r0, r3
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b086      	sub	sp, #24
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	460b      	mov	r3, r1
 8008824:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800882e:	2300      	movs	r3, #0
 8008830:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	885b      	ldrh	r3, [r3, #2]
 8008836:	b29b      	uxth	r3, r3
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	7812      	ldrb	r2, [r2, #0]
 800883c:	4293      	cmp	r3, r2
 800883e:	d91f      	bls.n	8008880 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008846:	e013      	b.n	8008870 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008848:	f107 030a 	add.w	r3, r7, #10
 800884c:	4619      	mov	r1, r3
 800884e:	6978      	ldr	r0, [r7, #20]
 8008850:	f000 f81b 	bl	800888a <USBD_GetNextDesc>
 8008854:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	785b      	ldrb	r3, [r3, #1]
 800885a:	2b05      	cmp	r3, #5
 800885c:	d108      	bne.n	8008870 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	789b      	ldrb	r3, [r3, #2]
 8008866:	78fa      	ldrb	r2, [r7, #3]
 8008868:	429a      	cmp	r2, r3
 800886a:	d008      	beq.n	800887e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800886c:	2300      	movs	r3, #0
 800886e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	885b      	ldrh	r3, [r3, #2]
 8008874:	b29a      	uxth	r2, r3
 8008876:	897b      	ldrh	r3, [r7, #10]
 8008878:	429a      	cmp	r2, r3
 800887a:	d8e5      	bhi.n	8008848 <USBD_GetEpDesc+0x2e>
 800887c:	e000      	b.n	8008880 <USBD_GetEpDesc+0x66>
          break;
 800887e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008880:	693b      	ldr	r3, [r7, #16]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800888a:	b480      	push	{r7}
 800888c:	b085      	sub	sp, #20
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	881b      	ldrh	r3, [r3, #0]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	7812      	ldrb	r2, [r2, #0]
 80088a0:	4413      	add	r3, r2
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	461a      	mov	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4413      	add	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80088b4:	68fb      	ldr	r3, [r7, #12]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b087      	sub	sp, #28
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	3301      	adds	r3, #1
 80088d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80088e0:	8a3b      	ldrh	r3, [r7, #16]
 80088e2:	021b      	lsls	r3, r3, #8
 80088e4:	b21a      	sxth	r2, r3
 80088e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	b21b      	sxth	r3, r3
 80088ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088f0:	89fb      	ldrh	r3, [r7, #14]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
	...

08008900 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008916:	2b40      	cmp	r3, #64	@ 0x40
 8008918:	d005      	beq.n	8008926 <USBD_StdDevReq+0x26>
 800891a:	2b40      	cmp	r3, #64	@ 0x40
 800891c:	d857      	bhi.n	80089ce <USBD_StdDevReq+0xce>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00f      	beq.n	8008942 <USBD_StdDevReq+0x42>
 8008922:	2b20      	cmp	r3, #32
 8008924:	d153      	bne.n	80089ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	32ae      	adds	r2, #174	@ 0xae
 8008930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4798      	blx	r3
 800893c:	4603      	mov	r3, r0
 800893e:	73fb      	strb	r3, [r7, #15]
      break;
 8008940:	e04a      	b.n	80089d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	785b      	ldrb	r3, [r3, #1]
 8008946:	2b09      	cmp	r3, #9
 8008948:	d83b      	bhi.n	80089c2 <USBD_StdDevReq+0xc2>
 800894a:	a201      	add	r2, pc, #4	@ (adr r2, 8008950 <USBD_StdDevReq+0x50>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	080089a5 	.word	0x080089a5
 8008954:	080089b9 	.word	0x080089b9
 8008958:	080089c3 	.word	0x080089c3
 800895c:	080089af 	.word	0x080089af
 8008960:	080089c3 	.word	0x080089c3
 8008964:	08008983 	.word	0x08008983
 8008968:	08008979 	.word	0x08008979
 800896c:	080089c3 	.word	0x080089c3
 8008970:	0800899b 	.word	0x0800899b
 8008974:	0800898d 	.word	0x0800898d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa3c 	bl	8008df8 <USBD_GetDescriptor>
          break;
 8008980:	e024      	b.n	80089cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fba1 	bl	80090cc <USBD_SetAddress>
          break;
 800898a:	e01f      	b.n	80089cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fbe0 	bl	8009154 <USBD_SetConfig>
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
          break;
 8008998:	e018      	b.n	80089cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fc83 	bl	80092a8 <USBD_GetConfig>
          break;
 80089a2:	e013      	b.n	80089cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fcb4 	bl	8009314 <USBD_GetStatus>
          break;
 80089ac:	e00e      	b.n	80089cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fce3 	bl	800937c <USBD_SetFeature>
          break;
 80089b6:	e009      	b.n	80089cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fd07 	bl	80093ce <USBD_ClrFeature>
          break;
 80089c0:	e004      	b.n	80089cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fd5e 	bl	8009486 <USBD_CtlError>
          break;
 80089ca:	bf00      	nop
      }
      break;
 80089cc:	e004      	b.n	80089d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fd58 	bl	8009486 <USBD_CtlError>
      break;
 80089d6:	bf00      	nop
  }

  return ret;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop

080089e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089fa:	2b40      	cmp	r3, #64	@ 0x40
 80089fc:	d005      	beq.n	8008a0a <USBD_StdItfReq+0x26>
 80089fe:	2b40      	cmp	r3, #64	@ 0x40
 8008a00:	d852      	bhi.n	8008aa8 <USBD_StdItfReq+0xc4>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <USBD_StdItfReq+0x26>
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	d14e      	bne.n	8008aa8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	3b01      	subs	r3, #1
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d840      	bhi.n	8008a9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	889b      	ldrh	r3, [r3, #4]
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d836      	bhi.n	8008a90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	889b      	ldrh	r3, [r3, #4]
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	4619      	mov	r1, r3
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7ff fedb 	bl	80087e6 <USBD_CoreFindIF>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	2bff      	cmp	r3, #255	@ 0xff
 8008a38:	d01d      	beq.n	8008a76 <USBD_StdItfReq+0x92>
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d11a      	bne.n	8008a76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008a40:	7bba      	ldrb	r2, [r7, #14]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	32ae      	adds	r2, #174	@ 0xae
 8008a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00f      	beq.n	8008a70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008a50:	7bba      	ldrb	r2, [r7, #14]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a58:	7bba      	ldrb	r2, [r7, #14]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	32ae      	adds	r2, #174	@ 0xae
 8008a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	4798      	blx	r3
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a6e:	e004      	b.n	8008a7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008a70:	2303      	movs	r3, #3
 8008a72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a74:	e001      	b.n	8008a7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008a76:	2303      	movs	r3, #3
 8008a78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	88db      	ldrh	r3, [r3, #6]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d110      	bne.n	8008aa4 <USBD_StdItfReq+0xc0>
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10d      	bne.n	8008aa4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fdc7 	bl	800961c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a8e:	e009      	b.n	8008aa4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fcf7 	bl	8009486 <USBD_CtlError>
          break;
 8008a98:	e004      	b.n	8008aa4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fcf2 	bl	8009486 <USBD_CtlError>
          break;
 8008aa2:	e000      	b.n	8008aa6 <USBD_StdItfReq+0xc2>
          break;
 8008aa4:	bf00      	nop
      }
      break;
 8008aa6:	e004      	b.n	8008ab2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fceb 	bl	8009486 <USBD_CtlError>
      break;
 8008ab0:	bf00      	nop
  }

  return ret;
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	889b      	ldrh	r3, [r3, #4]
 8008ace:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ad8:	2b40      	cmp	r3, #64	@ 0x40
 8008ada:	d007      	beq.n	8008aec <USBD_StdEPReq+0x30>
 8008adc:	2b40      	cmp	r3, #64	@ 0x40
 8008ade:	f200 817f 	bhi.w	8008de0 <USBD_StdEPReq+0x324>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d02a      	beq.n	8008b3c <USBD_StdEPReq+0x80>
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	f040 817a 	bne.w	8008de0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	4619      	mov	r1, r3
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff fe85 	bl	8008800 <USBD_CoreFindEP>
 8008af6:	4603      	mov	r3, r0
 8008af8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008afa:	7b7b      	ldrb	r3, [r7, #13]
 8008afc:	2bff      	cmp	r3, #255	@ 0xff
 8008afe:	f000 8174 	beq.w	8008dea <USBD_StdEPReq+0x32e>
 8008b02:	7b7b      	ldrb	r3, [r7, #13]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f040 8170 	bne.w	8008dea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008b0a:	7b7a      	ldrb	r2, [r7, #13]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008b12:	7b7a      	ldrb	r2, [r7, #13]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	32ae      	adds	r2, #174	@ 0xae
 8008b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 8163 	beq.w	8008dea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008b24:	7b7a      	ldrb	r2, [r7, #13]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	32ae      	adds	r2, #174	@ 0xae
 8008b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	4798      	blx	r3
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b3a:	e156      	b.n	8008dea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	785b      	ldrb	r3, [r3, #1]
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d008      	beq.n	8008b56 <USBD_StdEPReq+0x9a>
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	f300 8145 	bgt.w	8008dd4 <USBD_StdEPReq+0x318>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f000 809b 	beq.w	8008c86 <USBD_StdEPReq+0x1ca>
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d03c      	beq.n	8008bce <USBD_StdEPReq+0x112>
 8008b54:	e13e      	b.n	8008dd4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d002      	beq.n	8008b68 <USBD_StdEPReq+0xac>
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d016      	beq.n	8008b94 <USBD_StdEPReq+0xd8>
 8008b66:	e02c      	b.n	8008bc2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00d      	beq.n	8008b8a <USBD_StdEPReq+0xce>
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	2b80      	cmp	r3, #128	@ 0x80
 8008b72:	d00a      	beq.n	8008b8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f008 fb63 	bl	8011244 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b7e:	2180      	movs	r1, #128	@ 0x80
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f008 fb5f 	bl	8011244 <USBD_LL_StallEP>
 8008b86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b88:	e020      	b.n	8008bcc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fc7a 	bl	8009486 <USBD_CtlError>
              break;
 8008b92:	e01b      	b.n	8008bcc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	885b      	ldrh	r3, [r3, #2]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10e      	bne.n	8008bba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00b      	beq.n	8008bba <USBD_StdEPReq+0xfe>
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	2b80      	cmp	r3, #128	@ 0x80
 8008ba6:	d008      	beq.n	8008bba <USBD_StdEPReq+0xfe>
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	88db      	ldrh	r3, [r3, #6]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d104      	bne.n	8008bba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f008 fb45 	bl	8011244 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fd2e 	bl	800961c <USBD_CtlSendStatus>

              break;
 8008bc0:	e004      	b.n	8008bcc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fc5e 	bl	8009486 <USBD_CtlError>
              break;
 8008bca:	bf00      	nop
          }
          break;
 8008bcc:	e107      	b.n	8008dde <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d002      	beq.n	8008be0 <USBD_StdEPReq+0x124>
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d016      	beq.n	8008c0c <USBD_StdEPReq+0x150>
 8008bde:	e04b      	b.n	8008c78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00d      	beq.n	8008c02 <USBD_StdEPReq+0x146>
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	2b80      	cmp	r3, #128	@ 0x80
 8008bea:	d00a      	beq.n	8008c02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f008 fb27 	bl	8011244 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bf6:	2180      	movs	r1, #128	@ 0x80
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f008 fb23 	bl	8011244 <USBD_LL_StallEP>
 8008bfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c00:	e040      	b.n	8008c84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fc3e 	bl	8009486 <USBD_CtlError>
              break;
 8008c0a:	e03b      	b.n	8008c84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	885b      	ldrh	r3, [r3, #2]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d136      	bne.n	8008c82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d004      	beq.n	8008c28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f008 fb2d 	bl	8011282 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fcf7 	bl	800961c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7ff fde4 	bl	8008800 <USBD_CoreFindEP>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c3c:	7b7b      	ldrb	r3, [r7, #13]
 8008c3e:	2bff      	cmp	r3, #255	@ 0xff
 8008c40:	d01f      	beq.n	8008c82 <USBD_StdEPReq+0x1c6>
 8008c42:	7b7b      	ldrb	r3, [r7, #13]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d11c      	bne.n	8008c82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008c48:	7b7a      	ldrb	r2, [r7, #13]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008c50:	7b7a      	ldrb	r2, [r7, #13]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	32ae      	adds	r2, #174	@ 0xae
 8008c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d010      	beq.n	8008c82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c60:	7b7a      	ldrb	r2, [r7, #13]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	32ae      	adds	r2, #174	@ 0xae
 8008c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	4798      	blx	r3
 8008c72:	4603      	mov	r3, r0
 8008c74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008c76:	e004      	b.n	8008c82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fc03 	bl	8009486 <USBD_CtlError>
              break;
 8008c80:	e000      	b.n	8008c84 <USBD_StdEPReq+0x1c8>
              break;
 8008c82:	bf00      	nop
          }
          break;
 8008c84:	e0ab      	b.n	8008dde <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d002      	beq.n	8008c98 <USBD_StdEPReq+0x1dc>
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d032      	beq.n	8008cfc <USBD_StdEPReq+0x240>
 8008c96:	e097      	b.n	8008dc8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d007      	beq.n	8008cae <USBD_StdEPReq+0x1f2>
 8008c9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ca0:	2b80      	cmp	r3, #128	@ 0x80
 8008ca2:	d004      	beq.n	8008cae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fbed 	bl	8009486 <USBD_CtlError>
                break;
 8008cac:	e091      	b.n	8008dd2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	da0b      	bge.n	8008cce <USBD_StdEPReq+0x212>
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	3310      	adds	r3, #16
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	4413      	add	r3, r2
 8008cca:	3304      	adds	r3, #4
 8008ccc:	e00b      	b.n	8008ce6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
 8008cd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2200      	movs	r2, #0
 8008cec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fc37 	bl	8009568 <USBD_CtlSendData>
              break;
 8008cfa:	e06a      	b.n	8008dd2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	da11      	bge.n	8008d28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	f003 020f 	and.w	r2, r3, #15
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	440b      	add	r3, r1
 8008d16:	3324      	adds	r3, #36	@ 0x24
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d117      	bne.n	8008d4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fbb0 	bl	8009486 <USBD_CtlError>
                  break;
 8008d26:	e054      	b.n	8008dd2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
 8008d2a:	f003 020f 	and.w	r2, r3, #15
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	4613      	mov	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	440b      	add	r3, r1
 8008d3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d104      	bne.n	8008d4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fb9d 	bl	8009486 <USBD_CtlError>
                  break;
 8008d4c:	e041      	b.n	8008dd2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	da0b      	bge.n	8008d6e <USBD_StdEPReq+0x2b2>
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	3310      	adds	r3, #16
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	4413      	add	r3, r2
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	e00b      	b.n	8008d86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d74:	4613      	mov	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	4413      	add	r3, r2
 8008d84:	3304      	adds	r3, #4
 8008d86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d002      	beq.n	8008d94 <USBD_StdEPReq+0x2d8>
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	2b80      	cmp	r3, #128	@ 0x80
 8008d92:	d103      	bne.n	8008d9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	2200      	movs	r2, #0
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	e00e      	b.n	8008dba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f008 fa8d 	bl	80112c0 <USBD_LL_IsStallEP>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2201      	movs	r2, #1
 8008db0:	601a      	str	r2, [r3, #0]
 8008db2:	e002      	b.n	8008dba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2200      	movs	r2, #0
 8008db8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fbd1 	bl	8009568 <USBD_CtlSendData>
              break;
 8008dc6:	e004      	b.n	8008dd2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fb5b 	bl	8009486 <USBD_CtlError>
              break;
 8008dd0:	bf00      	nop
          }
          break;
 8008dd2:	e004      	b.n	8008dde <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fb55 	bl	8009486 <USBD_CtlError>
          break;
 8008ddc:	bf00      	nop
      }
      break;
 8008dde:	e005      	b.n	8008dec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fb4f 	bl	8009486 <USBD_CtlError>
      break;
 8008de8:	e000      	b.n	8008dec <USBD_StdEPReq+0x330>
      break;
 8008dea:	bf00      	nop
  }

  return ret;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	885b      	ldrh	r3, [r3, #2]
 8008e12:	0a1b      	lsrs	r3, r3, #8
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	3b01      	subs	r3, #1
 8008e18:	2b06      	cmp	r3, #6
 8008e1a:	f200 8128 	bhi.w	800906e <USBD_GetDescriptor+0x276>
 8008e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e24 <USBD_GetDescriptor+0x2c>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008e41 	.word	0x08008e41
 8008e28:	08008e59 	.word	0x08008e59
 8008e2c:	08008e99 	.word	0x08008e99
 8008e30:	0800906f 	.word	0x0800906f
 8008e34:	0800906f 	.word	0x0800906f
 8008e38:	0800900f 	.word	0x0800900f
 8008e3c:	0800903b 	.word	0x0800903b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	7c12      	ldrb	r2, [r2, #16]
 8008e4c:	f107 0108 	add.w	r1, r7, #8
 8008e50:	4610      	mov	r0, r2
 8008e52:	4798      	blx	r3
 8008e54:	60f8      	str	r0, [r7, #12]
      break;
 8008e56:	e112      	b.n	800907e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	7c1b      	ldrb	r3, [r3, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10d      	bne.n	8008e7c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e68:	f107 0208 	add.w	r2, r7, #8
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4798      	blx	r3
 8008e70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3301      	adds	r3, #1
 8008e76:	2202      	movs	r2, #2
 8008e78:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e7a:	e100      	b.n	800907e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e84:	f107 0208 	add.w	r2, r7, #8
 8008e88:	4610      	mov	r0, r2
 8008e8a:	4798      	blx	r3
 8008e8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3301      	adds	r3, #1
 8008e92:	2202      	movs	r2, #2
 8008e94:	701a      	strb	r2, [r3, #0]
      break;
 8008e96:	e0f2      	b.n	800907e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	885b      	ldrh	r3, [r3, #2]
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b05      	cmp	r3, #5
 8008ea0:	f200 80ac 	bhi.w	8008ffc <USBD_GetDescriptor+0x204>
 8008ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8008eac <USBD_GetDescriptor+0xb4>)
 8008ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eaa:	bf00      	nop
 8008eac:	08008ec5 	.word	0x08008ec5
 8008eb0:	08008ef9 	.word	0x08008ef9
 8008eb4:	08008f2d 	.word	0x08008f2d
 8008eb8:	08008f61 	.word	0x08008f61
 8008ebc:	08008f95 	.word	0x08008f95
 8008ec0:	08008fc9 	.word	0x08008fc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	7c12      	ldrb	r2, [r2, #16]
 8008edc:	f107 0108 	add.w	r1, r7, #8
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	4798      	blx	r3
 8008ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ee6:	e091      	b.n	800900c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 facb 	bl	8009486 <USBD_CtlError>
            err++;
 8008ef0:	7afb      	ldrb	r3, [r7, #11]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ef6:	e089      	b.n	800900c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00b      	beq.n	8008f1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	7c12      	ldrb	r2, [r2, #16]
 8008f10:	f107 0108 	add.w	r1, r7, #8
 8008f14:	4610      	mov	r0, r2
 8008f16:	4798      	blx	r3
 8008f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f1a:	e077      	b.n	800900c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fab1 	bl	8009486 <USBD_CtlError>
            err++;
 8008f24:	7afb      	ldrb	r3, [r7, #11]
 8008f26:	3301      	adds	r3, #1
 8008f28:	72fb      	strb	r3, [r7, #11]
          break;
 8008f2a:	e06f      	b.n	800900c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	7c12      	ldrb	r2, [r2, #16]
 8008f44:	f107 0108 	add.w	r1, r7, #8
 8008f48:	4610      	mov	r0, r2
 8008f4a:	4798      	blx	r3
 8008f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f4e:	e05d      	b.n	800900c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fa97 	bl	8009486 <USBD_CtlError>
            err++;
 8008f58:	7afb      	ldrb	r3, [r7, #11]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f5e:	e055      	b.n	800900c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00b      	beq.n	8008f84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	7c12      	ldrb	r2, [r2, #16]
 8008f78:	f107 0108 	add.w	r1, r7, #8
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4798      	blx	r3
 8008f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f82:	e043      	b.n	800900c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fa7d 	bl	8009486 <USBD_CtlError>
            err++;
 8008f8c:	7afb      	ldrb	r3, [r7, #11]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	72fb      	strb	r3, [r7, #11]
          break;
 8008f92:	e03b      	b.n	800900c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	7c12      	ldrb	r2, [r2, #16]
 8008fac:	f107 0108 	add.w	r1, r7, #8
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	4798      	blx	r3
 8008fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fb6:	e029      	b.n	800900c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fa63 	bl	8009486 <USBD_CtlError>
            err++;
 8008fc0:	7afb      	ldrb	r3, [r7, #11]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fc6:	e021      	b.n	800900c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00b      	beq.n	8008fec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	7c12      	ldrb	r2, [r2, #16]
 8008fe0:	f107 0108 	add.w	r1, r7, #8
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
 8008fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fea:	e00f      	b.n	800900c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fa49 	bl	8009486 <USBD_CtlError>
            err++;
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8008ffa:	e007      	b.n	800900c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fa41 	bl	8009486 <USBD_CtlError>
          err++;
 8009004:	7afb      	ldrb	r3, [r7, #11]
 8009006:	3301      	adds	r3, #1
 8009008:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800900a:	bf00      	nop
      }
      break;
 800900c:	e037      	b.n	800907e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	7c1b      	ldrb	r3, [r3, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d109      	bne.n	800902a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800901c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800901e:	f107 0208 	add.w	r2, r7, #8
 8009022:	4610      	mov	r0, r2
 8009024:	4798      	blx	r3
 8009026:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009028:	e029      	b.n	800907e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fa2a 	bl	8009486 <USBD_CtlError>
        err++;
 8009032:	7afb      	ldrb	r3, [r7, #11]
 8009034:	3301      	adds	r3, #1
 8009036:	72fb      	strb	r3, [r7, #11]
      break;
 8009038:	e021      	b.n	800907e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	7c1b      	ldrb	r3, [r3, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10d      	bne.n	800905e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800904a:	f107 0208 	add.w	r2, r7, #8
 800904e:	4610      	mov	r0, r2
 8009050:	4798      	blx	r3
 8009052:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	3301      	adds	r3, #1
 8009058:	2207      	movs	r2, #7
 800905a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800905c:	e00f      	b.n	800907e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fa10 	bl	8009486 <USBD_CtlError>
        err++;
 8009066:	7afb      	ldrb	r3, [r7, #11]
 8009068:	3301      	adds	r3, #1
 800906a:	72fb      	strb	r3, [r7, #11]
      break;
 800906c:	e007      	b.n	800907e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fa08 	bl	8009486 <USBD_CtlError>
      err++;
 8009076:	7afb      	ldrb	r3, [r7, #11]
 8009078:	3301      	adds	r3, #1
 800907a:	72fb      	strb	r3, [r7, #11]
      break;
 800907c:	bf00      	nop
  }

  if (err != 0U)
 800907e:	7afb      	ldrb	r3, [r7, #11]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d11e      	bne.n	80090c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	88db      	ldrh	r3, [r3, #6]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d016      	beq.n	80090ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800908c:	893b      	ldrh	r3, [r7, #8]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00e      	beq.n	80090b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	88da      	ldrh	r2, [r3, #6]
 8009096:	893b      	ldrh	r3, [r7, #8]
 8009098:	4293      	cmp	r3, r2
 800909a:	bf28      	it	cs
 800909c:	4613      	movcs	r3, r2
 800909e:	b29b      	uxth	r3, r3
 80090a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090a2:	893b      	ldrh	r3, [r7, #8]
 80090a4:	461a      	mov	r2, r3
 80090a6:	68f9      	ldr	r1, [r7, #12]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fa5d 	bl	8009568 <USBD_CtlSendData>
 80090ae:	e009      	b.n	80090c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f9e7 	bl	8009486 <USBD_CtlError>
 80090b8:	e004      	b.n	80090c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 faae 	bl	800961c <USBD_CtlSendStatus>
 80090c0:	e000      	b.n	80090c4 <USBD_GetDescriptor+0x2cc>
    return;
 80090c2:	bf00      	nop
  }
}
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop

080090cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	889b      	ldrh	r3, [r3, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d131      	bne.n	8009142 <USBD_SetAddress+0x76>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	88db      	ldrh	r3, [r3, #6]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d12d      	bne.n	8009142 <USBD_SetAddress+0x76>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	885b      	ldrh	r3, [r3, #2]
 80090ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80090ec:	d829      	bhi.n	8009142 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	885b      	ldrh	r3, [r3, #2]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b03      	cmp	r3, #3
 8009104:	d104      	bne.n	8009110 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f9bc 	bl	8009486 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800910e:	e01d      	b.n	800914c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	7bfa      	ldrb	r2, [r7, #15]
 8009114:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f008 f8fb 	bl	8011318 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fa7a 	bl	800961c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d004      	beq.n	8009138 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2202      	movs	r2, #2
 8009132:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009136:	e009      	b.n	800914c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009140:	e004      	b.n	800914c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f99e 	bl	8009486 <USBD_CtlError>
  }
}
 800914a:	bf00      	nop
 800914c:	bf00      	nop
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	885b      	ldrh	r3, [r3, #2]
 8009166:	b2da      	uxtb	r2, r3
 8009168:	4b4e      	ldr	r3, [pc, #312]	@ (80092a4 <USBD_SetConfig+0x150>)
 800916a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800916c:	4b4d      	ldr	r3, [pc, #308]	@ (80092a4 <USBD_SetConfig+0x150>)
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d905      	bls.n	8009180 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f985 	bl	8009486 <USBD_CtlError>
    return USBD_FAIL;
 800917c:	2303      	movs	r3, #3
 800917e:	e08c      	b.n	800929a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b02      	cmp	r3, #2
 800918a:	d002      	beq.n	8009192 <USBD_SetConfig+0x3e>
 800918c:	2b03      	cmp	r3, #3
 800918e:	d029      	beq.n	80091e4 <USBD_SetConfig+0x90>
 8009190:	e075      	b.n	800927e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009192:	4b44      	ldr	r3, [pc, #272]	@ (80092a4 <USBD_SetConfig+0x150>)
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d020      	beq.n	80091dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800919a:	4b42      	ldr	r3, [pc, #264]	@ (80092a4 <USBD_SetConfig+0x150>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091a4:	4b3f      	ldr	r3, [pc, #252]	@ (80092a4 <USBD_SetConfig+0x150>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7fe ffe3 	bl	8008176 <USBD_SetClassConfig>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d008      	beq.n	80091cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f962 	bl	8009486 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2202      	movs	r2, #2
 80091c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091ca:	e065      	b.n	8009298 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fa25 	bl	800961c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2203      	movs	r2, #3
 80091d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80091da:	e05d      	b.n	8009298 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fa1d 	bl	800961c <USBD_CtlSendStatus>
      break;
 80091e2:	e059      	b.n	8009298 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80091e4:	4b2f      	ldr	r3, [pc, #188]	@ (80092a4 <USBD_SetConfig+0x150>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d112      	bne.n	8009212 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2202      	movs	r2, #2
 80091f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80091f4:	4b2b      	ldr	r3, [pc, #172]	@ (80092a4 <USBD_SetConfig+0x150>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	461a      	mov	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091fe:	4b29      	ldr	r3, [pc, #164]	@ (80092a4 <USBD_SetConfig+0x150>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7fe ffd2 	bl	80081ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fa06 	bl	800961c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009210:	e042      	b.n	8009298 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009212:	4b24      	ldr	r3, [pc, #144]	@ (80092a4 <USBD_SetConfig+0x150>)
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	461a      	mov	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	429a      	cmp	r2, r3
 800921e:	d02a      	beq.n	8009276 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	b2db      	uxtb	r3, r3
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7fe ffc0 	bl	80081ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800922e:	4b1d      	ldr	r3, [pc, #116]	@ (80092a4 <USBD_SetConfig+0x150>)
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009238:	4b1a      	ldr	r3, [pc, #104]	@ (80092a4 <USBD_SetConfig+0x150>)
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7fe ff99 	bl	8008176 <USBD_SetClassConfig>
 8009244:	4603      	mov	r3, r0
 8009246:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00f      	beq.n	800926e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f918 	bl	8009486 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	b2db      	uxtb	r3, r3
 800925c:	4619      	mov	r1, r3
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7fe ffa5 	bl	80081ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800926c:	e014      	b.n	8009298 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f9d4 	bl	800961c <USBD_CtlSendStatus>
      break;
 8009274:	e010      	b.n	8009298 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f9d0 	bl	800961c <USBD_CtlSendStatus>
      break;
 800927c:	e00c      	b.n	8009298 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f900 	bl	8009486 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009286:	4b07      	ldr	r3, [pc, #28]	@ (80092a4 <USBD_SetConfig+0x150>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7fe ff8e 	bl	80081ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009292:	2303      	movs	r3, #3
 8009294:	73fb      	strb	r3, [r7, #15]
      break;
 8009296:	bf00      	nop
  }

  return ret;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20002324 	.word	0x20002324

080092a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	88db      	ldrh	r3, [r3, #6]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d004      	beq.n	80092c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f8e2 	bl	8009486 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092c2:	e023      	b.n	800930c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	dc02      	bgt.n	80092d6 <USBD_GetConfig+0x2e>
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	dc03      	bgt.n	80092dc <USBD_GetConfig+0x34>
 80092d4:	e015      	b.n	8009302 <USBD_GetConfig+0x5a>
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d00b      	beq.n	80092f2 <USBD_GetConfig+0x4a>
 80092da:	e012      	b.n	8009302 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	3308      	adds	r3, #8
 80092e6:	2201      	movs	r2, #1
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f93c 	bl	8009568 <USBD_CtlSendData>
        break;
 80092f0:	e00c      	b.n	800930c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3304      	adds	r3, #4
 80092f6:	2201      	movs	r2, #1
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f934 	bl	8009568 <USBD_CtlSendData>
        break;
 8009300:	e004      	b.n	800930c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f8be 	bl	8009486 <USBD_CtlError>
        break;
 800930a:	bf00      	nop
}
 800930c:	bf00      	nop
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009324:	b2db      	uxtb	r3, r3
 8009326:	3b01      	subs	r3, #1
 8009328:	2b02      	cmp	r3, #2
 800932a:	d81e      	bhi.n	800936a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	88db      	ldrh	r3, [r3, #6]
 8009330:	2b02      	cmp	r3, #2
 8009332:	d004      	beq.n	800933e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f8a5 	bl	8009486 <USBD_CtlError>
        break;
 800933c:	e01a      	b.n	8009374 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800934a:	2b00      	cmp	r3, #0
 800934c:	d005      	beq.n	800935a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	f043 0202 	orr.w	r2, r3, #2
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	330c      	adds	r3, #12
 800935e:	2202      	movs	r2, #2
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f900 	bl	8009568 <USBD_CtlSendData>
      break;
 8009368:	e004      	b.n	8009374 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f88a 	bl	8009486 <USBD_CtlError>
      break;
 8009372:	bf00      	nop
  }
}
 8009374:	bf00      	nop
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	885b      	ldrh	r3, [r3, #2]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d107      	bne.n	800939e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f940 	bl	800961c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800939c:	e013      	b.n	80093c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	885b      	ldrh	r3, [r3, #2]
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d10b      	bne.n	80093be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	889b      	ldrh	r3, [r3, #4]
 80093aa:	0a1b      	lsrs	r3, r3, #8
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f930 	bl	800961c <USBD_CtlSendStatus>
}
 80093bc:	e003      	b.n	80093c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f860 	bl	8009486 <USBD_CtlError>
}
 80093c6:	bf00      	nop
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b082      	sub	sp, #8
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	3b01      	subs	r3, #1
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d80b      	bhi.n	80093fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	885b      	ldrh	r3, [r3, #2]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d10c      	bne.n	8009408 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f910 	bl	800961c <USBD_CtlSendStatus>
      }
      break;
 80093fc:	e004      	b.n	8009408 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f840 	bl	8009486 <USBD_CtlError>
      break;
 8009406:	e000      	b.n	800940a <USBD_ClrFeature+0x3c>
      break;
 8009408:	bf00      	nop
  }
}
 800940a:	bf00      	nop
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	781a      	ldrb	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3301      	adds	r3, #1
 800942c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	781a      	ldrb	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3301      	adds	r3, #1
 800943a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7ff fa40 	bl	80088c2 <SWAPBYTE>
 8009442:	4603      	mov	r3, r0
 8009444:	461a      	mov	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3301      	adds	r3, #1
 800944e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3301      	adds	r3, #1
 8009454:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f7ff fa33 	bl	80088c2 <SWAPBYTE>
 800945c:	4603      	mov	r3, r0
 800945e:	461a      	mov	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	3301      	adds	r3, #1
 8009468:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3301      	adds	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f7ff fa26 	bl	80088c2 <SWAPBYTE>
 8009476:	4603      	mov	r3, r0
 8009478:	461a      	mov	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	80da      	strh	r2, [r3, #6]
}
 800947e:	bf00      	nop
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009490:	2180      	movs	r1, #128	@ 0x80
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f007 fed6 	bl	8011244 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009498:	2100      	movs	r1, #0
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f007 fed2 	bl	8011244 <USBD_LL_StallEP>
}
 80094a0:	bf00      	nop
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094b4:	2300      	movs	r3, #0
 80094b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d036      	beq.n	800952c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80094c2:	6938      	ldr	r0, [r7, #16]
 80094c4:	f000 f836 	bl	8009534 <USBD_GetLen>
 80094c8:	4603      	mov	r3, r0
 80094ca:	3301      	adds	r3, #1
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80094d6:	7dfb      	ldrb	r3, [r7, #23]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	4413      	add	r3, r2
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	7812      	ldrb	r2, [r2, #0]
 80094e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
 80094e4:	3301      	adds	r3, #1
 80094e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	4413      	add	r3, r2
 80094ee:	2203      	movs	r2, #3
 80094f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
 80094f4:	3301      	adds	r3, #1
 80094f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80094f8:	e013      	b.n	8009522 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	4413      	add	r3, r2
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	7812      	ldrb	r2, [r2, #0]
 8009504:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	3301      	adds	r3, #1
 800950a:	613b      	str	r3, [r7, #16]
    idx++;
 800950c:	7dfb      	ldrb	r3, [r7, #23]
 800950e:	3301      	adds	r3, #1
 8009510:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009512:	7dfb      	ldrb	r3, [r7, #23]
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	4413      	add	r3, r2
 8009518:	2200      	movs	r2, #0
 800951a:	701a      	strb	r2, [r3, #0]
    idx++;
 800951c:	7dfb      	ldrb	r3, [r7, #23]
 800951e:	3301      	adds	r3, #1
 8009520:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1e7      	bne.n	80094fa <USBD_GetString+0x52>
 800952a:	e000      	b.n	800952e <USBD_GetString+0x86>
    return;
 800952c:	bf00      	nop
  }
}
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009544:	e005      	b.n	8009552 <USBD_GetLen+0x1e>
  {
    len++;
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	3301      	adds	r3, #1
 800954a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	3301      	adds	r3, #1
 8009550:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1f5      	bne.n	8009546 <USBD_GetLen+0x12>
  }

  return len;
 800955a:	7bfb      	ldrb	r3, [r7, #15]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3714      	adds	r7, #20
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2202      	movs	r2, #2
 8009578:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	2100      	movs	r1, #0
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f007 fee1 	bl	8011356 <USBD_LL_Transmit>

  return USBD_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	60f8      	str	r0, [r7, #12]
 80095a6:	60b9      	str	r1, [r7, #8]
 80095a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	2100      	movs	r1, #0
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f007 fed0 	bl	8011356 <USBD_LL_Transmit>

  return USBD_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2203      	movs	r2, #3
 80095d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	2100      	movs	r1, #0
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f007 fed4 	bl	8011398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	2100      	movs	r1, #0
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f007 fec3 	bl	8011398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2204      	movs	r2, #4
 8009628:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800962c:	2300      	movs	r3, #0
 800962e:	2200      	movs	r2, #0
 8009630:	2100      	movs	r1, #0
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f007 fe8f 	bl	8011356 <USBD_LL_Transmit>

  return USBD_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2205      	movs	r2, #5
 800964e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009652:	2300      	movs	r3, #0
 8009654:	2200      	movs	r2, #0
 8009656:	2100      	movs	r1, #0
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f007 fe9d 	bl	8011398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009672:	79fb      	ldrb	r3, [r7, #7]
 8009674:	4a08      	ldr	r2, [pc, #32]	@ (8009698 <disk_status+0x30>)
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	79fa      	ldrb	r2, [r7, #7]
 8009680:	4905      	ldr	r1, [pc, #20]	@ (8009698 <disk_status+0x30>)
 8009682:	440a      	add	r2, r1
 8009684:	7a12      	ldrb	r2, [r2, #8]
 8009686:	4610      	mov	r0, r2
 8009688:	4798      	blx	r3
 800968a:	4603      	mov	r3, r0
 800968c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800968e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20002550 	.word	0x20002550

0800969c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	4603      	mov	r3, r0
 80096a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	4a0e      	ldr	r2, [pc, #56]	@ (80096e8 <disk_initialize+0x4c>)
 80096ae:	5cd3      	ldrb	r3, [r2, r3]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d114      	bne.n	80096de <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	4a0c      	ldr	r2, [pc, #48]	@ (80096e8 <disk_initialize+0x4c>)
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	79fa      	ldrb	r2, [r7, #7]
 80096c2:	4909      	ldr	r1, [pc, #36]	@ (80096e8 <disk_initialize+0x4c>)
 80096c4:	440a      	add	r2, r1
 80096c6:	7a12      	ldrb	r2, [r2, #8]
 80096c8:	4610      	mov	r0, r2
 80096ca:	4798      	blx	r3
 80096cc:	4603      	mov	r3, r0
 80096ce:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d103      	bne.n	80096de <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80096d6:	79fb      	ldrb	r3, [r7, #7]
 80096d8:	4a03      	ldr	r2, [pc, #12]	@ (80096e8 <disk_initialize+0x4c>)
 80096da:	2101      	movs	r1, #1
 80096dc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80096de:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	20002550 	.word	0x20002550

080096ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80096ec:	b590      	push	{r4, r7, lr}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60b9      	str	r1, [r7, #8]
 80096f4:	607a      	str	r2, [r7, #4]
 80096f6:	603b      	str	r3, [r7, #0]
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009728 <disk_read+0x3c>)
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	689c      	ldr	r4, [r3, #8]
 8009708:	7bfb      	ldrb	r3, [r7, #15]
 800970a:	4a07      	ldr	r2, [pc, #28]	@ (8009728 <disk_read+0x3c>)
 800970c:	4413      	add	r3, r2
 800970e:	7a18      	ldrb	r0, [r3, #8]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	68b9      	ldr	r1, [r7, #8]
 8009716:	47a0      	blx	r4
 8009718:	4603      	mov	r3, r0
 800971a:	75fb      	strb	r3, [r7, #23]
  return res;
 800971c:	7dfb      	ldrb	r3, [r7, #23]
}
 800971e:	4618      	mov	r0, r3
 8009720:	371c      	adds	r7, #28
 8009722:	46bd      	mov	sp, r7
 8009724:	bd90      	pop	{r4, r7, pc}
 8009726:	bf00      	nop
 8009728:	20002550 	.word	0x20002550

0800972c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800972c:	b590      	push	{r4, r7, lr}
 800972e:	b087      	sub	sp, #28
 8009730:	af00      	add	r7, sp, #0
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	607a      	str	r2, [r7, #4]
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	4603      	mov	r3, r0
 800973a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	4a0a      	ldr	r2, [pc, #40]	@ (8009768 <disk_write+0x3c>)
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	68dc      	ldr	r4, [r3, #12]
 8009748:	7bfb      	ldrb	r3, [r7, #15]
 800974a:	4a07      	ldr	r2, [pc, #28]	@ (8009768 <disk_write+0x3c>)
 800974c:	4413      	add	r3, r2
 800974e:	7a18      	ldrb	r0, [r3, #8]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	68b9      	ldr	r1, [r7, #8]
 8009756:	47a0      	blx	r4
 8009758:	4603      	mov	r3, r0
 800975a:	75fb      	strb	r3, [r7, #23]
  return res;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
}
 800975e:	4618      	mov	r0, r3
 8009760:	371c      	adds	r7, #28
 8009762:	46bd      	mov	sp, r7
 8009764:	bd90      	pop	{r4, r7, pc}
 8009766:	bf00      	nop
 8009768:	20002550 	.word	0x20002550

0800976c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	603a      	str	r2, [r7, #0]
 8009776:	71fb      	strb	r3, [r7, #7]
 8009778:	460b      	mov	r3, r1
 800977a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	4a09      	ldr	r2, [pc, #36]	@ (80097a4 <disk_ioctl+0x38>)
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	79fa      	ldrb	r2, [r7, #7]
 800978a:	4906      	ldr	r1, [pc, #24]	@ (80097a4 <disk_ioctl+0x38>)
 800978c:	440a      	add	r2, r1
 800978e:	7a10      	ldrb	r0, [r2, #8]
 8009790:	79b9      	ldrb	r1, [r7, #6]
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	4798      	blx	r3
 8009796:	4603      	mov	r3, r0
 8009798:	73fb      	strb	r3, [r7, #15]
  return res;
 800979a:	7bfb      	ldrb	r3, [r7, #15]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20002550 	.word	0x20002550

080097a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3301      	adds	r3, #1
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80097b8:	89fb      	ldrh	r3, [r7, #14]
 80097ba:	021b      	lsls	r3, r3, #8
 80097bc:	b21a      	sxth	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	b21b      	sxth	r3, r3
 80097c4:	4313      	orrs	r3, r2
 80097c6:	b21b      	sxth	r3, r3
 80097c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80097ca:	89fb      	ldrh	r3, [r7, #14]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3303      	adds	r3, #3
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	021b      	lsls	r3, r3, #8
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	3202      	adds	r2, #2
 80097f0:	7812      	ldrb	r2, [r2, #0]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	021b      	lsls	r3, r3, #8
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	3201      	adds	r2, #1
 80097fe:	7812      	ldrb	r2, [r2, #0]
 8009800:	4313      	orrs	r3, r2
 8009802:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	021b      	lsls	r3, r3, #8
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	7812      	ldrb	r2, [r2, #0]
 800980c:	4313      	orrs	r3, r2
 800980e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009810:	68fb      	ldr	r3, [r7, #12]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800981e:	b480      	push	{r7}
 8009820:	b083      	sub	sp, #12
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	460b      	mov	r3, r1
 8009828:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	1c5a      	adds	r2, r3, #1
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	887a      	ldrh	r2, [r7, #2]
 8009832:	b2d2      	uxtb	r2, r2
 8009834:	701a      	strb	r2, [r3, #0]
 8009836:	887b      	ldrh	r3, [r7, #2]
 8009838:	0a1b      	lsrs	r3, r3, #8
 800983a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	607a      	str	r2, [r7, #4]
 8009842:	887a      	ldrh	r2, [r7, #2]
 8009844:	b2d2      	uxtb	r2, r2
 8009846:	701a      	strb	r2, [r3, #0]
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	1c5a      	adds	r2, r3, #1
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	b2d2      	uxtb	r2, r2
 8009868:	701a      	strb	r2, [r3, #0]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	0a1b      	lsrs	r3, r3, #8
 800986e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	607a      	str	r2, [r7, #4]
 8009876:	683a      	ldr	r2, [r7, #0]
 8009878:	b2d2      	uxtb	r2, r2
 800987a:	701a      	strb	r2, [r3, #0]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	0a1b      	lsrs	r3, r3, #8
 8009880:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	1c5a      	adds	r2, r3, #1
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	b2d2      	uxtb	r2, r2
 800988c:	701a      	strb	r2, [r3, #0]
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	0a1b      	lsrs	r3, r3, #8
 8009892:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	607a      	str	r2, [r7, #4]
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	b2d2      	uxtb	r2, r2
 800989e:	701a      	strb	r2, [r3, #0]
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00d      	beq.n	80098e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	1c53      	adds	r3, r2, #1
 80098ca:	613b      	str	r3, [r7, #16]
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	1c59      	adds	r1, r3, #1
 80098d0:	6179      	str	r1, [r7, #20]
 80098d2:	7812      	ldrb	r2, [r2, #0]
 80098d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	3b01      	subs	r3, #1
 80098da:	607b      	str	r3, [r7, #4]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1f1      	bne.n	80098c6 <mem_cpy+0x1a>
	}
}
 80098e2:	bf00      	nop
 80098e4:	371c      	adds	r7, #28
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80098ee:	b480      	push	{r7}
 80098f0:	b087      	sub	sp, #28
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	617a      	str	r2, [r7, #20]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	b2d2      	uxtb	r2, r2
 8009908:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	3b01      	subs	r3, #1
 800990e:	607b      	str	r3, [r7, #4]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1f3      	bne.n	80098fe <mem_set+0x10>
}
 8009916:	bf00      	nop
 8009918:	bf00      	nop
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009924:	b480      	push	{r7}
 8009926:	b089      	sub	sp, #36	@ 0x24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	61fb      	str	r3, [r7, #28]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	1c5a      	adds	r2, r3, #1
 8009940:	61fa      	str	r2, [r7, #28]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	4619      	mov	r1, r3
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	61ba      	str	r2, [r7, #24]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	1acb      	subs	r3, r1, r3
 8009950:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3b01      	subs	r3, #1
 8009956:	607b      	str	r3, [r7, #4]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <mem_cmp+0x40>
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d0eb      	beq.n	800993c <mem_cmp+0x18>

	return r;
 8009964:	697b      	ldr	r3, [r7, #20]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3724      	adds	r7, #36	@ 0x24
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009972:	b480      	push	{r7}
 8009974:	b083      	sub	sp, #12
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800997c:	e002      	b.n	8009984 <chk_chr+0x12>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	3301      	adds	r3, #1
 8009982:	607b      	str	r3, [r7, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d005      	beq.n	8009998 <chk_chr+0x26>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	461a      	mov	r2, r3
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	4293      	cmp	r3, r2
 8009996:	d1f2      	bne.n	800997e <chk_chr+0xc>
	return *str;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	781b      	ldrb	r3, [r3, #0]
}
 800999c:	4618      	mov	r0, r3
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099b2:	2300      	movs	r3, #0
 80099b4:	60bb      	str	r3, [r7, #8]
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	60fb      	str	r3, [r7, #12]
 80099ba:	e029      	b.n	8009a10 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80099bc:	4a27      	ldr	r2, [pc, #156]	@ (8009a5c <chk_lock+0xb4>)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	011b      	lsls	r3, r3, #4
 80099c2:	4413      	add	r3, r2
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d01d      	beq.n	8009a06 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80099ca:	4a24      	ldr	r2, [pc, #144]	@ (8009a5c <chk_lock+0xb4>)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	011b      	lsls	r3, r3, #4
 80099d0:	4413      	add	r3, r2
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d116      	bne.n	8009a0a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80099dc:	4a1f      	ldr	r2, [pc, #124]	@ (8009a5c <chk_lock+0xb4>)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	011b      	lsls	r3, r3, #4
 80099e2:	4413      	add	r3, r2
 80099e4:	3304      	adds	r3, #4
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d10c      	bne.n	8009a0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80099f0:	4a1a      	ldr	r2, [pc, #104]	@ (8009a5c <chk_lock+0xb4>)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	011b      	lsls	r3, r3, #4
 80099f6:	4413      	add	r3, r2
 80099f8:	3308      	adds	r3, #8
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d102      	bne.n	8009a0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a04:	e007      	b.n	8009a16 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009a06:	2301      	movs	r3, #1
 8009a08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	60fb      	str	r3, [r7, #12]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d9d2      	bls.n	80099bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d109      	bne.n	8009a30 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d102      	bne.n	8009a28 <chk_lock+0x80>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d101      	bne.n	8009a2c <chk_lock+0x84>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	e010      	b.n	8009a4e <chk_lock+0xa6>
 8009a2c:	2312      	movs	r3, #18
 8009a2e:	e00e      	b.n	8009a4e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d108      	bne.n	8009a48 <chk_lock+0xa0>
 8009a36:	4a09      	ldr	r2, [pc, #36]	@ (8009a5c <chk_lock+0xb4>)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	011b      	lsls	r3, r3, #4
 8009a3c:	4413      	add	r3, r2
 8009a3e:	330c      	adds	r3, #12
 8009a40:	881b      	ldrh	r3, [r3, #0]
 8009a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a46:	d101      	bne.n	8009a4c <chk_lock+0xa4>
 8009a48:	2310      	movs	r3, #16
 8009a4a:	e000      	b.n	8009a4e <chk_lock+0xa6>
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	20002330 	.word	0x20002330

08009a60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a66:	2300      	movs	r3, #0
 8009a68:	607b      	str	r3, [r7, #4]
 8009a6a:	e002      	b.n	8009a72 <enq_lock+0x12>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	607b      	str	r3, [r7, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d806      	bhi.n	8009a86 <enq_lock+0x26>
 8009a78:	4a09      	ldr	r2, [pc, #36]	@ (8009aa0 <enq_lock+0x40>)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	011b      	lsls	r3, r3, #4
 8009a7e:	4413      	add	r3, r2
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1f2      	bne.n	8009a6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	bf14      	ite	ne
 8009a8c:	2301      	movne	r3, #1
 8009a8e:	2300      	moveq	r3, #0
 8009a90:	b2db      	uxtb	r3, r3
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	20002330 	.word	0x20002330

08009aa4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60fb      	str	r3, [r7, #12]
 8009ab2:	e01f      	b.n	8009af4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009ab4:	4a41      	ldr	r2, [pc, #260]	@ (8009bbc <inc_lock+0x118>)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	4413      	add	r3, r2
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d113      	bne.n	8009aee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009ac6:	4a3d      	ldr	r2, [pc, #244]	@ (8009bbc <inc_lock+0x118>)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	011b      	lsls	r3, r3, #4
 8009acc:	4413      	add	r3, r2
 8009ace:	3304      	adds	r3, #4
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d109      	bne.n	8009aee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009ada:	4a38      	ldr	r2, [pc, #224]	@ (8009bbc <inc_lock+0x118>)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	011b      	lsls	r3, r3, #4
 8009ae0:	4413      	add	r3, r2
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d006      	beq.n	8009afc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	3301      	adds	r3, #1
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d9dc      	bls.n	8009ab4 <inc_lock+0x10>
 8009afa:	e000      	b.n	8009afe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009afc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d132      	bne.n	8009b6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]
 8009b08:	e002      	b.n	8009b10 <inc_lock+0x6c>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d806      	bhi.n	8009b24 <inc_lock+0x80>
 8009b16:	4a29      	ldr	r2, [pc, #164]	@ (8009bbc <inc_lock+0x118>)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	4413      	add	r3, r2
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1f2      	bne.n	8009b0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d101      	bne.n	8009b2e <inc_lock+0x8a>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	e040      	b.n	8009bb0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	4922      	ldr	r1, [pc, #136]	@ (8009bbc <inc_lock+0x118>)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	011b      	lsls	r3, r3, #4
 8009b38:	440b      	add	r3, r1
 8009b3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	491e      	ldr	r1, [pc, #120]	@ (8009bbc <inc_lock+0x118>)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	011b      	lsls	r3, r3, #4
 8009b46:	440b      	add	r3, r1
 8009b48:	3304      	adds	r3, #4
 8009b4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	695a      	ldr	r2, [r3, #20]
 8009b50:	491a      	ldr	r1, [pc, #104]	@ (8009bbc <inc_lock+0x118>)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	011b      	lsls	r3, r3, #4
 8009b56:	440b      	add	r3, r1
 8009b58:	3308      	adds	r3, #8
 8009b5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009b5c:	4a17      	ldr	r2, [pc, #92]	@ (8009bbc <inc_lock+0x118>)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	011b      	lsls	r3, r3, #4
 8009b62:	4413      	add	r3, r2
 8009b64:	330c      	adds	r3, #12
 8009b66:	2200      	movs	r2, #0
 8009b68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d009      	beq.n	8009b84 <inc_lock+0xe0>
 8009b70:	4a12      	ldr	r2, [pc, #72]	@ (8009bbc <inc_lock+0x118>)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	011b      	lsls	r3, r3, #4
 8009b76:	4413      	add	r3, r2
 8009b78:	330c      	adds	r3, #12
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <inc_lock+0xe0>
 8009b80:	2300      	movs	r3, #0
 8009b82:	e015      	b.n	8009bb0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d108      	bne.n	8009b9c <inc_lock+0xf8>
 8009b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8009bbc <inc_lock+0x118>)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	011b      	lsls	r3, r3, #4
 8009b90:	4413      	add	r3, r2
 8009b92:	330c      	adds	r3, #12
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	3301      	adds	r3, #1
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	e001      	b.n	8009ba0 <inc_lock+0xfc>
 8009b9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ba0:	4906      	ldr	r1, [pc, #24]	@ (8009bbc <inc_lock+0x118>)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	011b      	lsls	r3, r3, #4
 8009ba6:	440b      	add	r3, r1
 8009ba8:	330c      	adds	r3, #12
 8009baa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	3301      	adds	r3, #1
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	20002330 	.word	0x20002330

08009bc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	607b      	str	r3, [r7, #4]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d825      	bhi.n	8009c20 <dec_lock+0x60>
		n = Files[i].ctr;
 8009bd4:	4a17      	ldr	r2, [pc, #92]	@ (8009c34 <dec_lock+0x74>)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	011b      	lsls	r3, r3, #4
 8009bda:	4413      	add	r3, r2
 8009bdc:	330c      	adds	r3, #12
 8009bde:	881b      	ldrh	r3, [r3, #0]
 8009be0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009be2:	89fb      	ldrh	r3, [r7, #14]
 8009be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009be8:	d101      	bne.n	8009bee <dec_lock+0x2e>
 8009bea:	2300      	movs	r3, #0
 8009bec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009bee:	89fb      	ldrh	r3, [r7, #14]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d002      	beq.n	8009bfa <dec_lock+0x3a>
 8009bf4:	89fb      	ldrh	r3, [r7, #14]
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8009c34 <dec_lock+0x74>)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	011b      	lsls	r3, r3, #4
 8009c00:	4413      	add	r3, r2
 8009c02:	330c      	adds	r3, #12
 8009c04:	89fa      	ldrh	r2, [r7, #14]
 8009c06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c08:	89fb      	ldrh	r3, [r7, #14]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d105      	bne.n	8009c1a <dec_lock+0x5a>
 8009c0e:	4a09      	ldr	r2, [pc, #36]	@ (8009c34 <dec_lock+0x74>)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	011b      	lsls	r3, r3, #4
 8009c14:	4413      	add	r3, r2
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	737b      	strb	r3, [r7, #13]
 8009c1e:	e001      	b.n	8009c24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c20:	2302      	movs	r3, #2
 8009c22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c24:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	20002330 	.word	0x20002330

08009c38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c40:	2300      	movs	r3, #0
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	e010      	b.n	8009c68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c46:	4a0d      	ldr	r2, [pc, #52]	@ (8009c7c <clear_lock+0x44>)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	011b      	lsls	r3, r3, #4
 8009c4c:	4413      	add	r3, r2
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d105      	bne.n	8009c62 <clear_lock+0x2a>
 8009c56:	4a09      	ldr	r2, [pc, #36]	@ (8009c7c <clear_lock+0x44>)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	011b      	lsls	r3, r3, #4
 8009c5c:	4413      	add	r3, r2
 8009c5e:	2200      	movs	r2, #0
 8009c60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3301      	adds	r3, #1
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d9eb      	bls.n	8009c46 <clear_lock+0xe>
	}
}
 8009c6e:	bf00      	nop
 8009c70:	bf00      	nop
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	20002330 	.word	0x20002330

08009c80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	78db      	ldrb	r3, [r3, #3]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d034      	beq.n	8009cfe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	7858      	ldrb	r0, [r3, #1]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	f7ff fd40 	bl	800972c <disk_write>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	73fb      	strb	r3, [r7, #15]
 8009cb6:	e022      	b.n	8009cfe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	1ad2      	subs	r2, r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a1b      	ldr	r3, [r3, #32]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d217      	bcs.n	8009cfe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	789b      	ldrb	r3, [r3, #2]
 8009cd2:	613b      	str	r3, [r7, #16]
 8009cd4:	e010      	b.n	8009cf8 <sync_window+0x78>
					wsect += fs->fsize;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	4413      	add	r3, r2
 8009cde:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	7858      	ldrb	r0, [r3, #1]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009cea:	2301      	movs	r3, #1
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	f7ff fd1d 	bl	800972c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	613b      	str	r3, [r7, #16]
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d8eb      	bhi.n	8009cd6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3718      	adds	r7, #24
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d01b      	beq.n	8009d58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7ff ffad 	bl	8009c80 <sync_window>
 8009d26:	4603      	mov	r3, r0
 8009d28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d113      	bne.n	8009d58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	7858      	ldrb	r0, [r3, #1]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	f7ff fcd5 	bl	80096ec <disk_read>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d004      	beq.n	8009d52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009d48:	f04f 33ff 	mov.w	r3, #4294967295
 8009d4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
	...

08009d64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f7ff ff87 	bl	8009c80 <sync_window>
 8009d72:	4603      	mov	r3, r0
 8009d74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d159      	bne.n	8009e30 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d149      	bne.n	8009e18 <sync_fs+0xb4>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	791b      	ldrb	r3, [r3, #4]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d145      	bne.n	8009e18 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	899b      	ldrh	r3, [r3, #12]
 8009d96:	461a      	mov	r2, r3
 8009d98:	2100      	movs	r1, #0
 8009d9a:	f7ff fda8 	bl	80098ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	3338      	adds	r3, #56	@ 0x38
 8009da2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009da6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7ff fd37 	bl	800981e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3338      	adds	r3, #56	@ 0x38
 8009db4:	4921      	ldr	r1, [pc, #132]	@ (8009e3c <sync_fs+0xd8>)
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff fd4c 	bl	8009854 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3338      	adds	r3, #56	@ 0x38
 8009dc0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009dc4:	491e      	ldr	r1, [pc, #120]	@ (8009e40 <sync_fs+0xdc>)
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff fd44 	bl	8009854 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	3338      	adds	r3, #56	@ 0x38
 8009dd0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	4610      	mov	r0, r2
 8009ddc:	f7ff fd3a 	bl	8009854 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3338      	adds	r3, #56	@ 0x38
 8009de4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	695b      	ldr	r3, [r3, #20]
 8009dec:	4619      	mov	r1, r3
 8009dee:	4610      	mov	r0, r2
 8009df0:	f7ff fd30 	bl	8009854 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df8:	1c5a      	adds	r2, r3, #1
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	7858      	ldrb	r0, [r3, #1]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	f7ff fc8d 	bl	800972c <disk_write>
			fs->fsi_flag = 0;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	785b      	ldrb	r3, [r3, #1]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2100      	movs	r1, #0
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7ff fca3 	bl	800976c <disk_ioctl>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <sync_fs+0xcc>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	41615252 	.word	0x41615252
 8009e40:	61417272 	.word	0x61417272

08009e44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	3b02      	subs	r3, #2
 8009e52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	69db      	ldr	r3, [r3, #28]
 8009e58:	3b02      	subs	r3, #2
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d301      	bcc.n	8009e64 <clust2sect+0x20>
 8009e60:	2300      	movs	r3, #0
 8009e62:	e008      	b.n	8009e76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	895b      	ldrh	r3, [r3, #10]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	fb03 f202 	mul.w	r2, r3, r2
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e74:	4413      	add	r3, r2
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b086      	sub	sp, #24
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d904      	bls.n	8009ea2 <get_fat+0x20>
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d302      	bcc.n	8009ea8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	617b      	str	r3, [r7, #20]
 8009ea6:	e0ba      	b.n	800a01e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8009eac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	f000 8082 	beq.w	8009fbc <get_fat+0x13a>
 8009eb8:	2b03      	cmp	r3, #3
 8009eba:	f300 80a6 	bgt.w	800a00a <get_fat+0x188>
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d002      	beq.n	8009ec8 <get_fat+0x46>
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d055      	beq.n	8009f72 <get_fat+0xf0>
 8009ec6:	e0a0      	b.n	800a00a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	085b      	lsrs	r3, r3, #1
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	899b      	ldrh	r3, [r3, #12]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ee6:	4413      	add	r3, r2
 8009ee8:	4619      	mov	r1, r3
 8009eea:	6938      	ldr	r0, [r7, #16]
 8009eec:	f7ff ff0c 	bl	8009d08 <move_window>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f040 808c 	bne.w	800a010 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	1c5a      	adds	r2, r3, #1
 8009efc:	60fa      	str	r2, [r7, #12]
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	8992      	ldrh	r2, [r2, #12]
 8009f02:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f06:	fb01 f202 	mul.w	r2, r1, r2
 8009f0a:	1a9b      	subs	r3, r3, r2
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	4413      	add	r3, r2
 8009f10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009f14:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	899b      	ldrh	r3, [r3, #12]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f26:	4413      	add	r3, r2
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6938      	ldr	r0, [r7, #16]
 8009f2c:	f7ff feec 	bl	8009d08 <move_window>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d16e      	bne.n	800a014 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	899b      	ldrh	r3, [r3, #12]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f42:	fb01 f202 	mul.w	r2, r1, r2
 8009f46:	1a9b      	subs	r3, r3, r2
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009f50:	021b      	lsls	r3, r3, #8
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	f003 0301 	and.w	r3, r3, #1
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <get_fat+0xe6>
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	091b      	lsrs	r3, r3, #4
 8009f66:	e002      	b.n	8009f6e <get_fat+0xec>
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f6e:	617b      	str	r3, [r7, #20]
			break;
 8009f70:	e055      	b.n	800a01e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	899b      	ldrh	r3, [r3, #12]
 8009f7a:	085b      	lsrs	r3, r3, #1
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	4619      	mov	r1, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f86:	4413      	add	r3, r2
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6938      	ldr	r0, [r7, #16]
 8009f8c:	f7ff febc 	bl	8009d08 <move_window>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d140      	bne.n	800a018 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	005b      	lsls	r3, r3, #1
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	8992      	ldrh	r2, [r2, #12]
 8009fa4:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fa8:	fb00 f202 	mul.w	r2, r0, r2
 8009fac:	1a9b      	subs	r3, r3, r2
 8009fae:	440b      	add	r3, r1
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7ff fbf9 	bl	80097a8 <ld_word>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	617b      	str	r3, [r7, #20]
			break;
 8009fba:	e030      	b.n	800a01e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	899b      	ldrh	r3, [r3, #12]
 8009fc4:	089b      	lsrs	r3, r3, #2
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	4619      	mov	r1, r3
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fd0:	4413      	add	r3, r2
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6938      	ldr	r0, [r7, #16]
 8009fd6:	f7ff fe97 	bl	8009d08 <move_window>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d11d      	bne.n	800a01c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	8992      	ldrh	r2, [r2, #12]
 8009fee:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ff2:	fb00 f202 	mul.w	r2, r0, r2
 8009ff6:	1a9b      	subs	r3, r3, r2
 8009ff8:	440b      	add	r3, r1
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7ff fbec 	bl	80097d8 <ld_dword>
 800a000:	4603      	mov	r3, r0
 800a002:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a006:	617b      	str	r3, [r7, #20]
			break;
 800a008:	e009      	b.n	800a01e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a00a:	2301      	movs	r3, #1
 800a00c:	617b      	str	r3, [r7, #20]
 800a00e:	e006      	b.n	800a01e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a010:	bf00      	nop
 800a012:	e004      	b.n	800a01e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a014:	bf00      	nop
 800a016:	e002      	b.n	800a01e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a018:	bf00      	nop
 800a01a:	e000      	b.n	800a01e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a01c:	bf00      	nop
		}
	}

	return val;
 800a01e:	697b      	ldr	r3, [r7, #20]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3718      	adds	r7, #24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a028:	b590      	push	{r4, r7, lr}
 800a02a:	b089      	sub	sp, #36	@ 0x24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a034:	2302      	movs	r3, #2
 800a036:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	f240 8109 	bls.w	800a252 <put_fat+0x22a>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	69db      	ldr	r3, [r3, #28]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	429a      	cmp	r2, r3
 800a048:	f080 8103 	bcs.w	800a252 <put_fat+0x22a>
		switch (fs->fs_type) {
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	2b03      	cmp	r3, #3
 800a052:	f000 80b6 	beq.w	800a1c2 <put_fat+0x19a>
 800a056:	2b03      	cmp	r3, #3
 800a058:	f300 80fb 	bgt.w	800a252 <put_fat+0x22a>
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d003      	beq.n	800a068 <put_fat+0x40>
 800a060:	2b02      	cmp	r3, #2
 800a062:	f000 8083 	beq.w	800a16c <put_fat+0x144>
 800a066:	e0f4      	b.n	800a252 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	61bb      	str	r3, [r7, #24]
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	085b      	lsrs	r3, r3, #1
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	4413      	add	r3, r2
 800a074:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	899b      	ldrh	r3, [r3, #12]
 800a07e:	4619      	mov	r1, r3
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	fbb3 f3f1 	udiv	r3, r3, r1
 800a086:	4413      	add	r3, r2
 800a088:	4619      	mov	r1, r3
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f7ff fe3c 	bl	8009d08 <move_window>
 800a090:	4603      	mov	r3, r0
 800a092:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a094:	7ffb      	ldrb	r3, [r7, #31]
 800a096:	2b00      	cmp	r3, #0
 800a098:	f040 80d4 	bne.w	800a244 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	1c5a      	adds	r2, r3, #1
 800a0a6:	61ba      	str	r2, [r7, #24]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	8992      	ldrh	r2, [r2, #12]
 800a0ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800a0b0:	fb00 f202 	mul.w	r2, r0, r2
 800a0b4:	1a9b      	subs	r3, r3, r2
 800a0b6:	440b      	add	r3, r1
 800a0b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	f003 0301 	and.w	r3, r3, #1
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00d      	beq.n	800a0e0 <put_fat+0xb8>
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	b25b      	sxtb	r3, r3
 800a0ca:	f003 030f 	and.w	r3, r3, #15
 800a0ce:	b25a      	sxtb	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	011b      	lsls	r3, r3, #4
 800a0d6:	b25b      	sxtb	r3, r3
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	b25b      	sxtb	r3, r3
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	e001      	b.n	800a0e4 <put_fat+0xbc>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	899b      	ldrh	r3, [r3, #12]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0fe:	4413      	add	r3, r2
 800a100:	4619      	mov	r1, r3
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7ff fe00 	bl	8009d08 <move_window>
 800a108:	4603      	mov	r3, r0
 800a10a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a10c:	7ffb      	ldrb	r3, [r7, #31]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f040 809a 	bne.w	800a248 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	899b      	ldrh	r3, [r3, #12]
 800a11e:	461a      	mov	r2, r3
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	fbb3 f0f2 	udiv	r0, r3, r2
 800a126:	fb00 f202 	mul.w	r2, r0, r2
 800a12a:	1a9b      	subs	r3, r3, r2
 800a12c:	440b      	add	r3, r1
 800a12e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f003 0301 	and.w	r3, r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <put_fat+0x11a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	091b      	lsrs	r3, r3, #4
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	e00e      	b.n	800a160 <put_fat+0x138>
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	b25b      	sxtb	r3, r3
 800a148:	f023 030f 	bic.w	r3, r3, #15
 800a14c:	b25a      	sxtb	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	0a1b      	lsrs	r3, r3, #8
 800a152:	b25b      	sxtb	r3, r3
 800a154:	f003 030f 	and.w	r3, r3, #15
 800a158:	b25b      	sxtb	r3, r3
 800a15a:	4313      	orrs	r3, r2
 800a15c:	b25b      	sxtb	r3, r3
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	697a      	ldr	r2, [r7, #20]
 800a162:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2201      	movs	r2, #1
 800a168:	70da      	strb	r2, [r3, #3]
			break;
 800a16a:	e072      	b.n	800a252 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	899b      	ldrh	r3, [r3, #12]
 800a174:	085b      	lsrs	r3, r3, #1
 800a176:	b29b      	uxth	r3, r3
 800a178:	4619      	mov	r1, r3
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a180:	4413      	add	r3, r2
 800a182:	4619      	mov	r1, r3
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f7ff fdbf 	bl	8009d08 <move_window>
 800a18a:	4603      	mov	r3, r0
 800a18c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a18e:	7ffb      	ldrb	r3, [r7, #31]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d15b      	bne.n	800a24c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	005b      	lsls	r3, r3, #1
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	8992      	ldrh	r2, [r2, #12]
 800a1a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1a6:	fb00 f202 	mul.w	r2, r0, r2
 800a1aa:	1a9b      	subs	r3, r3, r2
 800a1ac:	440b      	add	r3, r1
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	b292      	uxth	r2, r2
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fb32 	bl	800981e <st_word>
			fs->wflag = 1;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	70da      	strb	r2, [r3, #3]
			break;
 800a1c0:	e047      	b.n	800a252 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	899b      	ldrh	r3, [r3, #12]
 800a1ca:	089b      	lsrs	r3, r3, #2
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1d6:	4413      	add	r3, r2
 800a1d8:	4619      	mov	r1, r3
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f7ff fd94 	bl	8009d08 <move_window>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1e4:	7ffb      	ldrb	r3, [r7, #31]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d132      	bne.n	800a250 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	8992      	ldrh	r2, [r2, #12]
 800a1fe:	fbb3 f0f2 	udiv	r0, r3, r2
 800a202:	fb00 f202 	mul.w	r2, r0, r2
 800a206:	1a9b      	subs	r3, r3, r2
 800a208:	440b      	add	r3, r1
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7ff fae4 	bl	80097d8 <ld_dword>
 800a210:	4603      	mov	r3, r0
 800a212:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a216:	4323      	orrs	r3, r4
 800a218:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	8992      	ldrh	r2, [r2, #12]
 800a228:	fbb3 f0f2 	udiv	r0, r3, r2
 800a22c:	fb00 f202 	mul.w	r2, r0, r2
 800a230:	1a9b      	subs	r3, r3, r2
 800a232:	440b      	add	r3, r1
 800a234:	6879      	ldr	r1, [r7, #4]
 800a236:	4618      	mov	r0, r3
 800a238:	f7ff fb0c 	bl	8009854 <st_dword>
			fs->wflag = 1;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2201      	movs	r2, #1
 800a240:	70da      	strb	r2, [r3, #3]
			break;
 800a242:	e006      	b.n	800a252 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a244:	bf00      	nop
 800a246:	e004      	b.n	800a252 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a248:	bf00      	nop
 800a24a:	e002      	b.n	800a252 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a24c:	bf00      	nop
 800a24e:	e000      	b.n	800a252 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a250:	bf00      	nop
		}
	}
	return res;
 800a252:	7ffb      	ldrb	r3, [r7, #31]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3724      	adds	r7, #36	@ 0x24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd90      	pop	{r4, r7, pc}

0800a25c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d904      	bls.n	800a282 <remove_chain+0x26>
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d301      	bcc.n	800a286 <remove_chain+0x2a>
 800a282:	2302      	movs	r3, #2
 800a284:	e04b      	b.n	800a31e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00c      	beq.n	800a2a6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a28c:	f04f 32ff 	mov.w	r2, #4294967295
 800a290:	6879      	ldr	r1, [r7, #4]
 800a292:	69b8      	ldr	r0, [r7, #24]
 800a294:	f7ff fec8 	bl	800a028 <put_fat>
 800a298:	4603      	mov	r3, r0
 800a29a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a29c:	7ffb      	ldrb	r3, [r7, #31]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <remove_chain+0x4a>
 800a2a2:	7ffb      	ldrb	r3, [r7, #31]
 800a2a4:	e03b      	b.n	800a31e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a2a6:	68b9      	ldr	r1, [r7, #8]
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7ff fdea 	bl	8009e82 <get_fat>
 800a2ae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d031      	beq.n	800a31a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d101      	bne.n	800a2c0 <remove_chain+0x64>
 800a2bc:	2302      	movs	r3, #2
 800a2be:	e02e      	b.n	800a31e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c6:	d101      	bne.n	800a2cc <remove_chain+0x70>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e028      	b.n	800a31e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	68b9      	ldr	r1, [r7, #8]
 800a2d0:	69b8      	ldr	r0, [r7, #24]
 800a2d2:	f7ff fea9 	bl	800a028 <put_fat>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a2da:	7ffb      	ldrb	r3, [r7, #31]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <remove_chain+0x88>
 800a2e0:	7ffb      	ldrb	r3, [r7, #31]
 800a2e2:	e01c      	b.n	800a31e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	699a      	ldr	r2, [r3, #24]
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	69db      	ldr	r3, [r3, #28]
 800a2ec:	3b02      	subs	r3, #2
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d20b      	bcs.n	800a30a <remove_chain+0xae>
			fs->free_clst++;
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	1c5a      	adds	r2, r3, #1
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	791b      	ldrb	r3, [r3, #4]
 800a300:	f043 0301 	orr.w	r3, r3, #1
 800a304:	b2da      	uxtb	r2, r3
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	429a      	cmp	r2, r3
 800a316:	d3c6      	bcc.n	800a2a6 <remove_chain+0x4a>
 800a318:	e000      	b.n	800a31c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a31a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3720      	adds	r7, #32
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b088      	sub	sp, #32
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10d      	bne.n	800a358 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	695b      	ldr	r3, [r3, #20]
 800a340:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d004      	beq.n	800a352 <create_chain+0x2c>
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	69ba      	ldr	r2, [r7, #24]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d31b      	bcc.n	800a38a <create_chain+0x64>
 800a352:	2301      	movs	r3, #1
 800a354:	61bb      	str	r3, [r7, #24]
 800a356:	e018      	b.n	800a38a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a358:	6839      	ldr	r1, [r7, #0]
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7ff fd91 	bl	8009e82 <get_fat>
 800a360:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d801      	bhi.n	800a36c <create_chain+0x46>
 800a368:	2301      	movs	r3, #1
 800a36a:	e070      	b.n	800a44e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a372:	d101      	bne.n	800a378 <create_chain+0x52>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	e06a      	b.n	800a44e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d201      	bcs.n	800a386 <create_chain+0x60>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	e063      	b.n	800a44e <create_chain+0x128>
		scl = clst;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	3301      	adds	r3, #1
 800a392:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	69db      	ldr	r3, [r3, #28]
 800a398:	69fa      	ldr	r2, [r7, #28]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d307      	bcc.n	800a3ae <create_chain+0x88>
				ncl = 2;
 800a39e:	2302      	movs	r3, #2
 800a3a0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a3a2:	69fa      	ldr	r2, [r7, #28]
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d901      	bls.n	800a3ae <create_chain+0x88>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	e04f      	b.n	800a44e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a3ae:	69f9      	ldr	r1, [r7, #28]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff fd66 	bl	8009e82 <get_fat>
 800a3b6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00e      	beq.n	800a3dc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d003      	beq.n	800a3cc <create_chain+0xa6>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ca:	d101      	bne.n	800a3d0 <create_chain+0xaa>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	e03e      	b.n	800a44e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a3d0:	69fa      	ldr	r2, [r7, #28]
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d1da      	bne.n	800a38e <create_chain+0x68>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	e038      	b.n	800a44e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a3dc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a3de:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e2:	69f9      	ldr	r1, [r7, #28]
 800a3e4:	6938      	ldr	r0, [r7, #16]
 800a3e6:	f7ff fe1f 	bl	800a028 <put_fat>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d109      	bne.n	800a408 <create_chain+0xe2>
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d006      	beq.n	800a408 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a3fa:	69fa      	ldr	r2, [r7, #28]
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	6938      	ldr	r0, [r7, #16]
 800a400:	f7ff fe12 	bl	800a028 <put_fat>
 800a404:	4603      	mov	r3, r0
 800a406:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a408:	7dfb      	ldrb	r3, [r7, #23]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d116      	bne.n	800a43c <create_chain+0x116>
		fs->last_clst = ncl;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	69fa      	ldr	r2, [r7, #28]
 800a412:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	699a      	ldr	r2, [r3, #24]
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	69db      	ldr	r3, [r3, #28]
 800a41c:	3b02      	subs	r3, #2
 800a41e:	429a      	cmp	r2, r3
 800a420:	d804      	bhi.n	800a42c <create_chain+0x106>
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	1e5a      	subs	r2, r3, #1
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	791b      	ldrb	r3, [r3, #4]
 800a430:	f043 0301 	orr.w	r3, r3, #1
 800a434:	b2da      	uxtb	r2, r3
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	711a      	strb	r2, [r3, #4]
 800a43a:	e007      	b.n	800a44c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d102      	bne.n	800a448 <create_chain+0x122>
 800a442:	f04f 33ff 	mov.w	r3, #4294967295
 800a446:	e000      	b.n	800a44a <create_chain+0x124>
 800a448:	2301      	movs	r3, #1
 800a44a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a44c:	69fb      	ldr	r3, [r7, #28]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3720      	adds	r7, #32
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a456:	b480      	push	{r7}
 800a458:	b087      	sub	sp, #28
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46a:	3304      	adds	r3, #4
 800a46c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	899b      	ldrh	r3, [r3, #12]
 800a472:	461a      	mov	r2, r3
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	fbb3 f3f2 	udiv	r3, r3, r2
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	8952      	ldrh	r2, [r2, #10]
 800a47e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a482:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	1d1a      	adds	r2, r3, #4
 800a488:	613a      	str	r2, [r7, #16]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <clmt_clust+0x42>
 800a494:	2300      	movs	r3, #0
 800a496:	e010      	b.n	800a4ba <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d307      	bcc.n	800a4b0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	617b      	str	r3, [r7, #20]
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	3304      	adds	r3, #4
 800a4ac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a4ae:	e7e9      	b.n	800a484 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a4b0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	4413      	add	r3, r2
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	371c      	adds	r7, #28
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b086      	sub	sp, #24
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4dc:	d204      	bcs.n	800a4e8 <dir_sdi+0x22>
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	f003 031f 	and.w	r3, r3, #31
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <dir_sdi+0x26>
		return FR_INT_ERR;
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	e071      	b.n	800a5d0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d106      	bne.n	800a50c <dir_sdi+0x46>
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	2b02      	cmp	r3, #2
 800a504:	d902      	bls.n	800a50c <dir_sdi+0x46>
		clst = fs->dirbase;
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a50a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10c      	bne.n	800a52c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	095b      	lsrs	r3, r3, #5
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	8912      	ldrh	r2, [r2, #8]
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d301      	bcc.n	800a522 <dir_sdi+0x5c>
 800a51e:	2302      	movs	r3, #2
 800a520:	e056      	b.n	800a5d0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	61da      	str	r2, [r3, #28]
 800a52a:	e02d      	b.n	800a588 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	895b      	ldrh	r3, [r3, #10]
 800a530:	461a      	mov	r2, r3
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	899b      	ldrh	r3, [r3, #12]
 800a536:	fb02 f303 	mul.w	r3, r2, r3
 800a53a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a53c:	e019      	b.n	800a572 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6979      	ldr	r1, [r7, #20]
 800a542:	4618      	mov	r0, r3
 800a544:	f7ff fc9d 	bl	8009e82 <get_fat>
 800a548:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a550:	d101      	bne.n	800a556 <dir_sdi+0x90>
 800a552:	2301      	movs	r3, #1
 800a554:	e03c      	b.n	800a5d0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d904      	bls.n	800a566 <dir_sdi+0xa0>
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	69db      	ldr	r3, [r3, #28]
 800a560:	697a      	ldr	r2, [r7, #20]
 800a562:	429a      	cmp	r2, r3
 800a564:	d301      	bcc.n	800a56a <dir_sdi+0xa4>
 800a566:	2302      	movs	r3, #2
 800a568:	e032      	b.n	800a5d0 <dir_sdi+0x10a>
			ofs -= csz;
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	429a      	cmp	r2, r3
 800a578:	d2e1      	bcs.n	800a53e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a57a:	6979      	ldr	r1, [r7, #20]
 800a57c:	6938      	ldr	r0, [r7, #16]
 800a57e:	f7ff fc61 	bl	8009e44 <clust2sect>
 800a582:	4602      	mov	r2, r0
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d101      	bne.n	800a59a <dir_sdi+0xd4>
 800a596:	2302      	movs	r3, #2
 800a598:	e01a      	b.n	800a5d0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	69da      	ldr	r2, [r3, #28]
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	899b      	ldrh	r3, [r3, #12]
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5aa:	441a      	add	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	899b      	ldrh	r3, [r3, #12]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	fbb3 f0f2 	udiv	r0, r3, r2
 800a5c2:	fb00 f202 	mul.w	r2, r0, r2
 800a5c6:	1a9b      	subs	r3, r3, r2
 800a5c8:	18ca      	adds	r2, r1, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	3320      	adds	r3, #32
 800a5ee:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	69db      	ldr	r3, [r3, #28]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d003      	beq.n	800a600 <dir_next+0x28>
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5fe:	d301      	bcc.n	800a604 <dir_next+0x2c>
 800a600:	2304      	movs	r3, #4
 800a602:	e0bb      	b.n	800a77c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	899b      	ldrh	r3, [r3, #12]
 800a608:	461a      	mov	r2, r3
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a610:	fb01 f202 	mul.w	r2, r1, r2
 800a614:	1a9b      	subs	r3, r3, r2
 800a616:	2b00      	cmp	r3, #0
 800a618:	f040 809d 	bne.w	800a756 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	69db      	ldr	r3, [r3, #28]
 800a620:	1c5a      	adds	r2, r3, #1
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10b      	bne.n	800a646 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	095b      	lsrs	r3, r3, #5
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	8912      	ldrh	r2, [r2, #8]
 800a636:	4293      	cmp	r3, r2
 800a638:	f0c0 808d 	bcc.w	800a756 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	61da      	str	r2, [r3, #28]
 800a642:	2304      	movs	r3, #4
 800a644:	e09a      	b.n	800a77c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	899b      	ldrh	r3, [r3, #12]
 800a64a:	461a      	mov	r2, r3
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	8952      	ldrh	r2, [r2, #10]
 800a656:	3a01      	subs	r2, #1
 800a658:	4013      	ands	r3, r2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d17b      	bne.n	800a756 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	699b      	ldr	r3, [r3, #24]
 800a664:	4619      	mov	r1, r3
 800a666:	4610      	mov	r0, r2
 800a668:	f7ff fc0b 	bl	8009e82 <get_fat>
 800a66c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d801      	bhi.n	800a678 <dir_next+0xa0>
 800a674:	2302      	movs	r3, #2
 800a676:	e081      	b.n	800a77c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a67e:	d101      	bne.n	800a684 <dir_next+0xac>
 800a680:	2301      	movs	r3, #1
 800a682:	e07b      	b.n	800a77c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	69db      	ldr	r3, [r3, #28]
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d359      	bcc.n	800a742 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d104      	bne.n	800a69e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	61da      	str	r2, [r3, #28]
 800a69a:	2304      	movs	r3, #4
 800a69c:	e06e      	b.n	800a77c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	f7ff fe3d 	bl	800a326 <create_chain>
 800a6ac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <dir_next+0xe0>
 800a6b4:	2307      	movs	r3, #7
 800a6b6:	e061      	b.n	800a77c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d101      	bne.n	800a6c2 <dir_next+0xea>
 800a6be:	2302      	movs	r3, #2
 800a6c0:	e05c      	b.n	800a77c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c8:	d101      	bne.n	800a6ce <dir_next+0xf6>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e056      	b.n	800a77c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f7ff fad6 	bl	8009c80 <sync_window>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <dir_next+0x106>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e04e      	b.n	800a77c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	899b      	ldrh	r3, [r3, #12]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	f7ff f8ff 	bl	80098ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	613b      	str	r3, [r7, #16]
 800a6f4:	6979      	ldr	r1, [r7, #20]
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7ff fba4 	bl	8009e44 <clust2sect>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	635a      	str	r2, [r3, #52]	@ 0x34
 800a702:	e012      	b.n	800a72a <dir_next+0x152>
						fs->wflag = 1;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2201      	movs	r2, #1
 800a708:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f7ff fab8 	bl	8009c80 <sync_window>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <dir_next+0x142>
 800a716:	2301      	movs	r3, #1
 800a718:	e030      	b.n	800a77c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	3301      	adds	r3, #1
 800a71e:	613b      	str	r3, [r7, #16]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a724:	1c5a      	adds	r2, r3, #1
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	635a      	str	r2, [r3, #52]	@ 0x34
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	895b      	ldrh	r3, [r3, #10]
 800a72e:	461a      	mov	r2, r3
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	4293      	cmp	r3, r2
 800a734:	d3e6      	bcc.n	800a704 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	1ad2      	subs	r2, r2, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a748:	6979      	ldr	r1, [r7, #20]
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7ff fb7a 	bl	8009e44 <clust2sect>
 800a750:	4602      	mov	r2, r0
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	899b      	ldrh	r3, [r3, #12]
 800a766:	461a      	mov	r2, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a76e:	fb00 f202 	mul.w	r2, r0, r2
 800a772:	1a9b      	subs	r3, r3, r2
 800a774:	18ca      	adds	r2, r1, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a794:	2100      	movs	r1, #0
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7ff fe95 	bl	800a4c6 <dir_sdi>
 800a79c:	4603      	mov	r3, r0
 800a79e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a7a0:	7dfb      	ldrb	r3, [r7, #23]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d12b      	bne.n	800a7fe <dir_alloc+0x7a>
		n = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	69db      	ldr	r3, [r3, #28]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7ff faa9 	bl	8009d08 <move_window>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d11d      	bne.n	800a7fc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a1b      	ldr	r3, [r3, #32]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2be5      	cmp	r3, #229	@ 0xe5
 800a7c8:	d004      	beq.n	800a7d4 <dir_alloc+0x50>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d107      	bne.n	800a7e4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	613b      	str	r3, [r7, #16]
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d102      	bne.n	800a7e8 <dir_alloc+0x64>
 800a7e2:	e00c      	b.n	800a7fe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a7e8:	2101      	movs	r1, #1
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7ff fef4 	bl	800a5d8 <dir_next>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a7f4:	7dfb      	ldrb	r3, [r7, #23]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d0d7      	beq.n	800a7aa <dir_alloc+0x26>
 800a7fa:	e000      	b.n	800a7fe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a7fc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a7fe:	7dfb      	ldrb	r3, [r7, #23]
 800a800:	2b04      	cmp	r3, #4
 800a802:	d101      	bne.n	800a808 <dir_alloc+0x84>
 800a804:	2307      	movs	r3, #7
 800a806:	75fb      	strb	r3, [r7, #23]
	return res;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b084      	sub	sp, #16
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	331a      	adds	r3, #26
 800a820:	4618      	mov	r0, r3
 800a822:	f7fe ffc1 	bl	80097a8 <ld_word>
 800a826:	4603      	mov	r3, r0
 800a828:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b03      	cmp	r3, #3
 800a830:	d109      	bne.n	800a846 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	3314      	adds	r3, #20
 800a836:	4618      	mov	r0, r3
 800a838:	f7fe ffb6 	bl	80097a8 <ld_word>
 800a83c:	4603      	mov	r3, r0
 800a83e:	041b      	lsls	r3, r3, #16
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	4313      	orrs	r3, r2
 800a844:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a846:	68fb      	ldr	r3, [r7, #12]
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3710      	adds	r7, #16
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	331a      	adds	r3, #26
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	b292      	uxth	r2, r2
 800a864:	4611      	mov	r1, r2
 800a866:	4618      	mov	r0, r3
 800a868:	f7fe ffd9 	bl	800981e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	2b03      	cmp	r3, #3
 800a872:	d109      	bne.n	800a888 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	f103 0214 	add.w	r2, r3, #20
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	0c1b      	lsrs	r3, r3, #16
 800a87e:	b29b      	uxth	r3, r3
 800a880:	4619      	mov	r1, r3
 800a882:	4610      	mov	r0, r2
 800a884:	f7fe ffcb 	bl	800981e <st_word>
	}
}
 800a888:	bf00      	nop
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a890:	b590      	push	{r4, r7, lr}
 800a892:	b087      	sub	sp, #28
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	331a      	adds	r3, #26
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fe ff82 	bl	80097a8 <ld_word>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <cmp_lfn+0x1e>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e059      	b.n	800a962 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8b6:	1e5a      	subs	r2, r3, #1
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	005b      	lsls	r3, r3, #1
 800a8bc:	4413      	add	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	81fb      	strh	r3, [r7, #14]
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	613b      	str	r3, [r7, #16]
 800a8cc:	e033      	b.n	800a936 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a8ce:	4a27      	ldr	r2, [pc, #156]	@ (800a96c <cmp_lfn+0xdc>)
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	4413      	add	r3, r2
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fe ff63 	bl	80097a8 <ld_word>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a8e6:	89fb      	ldrh	r3, [r7, #14]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d01a      	beq.n	800a922 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	2bfe      	cmp	r3, #254	@ 0xfe
 800a8f0:	d812      	bhi.n	800a918 <cmp_lfn+0x88>
 800a8f2:	89bb      	ldrh	r3, [r7, #12]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f002 ff01 	bl	800d6fc <ff_wtoupper>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	461c      	mov	r4, r3
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	1c5a      	adds	r2, r3, #1
 800a902:	617a      	str	r2, [r7, #20]
 800a904:	005b      	lsls	r3, r3, #1
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	4413      	add	r3, r2
 800a90a:	881b      	ldrh	r3, [r3, #0]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f002 fef5 	bl	800d6fc <ff_wtoupper>
 800a912:	4603      	mov	r3, r0
 800a914:	429c      	cmp	r4, r3
 800a916:	d001      	beq.n	800a91c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a918:	2300      	movs	r3, #0
 800a91a:	e022      	b.n	800a962 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a91c:	89bb      	ldrh	r3, [r7, #12]
 800a91e:	81fb      	strh	r3, [r7, #14]
 800a920:	e006      	b.n	800a930 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a922:	89bb      	ldrh	r3, [r7, #12]
 800a924:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a928:	4293      	cmp	r3, r2
 800a92a:	d001      	beq.n	800a930 <cmp_lfn+0xa0>
 800a92c:	2300      	movs	r3, #0
 800a92e:	e018      	b.n	800a962 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	3301      	adds	r3, #1
 800a934:	613b      	str	r3, [r7, #16]
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	2b0c      	cmp	r3, #12
 800a93a:	d9c8      	bls.n	800a8ce <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00b      	beq.n	800a960 <cmp_lfn+0xd0>
 800a948:	89fb      	ldrh	r3, [r7, #14]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d008      	beq.n	800a960 <cmp_lfn+0xd0>
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	005b      	lsls	r3, r3, #1
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	4413      	add	r3, r2
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <cmp_lfn+0xd0>
 800a95c:	2300      	movs	r3, #0
 800a95e:	e000      	b.n	800a962 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a960:	2301      	movs	r3, #1
}
 800a962:	4618      	mov	r0, r3
 800a964:	371c      	adds	r7, #28
 800a966:	46bd      	mov	sp, r7
 800a968:	bd90      	pop	{r4, r7, pc}
 800a96a:	bf00      	nop
 800a96c:	08012d70 	.word	0x08012d70

0800a970 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	331a      	adds	r3, #26
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fe ff12 	bl	80097a8 <ld_word>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <pick_lfn+0x1e>
 800a98a:	2300      	movs	r3, #0
 800a98c:	e04d      	b.n	800aa2a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a996:	1e5a      	subs	r2, r3, #1
 800a998:	4613      	mov	r3, r2
 800a99a:	005b      	lsls	r3, r3, #1
 800a99c:	4413      	add	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	81fb      	strh	r3, [r7, #14]
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	613b      	str	r3, [r7, #16]
 800a9ac:	e028      	b.n	800aa00 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a9ae:	4a21      	ldr	r2, [pc, #132]	@ (800aa34 <pick_lfn+0xc4>)
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe fef3 	bl	80097a8 <ld_word>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a9c6:	89fb      	ldrh	r3, [r7, #14]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00f      	beq.n	800a9ec <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	2bfe      	cmp	r3, #254	@ 0xfe
 800a9d0:	d901      	bls.n	800a9d6 <pick_lfn+0x66>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e029      	b.n	800aa2a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a9d6:	89bb      	ldrh	r3, [r7, #12]
 800a9d8:	81fb      	strh	r3, [r7, #14]
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	1c5a      	adds	r2, r3, #1
 800a9de:	617a      	str	r2, [r7, #20]
 800a9e0:	005b      	lsls	r3, r3, #1
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	89fa      	ldrh	r2, [r7, #14]
 800a9e8:	801a      	strh	r2, [r3, #0]
 800a9ea:	e006      	b.n	800a9fa <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a9ec:	89bb      	ldrh	r3, [r7, #12]
 800a9ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d001      	beq.n	800a9fa <pick_lfn+0x8a>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	e017      	b.n	800aa2a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	613b      	str	r3, [r7, #16]
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	2b0c      	cmp	r3, #12
 800aa04:	d9d3      	bls.n	800a9ae <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00a      	beq.n	800aa28 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2bfe      	cmp	r3, #254	@ 0xfe
 800aa16:	d901      	bls.n	800aa1c <pick_lfn+0xac>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	e006      	b.n	800aa2a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	005b      	lsls	r3, r3, #1
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	4413      	add	r3, r2
 800aa24:	2200      	movs	r2, #0
 800aa26:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800aa28:	2301      	movs	r3, #1
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	08012d70 	.word	0x08012d70

0800aa38 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	4611      	mov	r1, r2
 800aa44:	461a      	mov	r2, r3
 800aa46:	460b      	mov	r3, r1
 800aa48:	71fb      	strb	r3, [r7, #7]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	330d      	adds	r3, #13
 800aa52:	79ba      	ldrb	r2, [r7, #6]
 800aa54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	330b      	adds	r3, #11
 800aa5a:	220f      	movs	r2, #15
 800aa5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	330c      	adds	r3, #12
 800aa62:	2200      	movs	r2, #0
 800aa64:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	331a      	adds	r3, #26
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fe fed6 	bl	800981e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800aa72:	79fb      	ldrb	r3, [r7, #7]
 800aa74:	1e5a      	subs	r2, r3, #1
 800aa76:	4613      	mov	r3, r2
 800aa78:	005b      	lsls	r3, r3, #1
 800aa7a:	4413      	add	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4413      	add	r3, r2
 800aa80:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	82fb      	strh	r3, [r7, #22]
 800aa86:	2300      	movs	r3, #0
 800aa88:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800aa8a:	8afb      	ldrh	r3, [r7, #22]
 800aa8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d007      	beq.n	800aaa4 <put_lfn+0x6c>
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	1c5a      	adds	r2, r3, #1
 800aa98:	61fa      	str	r2, [r7, #28]
 800aa9a:	005b      	lsls	r3, r3, #1
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	881b      	ldrh	r3, [r3, #0]
 800aaa2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800aaa4:	4a17      	ldr	r2, [pc, #92]	@ (800ab04 <put_lfn+0xcc>)
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	461a      	mov	r2, r3
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	4413      	add	r3, r2
 800aab2:	8afa      	ldrh	r2, [r7, #22]
 800aab4:	4611      	mov	r1, r2
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fe feb1 	bl	800981e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800aabc:	8afb      	ldrh	r3, [r7, #22]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d102      	bne.n	800aac8 <put_lfn+0x90>
 800aac2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aac6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	3301      	adds	r3, #1
 800aacc:	61bb      	str	r3, [r7, #24]
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	2b0c      	cmp	r3, #12
 800aad2:	d9da      	bls.n	800aa8a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800aad4:	8afb      	ldrh	r3, [r7, #22]
 800aad6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aada:	4293      	cmp	r3, r2
 800aadc:	d006      	beq.n	800aaec <put_lfn+0xb4>
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	4413      	add	r3, r2
 800aae6:	881b      	ldrh	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d103      	bne.n	800aaf4 <put_lfn+0xbc>
 800aaec:	79fb      	ldrb	r3, [r7, #7]
 800aaee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaf2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	79fa      	ldrb	r2, [r7, #7]
 800aaf8:	701a      	strb	r2, [r3, #0]
}
 800aafa:	bf00      	nop
 800aafc:	3720      	adds	r7, #32
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	08012d70 	.word	0x08012d70

0800ab08 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08c      	sub	sp, #48	@ 0x30
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ab16:	220b      	movs	r2, #11
 800ab18:	68b9      	ldr	r1, [r7, #8]
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f7fe fec6 	bl	80098ac <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	2b05      	cmp	r3, #5
 800ab24:	d92b      	bls.n	800ab7e <gen_numname+0x76>
		sr = seq;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ab2a:	e022      	b.n	800ab72 <gen_numname+0x6a>
			wc = *lfn++;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	1c9a      	adds	r2, r3, #2
 800ab30:	607a      	str	r2, [r7, #4]
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800ab36:	2300      	movs	r3, #0
 800ab38:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab3a:	e017      	b.n	800ab6c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	005a      	lsls	r2, r3, #1
 800ab40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	4413      	add	r3, r2
 800ab48:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ab4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ab4c:	085b      	lsrs	r3, r3, #1
 800ab4e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d005      	beq.n	800ab66 <gen_numname+0x5e>
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800ab60:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800ab64:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ab66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab68:	3301      	adds	r3, #1
 800ab6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6e:	2b0f      	cmp	r3, #15
 800ab70:	d9e4      	bls.n	800ab3c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1d8      	bne.n	800ab2c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ab7e:	2307      	movs	r3, #7
 800ab80:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	f003 030f 	and.w	r3, r3, #15
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	3330      	adds	r3, #48	@ 0x30
 800ab8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800ab92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ab96:	2b39      	cmp	r3, #57	@ 0x39
 800ab98:	d904      	bls.n	800aba4 <gen_numname+0x9c>
 800ab9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ab9e:	3307      	adds	r3, #7
 800aba0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800aba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba6:	1e5a      	subs	r2, r3, #1
 800aba8:	62ba      	str	r2, [r7, #40]	@ 0x28
 800abaa:	3330      	adds	r3, #48	@ 0x30
 800abac:	443b      	add	r3, r7
 800abae:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800abb2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	091b      	lsrs	r3, r3, #4
 800abba:	603b      	str	r3, [r7, #0]
	} while (seq);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1df      	bne.n	800ab82 <gen_numname+0x7a>
	ns[i] = '~';
 800abc2:	f107 0214 	add.w	r2, r7, #20
 800abc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc8:	4413      	add	r3, r2
 800abca:	227e      	movs	r2, #126	@ 0x7e
 800abcc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800abce:	2300      	movs	r3, #0
 800abd0:	627b      	str	r3, [r7, #36]	@ 0x24
 800abd2:	e002      	b.n	800abda <gen_numname+0xd2>
 800abd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd6:	3301      	adds	r3, #1
 800abd8:	627b      	str	r3, [r7, #36]	@ 0x24
 800abda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abde:	429a      	cmp	r2, r3
 800abe0:	d205      	bcs.n	800abee <gen_numname+0xe6>
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe6:	4413      	add	r3, r2
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	2b20      	cmp	r3, #32
 800abec:	d1f2      	bne.n	800abd4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800abee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf0:	2b07      	cmp	r3, #7
 800abf2:	d807      	bhi.n	800ac04 <gen_numname+0xfc>
 800abf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf6:	1c5a      	adds	r2, r3, #1
 800abf8:	62ba      	str	r2, [r7, #40]	@ 0x28
 800abfa:	3330      	adds	r3, #48	@ 0x30
 800abfc:	443b      	add	r3, r7
 800abfe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ac02:	e000      	b.n	800ac06 <gen_numname+0xfe>
 800ac04:	2120      	movs	r1, #32
 800ac06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac08:	1c5a      	adds	r2, r3, #1
 800ac0a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	4413      	add	r3, r2
 800ac10:	460a      	mov	r2, r1
 800ac12:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ac14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac16:	2b07      	cmp	r3, #7
 800ac18:	d9e9      	bls.n	800abee <gen_numname+0xe6>
}
 800ac1a:	bf00      	nop
 800ac1c:	bf00      	nop
 800ac1e:	3730      	adds	r7, #48	@ 0x30
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ac30:	230b      	movs	r3, #11
 800ac32:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	0852      	lsrs	r2, r2, #1
 800ac3a:	01db      	lsls	r3, r3, #7
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	1c59      	adds	r1, r3, #1
 800ac44:	6079      	str	r1, [r7, #4]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	4413      	add	r3, r2
 800ac4a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	60bb      	str	r3, [r7, #8]
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1ed      	bne.n	800ac34 <sum_sfn+0x10>
	return sum;
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b086      	sub	sp, #24
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ac70:	2304      	movs	r3, #4
 800ac72:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ac7a:	23ff      	movs	r3, #255	@ 0xff
 800ac7c:	757b      	strb	r3, [r7, #21]
 800ac7e:	23ff      	movs	r3, #255	@ 0xff
 800ac80:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ac82:	e081      	b.n	800ad88 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	69db      	ldr	r3, [r3, #28]
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6938      	ldr	r0, [r7, #16]
 800ac8c:	f7ff f83c 	bl	8009d08 <move_window>
 800ac90:	4603      	mov	r3, r0
 800ac92:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ac94:	7dfb      	ldrb	r3, [r7, #23]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d17c      	bne.n	800ad94 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800aca2:	7dbb      	ldrb	r3, [r7, #22]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d102      	bne.n	800acae <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800aca8:	2304      	movs	r3, #4
 800acaa:	75fb      	strb	r3, [r7, #23]
 800acac:	e077      	b.n	800ad9e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	330b      	adds	r3, #11
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acba:	73fb      	strb	r3, [r7, #15]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	7bfa      	ldrb	r2, [r7, #15]
 800acc0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800acc2:	7dbb      	ldrb	r3, [r7, #22]
 800acc4:	2be5      	cmp	r3, #229	@ 0xe5
 800acc6:	d00e      	beq.n	800ace6 <dir_read+0x80>
 800acc8:	7dbb      	ldrb	r3, [r7, #22]
 800acca:	2b2e      	cmp	r3, #46	@ 0x2e
 800accc:	d00b      	beq.n	800ace6 <dir_read+0x80>
 800acce:	7bfb      	ldrb	r3, [r7, #15]
 800acd0:	f023 0320 	bic.w	r3, r3, #32
 800acd4:	2b08      	cmp	r3, #8
 800acd6:	bf0c      	ite	eq
 800acd8:	2301      	moveq	r3, #1
 800acda:	2300      	movne	r3, #0
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	461a      	mov	r2, r3
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d002      	beq.n	800acec <dir_read+0x86>
				ord = 0xFF;
 800ace6:	23ff      	movs	r3, #255	@ 0xff
 800ace8:	757b      	strb	r3, [r7, #21]
 800acea:	e044      	b.n	800ad76 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800acec:	7bfb      	ldrb	r3, [r7, #15]
 800acee:	2b0f      	cmp	r3, #15
 800acf0:	d12f      	bne.n	800ad52 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800acf2:	7dbb      	ldrb	r3, [r7, #22]
 800acf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00d      	beq.n	800ad18 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6a1b      	ldr	r3, [r3, #32]
 800ad00:	7b5b      	ldrb	r3, [r3, #13]
 800ad02:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ad04:	7dbb      	ldrb	r3, [r7, #22]
 800ad06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad0a:	75bb      	strb	r3, [r7, #22]
 800ad0c:	7dbb      	ldrb	r3, [r7, #22]
 800ad0e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	695a      	ldr	r2, [r3, #20]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ad18:	7dba      	ldrb	r2, [r7, #22]
 800ad1a:	7d7b      	ldrb	r3, [r7, #21]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d115      	bne.n	800ad4c <dir_read+0xe6>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	330d      	adds	r3, #13
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	7d3a      	ldrb	r2, [r7, #20]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d10e      	bne.n	800ad4c <dir_read+0xe6>
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	691a      	ldr	r2, [r3, #16]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	4619      	mov	r1, r3
 800ad38:	4610      	mov	r0, r2
 800ad3a:	f7ff fe19 	bl	800a970 <pick_lfn>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d003      	beq.n	800ad4c <dir_read+0xe6>
 800ad44:	7d7b      	ldrb	r3, [r7, #21]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	e000      	b.n	800ad4e <dir_read+0xe8>
 800ad4c:	23ff      	movs	r3, #255	@ 0xff
 800ad4e:	757b      	strb	r3, [r7, #21]
 800ad50:	e011      	b.n	800ad76 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ad52:	7d7b      	ldrb	r3, [r7, #21]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d109      	bne.n	800ad6c <dir_read+0x106>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6a1b      	ldr	r3, [r3, #32]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7ff ff61 	bl	800ac24 <sum_sfn>
 800ad62:	4603      	mov	r3, r0
 800ad64:	461a      	mov	r2, r3
 800ad66:	7d3b      	ldrb	r3, [r7, #20]
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d015      	beq.n	800ad98 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad72:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800ad74:	e010      	b.n	800ad98 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ad76:	2100      	movs	r1, #0
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff fc2d 	bl	800a5d8 <dir_next>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad82:	7dfb      	ldrb	r3, [r7, #23]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d109      	bne.n	800ad9c <dir_read+0x136>
	while (dp->sect) {
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	69db      	ldr	r3, [r3, #28]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f47f af79 	bne.w	800ac84 <dir_read+0x1e>
 800ad92:	e004      	b.n	800ad9e <dir_read+0x138>
		if (res != FR_OK) break;
 800ad94:	bf00      	nop
 800ad96:	e002      	b.n	800ad9e <dir_read+0x138>
					break;
 800ad98:	bf00      	nop
 800ad9a:	e000      	b.n	800ad9e <dir_read+0x138>
		if (res != FR_OK) break;
 800ad9c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ad9e:	7dfb      	ldrb	r3, [r7, #23]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <dir_read+0x144>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	61da      	str	r2, [r3, #28]
	return res;
 800adaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800adc2:	2100      	movs	r1, #0
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f7ff fb7e 	bl	800a4c6 <dir_sdi>
 800adca:	4603      	mov	r3, r0
 800adcc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800adce:	7dfb      	ldrb	r3, [r7, #23]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <dir_find+0x24>
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	e0a9      	b.n	800af2c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800add8:	23ff      	movs	r3, #255	@ 0xff
 800adda:	753b      	strb	r3, [r7, #20]
 800addc:	7d3b      	ldrb	r3, [r7, #20]
 800adde:	757b      	strb	r3, [r7, #21]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f04f 32ff 	mov.w	r2, #4294967295
 800ade6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	69db      	ldr	r3, [r3, #28]
 800adec:	4619      	mov	r1, r3
 800adee:	6938      	ldr	r0, [r7, #16]
 800adf0:	f7fe ff8a 	bl	8009d08 <move_window>
 800adf4:	4603      	mov	r3, r0
 800adf6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800adf8:	7dfb      	ldrb	r3, [r7, #23]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f040 8090 	bne.w	800af20 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a1b      	ldr	r3, [r3, #32]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ae08:	7dbb      	ldrb	r3, [r7, #22]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d102      	bne.n	800ae14 <dir_find+0x60>
 800ae0e:	2304      	movs	r3, #4
 800ae10:	75fb      	strb	r3, [r7, #23]
 800ae12:	e08a      	b.n	800af2a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	330b      	adds	r3, #11
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae20:	73fb      	strb	r3, [r7, #15]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	7bfa      	ldrb	r2, [r7, #15]
 800ae26:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ae28:	7dbb      	ldrb	r3, [r7, #22]
 800ae2a:	2be5      	cmp	r3, #229	@ 0xe5
 800ae2c:	d007      	beq.n	800ae3e <dir_find+0x8a>
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	f003 0308 	and.w	r3, r3, #8
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d009      	beq.n	800ae4c <dir_find+0x98>
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	2b0f      	cmp	r3, #15
 800ae3c:	d006      	beq.n	800ae4c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae3e:	23ff      	movs	r3, #255	@ 0xff
 800ae40:	757b      	strb	r3, [r7, #21]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f04f 32ff 	mov.w	r2, #4294967295
 800ae48:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae4a:	e05e      	b.n	800af0a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
 800ae4e:	2b0f      	cmp	r3, #15
 800ae50:	d136      	bne.n	800aec0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ae58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d154      	bne.n	800af0a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ae60:	7dbb      	ldrb	r3, [r7, #22]
 800ae62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00d      	beq.n	800ae86 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	7b5b      	ldrb	r3, [r3, #13]
 800ae70:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ae72:	7dbb      	ldrb	r3, [r7, #22]
 800ae74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae78:	75bb      	strb	r3, [r7, #22]
 800ae7a:	7dbb      	ldrb	r3, [r7, #22]
 800ae7c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	695a      	ldr	r2, [r3, #20]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ae86:	7dba      	ldrb	r2, [r7, #22]
 800ae88:	7d7b      	ldrb	r3, [r7, #21]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d115      	bne.n	800aeba <dir_find+0x106>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	330d      	adds	r3, #13
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	7d3a      	ldrb	r2, [r7, #20]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d10e      	bne.n	800aeba <dir_find+0x106>
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	691a      	ldr	r2, [r3, #16]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	4619      	mov	r1, r3
 800aea6:	4610      	mov	r0, r2
 800aea8:	f7ff fcf2 	bl	800a890 <cmp_lfn>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <dir_find+0x106>
 800aeb2:	7d7b      	ldrb	r3, [r7, #21]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	e000      	b.n	800aebc <dir_find+0x108>
 800aeba:	23ff      	movs	r3, #255	@ 0xff
 800aebc:	757b      	strb	r3, [r7, #21]
 800aebe:	e024      	b.n	800af0a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aec0:	7d7b      	ldrb	r3, [r7, #21]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d109      	bne.n	800aeda <dir_find+0x126>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7ff feaa 	bl	800ac24 <sum_sfn>
 800aed0:	4603      	mov	r3, r0
 800aed2:	461a      	mov	r2, r3
 800aed4:	7d3b      	ldrb	r3, [r7, #20]
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d024      	beq.n	800af24 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d10a      	bne.n	800aefe <dir_find+0x14a>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a18      	ldr	r0, [r3, #32]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	3324      	adds	r3, #36	@ 0x24
 800aef0:	220b      	movs	r2, #11
 800aef2:	4619      	mov	r1, r3
 800aef4:	f7fe fd16 	bl	8009924 <mem_cmp>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d014      	beq.n	800af28 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aefe:	23ff      	movs	r3, #255	@ 0xff
 800af00:	757b      	strb	r3, [r7, #21]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f04f 32ff 	mov.w	r2, #4294967295
 800af08:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800af0a:	2100      	movs	r1, #0
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff fb63 	bl	800a5d8 <dir_next>
 800af12:	4603      	mov	r3, r0
 800af14:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f43f af65 	beq.w	800ade8 <dir_find+0x34>
 800af1e:	e004      	b.n	800af2a <dir_find+0x176>
		if (res != FR_OK) break;
 800af20:	bf00      	nop
 800af22:	e002      	b.n	800af2a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800af24:	bf00      	nop
 800af26:	e000      	b.n	800af2a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800af28:	bf00      	nop

	return res;
 800af2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3718      	adds	r7, #24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b08c      	sub	sp, #48	@ 0x30
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800af48:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <dir_register+0x20>
 800af50:	2306      	movs	r3, #6
 800af52:	e0e0      	b.n	800b116 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800af54:	2300      	movs	r3, #0
 800af56:	627b      	str	r3, [r7, #36]	@ 0x24
 800af58:	e002      	b.n	800af60 <dir_register+0x2c>
 800af5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5c:	3301      	adds	r3, #1
 800af5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	691a      	ldr	r2, [r3, #16]
 800af64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af66:	005b      	lsls	r3, r3, #1
 800af68:	4413      	add	r3, r2
 800af6a:	881b      	ldrh	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1f4      	bne.n	800af5a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800af76:	f107 030c 	add.w	r3, r7, #12
 800af7a:	220c      	movs	r2, #12
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fe fc95 	bl	80098ac <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800af82:	7dfb      	ldrb	r3, [r7, #23]
 800af84:	f003 0301 	and.w	r3, r3, #1
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d032      	beq.n	800aff2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2240      	movs	r2, #64	@ 0x40
 800af90:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800af94:	2301      	movs	r3, #1
 800af96:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af98:	e016      	b.n	800afc8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	691a      	ldr	r2, [r3, #16]
 800afa4:	f107 010c 	add.w	r1, r7, #12
 800afa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afaa:	f7ff fdad 	bl	800ab08 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f7ff ff00 	bl	800adb4 <dir_find>
 800afb4:	4603      	mov	r3, r0
 800afb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800afba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d106      	bne.n	800afd0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800afc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc4:	3301      	adds	r3, #1
 800afc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afca:	2b63      	cmp	r3, #99	@ 0x63
 800afcc:	d9e5      	bls.n	800af9a <dir_register+0x66>
 800afce:	e000      	b.n	800afd2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800afd0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800afd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd4:	2b64      	cmp	r3, #100	@ 0x64
 800afd6:	d101      	bne.n	800afdc <dir_register+0xa8>
 800afd8:	2307      	movs	r3, #7
 800afda:	e09c      	b.n	800b116 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800afdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	d002      	beq.n	800afea <dir_register+0xb6>
 800afe4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800afe8:	e095      	b.n	800b116 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800afea:	7dfa      	ldrb	r2, [r7, #23]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800aff2:	7dfb      	ldrb	r3, [r7, #23]
 800aff4:	f003 0302 	and.w	r3, r3, #2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d007      	beq.n	800b00c <dir_register+0xd8>
 800affc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affe:	330c      	adds	r3, #12
 800b000:	4a47      	ldr	r2, [pc, #284]	@ (800b120 <dir_register+0x1ec>)
 800b002:	fba2 2303 	umull	r2, r3, r2, r3
 800b006:	089b      	lsrs	r3, r3, #2
 800b008:	3301      	adds	r3, #1
 800b00a:	e000      	b.n	800b00e <dir_register+0xda>
 800b00c:	2301      	movs	r3, #1
 800b00e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b010:	6a39      	ldr	r1, [r7, #32]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7ff fbb6 	bl	800a784 <dir_alloc>
 800b018:	4603      	mov	r3, r0
 800b01a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b01e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b022:	2b00      	cmp	r3, #0
 800b024:	d148      	bne.n	800b0b8 <dir_register+0x184>
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	3b01      	subs	r3, #1
 800b02a:	623b      	str	r3, [r7, #32]
 800b02c:	6a3b      	ldr	r3, [r7, #32]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d042      	beq.n	800b0b8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	695a      	ldr	r2, [r3, #20]
 800b036:	6a3b      	ldr	r3, [r7, #32]
 800b038:	015b      	lsls	r3, r3, #5
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7ff fa41 	bl	800a4c6 <dir_sdi>
 800b044:	4603      	mov	r3, r0
 800b046:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b04a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d132      	bne.n	800b0b8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	3324      	adds	r3, #36	@ 0x24
 800b056:	4618      	mov	r0, r3
 800b058:	f7ff fde4 	bl	800ac24 <sum_sfn>
 800b05c:	4603      	mov	r3, r0
 800b05e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	69db      	ldr	r3, [r3, #28]
 800b064:	4619      	mov	r1, r3
 800b066:	69f8      	ldr	r0, [r7, #28]
 800b068:	f7fe fe4e 	bl	8009d08 <move_window>
 800b06c:	4603      	mov	r3, r0
 800b06e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800b072:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b076:	2b00      	cmp	r3, #0
 800b078:	d11d      	bne.n	800b0b6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	6918      	ldr	r0, [r3, #16]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a19      	ldr	r1, [r3, #32]
 800b082:	6a3b      	ldr	r3, [r7, #32]
 800b084:	b2da      	uxtb	r2, r3
 800b086:	7efb      	ldrb	r3, [r7, #27]
 800b088:	f7ff fcd6 	bl	800aa38 <put_lfn>
				fs->wflag = 1;
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	2201      	movs	r2, #1
 800b090:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b092:	2100      	movs	r1, #0
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f7ff fa9f 	bl	800a5d8 <dir_next>
 800b09a:	4603      	mov	r3, r0
 800b09c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800b0a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d107      	bne.n	800b0b8 <dir_register+0x184>
 800b0a8:	6a3b      	ldr	r3, [r7, #32]
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	623b      	str	r3, [r7, #32]
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1d5      	bne.n	800b060 <dir_register+0x12c>
 800b0b4:	e000      	b.n	800b0b8 <dir_register+0x184>
				if (res != FR_OK) break;
 800b0b6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b0b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d128      	bne.n	800b112 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	69db      	ldr	r3, [r3, #28]
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	69f8      	ldr	r0, [r7, #28]
 800b0c8:	f7fe fe1e 	bl	8009d08 <move_window>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b0d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d11b      	bne.n	800b112 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a1b      	ldr	r3, [r3, #32]
 800b0de:	2220      	movs	r2, #32
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7fe fc03 	bl	80098ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a18      	ldr	r0, [r3, #32]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	3324      	adds	r3, #36	@ 0x24
 800b0f0:	220b      	movs	r2, #11
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	f7fe fbda 	bl	80098ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	330c      	adds	r3, #12
 800b104:	f002 0218 	and.w	r2, r2, #24
 800b108:	b2d2      	uxtb	r2, r2
 800b10a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	2201      	movs	r2, #1
 800b110:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b112:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b116:	4618      	mov	r0, r3
 800b118:	3730      	adds	r7, #48	@ 0x30
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	4ec4ec4f 	.word	0x4ec4ec4f

0800b124 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	695b      	ldr	r3, [r3, #20]
 800b136:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b140:	d007      	beq.n	800b152 <dir_remove+0x2e>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff f9bc 	bl	800a4c6 <dir_sdi>
 800b14e:	4603      	mov	r3, r0
 800b150:	e000      	b.n	800b154 <dir_remove+0x30>
 800b152:	2300      	movs	r3, #0
 800b154:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b156:	7dfb      	ldrb	r3, [r7, #23]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d128      	bne.n	800b1ae <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	69db      	ldr	r3, [r3, #28]
 800b160:	4619      	mov	r1, r3
 800b162:	6938      	ldr	r0, [r7, #16]
 800b164:	f7fe fdd0 	bl	8009d08 <move_window>
 800b168:	4603      	mov	r3, r0
 800b16a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b16c:	7dfb      	ldrb	r3, [r7, #23]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d115      	bne.n	800b19e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	22e5      	movs	r2, #229	@ 0xe5
 800b178:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	2201      	movs	r2, #1
 800b17e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	695b      	ldr	r3, [r3, #20]
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	429a      	cmp	r2, r3
 800b188:	d90b      	bls.n	800b1a2 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800b18a:	2100      	movs	r1, #0
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7ff fa23 	bl	800a5d8 <dir_next>
 800b192:	4603      	mov	r3, r0
 800b194:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d0df      	beq.n	800b15c <dir_remove+0x38>
 800b19c:	e002      	b.n	800b1a4 <dir_remove+0x80>
			if (res != FR_OK) break;
 800b19e:	bf00      	nop
 800b1a0:	e000      	b.n	800b1a4 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800b1a2:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800b1a4:	7dfb      	ldrb	r3, [r7, #23]
 800b1a6:	2b04      	cmp	r3, #4
 800b1a8:	d101      	bne.n	800b1ae <dir_remove+0x8a>
 800b1aa:	2302      	movs	r3, #2
 800b1ac:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800b1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b088      	sub	sp, #32
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	69db      	ldr	r3, [r3, #28]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f000 80ca 	beq.w	800b36c <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e0:	d032      	beq.n	800b248 <get_fileinfo+0x90>
			i = j = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	61bb      	str	r3, [r7, #24]
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b1ea:	e01b      	b.n	800b224 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b1ec:	89fb      	ldrh	r3, [r7, #14]
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f002 fa47 	bl	800d684 <ff_convert>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b1fa:	89fb      	ldrh	r3, [r7, #14]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d102      	bne.n	800b206 <get_fileinfo+0x4e>
 800b200:	2300      	movs	r3, #0
 800b202:	61fb      	str	r3, [r7, #28]
 800b204:	e01a      	b.n	800b23c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	2bfe      	cmp	r3, #254	@ 0xfe
 800b20a:	d902      	bls.n	800b212 <get_fileinfo+0x5a>
 800b20c:	2300      	movs	r3, #0
 800b20e:	61fb      	str	r3, [r7, #28]
 800b210:	e014      	b.n	800b23c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	1c5a      	adds	r2, r3, #1
 800b216:	61fa      	str	r2, [r7, #28]
 800b218:	89fa      	ldrh	r2, [r7, #14]
 800b21a:	b2d1      	uxtb	r1, r2
 800b21c:	683a      	ldr	r2, [r7, #0]
 800b21e:	4413      	add	r3, r2
 800b220:	460a      	mov	r2, r1
 800b222:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	691a      	ldr	r2, [r3, #16]
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	1c59      	adds	r1, r3, #1
 800b22c:	61b9      	str	r1, [r7, #24]
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	4413      	add	r3, r2
 800b232:	881b      	ldrh	r3, [r3, #0]
 800b234:	81fb      	strh	r3, [r7, #14]
 800b236:	89fb      	ldrh	r3, [r7, #14]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1d7      	bne.n	800b1ec <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	4413      	add	r3, r2
 800b242:	3316      	adds	r3, #22
 800b244:	2200      	movs	r2, #0
 800b246:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	61bb      	str	r3, [r7, #24]
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b250:	683a      	ldr	r2, [r7, #0]
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	4413      	add	r3, r2
 800b256:	3316      	adds	r3, #22
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b25c:	e04d      	b.n	800b2fa <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a1a      	ldr	r2, [r3, #32]
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	1c59      	adds	r1, r3, #1
 800b266:	61f9      	str	r1, [r7, #28]
 800b268:	4413      	add	r3, r2
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	2b20      	cmp	r3, #32
 800b272:	d041      	beq.n	800b2f8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b274:	7dfb      	ldrb	r3, [r7, #23]
 800b276:	2b05      	cmp	r3, #5
 800b278:	d101      	bne.n	800b27e <get_fileinfo+0xc6>
 800b27a:	23e5      	movs	r3, #229	@ 0xe5
 800b27c:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	2b09      	cmp	r3, #9
 800b282:	d10f      	bne.n	800b2a4 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800b284:	89bb      	ldrh	r3, [r7, #12]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d105      	bne.n	800b296 <get_fileinfo+0xde>
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	4413      	add	r3, r2
 800b290:	3316      	adds	r3, #22
 800b292:	222e      	movs	r2, #46	@ 0x2e
 800b294:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	61ba      	str	r2, [r7, #24]
 800b29c:	683a      	ldr	r2, [r7, #0]
 800b29e:	4413      	add	r3, r2
 800b2a0:	222e      	movs	r2, #46	@ 0x2e
 800b2a2:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	3309      	adds	r3, #9
 800b2ac:	7dfa      	ldrb	r2, [r7, #23]
 800b2ae:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b2b0:	89bb      	ldrh	r3, [r7, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d11c      	bne.n	800b2f0 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	2b40      	cmp	r3, #64	@ 0x40
 800b2ba:	d913      	bls.n	800b2e4 <get_fileinfo+0x12c>
 800b2bc:	7dfb      	ldrb	r3, [r7, #23]
 800b2be:	2b5a      	cmp	r3, #90	@ 0x5a
 800b2c0:	d810      	bhi.n	800b2e4 <get_fileinfo+0x12c>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	330c      	adds	r3, #12
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	2b08      	cmp	r3, #8
 800b2d0:	d901      	bls.n	800b2d6 <get_fileinfo+0x11e>
 800b2d2:	2310      	movs	r3, #16
 800b2d4:	e000      	b.n	800b2d8 <get_fileinfo+0x120>
 800b2d6:	2308      	movs	r3, #8
 800b2d8:	4013      	ands	r3, r2
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d002      	beq.n	800b2e4 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800b2de:	7dfb      	ldrb	r3, [r7, #23]
 800b2e0:	3320      	adds	r3, #32
 800b2e2:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b2e4:	683a      	ldr	r2, [r7, #0]
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	3316      	adds	r3, #22
 800b2ec:	7dfa      	ldrb	r2, [r7, #23]
 800b2ee:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	61bb      	str	r3, [r7, #24]
 800b2f6:	e000      	b.n	800b2fa <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800b2f8:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	2b0a      	cmp	r3, #10
 800b2fe:	d9ae      	bls.n	800b25e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b300:	89bb      	ldrh	r3, [r7, #12]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d10d      	bne.n	800b322 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800b306:	683a      	ldr	r2, [r7, #0]
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	4413      	add	r3, r2
 800b30c:	3316      	adds	r3, #22
 800b30e:	2200      	movs	r2, #0
 800b310:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	330c      	adds	r3, #12
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <get_fileinfo+0x16a>
 800b31e:	2300      	movs	r3, #0
 800b320:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	4413      	add	r3, r2
 800b328:	3309      	adds	r3, #9
 800b32a:	2200      	movs	r2, #0
 800b32c:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	7ada      	ldrb	r2, [r3, #11]
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a1b      	ldr	r3, [r3, #32]
 800b33c:	331c      	adds	r3, #28
 800b33e:	4618      	mov	r0, r3
 800b340:	f7fe fa4a 	bl	80097d8 <ld_dword>
 800b344:	4602      	mov	r2, r0
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	3316      	adds	r3, #22
 800b350:	4618      	mov	r0, r3
 800b352:	f7fe fa41 	bl	80097d8 <ld_dword>
 800b356:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	b29a      	uxth	r2, r3
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	80da      	strh	r2, [r3, #6]
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	0c1b      	lsrs	r3, r3, #16
 800b364:	b29a      	uxth	r2, r3
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	809a      	strh	r2, [r3, #4]
 800b36a:	e000      	b.n	800b36e <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b36c:	bf00      	nop
}
 800b36e:	3720      	adds	r7, #32
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b08a      	sub	sp, #40	@ 0x28
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	613b      	str	r3, [r7, #16]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	60fb      	str	r3, [r7, #12]
 800b38c:	2300      	movs	r3, #0
 800b38e:	617b      	str	r3, [r7, #20]
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	1c5a      	adds	r2, r3, #1
 800b398:	61ba      	str	r2, [r7, #24]
 800b39a:	693a      	ldr	r2, [r7, #16]
 800b39c:	4413      	add	r3, r2
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b3a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3a4:	2b1f      	cmp	r3, #31
 800b3a6:	d940      	bls.n	800b42a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b3a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3aa:	2b2f      	cmp	r3, #47	@ 0x2f
 800b3ac:	d006      	beq.n	800b3bc <create_name+0x48>
 800b3ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3b0:	2b5c      	cmp	r3, #92	@ 0x5c
 800b3b2:	d110      	bne.n	800b3d6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b3b4:	e002      	b.n	800b3bc <create_name+0x48>
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	61bb      	str	r3, [r7, #24]
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	2b2f      	cmp	r3, #47	@ 0x2f
 800b3c6:	d0f6      	beq.n	800b3b6 <create_name+0x42>
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800b3d2:	d0f0      	beq.n	800b3b6 <create_name+0x42>
			break;
 800b3d4:	e02a      	b.n	800b42c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	2bfe      	cmp	r3, #254	@ 0xfe
 800b3da:	d901      	bls.n	800b3e0 <create_name+0x6c>
 800b3dc:	2306      	movs	r3, #6
 800b3de:	e17d      	b.n	800b6dc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b3e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b3e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f002 f94a 	bl	800d684 <ff_convert>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b3f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d101      	bne.n	800b3fe <create_name+0x8a>
 800b3fa:	2306      	movs	r3, #6
 800b3fc:	e16e      	b.n	800b6dc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b3fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b400:	2b7f      	cmp	r3, #127	@ 0x7f
 800b402:	d809      	bhi.n	800b418 <create_name+0xa4>
 800b404:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b406:	4619      	mov	r1, r3
 800b408:	488d      	ldr	r0, [pc, #564]	@ (800b640 <create_name+0x2cc>)
 800b40a:	f7fe fab2 	bl	8009972 <chk_chr>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <create_name+0xa4>
 800b414:	2306      	movs	r3, #6
 800b416:	e161      	b.n	800b6dc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	1c5a      	adds	r2, r3, #1
 800b41c:	617a      	str	r2, [r7, #20]
 800b41e:	005b      	lsls	r3, r3, #1
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4413      	add	r3, r2
 800b424:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b426:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b428:	e7b4      	b.n	800b394 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b42a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b42c:	693a      	ldr	r2, [r7, #16]
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	441a      	add	r2, r3
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b436:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b438:	2b1f      	cmp	r3, #31
 800b43a:	d801      	bhi.n	800b440 <create_name+0xcc>
 800b43c:	2304      	movs	r3, #4
 800b43e:	e000      	b.n	800b442 <create_name+0xce>
 800b440:	2300      	movs	r3, #0
 800b442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b446:	e011      	b.n	800b46c <create_name+0xf8>
		w = lfn[di - 1];
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b44e:	3b01      	subs	r3, #1
 800b450:	005b      	lsls	r3, r3, #1
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	4413      	add	r3, r2
 800b456:	881b      	ldrh	r3, [r3, #0]
 800b458:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b45a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b45c:	2b20      	cmp	r3, #32
 800b45e:	d002      	beq.n	800b466 <create_name+0xf2>
 800b460:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b462:	2b2e      	cmp	r3, #46	@ 0x2e
 800b464:	d106      	bne.n	800b474 <create_name+0x100>
		di--;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	3b01      	subs	r3, #1
 800b46a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1ea      	bne.n	800b448 <create_name+0xd4>
 800b472:	e000      	b.n	800b476 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b474:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	005b      	lsls	r3, r3, #1
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	4413      	add	r3, r2
 800b47e:	2200      	movs	r2, #0
 800b480:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <create_name+0x118>
 800b488:	2306      	movs	r3, #6
 800b48a:	e127      	b.n	800b6dc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	3324      	adds	r3, #36	@ 0x24
 800b490:	220b      	movs	r2, #11
 800b492:	2120      	movs	r1, #32
 800b494:	4618      	mov	r0, r3
 800b496:	f7fe fa2a 	bl	80098ee <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b49a:	2300      	movs	r3, #0
 800b49c:	61bb      	str	r3, [r7, #24]
 800b49e:	e002      	b.n	800b4a6 <create_name+0x132>
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	61bb      	str	r3, [r7, #24]
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	005b      	lsls	r3, r3, #1
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	2b20      	cmp	r3, #32
 800b4b2:	d0f5      	beq.n	800b4a0 <create_name+0x12c>
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	005b      	lsls	r3, r3, #1
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	881b      	ldrh	r3, [r3, #0]
 800b4be:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4c0:	d0ee      	beq.n	800b4a0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d009      	beq.n	800b4dc <create_name+0x168>
 800b4c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4cc:	f043 0303 	orr.w	r3, r3, #3
 800b4d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b4d4:	e002      	b.n	800b4dc <create_name+0x168>
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	617b      	str	r3, [r7, #20]
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d009      	beq.n	800b4f6 <create_name+0x182>
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	881b      	ldrh	r3, [r3, #0]
 800b4f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4f4:	d1ef      	bne.n	800b4d6 <create_name+0x162>

	i = b = 0; ni = 8;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	623b      	str	r3, [r7, #32]
 800b500:	2308      	movs	r3, #8
 800b502:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b504:	69bb      	ldr	r3, [r7, #24]
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	61ba      	str	r2, [r7, #24]
 800b50a:	005b      	lsls	r3, r3, #1
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	4413      	add	r3, r2
 800b510:	881b      	ldrh	r3, [r3, #0]
 800b512:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b514:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b516:	2b00      	cmp	r3, #0
 800b518:	f000 8090 	beq.w	800b63c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b51c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b51e:	2b20      	cmp	r3, #32
 800b520:	d006      	beq.n	800b530 <create_name+0x1bc>
 800b522:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b524:	2b2e      	cmp	r3, #46	@ 0x2e
 800b526:	d10a      	bne.n	800b53e <create_name+0x1ca>
 800b528:	69ba      	ldr	r2, [r7, #24]
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d006      	beq.n	800b53e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b534:	f043 0303 	orr.w	r3, r3, #3
 800b538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b53c:	e07d      	b.n	800b63a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b53e:	6a3a      	ldr	r2, [r7, #32]
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	429a      	cmp	r2, r3
 800b544:	d203      	bcs.n	800b54e <create_name+0x1da>
 800b546:	69ba      	ldr	r2, [r7, #24]
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d123      	bne.n	800b596 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	2b0b      	cmp	r3, #11
 800b552:	d106      	bne.n	800b562 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b558:	f043 0303 	orr.w	r3, r3, #3
 800b55c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b560:	e075      	b.n	800b64e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	429a      	cmp	r2, r3
 800b568:	d005      	beq.n	800b576 <create_name+0x202>
 800b56a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b56e:	f043 0303 	orr.w	r3, r3, #3
 800b572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d866      	bhi.n	800b64c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	61bb      	str	r3, [r7, #24]
 800b582:	2308      	movs	r3, #8
 800b584:	623b      	str	r3, [r7, #32]
 800b586:	230b      	movs	r3, #11
 800b588:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b58a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b594:	e051      	b.n	800b63a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b596:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b598:	2b7f      	cmp	r3, #127	@ 0x7f
 800b59a:	d914      	bls.n	800b5c6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b59c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b59e:	2100      	movs	r1, #0
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f002 f86f 	bl	800d684 <ff_convert>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b5aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d004      	beq.n	800b5ba <create_name+0x246>
 800b5b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5b2:	3b80      	subs	r3, #128	@ 0x80
 800b5b4:	4a23      	ldr	r2, [pc, #140]	@ (800b644 <create_name+0x2d0>)
 800b5b6:	5cd3      	ldrb	r3, [r2, r3]
 800b5b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b5ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5be:	f043 0302 	orr.w	r3, r3, #2
 800b5c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b5c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d007      	beq.n	800b5dc <create_name+0x268>
 800b5cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	481d      	ldr	r0, [pc, #116]	@ (800b648 <create_name+0x2d4>)
 800b5d2:	f7fe f9ce 	bl	8009972 <chk_chr>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d008      	beq.n	800b5ee <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b5dc:	235f      	movs	r3, #95	@ 0x5f
 800b5de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5e4:	f043 0303 	orr.w	r3, r3, #3
 800b5e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b5ec:	e01b      	b.n	800b626 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b5ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5f0:	2b40      	cmp	r3, #64	@ 0x40
 800b5f2:	d909      	bls.n	800b608 <create_name+0x294>
 800b5f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5f6:	2b5a      	cmp	r3, #90	@ 0x5a
 800b5f8:	d806      	bhi.n	800b608 <create_name+0x294>
					b |= 2;
 800b5fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b5fe:	f043 0302 	orr.w	r3, r3, #2
 800b602:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b606:	e00e      	b.n	800b626 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b608:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b60a:	2b60      	cmp	r3, #96	@ 0x60
 800b60c:	d90b      	bls.n	800b626 <create_name+0x2b2>
 800b60e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b610:	2b7a      	cmp	r3, #122	@ 0x7a
 800b612:	d808      	bhi.n	800b626 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b614:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b618:	f043 0301 	orr.w	r3, r3, #1
 800b61c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b620:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b622:	3b20      	subs	r3, #32
 800b624:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	1c5a      	adds	r2, r3, #1
 800b62a:	623a      	str	r2, [r7, #32]
 800b62c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b62e:	b2d1      	uxtb	r1, r2
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	4413      	add	r3, r2
 800b634:	460a      	mov	r2, r1
 800b636:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b63a:	e763      	b.n	800b504 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b63c:	bf00      	nop
 800b63e:	e006      	b.n	800b64e <create_name+0x2da>
 800b640:	08012bf4 	.word	0x08012bf4
 800b644:	08012cf0 	.word	0x08012cf0
 800b648:	08012c00 	.word	0x08012c00
			if (si > di) break;			/* No extension */
 800b64c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b654:	2be5      	cmp	r3, #229	@ 0xe5
 800b656:	d103      	bne.n	800b660 <create_name+0x2ec>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2205      	movs	r2, #5
 800b65c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	2b08      	cmp	r3, #8
 800b664:	d104      	bne.n	800b670 <create_name+0x2fc>
 800b666:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b670:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b674:	f003 030c 	and.w	r3, r3, #12
 800b678:	2b0c      	cmp	r3, #12
 800b67a:	d005      	beq.n	800b688 <create_name+0x314>
 800b67c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b680:	f003 0303 	and.w	r3, r3, #3
 800b684:	2b03      	cmp	r3, #3
 800b686:	d105      	bne.n	800b694 <create_name+0x320>
 800b688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b68c:	f043 0302 	orr.w	r3, r3, #2
 800b690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b698:	f003 0302 	and.w	r3, r3, #2
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d117      	bne.n	800b6d0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b6a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6a4:	f003 0303 	and.w	r3, r3, #3
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d105      	bne.n	800b6b8 <create_name+0x344>
 800b6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6b0:	f043 0310 	orr.w	r3, r3, #16
 800b6b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b6b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6bc:	f003 030c 	and.w	r3, r3, #12
 800b6c0:	2b04      	cmp	r3, #4
 800b6c2:	d105      	bne.n	800b6d0 <create_name+0x35c>
 800b6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6c8:	f043 0308 	orr.w	r3, r3, #8
 800b6cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b6d6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800b6da:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3728      	adds	r7, #40	@ 0x28
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b086      	sub	sp, #24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b6f8:	e002      	b.n	800b700 <follow_path+0x1c>
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	603b      	str	r3, [r7, #0]
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b2f      	cmp	r3, #47	@ 0x2f
 800b706:	d0f8      	beq.n	800b6fa <follow_path+0x16>
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b70e:	d0f4      	beq.n	800b6fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	2200      	movs	r2, #0
 800b714:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	2b1f      	cmp	r3, #31
 800b71c:	d80a      	bhi.n	800b734 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2280      	movs	r2, #128	@ 0x80
 800b722:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b726:	2100      	movs	r1, #0
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7fe fecc 	bl	800a4c6 <dir_sdi>
 800b72e:	4603      	mov	r3, r0
 800b730:	75fb      	strb	r3, [r7, #23]
 800b732:	e048      	b.n	800b7c6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b734:	463b      	mov	r3, r7
 800b736:	4619      	mov	r1, r3
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7ff fe1b 	bl	800b374 <create_name>
 800b73e:	4603      	mov	r3, r0
 800b740:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b742:	7dfb      	ldrb	r3, [r7, #23]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d139      	bne.n	800b7bc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7ff fb33 	bl	800adb4 <dir_find>
 800b74e:	4603      	mov	r3, r0
 800b750:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b758:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00a      	beq.n	800b776 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b760:	7dfb      	ldrb	r3, [r7, #23]
 800b762:	2b04      	cmp	r3, #4
 800b764:	d12c      	bne.n	800b7c0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b766:	7afb      	ldrb	r3, [r7, #11]
 800b768:	f003 0304 	and.w	r3, r3, #4
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d127      	bne.n	800b7c0 <follow_path+0xdc>
 800b770:	2305      	movs	r3, #5
 800b772:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b774:	e024      	b.n	800b7c0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b776:	7afb      	ldrb	r3, [r7, #11]
 800b778:	f003 0304 	and.w	r3, r3, #4
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d121      	bne.n	800b7c4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	799b      	ldrb	r3, [r3, #6]
 800b784:	f003 0310 	and.w	r3, r3, #16
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d102      	bne.n	800b792 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b78c:	2305      	movs	r3, #5
 800b78e:	75fb      	strb	r3, [r7, #23]
 800b790:	e019      	b.n	800b7c6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	695b      	ldr	r3, [r3, #20]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	8992      	ldrh	r2, [r2, #12]
 800b7a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b7a4:	fb00 f202 	mul.w	r2, r0, r2
 800b7a8:	1a9b      	subs	r3, r3, r2
 800b7aa:	440b      	add	r3, r1
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f7ff f82f 	bl	800a812 <ld_clust>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b7ba:	e7bb      	b.n	800b734 <follow_path+0x50>
			if (res != FR_OK) break;
 800b7bc:	bf00      	nop
 800b7be:	e002      	b.n	800b7c6 <follow_path+0xe2>
				break;
 800b7c0:	bf00      	nop
 800b7c2:	e000      	b.n	800b7c6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b7c4:	bf00      	nop
			}
		}
	}

	return res;
 800b7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3718      	adds	r7, #24
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b087      	sub	sp, #28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b7d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7dc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d031      	beq.n	800b84a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	617b      	str	r3, [r7, #20]
 800b7ec:	e002      	b.n	800b7f4 <get_ldnumber+0x24>
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	617b      	str	r3, [r7, #20]
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2b1f      	cmp	r3, #31
 800b7fa:	d903      	bls.n	800b804 <get_ldnumber+0x34>
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	2b3a      	cmp	r3, #58	@ 0x3a
 800b802:	d1f4      	bne.n	800b7ee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b3a      	cmp	r3, #58	@ 0x3a
 800b80a:	d11c      	bne.n	800b846 <get_ldnumber+0x76>
			tp = *path;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	1c5a      	adds	r2, r3, #1
 800b816:	60fa      	str	r2, [r7, #12]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	3b30      	subs	r3, #48	@ 0x30
 800b81c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	2b09      	cmp	r3, #9
 800b822:	d80e      	bhi.n	800b842 <get_ldnumber+0x72>
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d10a      	bne.n	800b842 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d107      	bne.n	800b842 <get_ldnumber+0x72>
					vol = (int)i;
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	3301      	adds	r3, #1
 800b83a:	617b      	str	r3, [r7, #20]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	e002      	b.n	800b84c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b846:	2300      	movs	r3, #0
 800b848:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b84a:	693b      	ldr	r3, [r7, #16]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	371c      	adds	r7, #28
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	70da      	strb	r2, [r3, #3]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f04f 32ff 	mov.w	r2, #4294967295
 800b86e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7fe fa48 	bl	8009d08 <move_window>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <check_fs+0x2a>
 800b87e:	2304      	movs	r3, #4
 800b880:	e038      	b.n	800b8f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	3338      	adds	r3, #56	@ 0x38
 800b886:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fd ff8c 	bl	80097a8 <ld_word>
 800b890:	4603      	mov	r3, r0
 800b892:	461a      	mov	r2, r3
 800b894:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b898:	429a      	cmp	r2, r3
 800b89a:	d001      	beq.n	800b8a0 <check_fs+0x48>
 800b89c:	2303      	movs	r3, #3
 800b89e:	e029      	b.n	800b8f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b8a6:	2be9      	cmp	r3, #233	@ 0xe9
 800b8a8:	d009      	beq.n	800b8be <check_fs+0x66>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b8b0:	2beb      	cmp	r3, #235	@ 0xeb
 800b8b2:	d11e      	bne.n	800b8f2 <check_fs+0x9a>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800b8ba:	2b90      	cmp	r3, #144	@ 0x90
 800b8bc:	d119      	bne.n	800b8f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	3338      	adds	r3, #56	@ 0x38
 800b8c2:	3336      	adds	r3, #54	@ 0x36
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fd ff87 	bl	80097d8 <ld_dword>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b8d0:	4a0a      	ldr	r2, [pc, #40]	@ (800b8fc <check_fs+0xa4>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d101      	bne.n	800b8da <check_fs+0x82>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	e00c      	b.n	800b8f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	3338      	adds	r3, #56	@ 0x38
 800b8de:	3352      	adds	r3, #82	@ 0x52
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fd ff79 	bl	80097d8 <ld_dword>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	4a05      	ldr	r2, [pc, #20]	@ (800b900 <check_fs+0xa8>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d101      	bne.n	800b8f2 <check_fs+0x9a>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	e000      	b.n	800b8f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b8f2:	2302      	movs	r3, #2
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3708      	adds	r7, #8
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	00544146 	.word	0x00544146
 800b900:	33544146 	.word	0x33544146

0800b904 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b096      	sub	sp, #88	@ 0x58
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	4613      	mov	r3, r2
 800b910:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2200      	movs	r2, #0
 800b916:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f7ff ff59 	bl	800b7d0 <get_ldnumber>
 800b91e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b922:	2b00      	cmp	r3, #0
 800b924:	da01      	bge.n	800b92a <find_volume+0x26>
 800b926:	230b      	movs	r3, #11
 800b928:	e265      	b.n	800bdf6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b92a:	4a9f      	ldr	r2, [pc, #636]	@ (800bba8 <find_volume+0x2a4>)
 800b92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b932:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <find_volume+0x3a>
 800b93a:	230c      	movs	r3, #12
 800b93c:	e25b      	b.n	800bdf6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b942:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b944:	79fb      	ldrb	r3, [r7, #7]
 800b946:	f023 0301 	bic.w	r3, r3, #1
 800b94a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d01a      	beq.n	800b98a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b956:	785b      	ldrb	r3, [r3, #1]
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fd fe85 	bl	8009668 <disk_status>
 800b95e:	4603      	mov	r3, r0
 800b960:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b964:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b968:	f003 0301 	and.w	r3, r3, #1
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10c      	bne.n	800b98a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b970:	79fb      	ldrb	r3, [r7, #7]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d007      	beq.n	800b986 <find_volume+0x82>
 800b976:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b97a:	f003 0304 	and.w	r3, r3, #4
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b982:	230a      	movs	r3, #10
 800b984:	e237      	b.n	800bdf6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b986:	2300      	movs	r3, #0
 800b988:	e235      	b.n	800bdf6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98c:	2200      	movs	r2, #0
 800b98e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b992:	b2da      	uxtb	r2, r3
 800b994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b996:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99a:	785b      	ldrb	r3, [r3, #1]
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fd fe7d 	bl	800969c <disk_initialize>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b9a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b9ac:	f003 0301 	and.w	r3, r3, #1
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d001      	beq.n	800b9b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	e21e      	b.n	800bdf6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d007      	beq.n	800b9ce <find_volume+0xca>
 800b9be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b9c2:	f003 0304 	and.w	r3, r3, #4
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d001      	beq.n	800b9ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b9ca:	230a      	movs	r3, #10
 800b9cc:	e213      	b.n	800bdf6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d0:	7858      	ldrb	r0, [r3, #1]
 800b9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d4:	330c      	adds	r3, #12
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	2102      	movs	r1, #2
 800b9da:	f7fd fec7 	bl	800976c <disk_ioctl>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <find_volume+0xe4>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e206      	b.n	800bdf6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ea:	899b      	ldrh	r3, [r3, #12]
 800b9ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9f0:	d80d      	bhi.n	800ba0e <find_volume+0x10a>
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f4:	899b      	ldrh	r3, [r3, #12]
 800b9f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9fa:	d308      	bcc.n	800ba0e <find_volume+0x10a>
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fe:	899b      	ldrh	r3, [r3, #12]
 800ba00:	461a      	mov	r2, r3
 800ba02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba04:	899b      	ldrh	r3, [r3, #12]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	4013      	ands	r3, r2
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <find_volume+0x10e>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e1f1      	b.n	800bdf6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ba12:	2300      	movs	r3, #0
 800ba14:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ba16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba18:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba1a:	f7ff ff1d 	bl	800b858 <check_fs>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ba24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d149      	bne.n	800bac0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba30:	e01e      	b.n	800ba70 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ba32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba34:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ba38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba3a:	011b      	lsls	r3, r3, #4
 800ba3c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ba40:	4413      	add	r3, r2
 800ba42:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ba44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba46:	3304      	adds	r3, #4
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d006      	beq.n	800ba5c <find_volume+0x158>
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba50:	3308      	adds	r3, #8
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fd fec0 	bl	80097d8 <ld_dword>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	e000      	b.n	800ba5e <find_volume+0x15a>
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	3358      	adds	r3, #88	@ 0x58
 800ba64:	443b      	add	r3, r7
 800ba66:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba72:	2b03      	cmp	r3, #3
 800ba74:	d9dd      	bls.n	800ba32 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ba76:	2300      	movs	r3, #0
 800ba78:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ba7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <find_volume+0x182>
 800ba80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba82:	3b01      	subs	r3, #1
 800ba84:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ba86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	3358      	adds	r3, #88	@ 0x58
 800ba8c:	443b      	add	r3, r7
 800ba8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ba92:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ba94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d005      	beq.n	800baa6 <find_volume+0x1a2>
 800ba9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba9c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba9e:	f7ff fedb 	bl	800b858 <check_fs>
 800baa2:	4603      	mov	r3, r0
 800baa4:	e000      	b.n	800baa8 <find_volume+0x1a4>
 800baa6:	2303      	movs	r3, #3
 800baa8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800baac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d905      	bls.n	800bac0 <find_volume+0x1bc>
 800bab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bab6:	3301      	adds	r3, #1
 800bab8:	643b      	str	r3, [r7, #64]	@ 0x40
 800baba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800babc:	2b03      	cmp	r3, #3
 800babe:	d9e2      	bls.n	800ba86 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bac0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bac4:	2b04      	cmp	r3, #4
 800bac6:	d101      	bne.n	800bacc <find_volume+0x1c8>
 800bac8:	2301      	movs	r3, #1
 800baca:	e194      	b.n	800bdf6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bacc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d901      	bls.n	800bad8 <find_volume+0x1d4>
 800bad4:	230d      	movs	r3, #13
 800bad6:	e18e      	b.n	800bdf6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bada:	3338      	adds	r3, #56	@ 0x38
 800badc:	330b      	adds	r3, #11
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fd fe62 	bl	80097a8 <ld_word>
 800bae4:	4603      	mov	r3, r0
 800bae6:	461a      	mov	r2, r3
 800bae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baea:	899b      	ldrh	r3, [r3, #12]
 800baec:	429a      	cmp	r2, r3
 800baee:	d001      	beq.n	800baf4 <find_volume+0x1f0>
 800baf0:	230d      	movs	r3, #13
 800baf2:	e180      	b.n	800bdf6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800baf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf6:	3338      	adds	r3, #56	@ 0x38
 800baf8:	3316      	adds	r3, #22
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fd fe54 	bl	80097a8 <ld_word>
 800bb00:	4603      	mov	r3, r0
 800bb02:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bb04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d106      	bne.n	800bb18 <find_volume+0x214>
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb0c:	3338      	adds	r3, #56	@ 0x38
 800bb0e:	3324      	adds	r3, #36	@ 0x24
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fd fe61 	bl	80097d8 <ld_dword>
 800bb16:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800bb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb1c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb20:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800bb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bb28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2a:	789b      	ldrb	r3, [r3, #2]
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d005      	beq.n	800bb3c <find_volume+0x238>
 800bb30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb32:	789b      	ldrb	r3, [r3, #2]
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d001      	beq.n	800bb3c <find_volume+0x238>
 800bb38:	230d      	movs	r3, #13
 800bb3a:	e15c      	b.n	800bdf6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3e:	789b      	ldrb	r3, [r3, #2]
 800bb40:	461a      	mov	r2, r3
 800bb42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb44:	fb02 f303 	mul.w	r3, r2, r3
 800bb48:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb50:	461a      	mov	r2, r3
 800bb52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bb56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb58:	895b      	ldrh	r3, [r3, #10]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d008      	beq.n	800bb70 <find_volume+0x26c>
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb60:	895b      	ldrh	r3, [r3, #10]
 800bb62:	461a      	mov	r2, r3
 800bb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb66:	895b      	ldrh	r3, [r3, #10]
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d001      	beq.n	800bb74 <find_volume+0x270>
 800bb70:	230d      	movs	r3, #13
 800bb72:	e140      	b.n	800bdf6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb76:	3338      	adds	r3, #56	@ 0x38
 800bb78:	3311      	adds	r3, #17
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fd fe14 	bl	80097a8 <ld_word>
 800bb80:	4603      	mov	r3, r0
 800bb82:	461a      	mov	r2, r3
 800bb84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bb88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb8a:	891b      	ldrh	r3, [r3, #8]
 800bb8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb8e:	8992      	ldrh	r2, [r2, #12]
 800bb90:	0952      	lsrs	r2, r2, #5
 800bb92:	b292      	uxth	r2, r2
 800bb94:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb98:	fb01 f202 	mul.w	r2, r1, r2
 800bb9c:	1a9b      	subs	r3, r3, r2
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d003      	beq.n	800bbac <find_volume+0x2a8>
 800bba4:	230d      	movs	r3, #13
 800bba6:	e126      	b.n	800bdf6 <find_volume+0x4f2>
 800bba8:	20002328 	.word	0x20002328

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbae:	3338      	adds	r3, #56	@ 0x38
 800bbb0:	3313      	adds	r3, #19
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fd fdf8 	bl	80097a8 <ld_word>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bbbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d106      	bne.n	800bbd0 <find_volume+0x2cc>
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc4:	3338      	adds	r3, #56	@ 0x38
 800bbc6:	3320      	adds	r3, #32
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fd fe05 	bl	80097d8 <ld_dword>
 800bbce:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd2:	3338      	adds	r3, #56	@ 0x38
 800bbd4:	330e      	adds	r3, #14
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fd fde6 	bl	80097a8 <ld_word>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bbe0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <find_volume+0x2e6>
 800bbe6:	230d      	movs	r3, #13
 800bbe8:	e105      	b.n	800bdf6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bbea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bbec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbee:	4413      	add	r3, r2
 800bbf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbf2:	8911      	ldrh	r1, [r2, #8]
 800bbf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbf6:	8992      	ldrh	r2, [r2, #12]
 800bbf8:	0952      	lsrs	r2, r2, #5
 800bbfa:	b292      	uxth	r2, r2
 800bbfc:	fbb1 f2f2 	udiv	r2, r1, r2
 800bc00:	b292      	uxth	r2, r2
 800bc02:	4413      	add	r3, r2
 800bc04:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bc06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d201      	bcs.n	800bc12 <find_volume+0x30e>
 800bc0e:	230d      	movs	r3, #13
 800bc10:	e0f1      	b.n	800bdf6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bc12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc1a:	8952      	ldrh	r2, [r2, #10]
 800bc1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc20:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <find_volume+0x328>
 800bc28:	230d      	movs	r3, #13
 800bc2a:	e0e4      	b.n	800bdf6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc34:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d802      	bhi.n	800bc42 <find_volume+0x33e>
 800bc3c:	2302      	movs	r3, #2
 800bc3e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc44:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d802      	bhi.n	800bc52 <find_volume+0x34e>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc54:	1c9a      	adds	r2, r3, #2
 800bc56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc58:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800bc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc5e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bc60:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bc62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc64:	441a      	add	r2, r3
 800bc66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc68:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800bc6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc6e:	441a      	add	r2, r3
 800bc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc72:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800bc74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc78:	2b03      	cmp	r3, #3
 800bc7a:	d11e      	bne.n	800bcba <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7e:	3338      	adds	r3, #56	@ 0x38
 800bc80:	332a      	adds	r3, #42	@ 0x2a
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fd fd90 	bl	80097a8 <ld_word>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <find_volume+0x38e>
 800bc8e:	230d      	movs	r3, #13
 800bc90:	e0b1      	b.n	800bdf6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bc92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc94:	891b      	ldrh	r3, [r3, #8]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <find_volume+0x39a>
 800bc9a:	230d      	movs	r3, #13
 800bc9c:	e0ab      	b.n	800bdf6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca0:	3338      	adds	r3, #56	@ 0x38
 800bca2:	332c      	adds	r3, #44	@ 0x2c
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7fd fd97 	bl	80097d8 <ld_dword>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcae:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bcb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb2:	69db      	ldr	r3, [r3, #28]
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcb8:	e01f      	b.n	800bcfa <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bcba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcbc:	891b      	ldrh	r3, [r3, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d101      	bne.n	800bcc6 <find_volume+0x3c2>
 800bcc2:	230d      	movs	r3, #13
 800bcc4:	e097      	b.n	800bdf6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bcca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bccc:	441a      	add	r2, r3
 800bcce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bcd2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	d103      	bne.n	800bce2 <find_volume+0x3de>
 800bcda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcdc:	69db      	ldr	r3, [r3, #28]
 800bcde:	005b      	lsls	r3, r3, #1
 800bce0:	e00a      	b.n	800bcf8 <find_volume+0x3f4>
 800bce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce4:	69da      	ldr	r2, [r3, #28]
 800bce6:	4613      	mov	r3, r2
 800bce8:	005b      	lsls	r3, r3, #1
 800bcea:	4413      	add	r3, r2
 800bcec:	085a      	lsrs	r2, r3, #1
 800bcee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf0:	69db      	ldr	r3, [r3, #28]
 800bcf2:	f003 0301 	and.w	r3, r3, #1
 800bcf6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bcf8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfc:	6a1a      	ldr	r2, [r3, #32]
 800bcfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd00:	899b      	ldrh	r3, [r3, #12]
 800bd02:	4619      	mov	r1, r3
 800bd04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd06:	440b      	add	r3, r1
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bd0c:	8989      	ldrh	r1, [r1, #12]
 800bd0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d201      	bcs.n	800bd1a <find_volume+0x416>
 800bd16:	230d      	movs	r3, #13
 800bd18:	e06d      	b.n	800bdf6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd20:	619a      	str	r2, [r3, #24]
 800bd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd24:	699a      	ldr	r2, [r3, #24]
 800bd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd28:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd2c:	2280      	movs	r2, #128	@ 0x80
 800bd2e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bd30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bd34:	2b03      	cmp	r3, #3
 800bd36:	d149      	bne.n	800bdcc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd3a:	3338      	adds	r3, #56	@ 0x38
 800bd3c:	3330      	adds	r3, #48	@ 0x30
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fd fd32 	bl	80097a8 <ld_word>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d140      	bne.n	800bdcc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bd4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	4619      	mov	r1, r3
 800bd50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bd52:	f7fd ffd9 	bl	8009d08 <move_window>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d137      	bne.n	800bdcc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5e:	2200      	movs	r2, #0
 800bd60:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd64:	3338      	adds	r3, #56	@ 0x38
 800bd66:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fd fd1c 	bl	80097a8 <ld_word>
 800bd70:	4603      	mov	r3, r0
 800bd72:	461a      	mov	r2, r3
 800bd74:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d127      	bne.n	800bdcc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd7e:	3338      	adds	r3, #56	@ 0x38
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7fd fd29 	bl	80097d8 <ld_dword>
 800bd86:	4603      	mov	r3, r0
 800bd88:	4a1d      	ldr	r2, [pc, #116]	@ (800be00 <find_volume+0x4fc>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d11e      	bne.n	800bdcc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd90:	3338      	adds	r3, #56	@ 0x38
 800bd92:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fd fd1e 	bl	80097d8 <ld_dword>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	4a19      	ldr	r2, [pc, #100]	@ (800be04 <find_volume+0x500>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d113      	bne.n	800bdcc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda6:	3338      	adds	r3, #56	@ 0x38
 800bda8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7fd fd13 	bl	80097d8 <ld_dword>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdba:	3338      	adds	r3, #56	@ 0x38
 800bdbc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fd fd09 	bl	80097d8 <ld_dword>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdca:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdce:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800bdd2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bdd4:	4b0c      	ldr	r3, [pc, #48]	@ (800be08 <find_volume+0x504>)
 800bdd6:	881b      	ldrh	r3, [r3, #0]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	4b0a      	ldr	r3, [pc, #40]	@ (800be08 <find_volume+0x504>)
 800bdde:	801a      	strh	r2, [r3, #0]
 800bde0:	4b09      	ldr	r3, [pc, #36]	@ (800be08 <find_volume+0x504>)
 800bde2:	881a      	ldrh	r2, [r3, #0]
 800bde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdea:	4a08      	ldr	r2, [pc, #32]	@ (800be0c <find_volume+0x508>)
 800bdec:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bdee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bdf0:	f7fd ff22 	bl	8009c38 <clear_lock>
#endif
	return FR_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3758      	adds	r7, #88	@ 0x58
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	41615252 	.word	0x41615252
 800be04:	61417272 	.word	0x61417272
 800be08:	2000232c 	.word	0x2000232c
 800be0c:	20002350 	.word	0x20002350

0800be10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800be1a:	2309      	movs	r3, #9
 800be1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d01c      	beq.n	800be5e <validate+0x4e>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d018      	beq.n	800be5e <validate+0x4e>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d013      	beq.n	800be5e <validate+0x4e>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	889a      	ldrh	r2, [r3, #4]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	88db      	ldrh	r3, [r3, #6]
 800be40:	429a      	cmp	r2, r3
 800be42:	d10c      	bne.n	800be5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	785b      	ldrb	r3, [r3, #1]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fd fc0c 	bl	8009668 <disk_status>
 800be50:	4603      	mov	r3, r0
 800be52:	f003 0301 	and.w	r3, r3, #1
 800be56:	2b00      	cmp	r3, #0
 800be58:	d101      	bne.n	800be5e <validate+0x4e>
			res = FR_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d102      	bne.n	800be6a <validate+0x5a>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	e000      	b.n	800be6c <validate+0x5c>
 800be6a:	2300      	movs	r3, #0
 800be6c:	683a      	ldr	r2, [r7, #0]
 800be6e:	6013      	str	r3, [r2, #0]
	return res;
 800be70:	7bfb      	ldrb	r3, [r7, #15]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
	...

0800be7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b088      	sub	sp, #32
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	4613      	mov	r3, r2
 800be88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800be8e:	f107 0310 	add.w	r3, r7, #16
 800be92:	4618      	mov	r0, r3
 800be94:	f7ff fc9c 	bl	800b7d0 <get_ldnumber>
 800be98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	da01      	bge.n	800bea4 <f_mount+0x28>
 800bea0:	230b      	movs	r3, #11
 800bea2:	e02b      	b.n	800befc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bea4:	4a17      	ldr	r2, [pc, #92]	@ (800bf04 <f_mount+0x88>)
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d005      	beq.n	800bec0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800beb4:	69b8      	ldr	r0, [r7, #24]
 800beb6:	f7fd febf 	bl	8009c38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	2200      	movs	r2, #0
 800bebe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d002      	beq.n	800becc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	490d      	ldr	r1, [pc, #52]	@ (800bf04 <f_mount+0x88>)
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d002      	beq.n	800bee2 <f_mount+0x66>
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d001      	beq.n	800bee6 <f_mount+0x6a>
 800bee2:	2300      	movs	r3, #0
 800bee4:	e00a      	b.n	800befc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bee6:	f107 010c 	add.w	r1, r7, #12
 800beea:	f107 0308 	add.w	r3, r7, #8
 800beee:	2200      	movs	r2, #0
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff fd07 	bl	800b904 <find_volume>
 800bef6:	4603      	mov	r3, r0
 800bef8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800befa:	7dfb      	ldrb	r3, [r7, #23]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3720      	adds	r7, #32
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	20002328 	.word	0x20002328

0800bf08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b09a      	sub	sp, #104	@ 0x68
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	4613      	mov	r3, r2
 800bf14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d101      	bne.n	800bf20 <f_open+0x18>
 800bf1c:	2309      	movs	r3, #9
 800bf1e:	e1b7      	b.n	800c290 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bf20:	79fb      	ldrb	r3, [r7, #7]
 800bf22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bf28:	79fa      	ldrb	r2, [r7, #7]
 800bf2a:	f107 0114 	add.w	r1, r7, #20
 800bf2e:	f107 0308 	add.w	r3, r7, #8
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7ff fce6 	bl	800b904 <find_volume>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800bf3e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f040 819b 	bne.w	800c27e <f_open+0x376>
		dj.obj.fs = fs;
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	f107 0318 	add.w	r3, r7, #24
 800bf52:	4611      	mov	r1, r2
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7ff fbc5 	bl	800b6e4 <follow_path>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bf60:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d118      	bne.n	800bf9a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bf68:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bf6c:	b25b      	sxtb	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	da03      	bge.n	800bf7a <f_open+0x72>
				res = FR_INVALID_NAME;
 800bf72:	2306      	movs	r3, #6
 800bf74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bf78:	e00f      	b.n	800bf9a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bf7a:	79fb      	ldrb	r3, [r7, #7]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	bf8c      	ite	hi
 800bf80:	2301      	movhi	r3, #1
 800bf82:	2300      	movls	r3, #0
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	461a      	mov	r2, r3
 800bf88:	f107 0318 	add.w	r3, r7, #24
 800bf8c:	4611      	mov	r1, r2
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fd fd0a 	bl	80099a8 <chk_lock>
 800bf94:	4603      	mov	r3, r0
 800bf96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bf9a:	79fb      	ldrb	r3, [r7, #7]
 800bf9c:	f003 031c 	and.w	r3, r3, #28
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d07f      	beq.n	800c0a4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800bfa4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d017      	beq.n	800bfdc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bfac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bfb0:	2b04      	cmp	r3, #4
 800bfb2:	d10e      	bne.n	800bfd2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bfb4:	f7fd fd54 	bl	8009a60 <enq_lock>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d006      	beq.n	800bfcc <f_open+0xc4>
 800bfbe:	f107 0318 	add.w	r3, r7, #24
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fe ffb6 	bl	800af34 <dir_register>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	e000      	b.n	800bfce <f_open+0xc6>
 800bfcc:	2312      	movs	r3, #18
 800bfce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bfd2:	79fb      	ldrb	r3, [r7, #7]
 800bfd4:	f043 0308 	orr.w	r3, r3, #8
 800bfd8:	71fb      	strb	r3, [r7, #7]
 800bfda:	e010      	b.n	800bffe <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bfdc:	7fbb      	ldrb	r3, [r7, #30]
 800bfde:	f003 0311 	and.w	r3, r3, #17
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <f_open+0xe6>
					res = FR_DENIED;
 800bfe6:	2307      	movs	r3, #7
 800bfe8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bfec:	e007      	b.n	800bffe <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bfee:	79fb      	ldrb	r3, [r7, #7]
 800bff0:	f003 0304 	and.w	r3, r3, #4
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d002      	beq.n	800bffe <f_open+0xf6>
 800bff8:	2308      	movs	r3, #8
 800bffa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bffe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c002:	2b00      	cmp	r3, #0
 800c004:	d168      	bne.n	800c0d8 <f_open+0x1d0>
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	f003 0308 	and.w	r3, r3, #8
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d063      	beq.n	800c0d8 <f_open+0x1d0>
				dw = GET_FATTIME();
 800c010:	f7fb fb02 	bl	8007618 <get_fattime>
 800c014:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c018:	330e      	adds	r3, #14
 800c01a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fd fc19 	bl	8009854 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c024:	3316      	adds	r3, #22
 800c026:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fd fc13 	bl	8009854 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c030:	330b      	adds	r3, #11
 800c032:	2220      	movs	r2, #32
 800c034:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c03a:	4611      	mov	r1, r2
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fe fbe8 	bl	800a812 <ld_clust>
 800c042:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c048:	2200      	movs	r2, #0
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fe fc00 	bl	800a850 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c052:	331c      	adds	r3, #28
 800c054:	2100      	movs	r1, #0
 800c056:	4618      	mov	r0, r3
 800c058:	f7fd fbfc 	bl	8009854 <st_dword>
					fs->wflag = 1;
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	2201      	movs	r2, #1
 800c060:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c064:	2b00      	cmp	r3, #0
 800c066:	d037      	beq.n	800c0d8 <f_open+0x1d0>
						dw = fs->winsect;
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c06c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c06e:	f107 0318 	add.w	r3, r7, #24
 800c072:	2200      	movs	r2, #0
 800c074:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c076:	4618      	mov	r0, r3
 800c078:	f7fe f8f0 	bl	800a25c <remove_chain>
 800c07c:	4603      	mov	r3, r0
 800c07e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800c082:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c086:	2b00      	cmp	r3, #0
 800c088:	d126      	bne.n	800c0d8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fd fe3a 	bl	8009d08 <move_window>
 800c094:	4603      	mov	r3, r0
 800c096:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c09e:	3a01      	subs	r2, #1
 800c0a0:	615a      	str	r2, [r3, #20]
 800c0a2:	e019      	b.n	800c0d8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c0a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d115      	bne.n	800c0d8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c0ac:	7fbb      	ldrb	r3, [r7, #30]
 800c0ae:	f003 0310 	and.w	r3, r3, #16
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d003      	beq.n	800c0be <f_open+0x1b6>
					res = FR_NO_FILE;
 800c0b6:	2304      	movs	r3, #4
 800c0b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c0bc:	e00c      	b.n	800c0d8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c0be:	79fb      	ldrb	r3, [r7, #7]
 800c0c0:	f003 0302 	and.w	r3, r3, #2
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d007      	beq.n	800c0d8 <f_open+0x1d0>
 800c0c8:	7fbb      	ldrb	r3, [r7, #30]
 800c0ca:	f003 0301 	and.w	r3, r3, #1
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d002      	beq.n	800c0d8 <f_open+0x1d0>
						res = FR_DENIED;
 800c0d2:	2307      	movs	r3, #7
 800c0d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c0d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d126      	bne.n	800c12e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c0e0:	79fb      	ldrb	r3, [r7, #7]
 800c0e2:	f003 0308 	and.w	r3, r3, #8
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d003      	beq.n	800c0f2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c0ea:	79fb      	ldrb	r3, [r7, #7]
 800c0ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c0fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c100:	79fb      	ldrb	r3, [r7, #7]
 800c102:	2b01      	cmp	r3, #1
 800c104:	bf8c      	ite	hi
 800c106:	2301      	movhi	r3, #1
 800c108:	2300      	movls	r3, #0
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	461a      	mov	r2, r3
 800c10e:	f107 0318 	add.w	r3, r7, #24
 800c112:	4611      	mov	r1, r2
 800c114:	4618      	mov	r0, r3
 800c116:	f7fd fcc5 	bl	8009aa4 <inc_lock>
 800c11a:	4602      	mov	r2, r0
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	691b      	ldr	r3, [r3, #16]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d102      	bne.n	800c12e <f_open+0x226>
 800c128:	2302      	movs	r3, #2
 800c12a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c12e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c132:	2b00      	cmp	r3, #0
 800c134:	f040 80a3 	bne.w	800c27e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c13c:	4611      	mov	r1, r2
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fe fb67 	bl	800a812 <ld_clust>
 800c144:	4602      	mov	r2, r0
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c14c:	331c      	adds	r3, #28
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fd fb42 	bl	80097d8 <ld_dword>
 800c154:	4602      	mov	r2, r0
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c160:	697a      	ldr	r2, [r7, #20]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	88da      	ldrh	r2, [r3, #6]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	79fa      	ldrb	r2, [r7, #7]
 800c172:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2200      	movs	r2, #0
 800c17e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	3330      	adds	r3, #48	@ 0x30
 800c18a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c18e:	2100      	movs	r1, #0
 800c190:	4618      	mov	r0, r3
 800c192:	f7fd fbac 	bl	80098ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c196:	79fb      	ldrb	r3, [r7, #7]
 800c198:	f003 0320 	and.w	r3, r3, #32
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d06e      	beq.n	800c27e <f_open+0x376>
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d06a      	beq.n	800c27e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	68da      	ldr	r2, [r3, #12]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	895b      	ldrh	r3, [r3, #10]
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	899b      	ldrh	r3, [r3, #12]
 800c1ba:	fb02 f303 	mul.w	r3, r2, r3
 800c1be:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1cc:	e016      	b.n	800c1fc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fd fe55 	bl	8009e82 <get_fat>
 800c1d8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c1da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d802      	bhi.n	800c1e6 <f_open+0x2de>
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c1e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ec:	d102      	bne.n	800c1f4 <f_open+0x2ec>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c1f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c1f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c200:	2b00      	cmp	r3, #0
 800c202:	d103      	bne.n	800c20c <f_open+0x304>
 800c204:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c208:	429a      	cmp	r2, r3
 800c20a:	d8e0      	bhi.n	800c1ce <f_open+0x2c6>
				}
				fp->clust = clst;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c210:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c212:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c216:	2b00      	cmp	r3, #0
 800c218:	d131      	bne.n	800c27e <f_open+0x376>
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	899b      	ldrh	r3, [r3, #12]
 800c21e:	461a      	mov	r2, r3
 800c220:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c222:	fbb3 f1f2 	udiv	r1, r3, r2
 800c226:	fb01 f202 	mul.w	r2, r1, r2
 800c22a:	1a9b      	subs	r3, r3, r2
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d026      	beq.n	800c27e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c234:	4618      	mov	r0, r3
 800c236:	f7fd fe05 	bl	8009e44 <clust2sect>
 800c23a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c23c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d103      	bne.n	800c24a <f_open+0x342>
						res = FR_INT_ERR;
 800c242:	2302      	movs	r3, #2
 800c244:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c248:	e019      	b.n	800c27e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	899b      	ldrh	r3, [r3, #12]
 800c24e:	461a      	mov	r2, r3
 800c250:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c252:	fbb3 f2f2 	udiv	r2, r3, r2
 800c256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c258:	441a      	add	r2, r3
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	7858      	ldrb	r0, [r3, #1]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6a1a      	ldr	r2, [r3, #32]
 800c26c:	2301      	movs	r3, #1
 800c26e:	f7fd fa3d 	bl	80096ec <disk_read>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <f_open+0x376>
 800c278:	2301      	movs	r3, #1
 800c27a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c27e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c282:	2b00      	cmp	r3, #0
 800c284:	d002      	beq.n	800c28c <f_open+0x384>
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2200      	movs	r2, #0
 800c28a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c28c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800c290:	4618      	mov	r0, r3
 800c292:	3768      	adds	r7, #104	@ 0x68
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b08e      	sub	sp, #56	@ 0x38
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
 800c2a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f107 0214 	add.w	r2, r7, #20
 800c2b6:	4611      	mov	r1, r2
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7ff fda9 	bl	800be10 <validate>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c2c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d107      	bne.n	800c2dc <f_read+0x44>
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	7d5b      	ldrb	r3, [r3, #21]
 800c2d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c2d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d002      	beq.n	800c2e2 <f_read+0x4a>
 800c2dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c2e0:	e135      	b.n	800c54e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	7d1b      	ldrb	r3, [r3, #20]
 800c2e6:	f003 0301 	and.w	r3, r3, #1
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d101      	bne.n	800c2f2 <f_read+0x5a>
 800c2ee:	2307      	movs	r3, #7
 800c2f0:	e12d      	b.n	800c54e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	68da      	ldr	r2, [r3, #12]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	699b      	ldr	r3, [r3, #24]
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	6a3b      	ldr	r3, [r7, #32]
 800c302:	429a      	cmp	r2, r3
 800c304:	f240 811e 	bls.w	800c544 <f_read+0x2ac>
 800c308:	6a3b      	ldr	r3, [r7, #32]
 800c30a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c30c:	e11a      	b.n	800c544 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	699b      	ldr	r3, [r3, #24]
 800c312:	697a      	ldr	r2, [r7, #20]
 800c314:	8992      	ldrh	r2, [r2, #12]
 800c316:	fbb3 f1f2 	udiv	r1, r3, r2
 800c31a:	fb01 f202 	mul.w	r2, r1, r2
 800c31e:	1a9b      	subs	r3, r3, r2
 800c320:	2b00      	cmp	r3, #0
 800c322:	f040 80d5 	bne.w	800c4d0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	8992      	ldrh	r2, [r2, #12]
 800c32e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	8952      	ldrh	r2, [r2, #10]
 800c336:	3a01      	subs	r2, #1
 800c338:	4013      	ands	r3, r2
 800c33a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d12f      	bne.n	800c3a2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	699b      	ldr	r3, [r3, #24]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d103      	bne.n	800c352 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c350:	e013      	b.n	800c37a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c356:	2b00      	cmp	r3, #0
 800c358:	d007      	beq.n	800c36a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	699b      	ldr	r3, [r3, #24]
 800c35e:	4619      	mov	r1, r3
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f7fe f878 	bl	800a456 <clmt_clust>
 800c366:	6338      	str	r0, [r7, #48]	@ 0x30
 800c368:	e007      	b.n	800c37a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	69db      	ldr	r3, [r3, #28]
 800c370:	4619      	mov	r1, r3
 800c372:	4610      	mov	r0, r2
 800c374:	f7fd fd85 	bl	8009e82 <get_fat>
 800c378:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d804      	bhi.n	800c38a <f_read+0xf2>
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2202      	movs	r2, #2
 800c384:	755a      	strb	r2, [r3, #21]
 800c386:	2302      	movs	r3, #2
 800c388:	e0e1      	b.n	800c54e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c390:	d104      	bne.n	800c39c <f_read+0x104>
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2201      	movs	r2, #1
 800c396:	755a      	strb	r2, [r3, #21]
 800c398:	2301      	movs	r3, #1
 800c39a:	e0d8      	b.n	800c54e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c3a2:	697a      	ldr	r2, [r7, #20]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	69db      	ldr	r3, [r3, #28]
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	4610      	mov	r0, r2
 800c3ac:	f7fd fd4a 	bl	8009e44 <clust2sect>
 800c3b0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d104      	bne.n	800c3c2 <f_read+0x12a>
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	755a      	strb	r2, [r3, #21]
 800c3be:	2302      	movs	r3, #2
 800c3c0:	e0c5      	b.n	800c54e <f_read+0x2b6>
			sect += csect;
 800c3c2:	69ba      	ldr	r2, [r7, #24]
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	899b      	ldrh	r3, [r3, #12]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3d6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d041      	beq.n	800c462 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c3de:	69fa      	ldr	r2, [r7, #28]
 800c3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e2:	4413      	add	r3, r2
 800c3e4:	697a      	ldr	r2, [r7, #20]
 800c3e6:	8952      	ldrh	r2, [r2, #10]
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d905      	bls.n	800c3f8 <f_read+0x160>
					cc = fs->csize - csect;
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	895b      	ldrh	r3, [r3, #10]
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	7858      	ldrb	r0, [r3, #1]
 800c3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fe:	69ba      	ldr	r2, [r7, #24]
 800c400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c402:	f7fd f973 	bl	80096ec <disk_read>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d004      	beq.n	800c416 <f_read+0x17e>
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2201      	movs	r2, #1
 800c410:	755a      	strb	r2, [r3, #21]
 800c412:	2301      	movs	r3, #1
 800c414:	e09b      	b.n	800c54e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	7d1b      	ldrb	r3, [r3, #20]
 800c41a:	b25b      	sxtb	r3, r3
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	da18      	bge.n	800c452 <f_read+0x1ba>
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6a1a      	ldr	r2, [r3, #32]
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	1ad3      	subs	r3, r2, r3
 800c428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d911      	bls.n	800c452 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6a1a      	ldr	r2, [r3, #32]
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	8992      	ldrh	r2, [r2, #12]
 800c43a:	fb02 f303 	mul.w	r3, r2, r3
 800c43e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c440:	18d0      	adds	r0, r2, r3
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	899b      	ldrh	r3, [r3, #12]
 800c44c:	461a      	mov	r2, r3
 800c44e:	f7fd fa2d 	bl	80098ac <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	899b      	ldrh	r3, [r3, #12]
 800c456:	461a      	mov	r2, r3
 800c458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45a:	fb02 f303 	mul.w	r3, r2, r3
 800c45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c460:	e05c      	b.n	800c51c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6a1b      	ldr	r3, [r3, #32]
 800c466:	69ba      	ldr	r2, [r7, #24]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d02e      	beq.n	800c4ca <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	7d1b      	ldrb	r3, [r3, #20]
 800c470:	b25b      	sxtb	r3, r3
 800c472:	2b00      	cmp	r3, #0
 800c474:	da18      	bge.n	800c4a8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	7858      	ldrb	r0, [r3, #1]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	6a1a      	ldr	r2, [r3, #32]
 800c484:	2301      	movs	r3, #1
 800c486:	f7fd f951 	bl	800972c <disk_write>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d004      	beq.n	800c49a <f_read+0x202>
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2201      	movs	r2, #1
 800c494:	755a      	strb	r2, [r3, #21]
 800c496:	2301      	movs	r3, #1
 800c498:	e059      	b.n	800c54e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	7d1b      	ldrb	r3, [r3, #20]
 800c49e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	7858      	ldrb	r0, [r3, #1]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	69ba      	ldr	r2, [r7, #24]
 800c4b6:	f7fd f919 	bl	80096ec <disk_read>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d004      	beq.n	800c4ca <f_read+0x232>
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	755a      	strb	r2, [r3, #21]
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e041      	b.n	800c54e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	69ba      	ldr	r2, [r7, #24]
 800c4ce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	899b      	ldrh	r3, [r3, #12]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	697a      	ldr	r2, [r7, #20]
 800c4dc:	8992      	ldrh	r2, [r2, #12]
 800c4de:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4e2:	fb01 f202 	mul.w	r2, r1, r2
 800c4e6:	1a9b      	subs	r3, r3, r2
 800c4e8:	1ac3      	subs	r3, r0, r3
 800c4ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c4ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d901      	bls.n	800c4f8 <f_read+0x260>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	699b      	ldr	r3, [r3, #24]
 800c502:	697a      	ldr	r2, [r7, #20]
 800c504:	8992      	ldrh	r2, [r2, #12]
 800c506:	fbb3 f0f2 	udiv	r0, r3, r2
 800c50a:	fb00 f202 	mul.w	r2, r0, r2
 800c50e:	1a9b      	subs	r3, r3, r2
 800c510:	440b      	add	r3, r1
 800c512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c514:	4619      	mov	r1, r3
 800c516:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c518:	f7fd f9c8 	bl	80098ac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c51c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c520:	4413      	add	r3, r2
 800c522:	627b      	str	r3, [r7, #36]	@ 0x24
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	699a      	ldr	r2, [r3, #24]
 800c528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c52a:	441a      	add	r2, r3
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	619a      	str	r2, [r3, #24]
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c536:	441a      	add	r2, r3
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	601a      	str	r2, [r3, #0]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	f47f aee1 	bne.w	800c30e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c54c:	2300      	movs	r3, #0
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3738      	adds	r7, #56	@ 0x38
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b08c      	sub	sp, #48	@ 0x30
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	60f8      	str	r0, [r7, #12]
 800c55e:	60b9      	str	r1, [r7, #8]
 800c560:	607a      	str	r2, [r7, #4]
 800c562:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f107 0210 	add.w	r2, r7, #16
 800c574:	4611      	mov	r1, r2
 800c576:	4618      	mov	r0, r3
 800c578:	f7ff fc4a 	bl	800be10 <validate>
 800c57c:	4603      	mov	r3, r0
 800c57e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c582:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c586:	2b00      	cmp	r3, #0
 800c588:	d107      	bne.n	800c59a <f_write+0x44>
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	7d5b      	ldrb	r3, [r3, #21]
 800c58e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c592:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c596:	2b00      	cmp	r3, #0
 800c598:	d002      	beq.n	800c5a0 <f_write+0x4a>
 800c59a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c59e:	e16a      	b.n	800c876 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	7d1b      	ldrb	r3, [r3, #20]
 800c5a4:	f003 0302 	and.w	r3, r3, #2
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d101      	bne.n	800c5b0 <f_write+0x5a>
 800c5ac:	2307      	movs	r3, #7
 800c5ae:	e162      	b.n	800c876 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	699a      	ldr	r2, [r3, #24]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	441a      	add	r2, r3
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	699b      	ldr	r3, [r3, #24]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	f080 814c 	bcs.w	800c85a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	699b      	ldr	r3, [r3, #24]
 800c5c6:	43db      	mvns	r3, r3
 800c5c8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c5ca:	e146      	b.n	800c85a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	693a      	ldr	r2, [r7, #16]
 800c5d2:	8992      	ldrh	r2, [r2, #12]
 800c5d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5d8:	fb01 f202 	mul.w	r2, r1, r2
 800c5dc:	1a9b      	subs	r3, r3, r2
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f040 80f1 	bne.w	800c7c6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	8992      	ldrh	r2, [r2, #12]
 800c5ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	8952      	ldrh	r2, [r2, #10]
 800c5f4:	3a01      	subs	r2, #1
 800c5f6:	4013      	ands	r3, r2
 800c5f8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d143      	bne.n	800c688 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10c      	bne.n	800c622 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c610:	2b00      	cmp	r3, #0
 800c612:	d11a      	bne.n	800c64a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2100      	movs	r1, #0
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fd fe84 	bl	800a326 <create_chain>
 800c61e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c620:	e013      	b.n	800c64a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c626:	2b00      	cmp	r3, #0
 800c628:	d007      	beq.n	800c63a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	699b      	ldr	r3, [r3, #24]
 800c62e:	4619      	mov	r1, r3
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f7fd ff10 	bl	800a456 <clmt_clust>
 800c636:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c638:	e007      	b.n	800c64a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	69db      	ldr	r3, [r3, #28]
 800c640:	4619      	mov	r1, r3
 800c642:	4610      	mov	r0, r2
 800c644:	f7fd fe6f 	bl	800a326 <create_chain>
 800c648:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	f000 8109 	beq.w	800c864 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c654:	2b01      	cmp	r3, #1
 800c656:	d104      	bne.n	800c662 <f_write+0x10c>
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2202      	movs	r2, #2
 800c65c:	755a      	strb	r2, [r3, #21]
 800c65e:	2302      	movs	r3, #2
 800c660:	e109      	b.n	800c876 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c668:	d104      	bne.n	800c674 <f_write+0x11e>
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2201      	movs	r2, #1
 800c66e:	755a      	strb	r2, [r3, #21]
 800c670:	2301      	movs	r3, #1
 800c672:	e100      	b.n	800c876 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c678:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d102      	bne.n	800c688 <f_write+0x132>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c686:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	7d1b      	ldrb	r3, [r3, #20]
 800c68c:	b25b      	sxtb	r3, r3
 800c68e:	2b00      	cmp	r3, #0
 800c690:	da18      	bge.n	800c6c4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	7858      	ldrb	r0, [r3, #1]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6a1a      	ldr	r2, [r3, #32]
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	f7fd f843 	bl	800972c <disk_write>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d004      	beq.n	800c6b6 <f_write+0x160>
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	755a      	strb	r2, [r3, #21]
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e0df      	b.n	800c876 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	7d1b      	ldrb	r3, [r3, #20]
 800c6ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c6c4:	693a      	ldr	r2, [r7, #16]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	69db      	ldr	r3, [r3, #28]
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	4610      	mov	r0, r2
 800c6ce:	f7fd fbb9 	bl	8009e44 <clust2sect>
 800c6d2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d104      	bne.n	800c6e4 <f_write+0x18e>
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2202      	movs	r2, #2
 800c6de:	755a      	strb	r2, [r3, #21]
 800c6e0:	2302      	movs	r3, #2
 800c6e2:	e0c8      	b.n	800c876 <f_write+0x320>
			sect += csect;
 800c6e4:	697a      	ldr	r2, [r7, #20]
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	899b      	ldrh	r3, [r3, #12]
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6f8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d043      	beq.n	800c788 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c700:	69ba      	ldr	r2, [r7, #24]
 800c702:	6a3b      	ldr	r3, [r7, #32]
 800c704:	4413      	add	r3, r2
 800c706:	693a      	ldr	r2, [r7, #16]
 800c708:	8952      	ldrh	r2, [r2, #10]
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d905      	bls.n	800c71a <f_write+0x1c4>
					cc = fs->csize - csect;
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	895b      	ldrh	r3, [r3, #10]
 800c712:	461a      	mov	r2, r3
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	7858      	ldrb	r0, [r3, #1]
 800c71e:	6a3b      	ldr	r3, [r7, #32]
 800c720:	697a      	ldr	r2, [r7, #20]
 800c722:	69f9      	ldr	r1, [r7, #28]
 800c724:	f7fd f802 	bl	800972c <disk_write>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d004      	beq.n	800c738 <f_write+0x1e2>
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2201      	movs	r2, #1
 800c732:	755a      	strb	r2, [r3, #21]
 800c734:	2301      	movs	r3, #1
 800c736:	e09e      	b.n	800c876 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6a1a      	ldr	r2, [r3, #32]
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	6a3a      	ldr	r2, [r7, #32]
 800c742:	429a      	cmp	r2, r3
 800c744:	d918      	bls.n	800c778 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6a1a      	ldr	r2, [r3, #32]
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	693a      	ldr	r2, [r7, #16]
 800c756:	8992      	ldrh	r2, [r2, #12]
 800c758:	fb02 f303 	mul.w	r3, r2, r3
 800c75c:	69fa      	ldr	r2, [r7, #28]
 800c75e:	18d1      	adds	r1, r2, r3
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	899b      	ldrh	r3, [r3, #12]
 800c764:	461a      	mov	r2, r3
 800c766:	f7fd f8a1 	bl	80098ac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	7d1b      	ldrb	r3, [r3, #20]
 800c76e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c772:	b2da      	uxtb	r2, r3
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	899b      	ldrh	r3, [r3, #12]
 800c77c:	461a      	mov	r2, r3
 800c77e:	6a3b      	ldr	r3, [r7, #32]
 800c780:	fb02 f303 	mul.w	r3, r2, r3
 800c784:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c786:	e04b      	b.n	800c820 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6a1b      	ldr	r3, [r3, #32]
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d016      	beq.n	800c7c0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	699a      	ldr	r2, [r3, #24]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d210      	bcs.n	800c7c0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	7858      	ldrb	r0, [r3, #1]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	697a      	ldr	r2, [r7, #20]
 800c7ac:	f7fc ff9e 	bl	80096ec <disk_read>
 800c7b0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d004      	beq.n	800c7c0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	755a      	strb	r2, [r3, #21]
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e05a      	b.n	800c876 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	697a      	ldr	r2, [r7, #20]
 800c7c4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	899b      	ldrh	r3, [r3, #12]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	699b      	ldr	r3, [r3, #24]
 800c7d0:	693a      	ldr	r2, [r7, #16]
 800c7d2:	8992      	ldrh	r2, [r2, #12]
 800c7d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7d8:	fb01 f202 	mul.w	r2, r1, r2
 800c7dc:	1a9b      	subs	r3, r3, r2
 800c7de:	1ac3      	subs	r3, r0, r3
 800c7e0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c7e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d901      	bls.n	800c7ee <f_write+0x298>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	693a      	ldr	r2, [r7, #16]
 800c7fa:	8992      	ldrh	r2, [r2, #12]
 800c7fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800c800:	fb00 f202 	mul.w	r2, r0, r2
 800c804:	1a9b      	subs	r3, r3, r2
 800c806:	440b      	add	r3, r1
 800c808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c80a:	69f9      	ldr	r1, [r7, #28]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7fd f84d 	bl	80098ac <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	7d1b      	ldrb	r3, [r3, #20]
 800c816:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c820:	69fa      	ldr	r2, [r7, #28]
 800c822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c824:	4413      	add	r3, r2
 800c826:	61fb      	str	r3, [r7, #28]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	699a      	ldr	r2, [r3, #24]
 800c82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82e:	441a      	add	r2, r3
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	619a      	str	r2, [r3, #24]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	68da      	ldr	r2, [r3, #12]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	699b      	ldr	r3, [r3, #24]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	bf38      	it	cc
 800c840:	461a      	movcc	r2, r3
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	60da      	str	r2, [r3, #12]
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84c:	441a      	add	r2, r3
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	601a      	str	r2, [r3, #0]
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c856:	1ad3      	subs	r3, r2, r3
 800c858:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f47f aeb5 	bne.w	800c5cc <f_write+0x76>
 800c862:	e000      	b.n	800c866 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c864:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	7d1b      	ldrb	r3, [r3, #20]
 800c86a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3730      	adds	r7, #48	@ 0x30
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b086      	sub	sp, #24
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f107 0208 	add.w	r2, r7, #8
 800c88c:	4611      	mov	r1, r2
 800c88e:	4618      	mov	r0, r3
 800c890:	f7ff fabe 	bl	800be10 <validate>
 800c894:	4603      	mov	r3, r0
 800c896:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c898:	7dfb      	ldrb	r3, [r7, #23]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d168      	bne.n	800c970 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	7d1b      	ldrb	r3, [r3, #20]
 800c8a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d062      	beq.n	800c970 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	7d1b      	ldrb	r3, [r3, #20]
 800c8ae:	b25b      	sxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	da15      	bge.n	800c8e0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	7858      	ldrb	r0, [r3, #1]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a1a      	ldr	r2, [r3, #32]
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	f7fc ff32 	bl	800972c <disk_write>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <f_sync+0x54>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e04f      	b.n	800c972 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	7d1b      	ldrb	r3, [r3, #20]
 800c8d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c8e0:	f7fa fe9a 	bl	8007618 <get_fattime>
 800c8e4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	f7fd fa0a 	bl	8009d08 <move_window>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c8f8:	7dfb      	ldrb	r3, [r7, #23]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d138      	bne.n	800c970 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c902:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	330b      	adds	r3, #11
 800c908:	781a      	ldrb	r2, [r3, #0]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	330b      	adds	r3, #11
 800c90e:	f042 0220 	orr.w	r2, r2, #32
 800c912:	b2d2      	uxtb	r2, r2
 800c914:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6818      	ldr	r0, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	461a      	mov	r2, r3
 800c920:	68f9      	ldr	r1, [r7, #12]
 800c922:	f7fd ff95 	bl	800a850 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f103 021c 	add.w	r2, r3, #28
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	4619      	mov	r1, r3
 800c932:	4610      	mov	r0, r2
 800c934:	f7fc ff8e 	bl	8009854 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	3316      	adds	r3, #22
 800c93c:	6939      	ldr	r1, [r7, #16]
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fc ff88 	bl	8009854 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	3312      	adds	r3, #18
 800c948:	2100      	movs	r1, #0
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fc ff67 	bl	800981e <st_word>
					fs->wflag = 1;
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	2201      	movs	r2, #1
 800c954:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fd fa03 	bl	8009d64 <sync_fs>
 800c95e:	4603      	mov	r3, r0
 800c960:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	7d1b      	ldrb	r3, [r3, #20]
 800c966:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c96a:	b2da      	uxtb	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c970:	7dfb      	ldrb	r3, [r7, #23]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3718      	adds	r7, #24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b084      	sub	sp, #16
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7ff ff7b 	bl	800c87e <f_sync>
 800c988:	4603      	mov	r3, r0
 800c98a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d118      	bne.n	800c9c4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f107 0208 	add.w	r2, r7, #8
 800c998:	4611      	mov	r1, r2
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7ff fa38 	bl	800be10 <validate>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c9a4:	7bfb      	ldrb	r3, [r7, #15]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d10c      	bne.n	800c9c4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	691b      	ldr	r3, [r3, #16]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fd f906 	bl	8009bc0 <dec_lock>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c9b8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d102      	bne.n	800c9c4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b090      	sub	sp, #64	@ 0x40
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
 800c9d6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f107 0208 	add.w	r2, r7, #8
 800c9de:	4611      	mov	r1, r2
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7ff fa15 	bl	800be10 <validate>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c9ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d103      	bne.n	800c9fc <f_lseek+0x2e>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	7d5b      	ldrb	r3, [r3, #21]
 800c9f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c9fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d002      	beq.n	800ca0a <f_lseek+0x3c>
 800ca04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ca08:	e201      	b.n	800ce0e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	f000 80d9 	beq.w	800cbc6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca1a:	d15a      	bne.n	800cad2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca20:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ca22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca24:	1d1a      	adds	r2, r3, #4
 800ca26:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	617b      	str	r3, [r7, #20]
 800ca2c:	2302      	movs	r3, #2
 800ca2e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ca36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d03a      	beq.n	800cab2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ca3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3e:	613b      	str	r3, [r7, #16]
 800ca40:	2300      	movs	r3, #0
 800ca42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca46:	3302      	adds	r3, #2
 800ca48:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ca4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca4c:	60fb      	str	r3, [r7, #12]
 800ca4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca50:	3301      	adds	r3, #1
 800ca52:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fd fa12 	bl	8009e82 <get_fat>
 800ca5e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ca60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d804      	bhi.n	800ca70 <f_lseek+0xa2>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2202      	movs	r2, #2
 800ca6a:	755a      	strb	r2, [r3, #21]
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	e1ce      	b.n	800ce0e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca76:	d104      	bne.n	800ca82 <f_lseek+0xb4>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	755a      	strb	r2, [r3, #21]
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e1c5      	b.n	800ce0e <f_lseek+0x440>
					} while (cl == pcl + 1);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	3301      	adds	r3, #1
 800ca86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d0de      	beq.n	800ca4a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ca8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d809      	bhi.n	800caa8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ca94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca96:	1d1a      	adds	r2, r3, #4
 800ca98:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca9c:	601a      	str	r2, [r3, #0]
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa0:	1d1a      	adds	r2, r3, #4
 800caa2:	627a      	str	r2, [r7, #36]	@ 0x24
 800caa4:	693a      	ldr	r2, [r7, #16]
 800caa6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	69db      	ldr	r3, [r3, #28]
 800caac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caae:	429a      	cmp	r2, r3
 800cab0:	d3c4      	bcc.n	800ca3c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cab6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cab8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800caba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d803      	bhi.n	800caca <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac4:	2200      	movs	r2, #0
 800cac6:	601a      	str	r2, [r3, #0]
 800cac8:	e19f      	b.n	800ce0a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800caca:	2311      	movs	r3, #17
 800cacc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cad0:	e19b      	b.n	800ce0a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d902      	bls.n	800cae2 <f_lseek+0x114>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	683a      	ldr	r2, [r7, #0]
 800cae6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	f000 818d 	beq.w	800ce0a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	3b01      	subs	r3, #1
 800caf4:	4619      	mov	r1, r3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7fd fcad 	bl	800a456 <clmt_clust>
 800cafc:	4602      	mov	r2, r0
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	69db      	ldr	r3, [r3, #28]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	f7fd f99a 	bl	8009e44 <clust2sect>
 800cb10:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d104      	bne.n	800cb22 <f_lseek+0x154>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	755a      	strb	r2, [r3, #21]
 800cb1e:	2302      	movs	r3, #2
 800cb20:	e175      	b.n	800ce0e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	3b01      	subs	r3, #1
 800cb26:	68ba      	ldr	r2, [r7, #8]
 800cb28:	8992      	ldrh	r2, [r2, #12]
 800cb2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	8952      	ldrh	r2, [r2, #10]
 800cb32:	3a01      	subs	r2, #1
 800cb34:	4013      	ands	r3, r2
 800cb36:	69ba      	ldr	r2, [r7, #24]
 800cb38:	4413      	add	r3, r2
 800cb3a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	699b      	ldr	r3, [r3, #24]
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	8992      	ldrh	r2, [r2, #12]
 800cb44:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb48:	fb01 f202 	mul.w	r2, r1, r2
 800cb4c:	1a9b      	subs	r3, r3, r2
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	f000 815b 	beq.w	800ce0a <f_lseek+0x43c>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6a1b      	ldr	r3, [r3, #32]
 800cb58:	69ba      	ldr	r2, [r7, #24]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	f000 8155 	beq.w	800ce0a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	7d1b      	ldrb	r3, [r3, #20]
 800cb64:	b25b      	sxtb	r3, r3
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	da18      	bge.n	800cb9c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	7858      	ldrb	r0, [r3, #1]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a1a      	ldr	r2, [r3, #32]
 800cb78:	2301      	movs	r3, #1
 800cb7a:	f7fc fdd7 	bl	800972c <disk_write>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d004      	beq.n	800cb8e <f_lseek+0x1c0>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	755a      	strb	r2, [r3, #21]
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e13f      	b.n	800ce0e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	7d1b      	ldrb	r3, [r3, #20]
 800cb92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb96:	b2da      	uxtb	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	7858      	ldrb	r0, [r3, #1]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cba6:	2301      	movs	r3, #1
 800cba8:	69ba      	ldr	r2, [r7, #24]
 800cbaa:	f7fc fd9f 	bl	80096ec <disk_read>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d004      	beq.n	800cbbe <f_lseek+0x1f0>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	755a      	strb	r2, [r3, #21]
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e127      	b.n	800ce0e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	69ba      	ldr	r2, [r7, #24]
 800cbc2:	621a      	str	r2, [r3, #32]
 800cbc4:	e121      	b.n	800ce0a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	683a      	ldr	r2, [r7, #0]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d908      	bls.n	800cbe2 <f_lseek+0x214>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7d1b      	ldrb	r3, [r3, #20]
 800cbd4:	f003 0302 	and.w	r3, r3, #2
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d102      	bne.n	800cbe2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	699b      	ldr	r3, [r3, #24]
 800cbe6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbf0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f000 80b5 	beq.w	800cd64 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	895b      	ldrh	r3, [r3, #10]
 800cbfe:	461a      	mov	r2, r3
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	899b      	ldrh	r3, [r3, #12]
 800cc04:	fb02 f303 	mul.w	r3, r2, r3
 800cc08:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cc0a:	6a3b      	ldr	r3, [r7, #32]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d01b      	beq.n	800cc48 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	1e5a      	subs	r2, r3, #1
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc1a:	6a3b      	ldr	r3, [r7, #32]
 800cc1c:	1e59      	subs	r1, r3, #1
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d30f      	bcc.n	800cc48 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cc28:	6a3b      	ldr	r3, [r7, #32]
 800cc2a:	1e5a      	subs	r2, r3, #1
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	425b      	negs	r3, r3
 800cc30:	401a      	ands	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	683a      	ldr	r2, [r7, #0]
 800cc3c:	1ad3      	subs	r3, r2, r3
 800cc3e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	69db      	ldr	r3, [r3, #28]
 800cc44:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc46:	e022      	b.n	800cc8e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cc4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d119      	bne.n	800cc88 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2100      	movs	r1, #0
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fd fb64 	bl	800a326 <create_chain>
 800cc5e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cc60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d104      	bne.n	800cc70 <f_lseek+0x2a2>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2202      	movs	r2, #2
 800cc6a:	755a      	strb	r2, [r3, #21]
 800cc6c:	2302      	movs	r3, #2
 800cc6e:	e0ce      	b.n	800ce0e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc76:	d104      	bne.n	800cc82 <f_lseek+0x2b4>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	755a      	strb	r2, [r3, #21]
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e0c5      	b.n	800ce0e <f_lseek+0x440>
					fp->obj.sclust = clst;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc86:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc8c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d067      	beq.n	800cd64 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800cc94:	e03a      	b.n	800cd0c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	1ad3      	subs	r3, r2, r3
 800cc9c:	603b      	str	r3, [r7, #0]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	699a      	ldr	r2, [r3, #24]
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	441a      	add	r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	7d1b      	ldrb	r3, [r3, #20]
 800ccae:	f003 0302 	and.w	r3, r3, #2
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d00b      	beq.n	800ccce <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7fd fb33 	bl	800a326 <create_chain>
 800ccc0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ccc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d108      	bne.n	800ccda <f_lseek+0x30c>
							ofs = 0; break;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	603b      	str	r3, [r7, #0]
 800cccc:	e022      	b.n	800cd14 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fd f8d5 	bl	8009e82 <get_fat>
 800ccd8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ccda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce0:	d104      	bne.n	800ccec <f_lseek+0x31e>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2201      	movs	r2, #1
 800cce6:	755a      	strb	r2, [r3, #21]
 800cce8:	2301      	movs	r3, #1
 800ccea:	e090      	b.n	800ce0e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ccec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d904      	bls.n	800ccfc <f_lseek+0x32e>
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	69db      	ldr	r3, [r3, #28]
 800ccf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d304      	bcc.n	800cd06 <f_lseek+0x338>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2202      	movs	r2, #2
 800cd00:	755a      	strb	r2, [r3, #21]
 800cd02:	2302      	movs	r3, #2
 800cd04:	e083      	b.n	800ce0e <f_lseek+0x440>
					fp->clust = clst;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd0a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cd0c:	683a      	ldr	r2, [r7, #0]
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d8c0      	bhi.n	800cc96 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	699a      	ldr	r2, [r3, #24]
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	441a      	add	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	899b      	ldrh	r3, [r3, #12]
 800cd24:	461a      	mov	r2, r3
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd2c:	fb01 f202 	mul.w	r2, r1, r2
 800cd30:	1a9b      	subs	r3, r3, r2
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d016      	beq.n	800cd64 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7fd f882 	bl	8009e44 <clust2sect>
 800cd40:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cd42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d104      	bne.n	800cd52 <f_lseek+0x384>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2202      	movs	r2, #2
 800cd4c:	755a      	strb	r2, [r3, #21]
 800cd4e:	2302      	movs	r3, #2
 800cd50:	e05d      	b.n	800ce0e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	899b      	ldrh	r3, [r3, #12]
 800cd56:	461a      	mov	r2, r3
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd60:	4413      	add	r3, r2
 800cd62:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	699a      	ldr	r2, [r3, #24]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d90a      	bls.n	800cd86 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	699a      	ldr	r2, [r3, #24]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	7d1b      	ldrb	r3, [r3, #20]
 800cd7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	8992      	ldrh	r2, [r2, #12]
 800cd8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd92:	fb01 f202 	mul.w	r2, r1, r2
 800cd96:	1a9b      	subs	r3, r3, r2
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d036      	beq.n	800ce0a <f_lseek+0x43c>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a1b      	ldr	r3, [r3, #32]
 800cda0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d031      	beq.n	800ce0a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	7d1b      	ldrb	r3, [r3, #20]
 800cdaa:	b25b      	sxtb	r3, r3
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	da18      	bge.n	800cde2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	7858      	ldrb	r0, [r3, #1]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a1a      	ldr	r2, [r3, #32]
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	f7fc fcb4 	bl	800972c <disk_write>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d004      	beq.n	800cdd4 <f_lseek+0x406>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	755a      	strb	r2, [r3, #21]
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e01c      	b.n	800ce0e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	7d1b      	ldrb	r3, [r3, #20]
 800cdd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	7858      	ldrb	r0, [r3, #1]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cdec:	2301      	movs	r3, #1
 800cdee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cdf0:	f7fc fc7c 	bl	80096ec <disk_read>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d004      	beq.n	800ce04 <f_lseek+0x436>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	755a      	strb	r2, [r3, #21]
 800ce00:	2301      	movs	r3, #1
 800ce02:	e004      	b.n	800ce0e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce08:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ce0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3740      	adds	r7, #64	@ 0x40
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b090      	sub	sp, #64	@ 0x40
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
 800ce1e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ce20:	f107 0108 	add.w	r1, r7, #8
 800ce24:	1d3b      	adds	r3, r7, #4
 800ce26:	2200      	movs	r2, #0
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7fe fd6b 	bl	800b904 <find_volume>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800ce34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d11f      	bne.n	800ce7c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	f107 0308 	add.w	r3, r7, #8
 800ce42:	4611      	mov	r1, r2
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7fe fc4d 	bl	800b6e4 <follow_path>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800ce50:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d111      	bne.n	800ce7c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800ce58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ce5c:	b25b      	sxtb	r3, r3
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	da03      	bge.n	800ce6a <f_stat+0x54>
				res = FR_INVALID_NAME;
 800ce62:	2306      	movs	r3, #6
 800ce64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ce68:	e008      	b.n	800ce7c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d005      	beq.n	800ce7c <f_stat+0x66>
 800ce70:	f107 0308 	add.w	r3, r7, #8
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fe f99e 	bl	800b1b8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800ce7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3740      	adds	r7, #64	@ 0x40
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b0a0      	sub	sp, #128	@ 0x80
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800ce90:	2300      	movs	r3, #0
 800ce92:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ce94:	f107 010c 	add.w	r1, r7, #12
 800ce98:	1d3b      	adds	r3, r7, #4
 800ce9a:	2202      	movs	r2, #2
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe fd31 	bl	800b904 <find_volume>
 800cea2:	4603      	mov	r3, r0
 800cea4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 800ceac:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f040 808e 	bne.w	800cfd2 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800cebc:	4611      	mov	r1, r2
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fe fc10 	bl	800b6e4 <follow_path>
 800cec4:	4603      	mov	r3, r0
 800cec6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800ceca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d108      	bne.n	800cee4 <f_unlink+0x5c>
 800ced2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800ced6:	2102      	movs	r1, #2
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7fc fd65 	bl	80099a8 <chk_lock>
 800cede:	4603      	mov	r3, r0
 800cee0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800cee4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d172      	bne.n	800cfd2 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800ceec:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800cef0:	b25b      	sxtb	r3, r3
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	da03      	bge.n	800cefe <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800cef6:	2306      	movs	r3, #6
 800cef8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800cefc:	e008      	b.n	800cf10 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800cefe:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800cf02:	f003 0301 	and.w	r3, r3, #1
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d002      	beq.n	800cf10 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800cf0a:	2307      	movs	r3, #7
 800cf0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 800cf10:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d134      	bne.n	800cf82 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fd fc77 	bl	800a812 <ld_clust>
 800cf24:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800cf26:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800cf2a:	f003 0310 	and.w	r3, r3, #16
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d027      	beq.n	800cf82 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800cf36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf38:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800cf3a:	f107 0310 	add.w	r3, r7, #16
 800cf3e:	2100      	movs	r1, #0
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fd fac0 	bl	800a4c6 <dir_sdi>
 800cf46:	4603      	mov	r3, r0
 800cf48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 800cf4c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d116      	bne.n	800cf82 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800cf54:	f107 0310 	add.w	r3, r7, #16
 800cf58:	2100      	movs	r1, #0
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fd fe83 	bl	800ac66 <dir_read>
 800cf60:	4603      	mov	r3, r0
 800cf62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800cf66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d102      	bne.n	800cf74 <f_unlink+0xec>
 800cf6e:	2307      	movs	r3, #7
 800cf70:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800cf74:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cf78:	2b04      	cmp	r3, #4
 800cf7a:	d102      	bne.n	800cf82 <f_unlink+0xfa>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800cf82:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d123      	bne.n	800cfd2 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800cf8a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fe f8c8 	bl	800b124 <dir_remove>
 800cf94:	4603      	mov	r3, r0
 800cf96:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800cf9a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d10c      	bne.n	800cfbc <f_unlink+0x134>
 800cfa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d009      	beq.n	800cfbc <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800cfa8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800cfac:	2200      	movs	r2, #0
 800cfae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fd f953 	bl	800a25c <remove_chain>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800cfbc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d106      	bne.n	800cfd2 <f_unlink+0x14a>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fc fecc 	bl	8009d64 <sync_fs>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800cfd2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3780      	adds	r7, #128	@ 0x80
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b088      	sub	sp, #32
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	60f8      	str	r0, [r7, #12]
 800cfe6:	60b9      	str	r1, [r7, #8]
 800cfe8:	607a      	str	r2, [r7, #4]
	int n = 0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cff2:	e01c      	b.n	800d02e <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800cff4:	f107 0310 	add.w	r3, r7, #16
 800cff8:	f107 0114 	add.w	r1, r7, #20
 800cffc:	2201      	movs	r2, #1
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f7ff f94a 	bl	800c298 <f_read>
		if (rc != 1) break;
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	2b01      	cmp	r3, #1
 800d008:	d117      	bne.n	800d03a <f_gets+0x5c>
		c = s[0];
 800d00a:	7d3b      	ldrb	r3, [r7, #20]
 800d00c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800d00e:	7dfb      	ldrb	r3, [r7, #23]
 800d010:	2b0d      	cmp	r3, #13
 800d012:	d00b      	beq.n	800d02c <f_gets+0x4e>
		*p++ = c;
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	1c5a      	adds	r2, r3, #1
 800d018:	61ba      	str	r2, [r7, #24]
 800d01a:	7dfa      	ldrb	r2, [r7, #23]
 800d01c:	701a      	strb	r2, [r3, #0]
		n++;
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	3301      	adds	r3, #1
 800d022:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800d024:	7dfb      	ldrb	r3, [r7, #23]
 800d026:	2b0a      	cmp	r3, #10
 800d028:	d009      	beq.n	800d03e <f_gets+0x60>
 800d02a:	e000      	b.n	800d02e <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800d02c:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	3b01      	subs	r3, #1
 800d032:	69fa      	ldr	r2, [r7, #28]
 800d034:	429a      	cmp	r2, r3
 800d036:	dbdd      	blt.n	800cff4 <f_gets+0x16>
 800d038:	e002      	b.n	800d040 <f_gets+0x62>
		if (rc != 1) break;
 800d03a:	bf00      	nop
 800d03c:	e000      	b.n	800d040 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800d03e:	bf00      	nop
	}
	*p = 0;
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	2200      	movs	r2, #0
 800d044:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d001      	beq.n	800d050 <f_gets+0x72>
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	e000      	b.n	800d052 <f_gets+0x74>
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3720      	adds	r7, #32
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b084      	sub	sp, #16
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	460b      	mov	r3, r1
 800d064:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800d066:	78fb      	ldrb	r3, [r7, #3]
 800d068:	2b0a      	cmp	r3, #10
 800d06a:	d103      	bne.n	800d074 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800d06c:	210d      	movs	r1, #13
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7ff fff3 	bl	800d05a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	db25      	blt.n	800d0cc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	1c5a      	adds	r2, r3, #1
 800d084:	60fa      	str	r2, [r7, #12]
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	4413      	add	r3, r2
 800d08a:	78fa      	ldrb	r2, [r7, #3]
 800d08c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2b3c      	cmp	r3, #60	@ 0x3c
 800d092:	dd12      	ble.n	800d0ba <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6818      	ldr	r0, [r3, #0]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f103 010c 	add.w	r1, r3, #12
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	f107 0308 	add.w	r3, r7, #8
 800d0a4:	f7ff fa57 	bl	800c556 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d101      	bne.n	800d0b4 <putc_bfd+0x5a>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	e001      	b.n	800d0b8 <putc_bfd+0x5e>
 800d0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0b8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	689b      	ldr	r3, [r3, #8]
 800d0c4:	1c5a      	adds	r2, r3, #1
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	609a      	str	r2, [r3, #8]
 800d0ca:	e000      	b.n	800d0ce <putc_bfd+0x74>
	if (i < 0) return;
 800d0cc:	bf00      	nop
}
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	db16      	blt.n	800d112 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6818      	ldr	r0, [r3, #0]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f103 010c 	add.w	r1, r3, #12
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	f107 030c 	add.w	r3, r7, #12
 800d0f8:	f7ff fa2d 	bl	800c556 <f_write>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d107      	bne.n	800d112 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	68fa      	ldr	r2, [r7, #12]
 800d108:	4293      	cmp	r3, r2
 800d10a:	d102      	bne.n	800d112 <putc_flush+0x3e>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	689b      	ldr	r3, [r3, #8]
 800d110:	e001      	b.n	800d116 <putc_flush+0x42>
	return EOF;
 800d112:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d11e:	b480      	push	{r7}
 800d120:	b083      	sub	sp, #12
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	683a      	ldr	r2, [r7, #0]
 800d12c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	605a      	str	r2, [r3, #4]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	685a      	ldr	r2, [r3, #4]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	609a      	str	r2, [r3, #8]
}
 800d13c:	bf00      	nop
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b096      	sub	sp, #88	@ 0x58
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800d152:	f107 030c 	add.w	r3, r7, #12
 800d156:	6839      	ldr	r1, [r7, #0]
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff ffe0 	bl	800d11e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800d15e:	e009      	b.n	800d174 <f_puts+0x2c>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	1c5a      	adds	r2, r3, #1
 800d164:	607a      	str	r2, [r7, #4]
 800d166:	781a      	ldrb	r2, [r3, #0]
 800d168:	f107 030c 	add.w	r3, r7, #12
 800d16c:	4611      	mov	r1, r2
 800d16e:	4618      	mov	r0, r3
 800d170:	f7ff ff73 	bl	800d05a <putc_bfd>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d1f1      	bne.n	800d160 <f_puts+0x18>
	return putc_flush(&pb);
 800d17c:	f107 030c 	add.w	r3, r7, #12
 800d180:	4618      	mov	r0, r3
 800d182:	f7ff ffa7 	bl	800d0d4 <putc_flush>
 800d186:	4603      	mov	r3, r0
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3758      	adds	r7, #88	@ 0x58
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800d190:	b40e      	push	{r1, r2, r3}
 800d192:	b580      	push	{r7, lr}
 800d194:	b0a7      	sub	sp, #156	@ 0x9c
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800d19a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d19e:	6879      	ldr	r1, [r7, #4]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7ff ffbc 	bl	800d11e <putc_init>

	va_start(arp, fmt);
 800d1a6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800d1aa:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 800d1ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d1b0:	1c5a      	adds	r2, r3, #1
 800d1b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 800d1bc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	f000 81f2 	beq.w	800d5aa <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800d1c6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d1ca:	2b25      	cmp	r3, #37	@ 0x25
 800d1cc:	d008      	beq.n	800d1e0 <f_printf+0x50>
			putc_bfd(&pb, c);
 800d1ce:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800d1d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d1d6:	4611      	mov	r1, r2
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7ff ff3e 	bl	800d05a <putc_bfd>
			continue;
 800d1de:	e1e3      	b.n	800d5a8 <f_printf+0x418>
		}
		w = f = 0;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 800d1ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d1f0:	1c5a      	adds	r2, r3, #1
 800d1f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800d1fc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d200:	2b30      	cmp	r3, #48	@ 0x30
 800d202:	d10b      	bne.n	800d21c <f_printf+0x8c>
			f = 1; c = *fmt++;
 800d204:	2301      	movs	r3, #1
 800d206:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d20a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800d21a:	e024      	b.n	800d266 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800d21c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d220:	2b2d      	cmp	r3, #45	@ 0x2d
 800d222:	d120      	bne.n	800d266 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800d224:	2302      	movs	r3, #2
 800d226:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d22a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d22e:	1c5a      	adds	r2, r3, #1
 800d230:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800d23a:	e014      	b.n	800d266 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800d23c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d240:	4613      	mov	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	005b      	lsls	r3, r3, #1
 800d248:	461a      	mov	r2, r3
 800d24a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d24e:	4413      	add	r3, r2
 800d250:	3b30      	subs	r3, #48	@ 0x30
 800d252:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 800d256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d25a:	1c5a      	adds	r2, r3, #1
 800d25c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 800d266:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d26a:	2b2f      	cmp	r3, #47	@ 0x2f
 800d26c:	d903      	bls.n	800d276 <f_printf+0xe6>
 800d26e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d272:	2b39      	cmp	r3, #57	@ 0x39
 800d274:	d9e2      	bls.n	800d23c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800d276:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d27a:	2b6c      	cmp	r3, #108	@ 0x6c
 800d27c:	d003      	beq.n	800d286 <f_printf+0xf6>
 800d27e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d282:	2b4c      	cmp	r3, #76	@ 0x4c
 800d284:	d10d      	bne.n	800d2a2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800d286:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d28a:	f043 0304 	orr.w	r3, r3, #4
 800d28e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d296:	1c5a      	adds	r2, r3, #1
 800d298:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 800d2a2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	f000 8181 	beq.w	800d5ae <f_printf+0x41e>
		d = c;
 800d2ac:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d2b0:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 800d2b4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d2b8:	2b60      	cmp	r3, #96	@ 0x60
 800d2ba:	d908      	bls.n	800d2ce <f_printf+0x13e>
 800d2bc:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d2c0:	2b7a      	cmp	r3, #122	@ 0x7a
 800d2c2:	d804      	bhi.n	800d2ce <f_printf+0x13e>
 800d2c4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d2c8:	3b20      	subs	r3, #32
 800d2ca:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 800d2ce:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d2d2:	3b42      	subs	r3, #66	@ 0x42
 800d2d4:	2b16      	cmp	r3, #22
 800d2d6:	f200 8098 	bhi.w	800d40a <f_printf+0x27a>
 800d2da:	a201      	add	r2, pc, #4	@ (adr r2, 800d2e0 <f_printf+0x150>)
 800d2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e0:	0800d3eb 	.word	0x0800d3eb
 800d2e4:	0800d3d3 	.word	0x0800d3d3
 800d2e8:	0800d3fb 	.word	0x0800d3fb
 800d2ec:	0800d40b 	.word	0x0800d40b
 800d2f0:	0800d40b 	.word	0x0800d40b
 800d2f4:	0800d40b 	.word	0x0800d40b
 800d2f8:	0800d40b 	.word	0x0800d40b
 800d2fc:	0800d40b 	.word	0x0800d40b
 800d300:	0800d40b 	.word	0x0800d40b
 800d304:	0800d40b 	.word	0x0800d40b
 800d308:	0800d40b 	.word	0x0800d40b
 800d30c:	0800d40b 	.word	0x0800d40b
 800d310:	0800d40b 	.word	0x0800d40b
 800d314:	0800d3f3 	.word	0x0800d3f3
 800d318:	0800d40b 	.word	0x0800d40b
 800d31c:	0800d40b 	.word	0x0800d40b
 800d320:	0800d40b 	.word	0x0800d40b
 800d324:	0800d33d 	.word	0x0800d33d
 800d328:	0800d40b 	.word	0x0800d40b
 800d32c:	0800d3fb 	.word	0x0800d3fb
 800d330:	0800d40b 	.word	0x0800d40b
 800d334:	0800d40b 	.word	0x0800d40b
 800d338:	0800d403 	.word	0x0800d403
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800d33c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d33e:	1d1a      	adds	r2, r3, #4
 800d340:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 800d346:	2300      	movs	r3, #0
 800d348:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d34c:	e004      	b.n	800d358 <f_printf+0x1c8>
 800d34e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d352:	3301      	adds	r3, #1
 800d354:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d358:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d35a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d35e:	4413      	add	r3, r2
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d1f3      	bne.n	800d34e <f_printf+0x1be>
			if (!(f & 2)) {
 800d366:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d36a:	f003 0302 	and.w	r3, r3, #2
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d11a      	bne.n	800d3a8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800d372:	e005      	b.n	800d380 <f_printf+0x1f0>
 800d374:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d378:	2120      	movs	r1, #32
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7ff fe6d 	bl	800d05a <putc_bfd>
 800d380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d384:	1c5a      	adds	r2, r3, #1
 800d386:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d38a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d38e:	429a      	cmp	r2, r3
 800d390:	d8f0      	bhi.n	800d374 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800d392:	e009      	b.n	800d3a8 <f_printf+0x218>
 800d394:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d396:	1c5a      	adds	r2, r3, #1
 800d398:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d39a:	781a      	ldrb	r2, [r3, #0]
 800d39c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d3a0:	4611      	mov	r1, r2
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7ff fe59 	bl	800d05a <putc_bfd>
 800d3a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1f1      	bne.n	800d394 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800d3b0:	e005      	b.n	800d3be <f_printf+0x22e>
 800d3b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d3b6:	2120      	movs	r1, #32
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7ff fe4e 	bl	800d05a <putc_bfd>
 800d3be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d3c2:	1c5a      	adds	r2, r3, #1
 800d3c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d3c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d8f0      	bhi.n	800d3b2 <f_printf+0x222>
			continue;
 800d3d0:	e0ea      	b.n	800d5a8 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800d3d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3d4:	1d1a      	adds	r2, r3, #4
 800d3d6:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	b2da      	uxtb	r2, r3
 800d3dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7ff fe39 	bl	800d05a <putc_bfd>
 800d3e8:	e0de      	b.n	800d5a8 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800d3ea:	2302      	movs	r3, #2
 800d3ec:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d3f0:	e014      	b.n	800d41c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800d3f2:	2308      	movs	r3, #8
 800d3f4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d3f8:	e010      	b.n	800d41c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800d3fa:	230a      	movs	r3, #10
 800d3fc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d400:	e00c      	b.n	800d41c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800d402:	2310      	movs	r3, #16
 800d404:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d408:	e008      	b.n	800d41c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800d40a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800d40e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d412:	4611      	mov	r1, r2
 800d414:	4618      	mov	r0, r3
 800d416:	f7ff fe20 	bl	800d05a <putc_bfd>
 800d41a:	e0c5      	b.n	800d5a8 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800d41c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d420:	f003 0304 	and.w	r3, r3, #4
 800d424:	2b00      	cmp	r3, #0
 800d426:	d004      	beq.n	800d432 <f_printf+0x2a2>
 800d428:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d42a:	1d1a      	adds	r2, r3, #4
 800d42c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	e00c      	b.n	800d44c <f_printf+0x2bc>
 800d432:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d436:	2b44      	cmp	r3, #68	@ 0x44
 800d438:	d104      	bne.n	800d444 <f_printf+0x2b4>
 800d43a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d43c:	1d1a      	adds	r2, r3, #4
 800d43e:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	e003      	b.n	800d44c <f_printf+0x2bc>
 800d444:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d446:	1d1a      	adds	r2, r3, #4
 800d448:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800d450:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d454:	2b44      	cmp	r3, #68	@ 0x44
 800d456:	d10e      	bne.n	800d476 <f_printf+0x2e6>
 800d458:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	da0a      	bge.n	800d476 <f_printf+0x2e6>
			v = 0 - v;
 800d460:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d464:	425b      	negs	r3, r3
 800d466:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 800d46a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d46e:	f043 0308 	orr.w	r3, r3, #8
 800d472:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 800d476:	2300      	movs	r3, #0
 800d478:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800d47c:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800d480:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d484:	fbb3 f1f2 	udiv	r1, r3, r2
 800d488:	fb01 f202 	mul.w	r2, r1, r2
 800d48c:	1a9b      	subs	r3, r3, r2
 800d48e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800d492:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800d496:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d49e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800d4a2:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d4a6:	2b09      	cmp	r3, #9
 800d4a8:	d90b      	bls.n	800d4c2 <f_printf+0x332>
 800d4aa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d4ae:	2b78      	cmp	r3, #120	@ 0x78
 800d4b0:	d101      	bne.n	800d4b6 <f_printf+0x326>
 800d4b2:	2227      	movs	r2, #39	@ 0x27
 800d4b4:	e000      	b.n	800d4b8 <f_printf+0x328>
 800d4b6:	2207      	movs	r2, #7
 800d4b8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d4bc:	4413      	add	r3, r2
 800d4be:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 800d4c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800d4cc:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800d4d0:	3230      	adds	r2, #48	@ 0x30
 800d4d2:	b2d2      	uxtb	r2, r2
 800d4d4:	3398      	adds	r3, #152	@ 0x98
 800d4d6:	443b      	add	r3, r7
 800d4d8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800d4dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d003      	beq.n	800d4ec <f_printf+0x35c>
 800d4e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d4e8:	2b1f      	cmp	r3, #31
 800d4ea:	d9c7      	bls.n	800d47c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800d4ec:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d4f0:	f003 0308 	and.w	r3, r3, #8
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d009      	beq.n	800d50c <f_printf+0x37c>
 800d4f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d4fc:	1c5a      	adds	r2, r3, #1
 800d4fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800d502:	3398      	adds	r3, #152	@ 0x98
 800d504:	443b      	add	r3, r7
 800d506:	222d      	movs	r2, #45	@ 0x2d
 800d508:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800d50c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d510:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d514:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d518:	f003 0301 	and.w	r3, r3, #1
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d001      	beq.n	800d524 <f_printf+0x394>
 800d520:	2330      	movs	r3, #48	@ 0x30
 800d522:	e000      	b.n	800d526 <f_printf+0x396>
 800d524:	2320      	movs	r3, #32
 800d526:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800d52a:	e007      	b.n	800d53c <f_printf+0x3ac>
 800d52c:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800d530:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d534:	4611      	mov	r1, r2
 800d536:	4618      	mov	r0, r3
 800d538:	f7ff fd8f 	bl	800d05a <putc_bfd>
 800d53c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d540:	f003 0302 	and.w	r3, r3, #2
 800d544:	2b00      	cmp	r3, #0
 800d546:	d108      	bne.n	800d55a <f_printf+0x3ca>
 800d548:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d54c:	1c5a      	adds	r2, r3, #1
 800d54e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d552:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d556:	429a      	cmp	r2, r3
 800d558:	d8e8      	bhi.n	800d52c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800d55a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d55e:	3b01      	subs	r3, #1
 800d560:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d564:	f107 020c 	add.w	r2, r7, #12
 800d568:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d56c:	4413      	add	r3, r2
 800d56e:	781a      	ldrb	r2, [r3, #0]
 800d570:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d574:	4611      	mov	r1, r2
 800d576:	4618      	mov	r0, r3
 800d578:	f7ff fd6f 	bl	800d05a <putc_bfd>
		} while (i);
 800d57c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1ea      	bne.n	800d55a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800d584:	e007      	b.n	800d596 <f_printf+0x406>
 800d586:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800d58a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d58e:	4611      	mov	r1, r2
 800d590:	4618      	mov	r0, r3
 800d592:	f7ff fd62 	bl	800d05a <putc_bfd>
 800d596:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d59a:	1c5a      	adds	r2, r3, #1
 800d59c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d5a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d8ee      	bhi.n	800d586 <f_printf+0x3f6>
		c = *fmt++;
 800d5a8:	e600      	b.n	800d1ac <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800d5aa:	bf00      	nop
 800d5ac:	e000      	b.n	800d5b0 <f_printf+0x420>
		if (!c) break;
 800d5ae:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800d5b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7ff fd8d 	bl	800d0d4 <putc_flush>
 800d5ba:	4603      	mov	r3, r0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	379c      	adds	r7, #156	@ 0x9c
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d5c6:	b003      	add	sp, #12
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop

0800d5cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b087      	sub	sp, #28
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	4613      	mov	r3, r2
 800d5d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d5e2:	4b1f      	ldr	r3, [pc, #124]	@ (800d660 <FATFS_LinkDriverEx+0x94>)
 800d5e4:	7a5b      	ldrb	r3, [r3, #9]
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d131      	bne.n	800d650 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d5ec:	4b1c      	ldr	r3, [pc, #112]	@ (800d660 <FATFS_LinkDriverEx+0x94>)
 800d5ee:	7a5b      	ldrb	r3, [r3, #9]
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	4b1a      	ldr	r3, [pc, #104]	@ (800d660 <FATFS_LinkDriverEx+0x94>)
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d5fa:	4b19      	ldr	r3, [pc, #100]	@ (800d660 <FATFS_LinkDriverEx+0x94>)
 800d5fc:	7a5b      	ldrb	r3, [r3, #9]
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	4a17      	ldr	r2, [pc, #92]	@ (800d660 <FATFS_LinkDriverEx+0x94>)
 800d602:	009b      	lsls	r3, r3, #2
 800d604:	4413      	add	r3, r2
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d60a:	4b15      	ldr	r3, [pc, #84]	@ (800d660 <FATFS_LinkDriverEx+0x94>)
 800d60c:	7a5b      	ldrb	r3, [r3, #9]
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	461a      	mov	r2, r3
 800d612:	4b13      	ldr	r3, [pc, #76]	@ (800d660 <FATFS_LinkDriverEx+0x94>)
 800d614:	4413      	add	r3, r2
 800d616:	79fa      	ldrb	r2, [r7, #7]
 800d618:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d61a:	4b11      	ldr	r3, [pc, #68]	@ (800d660 <FATFS_LinkDriverEx+0x94>)
 800d61c:	7a5b      	ldrb	r3, [r3, #9]
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	1c5a      	adds	r2, r3, #1
 800d622:	b2d1      	uxtb	r1, r2
 800d624:	4a0e      	ldr	r2, [pc, #56]	@ (800d660 <FATFS_LinkDriverEx+0x94>)
 800d626:	7251      	strb	r1, [r2, #9]
 800d628:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d62a:	7dbb      	ldrb	r3, [r7, #22]
 800d62c:	3330      	adds	r3, #48	@ 0x30
 800d62e:	b2da      	uxtb	r2, r3
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	3301      	adds	r3, #1
 800d638:	223a      	movs	r2, #58	@ 0x3a
 800d63a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	3302      	adds	r3, #2
 800d640:	222f      	movs	r2, #47	@ 0x2f
 800d642:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	3303      	adds	r3, #3
 800d648:	2200      	movs	r2, #0
 800d64a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d64c:	2300      	movs	r3, #0
 800d64e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d650:	7dfb      	ldrb	r3, [r7, #23]
}
 800d652:	4618      	mov	r0, r3
 800d654:	371c      	adds	r7, #28
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop
 800d660:	20002550 	.word	0x20002550

0800d664 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d66e:	2200      	movs	r2, #0
 800d670:	6839      	ldr	r1, [r7, #0]
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f7ff ffaa 	bl	800d5cc <FATFS_LinkDriverEx>
 800d678:	4603      	mov	r3, r0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
	...

0800d684 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	4603      	mov	r3, r0
 800d68c:	6039      	str	r1, [r7, #0]
 800d68e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d690:	88fb      	ldrh	r3, [r7, #6]
 800d692:	2b7f      	cmp	r3, #127	@ 0x7f
 800d694:	d802      	bhi.n	800d69c <ff_convert+0x18>
		c = chr;
 800d696:	88fb      	ldrh	r3, [r7, #6]
 800d698:	81fb      	strh	r3, [r7, #14]
 800d69a:	e025      	b.n	800d6e8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00b      	beq.n	800d6ba <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d6a2:	88fb      	ldrh	r3, [r7, #6]
 800d6a4:	2bff      	cmp	r3, #255	@ 0xff
 800d6a6:	d805      	bhi.n	800d6b4 <ff_convert+0x30>
 800d6a8:	88fb      	ldrh	r3, [r7, #6]
 800d6aa:	3b80      	subs	r3, #128	@ 0x80
 800d6ac:	4a12      	ldr	r2, [pc, #72]	@ (800d6f8 <ff_convert+0x74>)
 800d6ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6b2:	e000      	b.n	800d6b6 <ff_convert+0x32>
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	81fb      	strh	r3, [r7, #14]
 800d6b8:	e016      	b.n	800d6e8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	81fb      	strh	r3, [r7, #14]
 800d6be:	e009      	b.n	800d6d4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d6c0:	89fb      	ldrh	r3, [r7, #14]
 800d6c2:	4a0d      	ldr	r2, [pc, #52]	@ (800d6f8 <ff_convert+0x74>)
 800d6c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6c8:	88fa      	ldrh	r2, [r7, #6]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d006      	beq.n	800d6dc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d6ce:	89fb      	ldrh	r3, [r7, #14]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	81fb      	strh	r3, [r7, #14]
 800d6d4:	89fb      	ldrh	r3, [r7, #14]
 800d6d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d6d8:	d9f2      	bls.n	800d6c0 <ff_convert+0x3c>
 800d6da:	e000      	b.n	800d6de <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d6dc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d6de:	89fb      	ldrh	r3, [r7, #14]
 800d6e0:	3380      	adds	r3, #128	@ 0x80
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d6e8:	89fb      	ldrh	r3, [r7, #14]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3714      	adds	r7, #20
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	08012d80 	.word	0x08012d80

0800d6fc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b087      	sub	sp, #28
 800d700:	af00      	add	r7, sp, #0
 800d702:	4603      	mov	r3, r0
 800d704:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d706:	88fb      	ldrh	r3, [r7, #6]
 800d708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d70c:	d201      	bcs.n	800d712 <ff_wtoupper+0x16>
 800d70e:	4b3e      	ldr	r3, [pc, #248]	@ (800d808 <ff_wtoupper+0x10c>)
 800d710:	e000      	b.n	800d714 <ff_wtoupper+0x18>
 800d712:	4b3e      	ldr	r3, [pc, #248]	@ (800d80c <ff_wtoupper+0x110>)
 800d714:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	1c9a      	adds	r2, r3, #2
 800d71a:	617a      	str	r2, [r7, #20]
 800d71c:	881b      	ldrh	r3, [r3, #0]
 800d71e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d720:	8a7b      	ldrh	r3, [r7, #18]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d068      	beq.n	800d7f8 <ff_wtoupper+0xfc>
 800d726:	88fa      	ldrh	r2, [r7, #6]
 800d728:	8a7b      	ldrh	r3, [r7, #18]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d364      	bcc.n	800d7f8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	1c9a      	adds	r2, r3, #2
 800d732:	617a      	str	r2, [r7, #20]
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	823b      	strh	r3, [r7, #16]
 800d738:	8a3b      	ldrh	r3, [r7, #16]
 800d73a:	0a1b      	lsrs	r3, r3, #8
 800d73c:	81fb      	strh	r3, [r7, #14]
 800d73e:	8a3b      	ldrh	r3, [r7, #16]
 800d740:	b2db      	uxtb	r3, r3
 800d742:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d744:	88fa      	ldrh	r2, [r7, #6]
 800d746:	8a79      	ldrh	r1, [r7, #18]
 800d748:	8a3b      	ldrh	r3, [r7, #16]
 800d74a:	440b      	add	r3, r1
 800d74c:	429a      	cmp	r2, r3
 800d74e:	da49      	bge.n	800d7e4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d750:	89fb      	ldrh	r3, [r7, #14]
 800d752:	2b08      	cmp	r3, #8
 800d754:	d84f      	bhi.n	800d7f6 <ff_wtoupper+0xfa>
 800d756:	a201      	add	r2, pc, #4	@ (adr r2, 800d75c <ff_wtoupper+0x60>)
 800d758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d75c:	0800d781 	.word	0x0800d781
 800d760:	0800d793 	.word	0x0800d793
 800d764:	0800d7a9 	.word	0x0800d7a9
 800d768:	0800d7b1 	.word	0x0800d7b1
 800d76c:	0800d7b9 	.word	0x0800d7b9
 800d770:	0800d7c1 	.word	0x0800d7c1
 800d774:	0800d7c9 	.word	0x0800d7c9
 800d778:	0800d7d1 	.word	0x0800d7d1
 800d77c:	0800d7d9 	.word	0x0800d7d9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d780:	88fa      	ldrh	r2, [r7, #6]
 800d782:	8a7b      	ldrh	r3, [r7, #18]
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	005b      	lsls	r3, r3, #1
 800d788:	697a      	ldr	r2, [r7, #20]
 800d78a:	4413      	add	r3, r2
 800d78c:	881b      	ldrh	r3, [r3, #0]
 800d78e:	80fb      	strh	r3, [r7, #6]
 800d790:	e027      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d792:	88fa      	ldrh	r2, [r7, #6]
 800d794:	8a7b      	ldrh	r3, [r7, #18]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	b29b      	uxth	r3, r3
 800d79a:	f003 0301 	and.w	r3, r3, #1
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	88fa      	ldrh	r2, [r7, #6]
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	80fb      	strh	r3, [r7, #6]
 800d7a6:	e01c      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d7a8:	88fb      	ldrh	r3, [r7, #6]
 800d7aa:	3b10      	subs	r3, #16
 800d7ac:	80fb      	strh	r3, [r7, #6]
 800d7ae:	e018      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d7b0:	88fb      	ldrh	r3, [r7, #6]
 800d7b2:	3b20      	subs	r3, #32
 800d7b4:	80fb      	strh	r3, [r7, #6]
 800d7b6:	e014      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d7b8:	88fb      	ldrh	r3, [r7, #6]
 800d7ba:	3b30      	subs	r3, #48	@ 0x30
 800d7bc:	80fb      	strh	r3, [r7, #6]
 800d7be:	e010      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d7c0:	88fb      	ldrh	r3, [r7, #6]
 800d7c2:	3b1a      	subs	r3, #26
 800d7c4:	80fb      	strh	r3, [r7, #6]
 800d7c6:	e00c      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d7c8:	88fb      	ldrh	r3, [r7, #6]
 800d7ca:	3308      	adds	r3, #8
 800d7cc:	80fb      	strh	r3, [r7, #6]
 800d7ce:	e008      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d7d0:	88fb      	ldrh	r3, [r7, #6]
 800d7d2:	3b50      	subs	r3, #80	@ 0x50
 800d7d4:	80fb      	strh	r3, [r7, #6]
 800d7d6:	e004      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d7d8:	88fb      	ldrh	r3, [r7, #6]
 800d7da:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800d7de:	80fb      	strh	r3, [r7, #6]
 800d7e0:	bf00      	nop
			}
			break;
 800d7e2:	e008      	b.n	800d7f6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d7e4:	89fb      	ldrh	r3, [r7, #14]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d195      	bne.n	800d716 <ff_wtoupper+0x1a>
 800d7ea:	8a3b      	ldrh	r3, [r7, #16]
 800d7ec:	005b      	lsls	r3, r3, #1
 800d7ee:	697a      	ldr	r2, [r7, #20]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d7f4:	e78f      	b.n	800d716 <ff_wtoupper+0x1a>
			break;
 800d7f6:	bf00      	nop
	}

	return chr;
 800d7f8:	88fb      	ldrh	r3, [r7, #6]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	371c      	adds	r7, #28
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	08012e80 	.word	0x08012e80
 800d80c:	08013074 	.word	0x08013074

0800d810 <__NVIC_SetPriority>:
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	4603      	mov	r3, r0
 800d818:	6039      	str	r1, [r7, #0]
 800d81a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d81c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d820:	2b00      	cmp	r3, #0
 800d822:	db0a      	blt.n	800d83a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	b2da      	uxtb	r2, r3
 800d828:	490c      	ldr	r1, [pc, #48]	@ (800d85c <__NVIC_SetPriority+0x4c>)
 800d82a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d82e:	0112      	lsls	r2, r2, #4
 800d830:	b2d2      	uxtb	r2, r2
 800d832:	440b      	add	r3, r1
 800d834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d838:	e00a      	b.n	800d850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	b2da      	uxtb	r2, r3
 800d83e:	4908      	ldr	r1, [pc, #32]	@ (800d860 <__NVIC_SetPriority+0x50>)
 800d840:	79fb      	ldrb	r3, [r7, #7]
 800d842:	f003 030f 	and.w	r3, r3, #15
 800d846:	3b04      	subs	r3, #4
 800d848:	0112      	lsls	r2, r2, #4
 800d84a:	b2d2      	uxtb	r2, r2
 800d84c:	440b      	add	r3, r1
 800d84e:	761a      	strb	r2, [r3, #24]
}
 800d850:	bf00      	nop
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr
 800d85c:	e000e100 	.word	0xe000e100
 800d860:	e000ed00 	.word	0xe000ed00

0800d864 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d864:	b580      	push	{r7, lr}
 800d866:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d868:	4b05      	ldr	r3, [pc, #20]	@ (800d880 <SysTick_Handler+0x1c>)
 800d86a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d86c:	f001 ff82 	bl	800f774 <xTaskGetSchedulerState>
 800d870:	4603      	mov	r3, r0
 800d872:	2b01      	cmp	r3, #1
 800d874:	d001      	beq.n	800d87a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d876:	f002 fe77 	bl	8010568 <xPortSysTickHandler>
  }
}
 800d87a:	bf00      	nop
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	e000e010 	.word	0xe000e010

0800d884 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d884:	b580      	push	{r7, lr}
 800d886:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d888:	2100      	movs	r1, #0
 800d88a:	f06f 0004 	mvn.w	r0, #4
 800d88e:	f7ff ffbf 	bl	800d810 <__NVIC_SetPriority>
#endif
}
 800d892:	bf00      	nop
 800d894:	bd80      	pop	{r7, pc}
	...

0800d898 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d898:	b480      	push	{r7}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d89e:	f3ef 8305 	mrs	r3, IPSR
 800d8a2:	603b      	str	r3, [r7, #0]
  return(result);
 800d8a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d003      	beq.n	800d8b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d8aa:	f06f 0305 	mvn.w	r3, #5
 800d8ae:	607b      	str	r3, [r7, #4]
 800d8b0:	e00c      	b.n	800d8cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d8b2:	4b0a      	ldr	r3, [pc, #40]	@ (800d8dc <osKernelInitialize+0x44>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d105      	bne.n	800d8c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d8ba:	4b08      	ldr	r3, [pc, #32]	@ (800d8dc <osKernelInitialize+0x44>)
 800d8bc:	2201      	movs	r2, #1
 800d8be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	607b      	str	r3, [r7, #4]
 800d8c4:	e002      	b.n	800d8cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d8cc:	687b      	ldr	r3, [r7, #4]
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	370c      	adds	r7, #12
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
 800d8da:	bf00      	nop
 800d8dc:	2000255c 	.word	0x2000255c

0800d8e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8e6:	f3ef 8305 	mrs	r3, IPSR
 800d8ea:	603b      	str	r3, [r7, #0]
  return(result);
 800d8ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <osKernelStart+0x1a>
    stat = osErrorISR;
 800d8f2:	f06f 0305 	mvn.w	r3, #5
 800d8f6:	607b      	str	r3, [r7, #4]
 800d8f8:	e010      	b.n	800d91c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d8fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d928 <osKernelStart+0x48>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2b01      	cmp	r3, #1
 800d900:	d109      	bne.n	800d916 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d902:	f7ff ffbf 	bl	800d884 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d906:	4b08      	ldr	r3, [pc, #32]	@ (800d928 <osKernelStart+0x48>)
 800d908:	2202      	movs	r2, #2
 800d90a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d90c:	f001 face 	bl	800eeac <vTaskStartScheduler>
      stat = osOK;
 800d910:	2300      	movs	r3, #0
 800d912:	607b      	str	r3, [r7, #4]
 800d914:	e002      	b.n	800d91c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d916:	f04f 33ff 	mov.w	r3, #4294967295
 800d91a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d91c:	687b      	ldr	r3, [r7, #4]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	2000255c 	.word	0x2000255c

0800d92c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b08e      	sub	sp, #56	@ 0x38
 800d930:	af04      	add	r7, sp, #16
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d938:	2300      	movs	r3, #0
 800d93a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d93c:	f3ef 8305 	mrs	r3, IPSR
 800d940:	617b      	str	r3, [r7, #20]
  return(result);
 800d942:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d944:	2b00      	cmp	r3, #0
 800d946:	d17e      	bne.n	800da46 <osThreadNew+0x11a>
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d07b      	beq.n	800da46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d94e:	2380      	movs	r3, #128	@ 0x80
 800d950:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d952:	2318      	movs	r3, #24
 800d954:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d956:	2300      	movs	r3, #0
 800d958:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d95a:	f04f 33ff 	mov.w	r3, #4294967295
 800d95e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d045      	beq.n	800d9f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d002      	beq.n	800d974 <osThreadNew+0x48>
        name = attr->name;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d002      	beq.n	800d982 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	699b      	ldr	r3, [r3, #24]
 800d980:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d008      	beq.n	800d99a <osThreadNew+0x6e>
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	2b38      	cmp	r3, #56	@ 0x38
 800d98c:	d805      	bhi.n	800d99a <osThreadNew+0x6e>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	f003 0301 	and.w	r3, r3, #1
 800d996:	2b00      	cmp	r3, #0
 800d998:	d001      	beq.n	800d99e <osThreadNew+0x72>
        return (NULL);
 800d99a:	2300      	movs	r3, #0
 800d99c:	e054      	b.n	800da48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	695b      	ldr	r3, [r3, #20]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d003      	beq.n	800d9ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	695b      	ldr	r3, [r3, #20]
 800d9aa:	089b      	lsrs	r3, r3, #2
 800d9ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	689b      	ldr	r3, [r3, #8]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d00e      	beq.n	800d9d4 <osThreadNew+0xa8>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	2ba7      	cmp	r3, #167	@ 0xa7
 800d9bc:	d90a      	bls.n	800d9d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d006      	beq.n	800d9d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d002      	beq.n	800d9d4 <osThreadNew+0xa8>
        mem = 1;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	61bb      	str	r3, [r7, #24]
 800d9d2:	e010      	b.n	800d9f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d10c      	bne.n	800d9f6 <osThreadNew+0xca>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d108      	bne.n	800d9f6 <osThreadNew+0xca>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	691b      	ldr	r3, [r3, #16]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d104      	bne.n	800d9f6 <osThreadNew+0xca>
          mem = 0;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	61bb      	str	r3, [r7, #24]
 800d9f0:	e001      	b.n	800d9f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d110      	bne.n	800da1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da04:	9202      	str	r2, [sp, #8]
 800da06:	9301      	str	r3, [sp, #4]
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	9300      	str	r3, [sp, #0]
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	6a3a      	ldr	r2, [r7, #32]
 800da10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f000 ff62 	bl	800e8dc <xTaskCreateStatic>
 800da18:	4603      	mov	r3, r0
 800da1a:	613b      	str	r3, [r7, #16]
 800da1c:	e013      	b.n	800da46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d110      	bne.n	800da46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800da24:	6a3b      	ldr	r3, [r7, #32]
 800da26:	b29a      	uxth	r2, r3
 800da28:	f107 0310 	add.w	r3, r7, #16
 800da2c:	9301      	str	r3, [sp, #4]
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	f000 ffb0 	bl	800e99c <xTaskCreate>
 800da3c:	4603      	mov	r3, r0
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d001      	beq.n	800da46 <osThreadNew+0x11a>
            hTask = NULL;
 800da42:	2300      	movs	r3, #0
 800da44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800da46:	693b      	ldr	r3, [r7, #16]
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3728      	adds	r7, #40	@ 0x28
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	4a07      	ldr	r2, [pc, #28]	@ (800da7c <vApplicationGetIdleTaskMemory+0x2c>)
 800da60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	4a06      	ldr	r2, [pc, #24]	@ (800da80 <vApplicationGetIdleTaskMemory+0x30>)
 800da66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2280      	movs	r2, #128	@ 0x80
 800da6c:	601a      	str	r2, [r3, #0]
}
 800da6e:	bf00      	nop
 800da70:	3714      	adds	r7, #20
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	20002560 	.word	0x20002560
 800da80:	20002608 	.word	0x20002608

0800da84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800da84:	b480      	push	{r7}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	4a07      	ldr	r2, [pc, #28]	@ (800dab0 <vApplicationGetTimerTaskMemory+0x2c>)
 800da94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	4a06      	ldr	r2, [pc, #24]	@ (800dab4 <vApplicationGetTimerTaskMemory+0x30>)
 800da9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800daa2:	601a      	str	r2, [r3, #0]
}
 800daa4:	bf00      	nop
 800daa6:	3714      	adds	r7, #20
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr
 800dab0:	20002808 	.word	0x20002808
 800dab4:	200028b0 	.word	0x200028b0

0800dab8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dab8:	b480      	push	{r7}
 800daba:	b083      	sub	sp, #12
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f103 0208 	add.w	r2, r3, #8
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f04f 32ff 	mov.w	r2, #4294967295
 800dad0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f103 0208 	add.w	r2, r3, #8
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f103 0208 	add.w	r2, r3, #8
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800daec:	bf00      	nop
 800daee:	370c      	adds	r7, #12
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr

0800daf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800daf8:	b480      	push	{r7}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800db06:	bf00      	nop
 800db08:	370c      	adds	r7, #12
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr

0800db12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800db12:	b480      	push	{r7}
 800db14:	b085      	sub	sp, #20
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	68fa      	ldr	r2, [r7, #12]
 800db26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	689a      	ldr	r2, [r3, #8]
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	683a      	ldr	r2, [r7, #0]
 800db36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	683a      	ldr	r2, [r7, #0]
 800db3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	1c5a      	adds	r2, r3, #1
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	601a      	str	r2, [r3, #0]
}
 800db4e:	bf00      	nop
 800db50:	3714      	adds	r7, #20
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr

0800db5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800db5a:	b480      	push	{r7}
 800db5c:	b085      	sub	sp, #20
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
 800db62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db70:	d103      	bne.n	800db7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	691b      	ldr	r3, [r3, #16]
 800db76:	60fb      	str	r3, [r7, #12]
 800db78:	e00c      	b.n	800db94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	3308      	adds	r3, #8
 800db7e:	60fb      	str	r3, [r7, #12]
 800db80:	e002      	b.n	800db88 <vListInsert+0x2e>
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	60fb      	str	r3, [r7, #12]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	68ba      	ldr	r2, [r7, #8]
 800db90:	429a      	cmp	r2, r3
 800db92:	d2f6      	bcs.n	800db82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	685a      	ldr	r2, [r3, #4]
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	683a      	ldr	r2, [r7, #0]
 800dba2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	683a      	ldr	r2, [r7, #0]
 800dbae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	1c5a      	adds	r2, r3, #1
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	601a      	str	r2, [r3, #0]
}
 800dbc0:	bf00      	nop
 800dbc2:	3714      	adds	r7, #20
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	691b      	ldr	r3, [r3, #16]
 800dbd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	6892      	ldr	r2, [r2, #8]
 800dbe2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	689b      	ldr	r3, [r3, #8]
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	6852      	ldr	r2, [r2, #4]
 800dbec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d103      	bne.n	800dc00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	689a      	ldr	r2, [r3, #8]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	1e5a      	subs	r2, r3, #1
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3714      	adds	r7, #20
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d10b      	bne.n	800dc4c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc38:	f383 8811 	msr	BASEPRI, r3
 800dc3c:	f3bf 8f6f 	isb	sy
 800dc40:	f3bf 8f4f 	dsb	sy
 800dc44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dc46:	bf00      	nop
 800dc48:	bf00      	nop
 800dc4a:	e7fd      	b.n	800dc48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dc4c:	f002 fbfc 	bl	8010448 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681a      	ldr	r2, [r3, #0]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc58:	68f9      	ldr	r1, [r7, #12]
 800dc5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dc5c:	fb01 f303 	mul.w	r3, r1, r3
 800dc60:	441a      	add	r2, r3
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc7c:	3b01      	subs	r3, #1
 800dc7e:	68f9      	ldr	r1, [r7, #12]
 800dc80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dc82:	fb01 f303 	mul.w	r3, r1, r3
 800dc86:	441a      	add	r2, r3
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	22ff      	movs	r2, #255	@ 0xff
 800dc90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	22ff      	movs	r2, #255	@ 0xff
 800dc98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d114      	bne.n	800dccc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	691b      	ldr	r3, [r3, #16]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d01a      	beq.n	800dce0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	3310      	adds	r3, #16
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f001 fb9a 	bl	800f3e8 <xTaskRemoveFromEventList>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d012      	beq.n	800dce0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dcba:	4b0d      	ldr	r3, [pc, #52]	@ (800dcf0 <xQueueGenericReset+0xd0>)
 800dcbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcc0:	601a      	str	r2, [r3, #0]
 800dcc2:	f3bf 8f4f 	dsb	sy
 800dcc6:	f3bf 8f6f 	isb	sy
 800dcca:	e009      	b.n	800dce0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	3310      	adds	r3, #16
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff fef1 	bl	800dab8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	3324      	adds	r3, #36	@ 0x24
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7ff feec 	bl	800dab8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dce0:	f002 fbe4 	bl	80104ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dce4:	2301      	movs	r3, #1
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3710      	adds	r7, #16
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	e000ed04 	.word	0xe000ed04

0800dcf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b08e      	sub	sp, #56	@ 0x38
 800dcf8:	af02      	add	r7, sp, #8
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
 800dd00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d10b      	bne.n	800dd20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800dd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd0c:	f383 8811 	msr	BASEPRI, r3
 800dd10:	f3bf 8f6f 	isb	sy
 800dd14:	f3bf 8f4f 	dsb	sy
 800dd18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dd1a:	bf00      	nop
 800dd1c:	bf00      	nop
 800dd1e:	e7fd      	b.n	800dd1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d10b      	bne.n	800dd3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800dd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd2a:	f383 8811 	msr	BASEPRI, r3
 800dd2e:	f3bf 8f6f 	isb	sy
 800dd32:	f3bf 8f4f 	dsb	sy
 800dd36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dd38:	bf00      	nop
 800dd3a:	bf00      	nop
 800dd3c:	e7fd      	b.n	800dd3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d002      	beq.n	800dd4a <xQueueGenericCreateStatic+0x56>
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d001      	beq.n	800dd4e <xQueueGenericCreateStatic+0x5a>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	e000      	b.n	800dd50 <xQueueGenericCreateStatic+0x5c>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10b      	bne.n	800dd6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800dd54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd58:	f383 8811 	msr	BASEPRI, r3
 800dd5c:	f3bf 8f6f 	isb	sy
 800dd60:	f3bf 8f4f 	dsb	sy
 800dd64:	623b      	str	r3, [r7, #32]
}
 800dd66:	bf00      	nop
 800dd68:	bf00      	nop
 800dd6a:	e7fd      	b.n	800dd68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d102      	bne.n	800dd78 <xQueueGenericCreateStatic+0x84>
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d101      	bne.n	800dd7c <xQueueGenericCreateStatic+0x88>
 800dd78:	2301      	movs	r3, #1
 800dd7a:	e000      	b.n	800dd7e <xQueueGenericCreateStatic+0x8a>
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d10b      	bne.n	800dd9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800dd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd86:	f383 8811 	msr	BASEPRI, r3
 800dd8a:	f3bf 8f6f 	isb	sy
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	61fb      	str	r3, [r7, #28]
}
 800dd94:	bf00      	nop
 800dd96:	bf00      	nop
 800dd98:	e7fd      	b.n	800dd96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dd9a:	2350      	movs	r3, #80	@ 0x50
 800dd9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	2b50      	cmp	r3, #80	@ 0x50
 800dda2:	d00b      	beq.n	800ddbc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800dda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda8:	f383 8811 	msr	BASEPRI, r3
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	61bb      	str	r3, [r7, #24]
}
 800ddb6:	bf00      	nop
 800ddb8:	bf00      	nop
 800ddba:	e7fd      	b.n	800ddb8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ddbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ddc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00d      	beq.n	800dde4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ddc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ddd0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ddd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	4613      	mov	r3, r2
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	68b9      	ldr	r1, [r7, #8]
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	f000 f840 	bl	800de64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3730      	adds	r7, #48	@ 0x30
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b08a      	sub	sp, #40	@ 0x28
 800ddf2:	af02      	add	r7, sp, #8
 800ddf4:	60f8      	str	r0, [r7, #12]
 800ddf6:	60b9      	str	r1, [r7, #8]
 800ddf8:	4613      	mov	r3, r2
 800ddfa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d10b      	bne.n	800de1a <xQueueGenericCreate+0x2c>
	__asm volatile
 800de02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de06:	f383 8811 	msr	BASEPRI, r3
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	613b      	str	r3, [r7, #16]
}
 800de14:	bf00      	nop
 800de16:	bf00      	nop
 800de18:	e7fd      	b.n	800de16 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	68ba      	ldr	r2, [r7, #8]
 800de1e:	fb02 f303 	mul.w	r3, r2, r3
 800de22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	3350      	adds	r3, #80	@ 0x50
 800de28:	4618      	mov	r0, r3
 800de2a:	f002 fc2f 	bl	801068c <pvPortMalloc>
 800de2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800de30:	69bb      	ldr	r3, [r7, #24]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d011      	beq.n	800de5a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800de36:	69bb      	ldr	r3, [r7, #24]
 800de38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	3350      	adds	r3, #80	@ 0x50
 800de3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	2200      	movs	r2, #0
 800de44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800de48:	79fa      	ldrb	r2, [r7, #7]
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	9300      	str	r3, [sp, #0]
 800de4e:	4613      	mov	r3, r2
 800de50:	697a      	ldr	r2, [r7, #20]
 800de52:	68b9      	ldr	r1, [r7, #8]
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f000 f805 	bl	800de64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800de5a:	69bb      	ldr	r3, [r7, #24]
	}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3720      	adds	r7, #32
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
 800de70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d103      	bne.n	800de80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800de78:	69bb      	ldr	r3, [r7, #24]
 800de7a:	69ba      	ldr	r2, [r7, #24]
 800de7c:	601a      	str	r2, [r3, #0]
 800de7e:	e002      	b.n	800de86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800de80:	69bb      	ldr	r3, [r7, #24]
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	68fa      	ldr	r2, [r7, #12]
 800de8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800de92:	2101      	movs	r1, #1
 800de94:	69b8      	ldr	r0, [r7, #24]
 800de96:	f7ff fec3 	bl	800dc20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800de9a:	69bb      	ldr	r3, [r7, #24]
 800de9c:	78fa      	ldrb	r2, [r7, #3]
 800de9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dea2:	bf00      	nop
 800dea4:	3710      	adds	r7, #16
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
	...

0800deac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b08e      	sub	sp, #56	@ 0x38
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	607a      	str	r2, [r7, #4]
 800deb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800deba:	2300      	movs	r3, #0
 800debc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d10b      	bne.n	800dee0 <xQueueGenericSend+0x34>
	__asm volatile
 800dec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800decc:	f383 8811 	msr	BASEPRI, r3
 800ded0:	f3bf 8f6f 	isb	sy
 800ded4:	f3bf 8f4f 	dsb	sy
 800ded8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800deda:	bf00      	nop
 800dedc:	bf00      	nop
 800dede:	e7fd      	b.n	800dedc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d103      	bne.n	800deee <xQueueGenericSend+0x42>
 800dee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800deea:	2b00      	cmp	r3, #0
 800deec:	d101      	bne.n	800def2 <xQueueGenericSend+0x46>
 800deee:	2301      	movs	r3, #1
 800def0:	e000      	b.n	800def4 <xQueueGenericSend+0x48>
 800def2:	2300      	movs	r3, #0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d10b      	bne.n	800df10 <xQueueGenericSend+0x64>
	__asm volatile
 800def8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defc:	f383 8811 	msr	BASEPRI, r3
 800df00:	f3bf 8f6f 	isb	sy
 800df04:	f3bf 8f4f 	dsb	sy
 800df08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800df0a:	bf00      	nop
 800df0c:	bf00      	nop
 800df0e:	e7fd      	b.n	800df0c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	2b02      	cmp	r3, #2
 800df14:	d103      	bne.n	800df1e <xQueueGenericSend+0x72>
 800df16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d101      	bne.n	800df22 <xQueueGenericSend+0x76>
 800df1e:	2301      	movs	r3, #1
 800df20:	e000      	b.n	800df24 <xQueueGenericSend+0x78>
 800df22:	2300      	movs	r3, #0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10b      	bne.n	800df40 <xQueueGenericSend+0x94>
	__asm volatile
 800df28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df2c:	f383 8811 	msr	BASEPRI, r3
 800df30:	f3bf 8f6f 	isb	sy
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	623b      	str	r3, [r7, #32]
}
 800df3a:	bf00      	nop
 800df3c:	bf00      	nop
 800df3e:	e7fd      	b.n	800df3c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df40:	f001 fc18 	bl	800f774 <xTaskGetSchedulerState>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d102      	bne.n	800df50 <xQueueGenericSend+0xa4>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d101      	bne.n	800df54 <xQueueGenericSend+0xa8>
 800df50:	2301      	movs	r3, #1
 800df52:	e000      	b.n	800df56 <xQueueGenericSend+0xaa>
 800df54:	2300      	movs	r3, #0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d10b      	bne.n	800df72 <xQueueGenericSend+0xc6>
	__asm volatile
 800df5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df5e:	f383 8811 	msr	BASEPRI, r3
 800df62:	f3bf 8f6f 	isb	sy
 800df66:	f3bf 8f4f 	dsb	sy
 800df6a:	61fb      	str	r3, [r7, #28]
}
 800df6c:	bf00      	nop
 800df6e:	bf00      	nop
 800df70:	e7fd      	b.n	800df6e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df72:	f002 fa69 	bl	8010448 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df7e:	429a      	cmp	r2, r3
 800df80:	d302      	bcc.n	800df88 <xQueueGenericSend+0xdc>
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	2b02      	cmp	r3, #2
 800df86:	d129      	bne.n	800dfdc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df88:	683a      	ldr	r2, [r7, #0]
 800df8a:	68b9      	ldr	r1, [r7, #8]
 800df8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df8e:	f000 fb37 	bl	800e600 <prvCopyDataToQueue>
 800df92:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d010      	beq.n	800dfbe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df9e:	3324      	adds	r3, #36	@ 0x24
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f001 fa21 	bl	800f3e8 <xTaskRemoveFromEventList>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d013      	beq.n	800dfd4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dfac:	4b3f      	ldr	r3, [pc, #252]	@ (800e0ac <xQueueGenericSend+0x200>)
 800dfae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfb2:	601a      	str	r2, [r3, #0]
 800dfb4:	f3bf 8f4f 	dsb	sy
 800dfb8:	f3bf 8f6f 	isb	sy
 800dfbc:	e00a      	b.n	800dfd4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dfbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d007      	beq.n	800dfd4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dfc4:	4b39      	ldr	r3, [pc, #228]	@ (800e0ac <xQueueGenericSend+0x200>)
 800dfc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfca:	601a      	str	r2, [r3, #0]
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dfd4:	f002 fa6a 	bl	80104ac <vPortExitCritical>
				return pdPASS;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	e063      	b.n	800e0a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d103      	bne.n	800dfea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dfe2:	f002 fa63 	bl	80104ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	e05c      	b.n	800e0a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dfea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d106      	bne.n	800dffe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dff0:	f107 0314 	add.w	r3, r7, #20
 800dff4:	4618      	mov	r0, r3
 800dff6:	f001 fa5b 	bl	800f4b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dffa:	2301      	movs	r3, #1
 800dffc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dffe:	f002 fa55 	bl	80104ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e002:	f000 ffc3 	bl	800ef8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e006:	f002 fa1f 	bl	8010448 <vPortEnterCritical>
 800e00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e00c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e010:	b25b      	sxtb	r3, r3
 800e012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e016:	d103      	bne.n	800e020 <xQueueGenericSend+0x174>
 800e018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e022:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e026:	b25b      	sxtb	r3, r3
 800e028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e02c:	d103      	bne.n	800e036 <xQueueGenericSend+0x18a>
 800e02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e030:	2200      	movs	r2, #0
 800e032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e036:	f002 fa39 	bl	80104ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e03a:	1d3a      	adds	r2, r7, #4
 800e03c:	f107 0314 	add.w	r3, r7, #20
 800e040:	4611      	mov	r1, r2
 800e042:	4618      	mov	r0, r3
 800e044:	f001 fa4a 	bl	800f4dc <xTaskCheckForTimeOut>
 800e048:	4603      	mov	r3, r0
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d124      	bne.n	800e098 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e04e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e050:	f000 fbce 	bl	800e7f0 <prvIsQueueFull>
 800e054:	4603      	mov	r3, r0
 800e056:	2b00      	cmp	r3, #0
 800e058:	d018      	beq.n	800e08c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e05c:	3310      	adds	r3, #16
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	4611      	mov	r1, r2
 800e062:	4618      	mov	r0, r3
 800e064:	f001 f96e 	bl	800f344 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e06a:	f000 fb59 	bl	800e720 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e06e:	f000 ff9b 	bl	800efa8 <xTaskResumeAll>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	f47f af7c 	bne.w	800df72 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e07a:	4b0c      	ldr	r3, [pc, #48]	@ (800e0ac <xQueueGenericSend+0x200>)
 800e07c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e080:	601a      	str	r2, [r3, #0]
 800e082:	f3bf 8f4f 	dsb	sy
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	e772      	b.n	800df72 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e08c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e08e:	f000 fb47 	bl	800e720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e092:	f000 ff89 	bl	800efa8 <xTaskResumeAll>
 800e096:	e76c      	b.n	800df72 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e098:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e09a:	f000 fb41 	bl	800e720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e09e:	f000 ff83 	bl	800efa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e0a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3738      	adds	r7, #56	@ 0x38
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	e000ed04 	.word	0xe000ed04

0800e0b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b090      	sub	sp, #64	@ 0x40
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	607a      	str	r2, [r7, #4]
 800e0bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10b      	bne.n	800e0e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0cc:	f383 8811 	msr	BASEPRI, r3
 800e0d0:	f3bf 8f6f 	isb	sy
 800e0d4:	f3bf 8f4f 	dsb	sy
 800e0d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e0da:	bf00      	nop
 800e0dc:	bf00      	nop
 800e0de:	e7fd      	b.n	800e0dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d103      	bne.n	800e0ee <xQueueGenericSendFromISR+0x3e>
 800e0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d101      	bne.n	800e0f2 <xQueueGenericSendFromISR+0x42>
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e000      	b.n	800e0f4 <xQueueGenericSendFromISR+0x44>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10b      	bne.n	800e110 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e10a:	bf00      	nop
 800e10c:	bf00      	nop
 800e10e:	e7fd      	b.n	800e10c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	2b02      	cmp	r3, #2
 800e114:	d103      	bne.n	800e11e <xQueueGenericSendFromISR+0x6e>
 800e116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d101      	bne.n	800e122 <xQueueGenericSendFromISR+0x72>
 800e11e:	2301      	movs	r3, #1
 800e120:	e000      	b.n	800e124 <xQueueGenericSendFromISR+0x74>
 800e122:	2300      	movs	r3, #0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10b      	bne.n	800e140 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e12c:	f383 8811 	msr	BASEPRI, r3
 800e130:	f3bf 8f6f 	isb	sy
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	623b      	str	r3, [r7, #32]
}
 800e13a:	bf00      	nop
 800e13c:	bf00      	nop
 800e13e:	e7fd      	b.n	800e13c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e140:	f002 fa62 	bl	8010608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e144:	f3ef 8211 	mrs	r2, BASEPRI
 800e148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e14c:	f383 8811 	msr	BASEPRI, r3
 800e150:	f3bf 8f6f 	isb	sy
 800e154:	f3bf 8f4f 	dsb	sy
 800e158:	61fa      	str	r2, [r7, #28]
 800e15a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e15c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e15e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e168:	429a      	cmp	r2, r3
 800e16a:	d302      	bcc.n	800e172 <xQueueGenericSendFromISR+0xc2>
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	2b02      	cmp	r3, #2
 800e170:	d12f      	bne.n	800e1d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e174:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e178:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e17e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e180:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e182:	683a      	ldr	r2, [r7, #0]
 800e184:	68b9      	ldr	r1, [r7, #8]
 800e186:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e188:	f000 fa3a 	bl	800e600 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e18c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e194:	d112      	bne.n	800e1bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d016      	beq.n	800e1cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a0:	3324      	adds	r3, #36	@ 0x24
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f001 f920 	bl	800f3e8 <xTaskRemoveFromEventList>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d00e      	beq.n	800e1cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00b      	beq.n	800e1cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	601a      	str	r2, [r3, #0]
 800e1ba:	e007      	b.n	800e1cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e1bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	b25a      	sxtb	r2, r3
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e1d0:	e001      	b.n	800e1d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e1d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e1e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e1e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3740      	adds	r7, #64	@ 0x40
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b08c      	sub	sp, #48	@ 0x30
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e202:	2b00      	cmp	r3, #0
 800e204:	d10b      	bne.n	800e21e <xQueueReceive+0x32>
	__asm volatile
 800e206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e20a:	f383 8811 	msr	BASEPRI, r3
 800e20e:	f3bf 8f6f 	isb	sy
 800e212:	f3bf 8f4f 	dsb	sy
 800e216:	623b      	str	r3, [r7, #32]
}
 800e218:	bf00      	nop
 800e21a:	bf00      	nop
 800e21c:	e7fd      	b.n	800e21a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d103      	bne.n	800e22c <xQueueReceive+0x40>
 800e224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d101      	bne.n	800e230 <xQueueReceive+0x44>
 800e22c:	2301      	movs	r3, #1
 800e22e:	e000      	b.n	800e232 <xQueueReceive+0x46>
 800e230:	2300      	movs	r3, #0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d10b      	bne.n	800e24e <xQueueReceive+0x62>
	__asm volatile
 800e236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e23a:	f383 8811 	msr	BASEPRI, r3
 800e23e:	f3bf 8f6f 	isb	sy
 800e242:	f3bf 8f4f 	dsb	sy
 800e246:	61fb      	str	r3, [r7, #28]
}
 800e248:	bf00      	nop
 800e24a:	bf00      	nop
 800e24c:	e7fd      	b.n	800e24a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e24e:	f001 fa91 	bl	800f774 <xTaskGetSchedulerState>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d102      	bne.n	800e25e <xQueueReceive+0x72>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <xQueueReceive+0x76>
 800e25e:	2301      	movs	r3, #1
 800e260:	e000      	b.n	800e264 <xQueueReceive+0x78>
 800e262:	2300      	movs	r3, #0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d10b      	bne.n	800e280 <xQueueReceive+0x94>
	__asm volatile
 800e268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e26c:	f383 8811 	msr	BASEPRI, r3
 800e270:	f3bf 8f6f 	isb	sy
 800e274:	f3bf 8f4f 	dsb	sy
 800e278:	61bb      	str	r3, [r7, #24]
}
 800e27a:	bf00      	nop
 800e27c:	bf00      	nop
 800e27e:	e7fd      	b.n	800e27c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e280:	f002 f8e2 	bl	8010448 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e288:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d01f      	beq.n	800e2d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e290:	68b9      	ldr	r1, [r7, #8]
 800e292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e294:	f000 fa1e 	bl	800e6d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e29a:	1e5a      	subs	r2, r3, #1
 800e29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e29e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d00f      	beq.n	800e2c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2aa:	3310      	adds	r3, #16
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f001 f89b 	bl	800f3e8 <xTaskRemoveFromEventList>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d007      	beq.n	800e2c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e2b8:	4b3c      	ldr	r3, [pc, #240]	@ (800e3ac <xQueueReceive+0x1c0>)
 800e2ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2be:	601a      	str	r2, [r3, #0]
 800e2c0:	f3bf 8f4f 	dsb	sy
 800e2c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e2c8:	f002 f8f0 	bl	80104ac <vPortExitCritical>
				return pdPASS;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	e069      	b.n	800e3a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d103      	bne.n	800e2de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e2d6:	f002 f8e9 	bl	80104ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	e062      	b.n	800e3a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d106      	bne.n	800e2f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e2e4:	f107 0310 	add.w	r3, r7, #16
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f001 f8e1 	bl	800f4b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2f2:	f002 f8db 	bl	80104ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2f6:	f000 fe49 	bl	800ef8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2fa:	f002 f8a5 	bl	8010448 <vPortEnterCritical>
 800e2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e300:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e304:	b25b      	sxtb	r3, r3
 800e306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30a:	d103      	bne.n	800e314 <xQueueReceive+0x128>
 800e30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e30e:	2200      	movs	r2, #0
 800e310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e316:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e31a:	b25b      	sxtb	r3, r3
 800e31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e320:	d103      	bne.n	800e32a <xQueueReceive+0x13e>
 800e322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e324:	2200      	movs	r2, #0
 800e326:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e32a:	f002 f8bf 	bl	80104ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e32e:	1d3a      	adds	r2, r7, #4
 800e330:	f107 0310 	add.w	r3, r7, #16
 800e334:	4611      	mov	r1, r2
 800e336:	4618      	mov	r0, r3
 800e338:	f001 f8d0 	bl	800f4dc <xTaskCheckForTimeOut>
 800e33c:	4603      	mov	r3, r0
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d123      	bne.n	800e38a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e344:	f000 fa3e 	bl	800e7c4 <prvIsQueueEmpty>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d017      	beq.n	800e37e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e350:	3324      	adds	r3, #36	@ 0x24
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	4611      	mov	r1, r2
 800e356:	4618      	mov	r0, r3
 800e358:	f000 fff4 	bl	800f344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e35c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e35e:	f000 f9df 	bl	800e720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e362:	f000 fe21 	bl	800efa8 <xTaskResumeAll>
 800e366:	4603      	mov	r3, r0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d189      	bne.n	800e280 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e36c:	4b0f      	ldr	r3, [pc, #60]	@ (800e3ac <xQueueReceive+0x1c0>)
 800e36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e372:	601a      	str	r2, [r3, #0]
 800e374:	f3bf 8f4f 	dsb	sy
 800e378:	f3bf 8f6f 	isb	sy
 800e37c:	e780      	b.n	800e280 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e37e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e380:	f000 f9ce 	bl	800e720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e384:	f000 fe10 	bl	800efa8 <xTaskResumeAll>
 800e388:	e77a      	b.n	800e280 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e38a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e38c:	f000 f9c8 	bl	800e720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e390:	f000 fe0a 	bl	800efa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e394:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e396:	f000 fa15 	bl	800e7c4 <prvIsQueueEmpty>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f43f af6f 	beq.w	800e280 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e3a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3730      	adds	r7, #48	@ 0x30
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	e000ed04 	.word	0xe000ed04

0800e3b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b08e      	sub	sp, #56	@ 0x38
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d10b      	bne.n	800e3e4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800e3cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3d0:	f383 8811 	msr	BASEPRI, r3
 800e3d4:	f3bf 8f6f 	isb	sy
 800e3d8:	f3bf 8f4f 	dsb	sy
 800e3dc:	623b      	str	r3, [r7, #32]
}
 800e3de:	bf00      	nop
 800e3e0:	bf00      	nop
 800e3e2:	e7fd      	b.n	800e3e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d00b      	beq.n	800e404 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800e3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f0:	f383 8811 	msr	BASEPRI, r3
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	61fb      	str	r3, [r7, #28]
}
 800e3fe:	bf00      	nop
 800e400:	bf00      	nop
 800e402:	e7fd      	b.n	800e400 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e404:	f001 f9b6 	bl	800f774 <xTaskGetSchedulerState>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d102      	bne.n	800e414 <xQueueSemaphoreTake+0x64>
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d101      	bne.n	800e418 <xQueueSemaphoreTake+0x68>
 800e414:	2301      	movs	r3, #1
 800e416:	e000      	b.n	800e41a <xQueueSemaphoreTake+0x6a>
 800e418:	2300      	movs	r3, #0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d10b      	bne.n	800e436 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e422:	f383 8811 	msr	BASEPRI, r3
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f3bf 8f4f 	dsb	sy
 800e42e:	61bb      	str	r3, [r7, #24]
}
 800e430:	bf00      	nop
 800e432:	bf00      	nop
 800e434:	e7fd      	b.n	800e432 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e436:	f002 f807 	bl	8010448 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e43c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e43e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e442:	2b00      	cmp	r3, #0
 800e444:	d024      	beq.n	800e490 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e448:	1e5a      	subs	r2, r3, #1
 800e44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e44c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d104      	bne.n	800e460 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e456:	f001 fb07 	bl	800fa68 <pvTaskIncrementMutexHeldCount>
 800e45a:	4602      	mov	r2, r0
 800e45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e45e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e462:	691b      	ldr	r3, [r3, #16]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00f      	beq.n	800e488 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e46a:	3310      	adds	r3, #16
 800e46c:	4618      	mov	r0, r3
 800e46e:	f000 ffbb 	bl	800f3e8 <xTaskRemoveFromEventList>
 800e472:	4603      	mov	r3, r0
 800e474:	2b00      	cmp	r3, #0
 800e476:	d007      	beq.n	800e488 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e478:	4b54      	ldr	r3, [pc, #336]	@ (800e5cc <xQueueSemaphoreTake+0x21c>)
 800e47a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e47e:	601a      	str	r2, [r3, #0]
 800e480:	f3bf 8f4f 	dsb	sy
 800e484:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e488:	f002 f810 	bl	80104ac <vPortExitCritical>
				return pdPASS;
 800e48c:	2301      	movs	r3, #1
 800e48e:	e098      	b.n	800e5c2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d112      	bne.n	800e4bc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d00b      	beq.n	800e4b4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800e49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4a0:	f383 8811 	msr	BASEPRI, r3
 800e4a4:	f3bf 8f6f 	isb	sy
 800e4a8:	f3bf 8f4f 	dsb	sy
 800e4ac:	617b      	str	r3, [r7, #20]
}
 800e4ae:	bf00      	nop
 800e4b0:	bf00      	nop
 800e4b2:	e7fd      	b.n	800e4b0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e4b4:	f001 fffa 	bl	80104ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	e082      	b.n	800e5c2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d106      	bne.n	800e4d0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4c2:	f107 030c 	add.w	r3, r7, #12
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f000 fff2 	bl	800f4b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e4d0:	f001 ffec 	bl	80104ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e4d4:	f000 fd5a 	bl	800ef8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4d8:	f001 ffb6 	bl	8010448 <vPortEnterCritical>
 800e4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e4e2:	b25b      	sxtb	r3, r3
 800e4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4e8:	d103      	bne.n	800e4f2 <xQueueSemaphoreTake+0x142>
 800e4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e4f8:	b25b      	sxtb	r3, r3
 800e4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4fe:	d103      	bne.n	800e508 <xQueueSemaphoreTake+0x158>
 800e500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e502:	2200      	movs	r2, #0
 800e504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e508:	f001 ffd0 	bl	80104ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e50c:	463a      	mov	r2, r7
 800e50e:	f107 030c 	add.w	r3, r7, #12
 800e512:	4611      	mov	r1, r2
 800e514:	4618      	mov	r0, r3
 800e516:	f000 ffe1 	bl	800f4dc <xTaskCheckForTimeOut>
 800e51a:	4603      	mov	r3, r0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d132      	bne.n	800e586 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e520:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e522:	f000 f94f 	bl	800e7c4 <prvIsQueueEmpty>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d026      	beq.n	800e57a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d109      	bne.n	800e548 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e534:	f001 ff88 	bl	8010448 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e53a:	689b      	ldr	r3, [r3, #8]
 800e53c:	4618      	mov	r0, r3
 800e53e:	f001 f937 	bl	800f7b0 <xTaskPriorityInherit>
 800e542:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e544:	f001 ffb2 	bl	80104ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e54a:	3324      	adds	r3, #36	@ 0x24
 800e54c:	683a      	ldr	r2, [r7, #0]
 800e54e:	4611      	mov	r1, r2
 800e550:	4618      	mov	r0, r3
 800e552:	f000 fef7 	bl	800f344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e556:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e558:	f000 f8e2 	bl	800e720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e55c:	f000 fd24 	bl	800efa8 <xTaskResumeAll>
 800e560:	4603      	mov	r3, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	f47f af67 	bne.w	800e436 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e568:	4b18      	ldr	r3, [pc, #96]	@ (800e5cc <xQueueSemaphoreTake+0x21c>)
 800e56a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e56e:	601a      	str	r2, [r3, #0]
 800e570:	f3bf 8f4f 	dsb	sy
 800e574:	f3bf 8f6f 	isb	sy
 800e578:	e75d      	b.n	800e436 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e57a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e57c:	f000 f8d0 	bl	800e720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e580:	f000 fd12 	bl	800efa8 <xTaskResumeAll>
 800e584:	e757      	b.n	800e436 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e586:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e588:	f000 f8ca 	bl	800e720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e58c:	f000 fd0c 	bl	800efa8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e590:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e592:	f000 f917 	bl	800e7c4 <prvIsQueueEmpty>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f43f af4c 	beq.w	800e436 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d00d      	beq.n	800e5c0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e5a4:	f001 ff50 	bl	8010448 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e5a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5aa:	f000 f811 	bl	800e5d0 <prvGetDisinheritPriorityAfterTimeout>
 800e5ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b2:	689b      	ldr	r3, [r3, #8]
 800e5b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f001 f9d2 	bl	800f960 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e5bc:	f001 ff76 	bl	80104ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e5c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3738      	adds	r7, #56	@ 0x38
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	e000ed04 	.word	0xe000ed04

0800e5d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b085      	sub	sp, #20
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d006      	beq.n	800e5ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e5ea:	60fb      	str	r3, [r7, #12]
 800e5ec:	e001      	b.n	800e5f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
	}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3714      	adds	r7, #20
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b086      	sub	sp, #24
 800e604:	af00      	add	r7, sp, #0
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e60c:	2300      	movs	r3, #0
 800e60e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e614:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d10d      	bne.n	800e63a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d14d      	bne.n	800e6c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	689b      	ldr	r3, [r3, #8]
 800e62a:	4618      	mov	r0, r3
 800e62c:	f001 f928 	bl	800f880 <xTaskPriorityDisinherit>
 800e630:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2200      	movs	r2, #0
 800e636:	609a      	str	r2, [r3, #8]
 800e638:	e043      	b.n	800e6c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d119      	bne.n	800e674 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6858      	ldr	r0, [r3, #4]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e648:	461a      	mov	r2, r3
 800e64a:	68b9      	ldr	r1, [r7, #8]
 800e64c:	f003 f97f 	bl	801194e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	685a      	ldr	r2, [r3, #4]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e658:	441a      	add	r2, r3
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	685a      	ldr	r2, [r3, #4]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	429a      	cmp	r2, r3
 800e668:	d32b      	bcc.n	800e6c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	605a      	str	r2, [r3, #4]
 800e672:	e026      	b.n	800e6c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	68d8      	ldr	r0, [r3, #12]
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e67c:	461a      	mov	r2, r3
 800e67e:	68b9      	ldr	r1, [r7, #8]
 800e680:	f003 f965 	bl	801194e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	68da      	ldr	r2, [r3, #12]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e68c:	425b      	negs	r3, r3
 800e68e:	441a      	add	r2, r3
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	68da      	ldr	r2, [r3, #12]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d207      	bcs.n	800e6b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	689a      	ldr	r2, [r3, #8]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6a8:	425b      	negs	r3, r3
 800e6aa:	441a      	add	r2, r3
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b02      	cmp	r3, #2
 800e6b4:	d105      	bne.n	800e6c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d002      	beq.n	800e6c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	1c5a      	adds	r2, r3, #1
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e6ca:	697b      	ldr	r3, [r7, #20]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3718      	adds	r7, #24
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d018      	beq.n	800e718 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	68da      	ldr	r2, [r3, #12]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6ee:	441a      	add	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	68da      	ldr	r2, [r3, #12]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d303      	bcc.n	800e708 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	68d9      	ldr	r1, [r3, #12]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e710:	461a      	mov	r2, r3
 800e712:	6838      	ldr	r0, [r7, #0]
 800e714:	f003 f91b 	bl	801194e <memcpy>
	}
}
 800e718:	bf00      	nop
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e728:	f001 fe8e 	bl	8010448 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e732:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e734:	e011      	b.n	800e75a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d012      	beq.n	800e764 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	3324      	adds	r3, #36	@ 0x24
 800e742:	4618      	mov	r0, r3
 800e744:	f000 fe50 	bl	800f3e8 <xTaskRemoveFromEventList>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e74e:	f000 ff29 	bl	800f5a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e752:	7bfb      	ldrb	r3, [r7, #15]
 800e754:	3b01      	subs	r3, #1
 800e756:	b2db      	uxtb	r3, r3
 800e758:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e75a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	dce9      	bgt.n	800e736 <prvUnlockQueue+0x16>
 800e762:	e000      	b.n	800e766 <prvUnlockQueue+0x46>
					break;
 800e764:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	22ff      	movs	r2, #255	@ 0xff
 800e76a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e76e:	f001 fe9d 	bl	80104ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e772:	f001 fe69 	bl	8010448 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e77c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e77e:	e011      	b.n	800e7a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	691b      	ldr	r3, [r3, #16]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d012      	beq.n	800e7ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	3310      	adds	r3, #16
 800e78c:	4618      	mov	r0, r3
 800e78e:	f000 fe2b 	bl	800f3e8 <xTaskRemoveFromEventList>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d001      	beq.n	800e79c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e798:	f000 ff04 	bl	800f5a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e79c:	7bbb      	ldrb	r3, [r7, #14]
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e7a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	dce9      	bgt.n	800e780 <prvUnlockQueue+0x60>
 800e7ac:	e000      	b.n	800e7b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e7ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	22ff      	movs	r2, #255	@ 0xff
 800e7b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e7b8:	f001 fe78 	bl	80104ac <vPortExitCritical>
}
 800e7bc:	bf00      	nop
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e7cc:	f001 fe3c 	bl	8010448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d102      	bne.n	800e7de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	60fb      	str	r3, [r7, #12]
 800e7dc:	e001      	b.n	800e7e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e7e2:	f001 fe63 	bl	80104ac <vPortExitCritical>

	return xReturn;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e7f8:	f001 fe26 	bl	8010448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e804:	429a      	cmp	r2, r3
 800e806:	d102      	bne.n	800e80e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e808:	2301      	movs	r3, #1
 800e80a:	60fb      	str	r3, [r7, #12]
 800e80c:	e001      	b.n	800e812 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e80e:	2300      	movs	r3, #0
 800e810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e812:	f001 fe4b 	bl	80104ac <vPortExitCritical>

	return xReturn;
 800e816:	68fb      	ldr	r3, [r7, #12]
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3710      	adds	r7, #16
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e820:	b480      	push	{r7}
 800e822:	b085      	sub	sp, #20
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e82a:	2300      	movs	r3, #0
 800e82c:	60fb      	str	r3, [r7, #12]
 800e82e:	e014      	b.n	800e85a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e830:	4a0f      	ldr	r2, [pc, #60]	@ (800e870 <vQueueAddToRegistry+0x50>)
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d10b      	bne.n	800e854 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e83c:	490c      	ldr	r1, [pc, #48]	@ (800e870 <vQueueAddToRegistry+0x50>)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	683a      	ldr	r2, [r7, #0]
 800e842:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e846:	4a0a      	ldr	r2, [pc, #40]	@ (800e870 <vQueueAddToRegistry+0x50>)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	00db      	lsls	r3, r3, #3
 800e84c:	4413      	add	r3, r2
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e852:	e006      	b.n	800e862 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	3301      	adds	r3, #1
 800e858:	60fb      	str	r3, [r7, #12]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2b07      	cmp	r3, #7
 800e85e:	d9e7      	bls.n	800e830 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e860:	bf00      	nop
 800e862:	bf00      	nop
 800e864:	3714      	adds	r7, #20
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	20002cb0 	.word	0x20002cb0

0800e874 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e874:	b580      	push	{r7, lr}
 800e876:	b086      	sub	sp, #24
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	60b9      	str	r1, [r7, #8]
 800e87e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e884:	f001 fde0 	bl	8010448 <vPortEnterCritical>
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e88e:	b25b      	sxtb	r3, r3
 800e890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e894:	d103      	bne.n	800e89e <vQueueWaitForMessageRestricted+0x2a>
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e8a4:	b25b      	sxtb	r3, r3
 800e8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8aa:	d103      	bne.n	800e8b4 <vQueueWaitForMessageRestricted+0x40>
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e8b4:	f001 fdfa 	bl	80104ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d106      	bne.n	800e8ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	3324      	adds	r3, #36	@ 0x24
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	68b9      	ldr	r1, [r7, #8]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f000 fd61 	bl	800f390 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e8ce:	6978      	ldr	r0, [r7, #20]
 800e8d0:	f7ff ff26 	bl	800e720 <prvUnlockQueue>
	}
 800e8d4:	bf00      	nop
 800e8d6:	3718      	adds	r7, #24
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b08e      	sub	sp, #56	@ 0x38
 800e8e0:	af04      	add	r7, sp, #16
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	607a      	str	r2, [r7, #4]
 800e8e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d10b      	bne.n	800e908 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8f4:	f383 8811 	msr	BASEPRI, r3
 800e8f8:	f3bf 8f6f 	isb	sy
 800e8fc:	f3bf 8f4f 	dsb	sy
 800e900:	623b      	str	r3, [r7, #32]
}
 800e902:	bf00      	nop
 800e904:	bf00      	nop
 800e906:	e7fd      	b.n	800e904 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d10b      	bne.n	800e926 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	61fb      	str	r3, [r7, #28]
}
 800e920:	bf00      	nop
 800e922:	bf00      	nop
 800e924:	e7fd      	b.n	800e922 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e926:	23a8      	movs	r3, #168	@ 0xa8
 800e928:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	2ba8      	cmp	r3, #168	@ 0xa8
 800e92e:	d00b      	beq.n	800e948 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e934:	f383 8811 	msr	BASEPRI, r3
 800e938:	f3bf 8f6f 	isb	sy
 800e93c:	f3bf 8f4f 	dsb	sy
 800e940:	61bb      	str	r3, [r7, #24]
}
 800e942:	bf00      	nop
 800e944:	bf00      	nop
 800e946:	e7fd      	b.n	800e944 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e948:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d01e      	beq.n	800e98e <xTaskCreateStatic+0xb2>
 800e950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e952:	2b00      	cmp	r3, #0
 800e954:	d01b      	beq.n	800e98e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e958:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e95c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e95e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e962:	2202      	movs	r2, #2
 800e964:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e968:	2300      	movs	r3, #0
 800e96a:	9303      	str	r3, [sp, #12]
 800e96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e96e:	9302      	str	r3, [sp, #8]
 800e970:	f107 0314 	add.w	r3, r7, #20
 800e974:	9301      	str	r3, [sp, #4]
 800e976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	687a      	ldr	r2, [r7, #4]
 800e97e:	68b9      	ldr	r1, [r7, #8]
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f000 f851 	bl	800ea28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e986:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e988:	f000 f8f6 	bl	800eb78 <prvAddNewTaskToReadyList>
 800e98c:	e001      	b.n	800e992 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e98e:	2300      	movs	r3, #0
 800e990:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e992:	697b      	ldr	r3, [r7, #20]
	}
 800e994:	4618      	mov	r0, r3
 800e996:	3728      	adds	r7, #40	@ 0x28
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b08c      	sub	sp, #48	@ 0x30
 800e9a0:	af04      	add	r7, sp, #16
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	603b      	str	r3, [r7, #0]
 800e9a8:	4613      	mov	r3, r2
 800e9aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e9ac:	88fb      	ldrh	r3, [r7, #6]
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f001 fe6b 	bl	801068c <pvPortMalloc>
 800e9b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d00e      	beq.n	800e9dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e9be:	20a8      	movs	r0, #168	@ 0xa8
 800e9c0:	f001 fe64 	bl	801068c <pvPortMalloc>
 800e9c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d003      	beq.n	800e9d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	697a      	ldr	r2, [r7, #20]
 800e9d0:	631a      	str	r2, [r3, #48]	@ 0x30
 800e9d2:	e005      	b.n	800e9e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e9d4:	6978      	ldr	r0, [r7, #20]
 800e9d6:	f001 ff27 	bl	8010828 <vPortFree>
 800e9da:	e001      	b.n	800e9e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d017      	beq.n	800ea16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e9ee:	88fa      	ldrh	r2, [r7, #6]
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	9303      	str	r3, [sp, #12]
 800e9f4:	69fb      	ldr	r3, [r7, #28]
 800e9f6:	9302      	str	r3, [sp, #8]
 800e9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9fa:	9301      	str	r3, [sp, #4]
 800e9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9fe:	9300      	str	r3, [sp, #0]
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	68b9      	ldr	r1, [r7, #8]
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f000 f80f 	bl	800ea28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ea0a:	69f8      	ldr	r0, [r7, #28]
 800ea0c:	f000 f8b4 	bl	800eb78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ea10:	2301      	movs	r3, #1
 800ea12:	61bb      	str	r3, [r7, #24]
 800ea14:	e002      	b.n	800ea1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ea16:	f04f 33ff 	mov.w	r3, #4294967295
 800ea1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ea1c:	69bb      	ldr	r3, [r7, #24]
	}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3720      	adds	r7, #32
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
	...

0800ea28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b088      	sub	sp, #32
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	60b9      	str	r1, [r7, #8]
 800ea32:	607a      	str	r2, [r7, #4]
 800ea34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ea36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea38:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	009b      	lsls	r3, r3, #2
 800ea3e:	461a      	mov	r2, r3
 800ea40:	21a5      	movs	r1, #165	@ 0xa5
 800ea42:	f002 feb2 	bl	80117aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ea46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea50:	3b01      	subs	r3, #1
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	4413      	add	r3, r2
 800ea56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	f023 0307 	bic.w	r3, r3, #7
 800ea5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	f003 0307 	and.w	r3, r3, #7
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00b      	beq.n	800ea82 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ea6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea6e:	f383 8811 	msr	BASEPRI, r3
 800ea72:	f3bf 8f6f 	isb	sy
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	617b      	str	r3, [r7, #20]
}
 800ea7c:	bf00      	nop
 800ea7e:	bf00      	nop
 800ea80:	e7fd      	b.n	800ea7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d01f      	beq.n	800eac8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea88:	2300      	movs	r3, #0
 800ea8a:	61fb      	str	r3, [r7, #28]
 800ea8c:	e012      	b.n	800eab4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ea8e:	68ba      	ldr	r2, [r7, #8]
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	4413      	add	r3, r2
 800ea94:	7819      	ldrb	r1, [r3, #0]
 800ea96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	3334      	adds	r3, #52	@ 0x34
 800ea9e:	460a      	mov	r2, r1
 800eaa0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eaa2:	68ba      	ldr	r2, [r7, #8]
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d006      	beq.n	800eabc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	3301      	adds	r3, #1
 800eab2:	61fb      	str	r3, [r7, #28]
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	2b0f      	cmp	r3, #15
 800eab8:	d9e9      	bls.n	800ea8e <prvInitialiseNewTask+0x66>
 800eaba:	e000      	b.n	800eabe <prvInitialiseNewTask+0x96>
			{
				break;
 800eabc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac0:	2200      	movs	r2, #0
 800eac2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eac6:	e003      	b.n	800ead0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaca:	2200      	movs	r2, #0
 800eacc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ead0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead2:	2b37      	cmp	r3, #55	@ 0x37
 800ead4:	d901      	bls.n	800eada <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ead6:	2337      	movs	r3, #55	@ 0x37
 800ead8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eadc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eade:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eae4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800eae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae8:	2200      	movs	r2, #0
 800eaea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eaec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaee:	3304      	adds	r3, #4
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7ff f801 	bl	800daf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaf8:	3318      	adds	r3, #24
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fe fffc 	bl	800daf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eb00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eb0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb14:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb28:	3354      	adds	r3, #84	@ 0x54
 800eb2a:	224c      	movs	r2, #76	@ 0x4c
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f002 fe3b 	bl	80117aa <memset>
 800eb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb36:	4a0d      	ldr	r2, [pc, #52]	@ (800eb6c <prvInitialiseNewTask+0x144>)
 800eb38:	659a      	str	r2, [r3, #88]	@ 0x58
 800eb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb3c:	4a0c      	ldr	r2, [pc, #48]	@ (800eb70 <prvInitialiseNewTask+0x148>)
 800eb3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800eb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb42:	4a0c      	ldr	r2, [pc, #48]	@ (800eb74 <prvInitialiseNewTask+0x14c>)
 800eb44:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eb46:	683a      	ldr	r2, [r7, #0]
 800eb48:	68f9      	ldr	r1, [r7, #12]
 800eb4a:	69b8      	ldr	r0, [r7, #24]
 800eb4c:	f001 fb4e 	bl	80101ec <pxPortInitialiseStack>
 800eb50:	4602      	mov	r2, r0
 800eb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d002      	beq.n	800eb62 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb62:	bf00      	nop
 800eb64:	3720      	adds	r7, #32
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	20008324 	.word	0x20008324
 800eb70:	2000838c 	.word	0x2000838c
 800eb74:	200083f4 	.word	0x200083f4

0800eb78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eb80:	f001 fc62 	bl	8010448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eb84:	4b2d      	ldr	r3, [pc, #180]	@ (800ec3c <prvAddNewTaskToReadyList+0xc4>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	3301      	adds	r3, #1
 800eb8a:	4a2c      	ldr	r2, [pc, #176]	@ (800ec3c <prvAddNewTaskToReadyList+0xc4>)
 800eb8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eb8e:	4b2c      	ldr	r3, [pc, #176]	@ (800ec40 <prvAddNewTaskToReadyList+0xc8>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d109      	bne.n	800ebaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eb96:	4a2a      	ldr	r2, [pc, #168]	@ (800ec40 <prvAddNewTaskToReadyList+0xc8>)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eb9c:	4b27      	ldr	r3, [pc, #156]	@ (800ec3c <prvAddNewTaskToReadyList+0xc4>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d110      	bne.n	800ebc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eba4:	f000 fd22 	bl	800f5ec <prvInitialiseTaskLists>
 800eba8:	e00d      	b.n	800ebc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ebaa:	4b26      	ldr	r3, [pc, #152]	@ (800ec44 <prvAddNewTaskToReadyList+0xcc>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d109      	bne.n	800ebc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ebb2:	4b23      	ldr	r3, [pc, #140]	@ (800ec40 <prvAddNewTaskToReadyList+0xc8>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d802      	bhi.n	800ebc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ebc0:	4a1f      	ldr	r2, [pc, #124]	@ (800ec40 <prvAddNewTaskToReadyList+0xc8>)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ebc6:	4b20      	ldr	r3, [pc, #128]	@ (800ec48 <prvAddNewTaskToReadyList+0xd0>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	4a1e      	ldr	r2, [pc, #120]	@ (800ec48 <prvAddNewTaskToReadyList+0xd0>)
 800ebce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ebd0:	4b1d      	ldr	r3, [pc, #116]	@ (800ec48 <prvAddNewTaskToReadyList+0xd0>)
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebdc:	4b1b      	ldr	r3, [pc, #108]	@ (800ec4c <prvAddNewTaskToReadyList+0xd4>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d903      	bls.n	800ebec <prvAddNewTaskToReadyList+0x74>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebe8:	4a18      	ldr	r2, [pc, #96]	@ (800ec4c <prvAddNewTaskToReadyList+0xd4>)
 800ebea:	6013      	str	r3, [r2, #0]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebf0:	4613      	mov	r3, r2
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	4413      	add	r3, r2
 800ebf6:	009b      	lsls	r3, r3, #2
 800ebf8:	4a15      	ldr	r2, [pc, #84]	@ (800ec50 <prvAddNewTaskToReadyList+0xd8>)
 800ebfa:	441a      	add	r2, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	3304      	adds	r3, #4
 800ec00:	4619      	mov	r1, r3
 800ec02:	4610      	mov	r0, r2
 800ec04:	f7fe ff85 	bl	800db12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ec08:	f001 fc50 	bl	80104ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ec0c:	4b0d      	ldr	r3, [pc, #52]	@ (800ec44 <prvAddNewTaskToReadyList+0xcc>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d00e      	beq.n	800ec32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ec14:	4b0a      	ldr	r3, [pc, #40]	@ (800ec40 <prvAddNewTaskToReadyList+0xc8>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d207      	bcs.n	800ec32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ec22:	4b0c      	ldr	r3, [pc, #48]	@ (800ec54 <prvAddNewTaskToReadyList+0xdc>)
 800ec24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec28:	601a      	str	r2, [r3, #0]
 800ec2a:	f3bf 8f4f 	dsb	sy
 800ec2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec32:	bf00      	nop
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	200031c4 	.word	0x200031c4
 800ec40:	20002cf0 	.word	0x20002cf0
 800ec44:	200031d0 	.word	0x200031d0
 800ec48:	200031e0 	.word	0x200031e0
 800ec4c:	200031cc 	.word	0x200031cc
 800ec50:	20002cf4 	.word	0x20002cf4
 800ec54:	e000ed04 	.word	0xe000ed04

0800ec58 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ec60:	f001 fbf2 	bl	8010448 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d102      	bne.n	800ec70 <vTaskDelete+0x18>
 800ec6a:	4b2d      	ldr	r3, [pc, #180]	@ (800ed20 <vTaskDelete+0xc8>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	e000      	b.n	800ec72 <vTaskDelete+0x1a>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	3304      	adds	r3, #4
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fe ffa7 	bl	800dbcc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d004      	beq.n	800ec90 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	3318      	adds	r3, #24
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fe ff9e 	bl	800dbcc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ec90:	4b24      	ldr	r3, [pc, #144]	@ (800ed24 <vTaskDelete+0xcc>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	3301      	adds	r3, #1
 800ec96:	4a23      	ldr	r2, [pc, #140]	@ (800ed24 <vTaskDelete+0xcc>)
 800ec98:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ec9a:	4b21      	ldr	r3, [pc, #132]	@ (800ed20 <vTaskDelete+0xc8>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	68fa      	ldr	r2, [r7, #12]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d10b      	bne.n	800ecbc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	3304      	adds	r3, #4
 800eca8:	4619      	mov	r1, r3
 800ecaa:	481f      	ldr	r0, [pc, #124]	@ (800ed28 <vTaskDelete+0xd0>)
 800ecac:	f7fe ff31 	bl	800db12 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ecb0:	4b1e      	ldr	r3, [pc, #120]	@ (800ed2c <vTaskDelete+0xd4>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	4a1d      	ldr	r2, [pc, #116]	@ (800ed2c <vTaskDelete+0xd4>)
 800ecb8:	6013      	str	r3, [r2, #0]
 800ecba:	e009      	b.n	800ecd0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ecbc:	4b1c      	ldr	r3, [pc, #112]	@ (800ed30 <vTaskDelete+0xd8>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	4a1b      	ldr	r2, [pc, #108]	@ (800ed30 <vTaskDelete+0xd8>)
 800ecc4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ecc6:	68f8      	ldr	r0, [r7, #12]
 800ecc8:	f000 fcfe 	bl	800f6c8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800eccc:	f000 fd32 	bl	800f734 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ecd0:	f001 fbec 	bl	80104ac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ecd4:	4b17      	ldr	r3, [pc, #92]	@ (800ed34 <vTaskDelete+0xdc>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d01c      	beq.n	800ed16 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800ecdc:	4b10      	ldr	r3, [pc, #64]	@ (800ed20 <vTaskDelete+0xc8>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	68fa      	ldr	r2, [r7, #12]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d117      	bne.n	800ed16 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ece6:	4b14      	ldr	r3, [pc, #80]	@ (800ed38 <vTaskDelete+0xe0>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00b      	beq.n	800ed06 <vTaskDelete+0xae>
	__asm volatile
 800ecee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf2:	f383 8811 	msr	BASEPRI, r3
 800ecf6:	f3bf 8f6f 	isb	sy
 800ecfa:	f3bf 8f4f 	dsb	sy
 800ecfe:	60bb      	str	r3, [r7, #8]
}
 800ed00:	bf00      	nop
 800ed02:	bf00      	nop
 800ed04:	e7fd      	b.n	800ed02 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ed06:	4b0d      	ldr	r3, [pc, #52]	@ (800ed3c <vTaskDelete+0xe4>)
 800ed08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed0c:	601a      	str	r2, [r3, #0]
 800ed0e:	f3bf 8f4f 	dsb	sy
 800ed12:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ed16:	bf00      	nop
 800ed18:	3710      	adds	r7, #16
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	20002cf0 	.word	0x20002cf0
 800ed24:	200031e0 	.word	0x200031e0
 800ed28:	20003198 	.word	0x20003198
 800ed2c:	200031ac 	.word	0x200031ac
 800ed30:	200031c4 	.word	0x200031c4
 800ed34:	200031d0 	.word	0x200031d0
 800ed38:	200031ec 	.word	0x200031ec
 800ed3c:	e000ed04 	.word	0xe000ed04

0800ed40 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b08a      	sub	sp, #40	@ 0x28
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d10b      	bne.n	800ed6c <vTaskDelayUntil+0x2c>
	__asm volatile
 800ed54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed58:	f383 8811 	msr	BASEPRI, r3
 800ed5c:	f3bf 8f6f 	isb	sy
 800ed60:	f3bf 8f4f 	dsb	sy
 800ed64:	617b      	str	r3, [r7, #20]
}
 800ed66:	bf00      	nop
 800ed68:	bf00      	nop
 800ed6a:	e7fd      	b.n	800ed68 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10b      	bne.n	800ed8a <vTaskDelayUntil+0x4a>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	613b      	str	r3, [r7, #16]
}
 800ed84:	bf00      	nop
 800ed86:	bf00      	nop
 800ed88:	e7fd      	b.n	800ed86 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800ed8a:	4b2a      	ldr	r3, [pc, #168]	@ (800ee34 <vTaskDelayUntil+0xf4>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d00b      	beq.n	800edaa <vTaskDelayUntil+0x6a>
	__asm volatile
 800ed92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed96:	f383 8811 	msr	BASEPRI, r3
 800ed9a:	f3bf 8f6f 	isb	sy
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	60fb      	str	r3, [r7, #12]
}
 800eda4:	bf00      	nop
 800eda6:	bf00      	nop
 800eda8:	e7fd      	b.n	800eda6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800edaa:	f000 f8ef 	bl	800ef8c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800edae:	4b22      	ldr	r3, [pc, #136]	@ (800ee38 <vTaskDelayUntil+0xf8>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	683a      	ldr	r2, [r7, #0]
 800edba:	4413      	add	r3, r2
 800edbc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	6a3a      	ldr	r2, [r7, #32]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d20b      	bcs.n	800ede0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	69fa      	ldr	r2, [r7, #28]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d211      	bcs.n	800edf6 <vTaskDelayUntil+0xb6>
 800edd2:	69fa      	ldr	r2, [r7, #28]
 800edd4:	6a3b      	ldr	r3, [r7, #32]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d90d      	bls.n	800edf6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800edda:	2301      	movs	r3, #1
 800eddc:	627b      	str	r3, [r7, #36]	@ 0x24
 800edde:	e00a      	b.n	800edf6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	69fa      	ldr	r2, [r7, #28]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d303      	bcc.n	800edf2 <vTaskDelayUntil+0xb2>
 800edea:	69fa      	ldr	r2, [r7, #28]
 800edec:	6a3b      	ldr	r3, [r7, #32]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d901      	bls.n	800edf6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800edf2:	2301      	movs	r3, #1
 800edf4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	69fa      	ldr	r2, [r7, #28]
 800edfa:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800edfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d006      	beq.n	800ee10 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ee02:	69fa      	ldr	r2, [r7, #28]
 800ee04:	6a3b      	ldr	r3, [r7, #32]
 800ee06:	1ad3      	subs	r3, r2, r3
 800ee08:	2100      	movs	r1, #0
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f000 fe40 	bl	800fa90 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ee10:	f000 f8ca 	bl	800efa8 <xTaskResumeAll>
 800ee14:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d107      	bne.n	800ee2c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800ee1c:	4b07      	ldr	r3, [pc, #28]	@ (800ee3c <vTaskDelayUntil+0xfc>)
 800ee1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee22:	601a      	str	r2, [r3, #0]
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee2c:	bf00      	nop
 800ee2e:	3728      	adds	r7, #40	@ 0x28
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	200031ec 	.word	0x200031ec
 800ee38:	200031c8 	.word	0x200031c8
 800ee3c:	e000ed04 	.word	0xe000ed04

0800ee40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d018      	beq.n	800ee84 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ee52:	4b14      	ldr	r3, [pc, #80]	@ (800eea4 <vTaskDelay+0x64>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00b      	beq.n	800ee72 <vTaskDelay+0x32>
	__asm volatile
 800ee5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee5e:	f383 8811 	msr	BASEPRI, r3
 800ee62:	f3bf 8f6f 	isb	sy
 800ee66:	f3bf 8f4f 	dsb	sy
 800ee6a:	60bb      	str	r3, [r7, #8]
}
 800ee6c:	bf00      	nop
 800ee6e:	bf00      	nop
 800ee70:	e7fd      	b.n	800ee6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ee72:	f000 f88b 	bl	800ef8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ee76:	2100      	movs	r1, #0
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f000 fe09 	bl	800fa90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ee7e:	f000 f893 	bl	800efa8 <xTaskResumeAll>
 800ee82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d107      	bne.n	800ee9a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ee8a:	4b07      	ldr	r3, [pc, #28]	@ (800eea8 <vTaskDelay+0x68>)
 800ee8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee90:	601a      	str	r2, [r3, #0]
 800ee92:	f3bf 8f4f 	dsb	sy
 800ee96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee9a:	bf00      	nop
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	200031ec 	.word	0x200031ec
 800eea8:	e000ed04 	.word	0xe000ed04

0800eeac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b08a      	sub	sp, #40	@ 0x28
 800eeb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eeba:	463a      	mov	r2, r7
 800eebc:	1d39      	adds	r1, r7, #4
 800eebe:	f107 0308 	add.w	r3, r7, #8
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fe fdc4 	bl	800da50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eec8:	6839      	ldr	r1, [r7, #0]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	68ba      	ldr	r2, [r7, #8]
 800eece:	9202      	str	r2, [sp, #8]
 800eed0:	9301      	str	r3, [sp, #4]
 800eed2:	2300      	movs	r3, #0
 800eed4:	9300      	str	r3, [sp, #0]
 800eed6:	2300      	movs	r3, #0
 800eed8:	460a      	mov	r2, r1
 800eeda:	4924      	ldr	r1, [pc, #144]	@ (800ef6c <vTaskStartScheduler+0xc0>)
 800eedc:	4824      	ldr	r0, [pc, #144]	@ (800ef70 <vTaskStartScheduler+0xc4>)
 800eede:	f7ff fcfd 	bl	800e8dc <xTaskCreateStatic>
 800eee2:	4603      	mov	r3, r0
 800eee4:	4a23      	ldr	r2, [pc, #140]	@ (800ef74 <vTaskStartScheduler+0xc8>)
 800eee6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800eee8:	4b22      	ldr	r3, [pc, #136]	@ (800ef74 <vTaskStartScheduler+0xc8>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d002      	beq.n	800eef6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800eef0:	2301      	movs	r3, #1
 800eef2:	617b      	str	r3, [r7, #20]
 800eef4:	e001      	b.n	800eefa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800eef6:	2300      	movs	r3, #0
 800eef8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	d102      	bne.n	800ef06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ef00:	f000 fe1a 	bl	800fb38 <xTimerCreateTimerTask>
 800ef04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	2b01      	cmp	r3, #1
 800ef0a:	d11b      	bne.n	800ef44 <vTaskStartScheduler+0x98>
	__asm volatile
 800ef0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef10:	f383 8811 	msr	BASEPRI, r3
 800ef14:	f3bf 8f6f 	isb	sy
 800ef18:	f3bf 8f4f 	dsb	sy
 800ef1c:	613b      	str	r3, [r7, #16]
}
 800ef1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ef20:	4b15      	ldr	r3, [pc, #84]	@ (800ef78 <vTaskStartScheduler+0xcc>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	3354      	adds	r3, #84	@ 0x54
 800ef26:	4a15      	ldr	r2, [pc, #84]	@ (800ef7c <vTaskStartScheduler+0xd0>)
 800ef28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ef2a:	4b15      	ldr	r3, [pc, #84]	@ (800ef80 <vTaskStartScheduler+0xd4>)
 800ef2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ef32:	4b14      	ldr	r3, [pc, #80]	@ (800ef84 <vTaskStartScheduler+0xd8>)
 800ef34:	2201      	movs	r2, #1
 800ef36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ef38:	4b13      	ldr	r3, [pc, #76]	@ (800ef88 <vTaskStartScheduler+0xdc>)
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ef3e:	f001 f9df 	bl	8010300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ef42:	e00f      	b.n	800ef64 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef4a:	d10b      	bne.n	800ef64 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ef4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef50:	f383 8811 	msr	BASEPRI, r3
 800ef54:	f3bf 8f6f 	isb	sy
 800ef58:	f3bf 8f4f 	dsb	sy
 800ef5c:	60fb      	str	r3, [r7, #12]
}
 800ef5e:	bf00      	nop
 800ef60:	bf00      	nop
 800ef62:	e7fd      	b.n	800ef60 <vTaskStartScheduler+0xb4>
}
 800ef64:	bf00      	nop
 800ef66:	3718      	adds	r7, #24
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	08012c3c 	.word	0x08012c3c
 800ef70:	0800f5bd 	.word	0x0800f5bd
 800ef74:	200031e8 	.word	0x200031e8
 800ef78:	20002cf0 	.word	0x20002cf0
 800ef7c:	20000124 	.word	0x20000124
 800ef80:	200031e4 	.word	0x200031e4
 800ef84:	200031d0 	.word	0x200031d0
 800ef88:	200031c8 	.word	0x200031c8

0800ef8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ef90:	4b04      	ldr	r3, [pc, #16]	@ (800efa4 <vTaskSuspendAll+0x18>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	3301      	adds	r3, #1
 800ef96:	4a03      	ldr	r2, [pc, #12]	@ (800efa4 <vTaskSuspendAll+0x18>)
 800ef98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ef9a:	bf00      	nop
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr
 800efa4:	200031ec 	.word	0x200031ec

0800efa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800efae:	2300      	movs	r3, #0
 800efb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800efb2:	2300      	movs	r3, #0
 800efb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800efb6:	4b42      	ldr	r3, [pc, #264]	@ (800f0c0 <xTaskResumeAll+0x118>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d10b      	bne.n	800efd6 <xTaskResumeAll+0x2e>
	__asm volatile
 800efbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	603b      	str	r3, [r7, #0]
}
 800efd0:	bf00      	nop
 800efd2:	bf00      	nop
 800efd4:	e7fd      	b.n	800efd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800efd6:	f001 fa37 	bl	8010448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800efda:	4b39      	ldr	r3, [pc, #228]	@ (800f0c0 <xTaskResumeAll+0x118>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	3b01      	subs	r3, #1
 800efe0:	4a37      	ldr	r2, [pc, #220]	@ (800f0c0 <xTaskResumeAll+0x118>)
 800efe2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efe4:	4b36      	ldr	r3, [pc, #216]	@ (800f0c0 <xTaskResumeAll+0x118>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d162      	bne.n	800f0b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800efec:	4b35      	ldr	r3, [pc, #212]	@ (800f0c4 <xTaskResumeAll+0x11c>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d05e      	beq.n	800f0b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eff4:	e02f      	b.n	800f056 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eff6:	4b34      	ldr	r3, [pc, #208]	@ (800f0c8 <xTaskResumeAll+0x120>)
 800eff8:	68db      	ldr	r3, [r3, #12]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	3318      	adds	r3, #24
 800f002:	4618      	mov	r0, r3
 800f004:	f7fe fde2 	bl	800dbcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	3304      	adds	r3, #4
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fe fddd 	bl	800dbcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f016:	4b2d      	ldr	r3, [pc, #180]	@ (800f0cc <xTaskResumeAll+0x124>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d903      	bls.n	800f026 <xTaskResumeAll+0x7e>
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f022:	4a2a      	ldr	r2, [pc, #168]	@ (800f0cc <xTaskResumeAll+0x124>)
 800f024:	6013      	str	r3, [r2, #0]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f02a:	4613      	mov	r3, r2
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	4413      	add	r3, r2
 800f030:	009b      	lsls	r3, r3, #2
 800f032:	4a27      	ldr	r2, [pc, #156]	@ (800f0d0 <xTaskResumeAll+0x128>)
 800f034:	441a      	add	r2, r3
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	3304      	adds	r3, #4
 800f03a:	4619      	mov	r1, r3
 800f03c:	4610      	mov	r0, r2
 800f03e:	f7fe fd68 	bl	800db12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f046:	4b23      	ldr	r3, [pc, #140]	@ (800f0d4 <xTaskResumeAll+0x12c>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d302      	bcc.n	800f056 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f050:	4b21      	ldr	r3, [pc, #132]	@ (800f0d8 <xTaskResumeAll+0x130>)
 800f052:	2201      	movs	r2, #1
 800f054:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f056:	4b1c      	ldr	r3, [pc, #112]	@ (800f0c8 <xTaskResumeAll+0x120>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d1cb      	bne.n	800eff6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d001      	beq.n	800f068 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f064:	f000 fb66 	bl	800f734 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f068:	4b1c      	ldr	r3, [pc, #112]	@ (800f0dc <xTaskResumeAll+0x134>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d010      	beq.n	800f096 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f074:	f000 f846 	bl	800f104 <xTaskIncrementTick>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d002      	beq.n	800f084 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f07e:	4b16      	ldr	r3, [pc, #88]	@ (800f0d8 <xTaskResumeAll+0x130>)
 800f080:	2201      	movs	r2, #1
 800f082:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	3b01      	subs	r3, #1
 800f088:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d1f1      	bne.n	800f074 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800f090:	4b12      	ldr	r3, [pc, #72]	@ (800f0dc <xTaskResumeAll+0x134>)
 800f092:	2200      	movs	r2, #0
 800f094:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f096:	4b10      	ldr	r3, [pc, #64]	@ (800f0d8 <xTaskResumeAll+0x130>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d009      	beq.n	800f0b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f09e:	2301      	movs	r3, #1
 800f0a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f0a2:	4b0f      	ldr	r3, [pc, #60]	@ (800f0e0 <xTaskResumeAll+0x138>)
 800f0a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0a8:	601a      	str	r2, [r3, #0]
 800f0aa:	f3bf 8f4f 	dsb	sy
 800f0ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0b2:	f001 f9fb 	bl	80104ac <vPortExitCritical>

	return xAlreadyYielded;
 800f0b6:	68bb      	ldr	r3, [r7, #8]
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3710      	adds	r7, #16
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	200031ec 	.word	0x200031ec
 800f0c4:	200031c4 	.word	0x200031c4
 800f0c8:	20003184 	.word	0x20003184
 800f0cc:	200031cc 	.word	0x200031cc
 800f0d0:	20002cf4 	.word	0x20002cf4
 800f0d4:	20002cf0 	.word	0x20002cf0
 800f0d8:	200031d8 	.word	0x200031d8
 800f0dc:	200031d4 	.word	0x200031d4
 800f0e0:	e000ed04 	.word	0xe000ed04

0800f0e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f0ea:	4b05      	ldr	r3, [pc, #20]	@ (800f100 <xTaskGetTickCount+0x1c>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f0f0:	687b      	ldr	r3, [r7, #4]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	370c      	adds	r7, #12
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop
 800f100:	200031c8 	.word	0x200031c8

0800f104 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b086      	sub	sp, #24
 800f108:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f10a:	2300      	movs	r3, #0
 800f10c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f10e:	4b4f      	ldr	r3, [pc, #316]	@ (800f24c <xTaskIncrementTick+0x148>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	f040 8090 	bne.w	800f238 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f118:	4b4d      	ldr	r3, [pc, #308]	@ (800f250 <xTaskIncrementTick+0x14c>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	3301      	adds	r3, #1
 800f11e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f120:	4a4b      	ldr	r2, [pc, #300]	@ (800f250 <xTaskIncrementTick+0x14c>)
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d121      	bne.n	800f170 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f12c:	4b49      	ldr	r3, [pc, #292]	@ (800f254 <xTaskIncrementTick+0x150>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d00b      	beq.n	800f14e <xTaskIncrementTick+0x4a>
	__asm volatile
 800f136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f13a:	f383 8811 	msr	BASEPRI, r3
 800f13e:	f3bf 8f6f 	isb	sy
 800f142:	f3bf 8f4f 	dsb	sy
 800f146:	603b      	str	r3, [r7, #0]
}
 800f148:	bf00      	nop
 800f14a:	bf00      	nop
 800f14c:	e7fd      	b.n	800f14a <xTaskIncrementTick+0x46>
 800f14e:	4b41      	ldr	r3, [pc, #260]	@ (800f254 <xTaskIncrementTick+0x150>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	60fb      	str	r3, [r7, #12]
 800f154:	4b40      	ldr	r3, [pc, #256]	@ (800f258 <xTaskIncrementTick+0x154>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4a3e      	ldr	r2, [pc, #248]	@ (800f254 <xTaskIncrementTick+0x150>)
 800f15a:	6013      	str	r3, [r2, #0]
 800f15c:	4a3e      	ldr	r2, [pc, #248]	@ (800f258 <xTaskIncrementTick+0x154>)
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	6013      	str	r3, [r2, #0]
 800f162:	4b3e      	ldr	r3, [pc, #248]	@ (800f25c <xTaskIncrementTick+0x158>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	3301      	adds	r3, #1
 800f168:	4a3c      	ldr	r2, [pc, #240]	@ (800f25c <xTaskIncrementTick+0x158>)
 800f16a:	6013      	str	r3, [r2, #0]
 800f16c:	f000 fae2 	bl	800f734 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f170:	4b3b      	ldr	r3, [pc, #236]	@ (800f260 <xTaskIncrementTick+0x15c>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	693a      	ldr	r2, [r7, #16]
 800f176:	429a      	cmp	r2, r3
 800f178:	d349      	bcc.n	800f20e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f17a:	4b36      	ldr	r3, [pc, #216]	@ (800f254 <xTaskIncrementTick+0x150>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d104      	bne.n	800f18e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f184:	4b36      	ldr	r3, [pc, #216]	@ (800f260 <xTaskIncrementTick+0x15c>)
 800f186:	f04f 32ff 	mov.w	r2, #4294967295
 800f18a:	601a      	str	r2, [r3, #0]
					break;
 800f18c:	e03f      	b.n	800f20e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f18e:	4b31      	ldr	r3, [pc, #196]	@ (800f254 <xTaskIncrementTick+0x150>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	68db      	ldr	r3, [r3, #12]
 800f196:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f19e:	693a      	ldr	r2, [r7, #16]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d203      	bcs.n	800f1ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f1a6:	4a2e      	ldr	r2, [pc, #184]	@ (800f260 <xTaskIncrementTick+0x15c>)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f1ac:	e02f      	b.n	800f20e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	3304      	adds	r3, #4
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7fe fd0a 	bl	800dbcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d004      	beq.n	800f1ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	3318      	adds	r3, #24
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7fe fd01 	bl	800dbcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1ce:	4b25      	ldr	r3, [pc, #148]	@ (800f264 <xTaskIncrementTick+0x160>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d903      	bls.n	800f1de <xTaskIncrementTick+0xda>
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1da:	4a22      	ldr	r2, [pc, #136]	@ (800f264 <xTaskIncrementTick+0x160>)
 800f1dc:	6013      	str	r3, [r2, #0]
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	4413      	add	r3, r2
 800f1e8:	009b      	lsls	r3, r3, #2
 800f1ea:	4a1f      	ldr	r2, [pc, #124]	@ (800f268 <xTaskIncrementTick+0x164>)
 800f1ec:	441a      	add	r2, r3
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	3304      	adds	r3, #4
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	4610      	mov	r0, r2
 800f1f6:	f7fe fc8c 	bl	800db12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1fe:	4b1b      	ldr	r3, [pc, #108]	@ (800f26c <xTaskIncrementTick+0x168>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f204:	429a      	cmp	r2, r3
 800f206:	d3b8      	bcc.n	800f17a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f208:	2301      	movs	r3, #1
 800f20a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f20c:	e7b5      	b.n	800f17a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f20e:	4b17      	ldr	r3, [pc, #92]	@ (800f26c <xTaskIncrementTick+0x168>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f214:	4914      	ldr	r1, [pc, #80]	@ (800f268 <xTaskIncrementTick+0x164>)
 800f216:	4613      	mov	r3, r2
 800f218:	009b      	lsls	r3, r3, #2
 800f21a:	4413      	add	r3, r2
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	440b      	add	r3, r1
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2b01      	cmp	r3, #1
 800f224:	d901      	bls.n	800f22a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f226:	2301      	movs	r3, #1
 800f228:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f22a:	4b11      	ldr	r3, [pc, #68]	@ (800f270 <xTaskIncrementTick+0x16c>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d007      	beq.n	800f242 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f232:	2301      	movs	r3, #1
 800f234:	617b      	str	r3, [r7, #20]
 800f236:	e004      	b.n	800f242 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f238:	4b0e      	ldr	r3, [pc, #56]	@ (800f274 <xTaskIncrementTick+0x170>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	3301      	adds	r3, #1
 800f23e:	4a0d      	ldr	r2, [pc, #52]	@ (800f274 <xTaskIncrementTick+0x170>)
 800f240:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f242:	697b      	ldr	r3, [r7, #20]
}
 800f244:	4618      	mov	r0, r3
 800f246:	3718      	adds	r7, #24
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	200031ec 	.word	0x200031ec
 800f250:	200031c8 	.word	0x200031c8
 800f254:	2000317c 	.word	0x2000317c
 800f258:	20003180 	.word	0x20003180
 800f25c:	200031dc 	.word	0x200031dc
 800f260:	200031e4 	.word	0x200031e4
 800f264:	200031cc 	.word	0x200031cc
 800f268:	20002cf4 	.word	0x20002cf4
 800f26c:	20002cf0 	.word	0x20002cf0
 800f270:	200031d8 	.word	0x200031d8
 800f274:	200031d4 	.word	0x200031d4

0800f278 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f278:	b480      	push	{r7}
 800f27a:	b085      	sub	sp, #20
 800f27c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f27e:	4b2b      	ldr	r3, [pc, #172]	@ (800f32c <vTaskSwitchContext+0xb4>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d003      	beq.n	800f28e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f286:	4b2a      	ldr	r3, [pc, #168]	@ (800f330 <vTaskSwitchContext+0xb8>)
 800f288:	2201      	movs	r2, #1
 800f28a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f28c:	e047      	b.n	800f31e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f28e:	4b28      	ldr	r3, [pc, #160]	@ (800f330 <vTaskSwitchContext+0xb8>)
 800f290:	2200      	movs	r2, #0
 800f292:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f294:	4b27      	ldr	r3, [pc, #156]	@ (800f334 <vTaskSwitchContext+0xbc>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	60fb      	str	r3, [r7, #12]
 800f29a:	e011      	b.n	800f2c0 <vTaskSwitchContext+0x48>
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d10b      	bne.n	800f2ba <vTaskSwitchContext+0x42>
	__asm volatile
 800f2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2a6:	f383 8811 	msr	BASEPRI, r3
 800f2aa:	f3bf 8f6f 	isb	sy
 800f2ae:	f3bf 8f4f 	dsb	sy
 800f2b2:	607b      	str	r3, [r7, #4]
}
 800f2b4:	bf00      	nop
 800f2b6:	bf00      	nop
 800f2b8:	e7fd      	b.n	800f2b6 <vTaskSwitchContext+0x3e>
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	3b01      	subs	r3, #1
 800f2be:	60fb      	str	r3, [r7, #12]
 800f2c0:	491d      	ldr	r1, [pc, #116]	@ (800f338 <vTaskSwitchContext+0xc0>)
 800f2c2:	68fa      	ldr	r2, [r7, #12]
 800f2c4:	4613      	mov	r3, r2
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	4413      	add	r3, r2
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	440b      	add	r3, r1
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d0e3      	beq.n	800f29c <vTaskSwitchContext+0x24>
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	4613      	mov	r3, r2
 800f2d8:	009b      	lsls	r3, r3, #2
 800f2da:	4413      	add	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	4a16      	ldr	r2, [pc, #88]	@ (800f338 <vTaskSwitchContext+0xc0>)
 800f2e0:	4413      	add	r3, r2
 800f2e2:	60bb      	str	r3, [r7, #8]
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	685a      	ldr	r2, [r3, #4]
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	605a      	str	r2, [r3, #4]
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	685a      	ldr	r2, [r3, #4]
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	3308      	adds	r3, #8
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d104      	bne.n	800f304 <vTaskSwitchContext+0x8c>
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	685a      	ldr	r2, [r3, #4]
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	605a      	str	r2, [r3, #4]
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	4a0c      	ldr	r2, [pc, #48]	@ (800f33c <vTaskSwitchContext+0xc4>)
 800f30c:	6013      	str	r3, [r2, #0]
 800f30e:	4a09      	ldr	r2, [pc, #36]	@ (800f334 <vTaskSwitchContext+0xbc>)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f314:	4b09      	ldr	r3, [pc, #36]	@ (800f33c <vTaskSwitchContext+0xc4>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	3354      	adds	r3, #84	@ 0x54
 800f31a:	4a09      	ldr	r2, [pc, #36]	@ (800f340 <vTaskSwitchContext+0xc8>)
 800f31c:	6013      	str	r3, [r2, #0]
}
 800f31e:	bf00      	nop
 800f320:	3714      	adds	r7, #20
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop
 800f32c:	200031ec 	.word	0x200031ec
 800f330:	200031d8 	.word	0x200031d8
 800f334:	200031cc 	.word	0x200031cc
 800f338:	20002cf4 	.word	0x20002cf4
 800f33c:	20002cf0 	.word	0x20002cf0
 800f340:	20000124 	.word	0x20000124

0800f344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d10b      	bne.n	800f36c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f358:	f383 8811 	msr	BASEPRI, r3
 800f35c:	f3bf 8f6f 	isb	sy
 800f360:	f3bf 8f4f 	dsb	sy
 800f364:	60fb      	str	r3, [r7, #12]
}
 800f366:	bf00      	nop
 800f368:	bf00      	nop
 800f36a:	e7fd      	b.n	800f368 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f36c:	4b07      	ldr	r3, [pc, #28]	@ (800f38c <vTaskPlaceOnEventList+0x48>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	3318      	adds	r3, #24
 800f372:	4619      	mov	r1, r3
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f7fe fbf0 	bl	800db5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f37a:	2101      	movs	r1, #1
 800f37c:	6838      	ldr	r0, [r7, #0]
 800f37e:	f000 fb87 	bl	800fa90 <prvAddCurrentTaskToDelayedList>
}
 800f382:	bf00      	nop
 800f384:	3710      	adds	r7, #16
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	20002cf0 	.word	0x20002cf0

0800f390 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f390:	b580      	push	{r7, lr}
 800f392:	b086      	sub	sp, #24
 800f394:	af00      	add	r7, sp, #0
 800f396:	60f8      	str	r0, [r7, #12]
 800f398:	60b9      	str	r1, [r7, #8]
 800f39a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d10b      	bne.n	800f3ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a6:	f383 8811 	msr	BASEPRI, r3
 800f3aa:	f3bf 8f6f 	isb	sy
 800f3ae:	f3bf 8f4f 	dsb	sy
 800f3b2:	617b      	str	r3, [r7, #20]
}
 800f3b4:	bf00      	nop
 800f3b6:	bf00      	nop
 800f3b8:	e7fd      	b.n	800f3b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3ba:	4b0a      	ldr	r3, [pc, #40]	@ (800f3e4 <vTaskPlaceOnEventListRestricted+0x54>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	3318      	adds	r3, #24
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	f7fe fba5 	bl	800db12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d002      	beq.n	800f3d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f3ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f3d4:	6879      	ldr	r1, [r7, #4]
 800f3d6:	68b8      	ldr	r0, [r7, #8]
 800f3d8:	f000 fb5a 	bl	800fa90 <prvAddCurrentTaskToDelayedList>
	}
 800f3dc:	bf00      	nop
 800f3de:	3718      	adds	r7, #24
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}
 800f3e4:	20002cf0 	.word	0x20002cf0

0800f3e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b086      	sub	sp, #24
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	68db      	ldr	r3, [r3, #12]
 800f3f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d10b      	bne.n	800f416 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f402:	f383 8811 	msr	BASEPRI, r3
 800f406:	f3bf 8f6f 	isb	sy
 800f40a:	f3bf 8f4f 	dsb	sy
 800f40e:	60fb      	str	r3, [r7, #12]
}
 800f410:	bf00      	nop
 800f412:	bf00      	nop
 800f414:	e7fd      	b.n	800f412 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f416:	693b      	ldr	r3, [r7, #16]
 800f418:	3318      	adds	r3, #24
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fe fbd6 	bl	800dbcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f420:	4b1d      	ldr	r3, [pc, #116]	@ (800f498 <xTaskRemoveFromEventList+0xb0>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d11d      	bne.n	800f464 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	3304      	adds	r3, #4
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7fe fbcd 	bl	800dbcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f436:	4b19      	ldr	r3, [pc, #100]	@ (800f49c <xTaskRemoveFromEventList+0xb4>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d903      	bls.n	800f446 <xTaskRemoveFromEventList+0x5e>
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f442:	4a16      	ldr	r2, [pc, #88]	@ (800f49c <xTaskRemoveFromEventList+0xb4>)
 800f444:	6013      	str	r3, [r2, #0]
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f44a:	4613      	mov	r3, r2
 800f44c:	009b      	lsls	r3, r3, #2
 800f44e:	4413      	add	r3, r2
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	4a13      	ldr	r2, [pc, #76]	@ (800f4a0 <xTaskRemoveFromEventList+0xb8>)
 800f454:	441a      	add	r2, r3
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	3304      	adds	r3, #4
 800f45a:	4619      	mov	r1, r3
 800f45c:	4610      	mov	r0, r2
 800f45e:	f7fe fb58 	bl	800db12 <vListInsertEnd>
 800f462:	e005      	b.n	800f470 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	3318      	adds	r3, #24
 800f468:	4619      	mov	r1, r3
 800f46a:	480e      	ldr	r0, [pc, #56]	@ (800f4a4 <xTaskRemoveFromEventList+0xbc>)
 800f46c:	f7fe fb51 	bl	800db12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f474:	4b0c      	ldr	r3, [pc, #48]	@ (800f4a8 <xTaskRemoveFromEventList+0xc0>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d905      	bls.n	800f48a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f47e:	2301      	movs	r3, #1
 800f480:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f482:	4b0a      	ldr	r3, [pc, #40]	@ (800f4ac <xTaskRemoveFromEventList+0xc4>)
 800f484:	2201      	movs	r2, #1
 800f486:	601a      	str	r2, [r3, #0]
 800f488:	e001      	b.n	800f48e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f48a:	2300      	movs	r3, #0
 800f48c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f48e:	697b      	ldr	r3, [r7, #20]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3718      	adds	r7, #24
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}
 800f498:	200031ec 	.word	0x200031ec
 800f49c:	200031cc 	.word	0x200031cc
 800f4a0:	20002cf4 	.word	0x20002cf4
 800f4a4:	20003184 	.word	0x20003184
 800f4a8:	20002cf0 	.word	0x20002cf0
 800f4ac:	200031d8 	.word	0x200031d8

0800f4b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b083      	sub	sp, #12
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f4b8:	4b06      	ldr	r3, [pc, #24]	@ (800f4d4 <vTaskInternalSetTimeOutState+0x24>)
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f4c0:	4b05      	ldr	r3, [pc, #20]	@ (800f4d8 <vTaskInternalSetTimeOutState+0x28>)
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	605a      	str	r2, [r3, #4]
}
 800f4c8:	bf00      	nop
 800f4ca:	370c      	adds	r7, #12
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr
 800f4d4:	200031dc 	.word	0x200031dc
 800f4d8:	200031c8 	.word	0x200031c8

0800f4dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b088      	sub	sp, #32
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d10b      	bne.n	800f504 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4f0:	f383 8811 	msr	BASEPRI, r3
 800f4f4:	f3bf 8f6f 	isb	sy
 800f4f8:	f3bf 8f4f 	dsb	sy
 800f4fc:	613b      	str	r3, [r7, #16]
}
 800f4fe:	bf00      	nop
 800f500:	bf00      	nop
 800f502:	e7fd      	b.n	800f500 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d10b      	bne.n	800f522 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f50a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f50e:	f383 8811 	msr	BASEPRI, r3
 800f512:	f3bf 8f6f 	isb	sy
 800f516:	f3bf 8f4f 	dsb	sy
 800f51a:	60fb      	str	r3, [r7, #12]
}
 800f51c:	bf00      	nop
 800f51e:	bf00      	nop
 800f520:	e7fd      	b.n	800f51e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f522:	f000 ff91 	bl	8010448 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f526:	4b1d      	ldr	r3, [pc, #116]	@ (800f59c <xTaskCheckForTimeOut+0xc0>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	69ba      	ldr	r2, [r7, #24]
 800f532:	1ad3      	subs	r3, r2, r3
 800f534:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f53e:	d102      	bne.n	800f546 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f540:	2300      	movs	r3, #0
 800f542:	61fb      	str	r3, [r7, #28]
 800f544:	e023      	b.n	800f58e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	4b15      	ldr	r3, [pc, #84]	@ (800f5a0 <xTaskCheckForTimeOut+0xc4>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d007      	beq.n	800f562 <xTaskCheckForTimeOut+0x86>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	69ba      	ldr	r2, [r7, #24]
 800f558:	429a      	cmp	r2, r3
 800f55a:	d302      	bcc.n	800f562 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f55c:	2301      	movs	r3, #1
 800f55e:	61fb      	str	r3, [r7, #28]
 800f560:	e015      	b.n	800f58e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	697a      	ldr	r2, [r7, #20]
 800f568:	429a      	cmp	r2, r3
 800f56a:	d20b      	bcs.n	800f584 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	1ad2      	subs	r2, r2, r3
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7ff ff99 	bl	800f4b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f57e:	2300      	movs	r3, #0
 800f580:	61fb      	str	r3, [r7, #28]
 800f582:	e004      	b.n	800f58e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	2200      	movs	r2, #0
 800f588:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f58a:	2301      	movs	r3, #1
 800f58c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f58e:	f000 ff8d 	bl	80104ac <vPortExitCritical>

	return xReturn;
 800f592:	69fb      	ldr	r3, [r7, #28]
}
 800f594:	4618      	mov	r0, r3
 800f596:	3720      	adds	r7, #32
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	200031c8 	.word	0x200031c8
 800f5a0:	200031dc 	.word	0x200031dc

0800f5a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f5a8:	4b03      	ldr	r3, [pc, #12]	@ (800f5b8 <vTaskMissedYield+0x14>)
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	601a      	str	r2, [r3, #0]
}
 800f5ae:	bf00      	nop
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr
 800f5b8:	200031d8 	.word	0x200031d8

0800f5bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f5c4:	f000 f852 	bl	800f66c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f5c8:	4b06      	ldr	r3, [pc, #24]	@ (800f5e4 <prvIdleTask+0x28>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	d9f9      	bls.n	800f5c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f5d0:	4b05      	ldr	r3, [pc, #20]	@ (800f5e8 <prvIdleTask+0x2c>)
 800f5d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5d6:	601a      	str	r2, [r3, #0]
 800f5d8:	f3bf 8f4f 	dsb	sy
 800f5dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f5e0:	e7f0      	b.n	800f5c4 <prvIdleTask+0x8>
 800f5e2:	bf00      	nop
 800f5e4:	20002cf4 	.word	0x20002cf4
 800f5e8:	e000ed04 	.word	0xe000ed04

0800f5ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	607b      	str	r3, [r7, #4]
 800f5f6:	e00c      	b.n	800f612 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f5f8:	687a      	ldr	r2, [r7, #4]
 800f5fa:	4613      	mov	r3, r2
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	4413      	add	r3, r2
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	4a12      	ldr	r2, [pc, #72]	@ (800f64c <prvInitialiseTaskLists+0x60>)
 800f604:	4413      	add	r3, r2
 800f606:	4618      	mov	r0, r3
 800f608:	f7fe fa56 	bl	800dab8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	3301      	adds	r3, #1
 800f610:	607b      	str	r3, [r7, #4]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2b37      	cmp	r3, #55	@ 0x37
 800f616:	d9ef      	bls.n	800f5f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f618:	480d      	ldr	r0, [pc, #52]	@ (800f650 <prvInitialiseTaskLists+0x64>)
 800f61a:	f7fe fa4d 	bl	800dab8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f61e:	480d      	ldr	r0, [pc, #52]	@ (800f654 <prvInitialiseTaskLists+0x68>)
 800f620:	f7fe fa4a 	bl	800dab8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f624:	480c      	ldr	r0, [pc, #48]	@ (800f658 <prvInitialiseTaskLists+0x6c>)
 800f626:	f7fe fa47 	bl	800dab8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f62a:	480c      	ldr	r0, [pc, #48]	@ (800f65c <prvInitialiseTaskLists+0x70>)
 800f62c:	f7fe fa44 	bl	800dab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f630:	480b      	ldr	r0, [pc, #44]	@ (800f660 <prvInitialiseTaskLists+0x74>)
 800f632:	f7fe fa41 	bl	800dab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f636:	4b0b      	ldr	r3, [pc, #44]	@ (800f664 <prvInitialiseTaskLists+0x78>)
 800f638:	4a05      	ldr	r2, [pc, #20]	@ (800f650 <prvInitialiseTaskLists+0x64>)
 800f63a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f63c:	4b0a      	ldr	r3, [pc, #40]	@ (800f668 <prvInitialiseTaskLists+0x7c>)
 800f63e:	4a05      	ldr	r2, [pc, #20]	@ (800f654 <prvInitialiseTaskLists+0x68>)
 800f640:	601a      	str	r2, [r3, #0]
}
 800f642:	bf00      	nop
 800f644:	3708      	adds	r7, #8
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	20002cf4 	.word	0x20002cf4
 800f650:	20003154 	.word	0x20003154
 800f654:	20003168 	.word	0x20003168
 800f658:	20003184 	.word	0x20003184
 800f65c:	20003198 	.word	0x20003198
 800f660:	200031b0 	.word	0x200031b0
 800f664:	2000317c 	.word	0x2000317c
 800f668:	20003180 	.word	0x20003180

0800f66c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f672:	e019      	b.n	800f6a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f674:	f000 fee8 	bl	8010448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f678:	4b10      	ldr	r3, [pc, #64]	@ (800f6bc <prvCheckTasksWaitingTermination+0x50>)
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	3304      	adds	r3, #4
 800f684:	4618      	mov	r0, r3
 800f686:	f7fe faa1 	bl	800dbcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f68a:	4b0d      	ldr	r3, [pc, #52]	@ (800f6c0 <prvCheckTasksWaitingTermination+0x54>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	3b01      	subs	r3, #1
 800f690:	4a0b      	ldr	r2, [pc, #44]	@ (800f6c0 <prvCheckTasksWaitingTermination+0x54>)
 800f692:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f694:	4b0b      	ldr	r3, [pc, #44]	@ (800f6c4 <prvCheckTasksWaitingTermination+0x58>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	3b01      	subs	r3, #1
 800f69a:	4a0a      	ldr	r2, [pc, #40]	@ (800f6c4 <prvCheckTasksWaitingTermination+0x58>)
 800f69c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f69e:	f000 ff05 	bl	80104ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 f810 	bl	800f6c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6a8:	4b06      	ldr	r3, [pc, #24]	@ (800f6c4 <prvCheckTasksWaitingTermination+0x58>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d1e1      	bne.n	800f674 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f6b0:	bf00      	nop
 800f6b2:	bf00      	nop
 800f6b4:	3708      	adds	r7, #8
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	20003198 	.word	0x20003198
 800f6c0:	200031c4 	.word	0x200031c4
 800f6c4:	200031ac 	.word	0x200031ac

0800f6c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b084      	sub	sp, #16
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	3354      	adds	r3, #84	@ 0x54
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f002 f881 	bl	80117dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d108      	bne.n	800f6f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f001 f89d 	bl	8010828 <vPortFree>
				vPortFree( pxTCB );
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f001 f89a 	bl	8010828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f6f4:	e019      	b.n	800f72a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d103      	bne.n	800f708 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f001 f891 	bl	8010828 <vPortFree>
	}
 800f706:	e010      	b.n	800f72a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f70e:	2b02      	cmp	r3, #2
 800f710:	d00b      	beq.n	800f72a <prvDeleteTCB+0x62>
	__asm volatile
 800f712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	60fb      	str	r3, [r7, #12]
}
 800f724:	bf00      	nop
 800f726:	bf00      	nop
 800f728:	e7fd      	b.n	800f726 <prvDeleteTCB+0x5e>
	}
 800f72a:	bf00      	nop
 800f72c:	3710      	adds	r7, #16
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
	...

0800f734 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f734:	b480      	push	{r7}
 800f736:	b083      	sub	sp, #12
 800f738:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f73a:	4b0c      	ldr	r3, [pc, #48]	@ (800f76c <prvResetNextTaskUnblockTime+0x38>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d104      	bne.n	800f74e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f744:	4b0a      	ldr	r3, [pc, #40]	@ (800f770 <prvResetNextTaskUnblockTime+0x3c>)
 800f746:	f04f 32ff 	mov.w	r2, #4294967295
 800f74a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f74c:	e008      	b.n	800f760 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f74e:	4b07      	ldr	r3, [pc, #28]	@ (800f76c <prvResetNextTaskUnblockTime+0x38>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	68db      	ldr	r3, [r3, #12]
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	4a04      	ldr	r2, [pc, #16]	@ (800f770 <prvResetNextTaskUnblockTime+0x3c>)
 800f75e:	6013      	str	r3, [r2, #0]
}
 800f760:	bf00      	nop
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr
 800f76c:	2000317c 	.word	0x2000317c
 800f770:	200031e4 	.word	0x200031e4

0800f774 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f774:	b480      	push	{r7}
 800f776:	b083      	sub	sp, #12
 800f778:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f77a:	4b0b      	ldr	r3, [pc, #44]	@ (800f7a8 <xTaskGetSchedulerState+0x34>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d102      	bne.n	800f788 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f782:	2301      	movs	r3, #1
 800f784:	607b      	str	r3, [r7, #4]
 800f786:	e008      	b.n	800f79a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f788:	4b08      	ldr	r3, [pc, #32]	@ (800f7ac <xTaskGetSchedulerState+0x38>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d102      	bne.n	800f796 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f790:	2302      	movs	r3, #2
 800f792:	607b      	str	r3, [r7, #4]
 800f794:	e001      	b.n	800f79a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f796:	2300      	movs	r3, #0
 800f798:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f79a:	687b      	ldr	r3, [r7, #4]
	}
 800f79c:	4618      	mov	r0, r3
 800f79e:	370c      	adds	r7, #12
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr
 800f7a8:	200031d0 	.word	0x200031d0
 800f7ac:	200031ec 	.word	0x200031ec

0800f7b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d051      	beq.n	800f86a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7ca:	4b2a      	ldr	r3, [pc, #168]	@ (800f874 <xTaskPriorityInherit+0xc4>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d241      	bcs.n	800f858 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	699b      	ldr	r3, [r3, #24]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	db06      	blt.n	800f7ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7dc:	4b25      	ldr	r3, [pc, #148]	@ (800f874 <xTaskPriorityInherit+0xc4>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	6959      	ldr	r1, [r3, #20]
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7f2:	4613      	mov	r3, r2
 800f7f4:	009b      	lsls	r3, r3, #2
 800f7f6:	4413      	add	r3, r2
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	4a1f      	ldr	r2, [pc, #124]	@ (800f878 <xTaskPriorityInherit+0xc8>)
 800f7fc:	4413      	add	r3, r2
 800f7fe:	4299      	cmp	r1, r3
 800f800:	d122      	bne.n	800f848 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	3304      	adds	r3, #4
 800f806:	4618      	mov	r0, r3
 800f808:	f7fe f9e0 	bl	800dbcc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f80c:	4b19      	ldr	r3, [pc, #100]	@ (800f874 <xTaskPriorityInherit+0xc4>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f81a:	4b18      	ldr	r3, [pc, #96]	@ (800f87c <xTaskPriorityInherit+0xcc>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	429a      	cmp	r2, r3
 800f820:	d903      	bls.n	800f82a <xTaskPriorityInherit+0x7a>
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f826:	4a15      	ldr	r2, [pc, #84]	@ (800f87c <xTaskPriorityInherit+0xcc>)
 800f828:	6013      	str	r3, [r2, #0]
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f82e:	4613      	mov	r3, r2
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	4413      	add	r3, r2
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	4a10      	ldr	r2, [pc, #64]	@ (800f878 <xTaskPriorityInherit+0xc8>)
 800f838:	441a      	add	r2, r3
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	3304      	adds	r3, #4
 800f83e:	4619      	mov	r1, r3
 800f840:	4610      	mov	r0, r2
 800f842:	f7fe f966 	bl	800db12 <vListInsertEnd>
 800f846:	e004      	b.n	800f852 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f848:	4b0a      	ldr	r3, [pc, #40]	@ (800f874 <xTaskPriorityInherit+0xc4>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f852:	2301      	movs	r3, #1
 800f854:	60fb      	str	r3, [r7, #12]
 800f856:	e008      	b.n	800f86a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f85c:	4b05      	ldr	r3, [pc, #20]	@ (800f874 <xTaskPriorityInherit+0xc4>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f862:	429a      	cmp	r2, r3
 800f864:	d201      	bcs.n	800f86a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f866:	2301      	movs	r3, #1
 800f868:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f86a:	68fb      	ldr	r3, [r7, #12]
	}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3710      	adds	r7, #16
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}
 800f874:	20002cf0 	.word	0x20002cf0
 800f878:	20002cf4 	.word	0x20002cf4
 800f87c:	200031cc 	.word	0x200031cc

0800f880 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f880:	b580      	push	{r7, lr}
 800f882:	b086      	sub	sp, #24
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f88c:	2300      	movs	r3, #0
 800f88e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d058      	beq.n	800f948 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f896:	4b2f      	ldr	r3, [pc, #188]	@ (800f954 <xTaskPriorityDisinherit+0xd4>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	693a      	ldr	r2, [r7, #16]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d00b      	beq.n	800f8b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8a4:	f383 8811 	msr	BASEPRI, r3
 800f8a8:	f3bf 8f6f 	isb	sy
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	60fb      	str	r3, [r7, #12]
}
 800f8b2:	bf00      	nop
 800f8b4:	bf00      	nop
 800f8b6:	e7fd      	b.n	800f8b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d10b      	bne.n	800f8d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c4:	f383 8811 	msr	BASEPRI, r3
 800f8c8:	f3bf 8f6f 	isb	sy
 800f8cc:	f3bf 8f4f 	dsb	sy
 800f8d0:	60bb      	str	r3, [r7, #8]
}
 800f8d2:	bf00      	nop
 800f8d4:	bf00      	nop
 800f8d6:	e7fd      	b.n	800f8d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8dc:	1e5a      	subs	r2, r3, #1
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d02c      	beq.n	800f948 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d128      	bne.n	800f948 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	3304      	adds	r3, #4
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fe f966 	bl	800dbcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f90c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f918:	4b0f      	ldr	r3, [pc, #60]	@ (800f958 <xTaskPriorityDisinherit+0xd8>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d903      	bls.n	800f928 <xTaskPriorityDisinherit+0xa8>
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f924:	4a0c      	ldr	r2, [pc, #48]	@ (800f958 <xTaskPriorityDisinherit+0xd8>)
 800f926:	6013      	str	r3, [r2, #0]
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f92c:	4613      	mov	r3, r2
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	4413      	add	r3, r2
 800f932:	009b      	lsls	r3, r3, #2
 800f934:	4a09      	ldr	r2, [pc, #36]	@ (800f95c <xTaskPriorityDisinherit+0xdc>)
 800f936:	441a      	add	r2, r3
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	3304      	adds	r3, #4
 800f93c:	4619      	mov	r1, r3
 800f93e:	4610      	mov	r0, r2
 800f940:	f7fe f8e7 	bl	800db12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f944:	2301      	movs	r3, #1
 800f946:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f948:	697b      	ldr	r3, [r7, #20]
	}
 800f94a:	4618      	mov	r0, r3
 800f94c:	3718      	adds	r7, #24
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}
 800f952:	bf00      	nop
 800f954:	20002cf0 	.word	0x20002cf0
 800f958:	200031cc 	.word	0x200031cc
 800f95c:	20002cf4 	.word	0x20002cf4

0800f960 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f960:	b580      	push	{r7, lr}
 800f962:	b088      	sub	sp, #32
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f96e:	2301      	movs	r3, #1
 800f970:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d06c      	beq.n	800fa52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f978:	69bb      	ldr	r3, [r7, #24]
 800f97a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d10b      	bne.n	800f998 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f984:	f383 8811 	msr	BASEPRI, r3
 800f988:	f3bf 8f6f 	isb	sy
 800f98c:	f3bf 8f4f 	dsb	sy
 800f990:	60fb      	str	r3, [r7, #12]
}
 800f992:	bf00      	nop
 800f994:	bf00      	nop
 800f996:	e7fd      	b.n	800f994 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f998:	69bb      	ldr	r3, [r7, #24]
 800f99a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f99c:	683a      	ldr	r2, [r7, #0]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d902      	bls.n	800f9a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	61fb      	str	r3, [r7, #28]
 800f9a6:	e002      	b.n	800f9ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f9a8:	69bb      	ldr	r3, [r7, #24]
 800f9aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f9ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9b2:	69fa      	ldr	r2, [r7, #28]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d04c      	beq.n	800fa52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f9b8:	69bb      	ldr	r3, [r7, #24]
 800f9ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9bc:	697a      	ldr	r2, [r7, #20]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d147      	bne.n	800fa52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f9c2:	4b26      	ldr	r3, [pc, #152]	@ (800fa5c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	69ba      	ldr	r2, [r7, #24]
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d10b      	bne.n	800f9e4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9d0:	f383 8811 	msr	BASEPRI, r3
 800f9d4:	f3bf 8f6f 	isb	sy
 800f9d8:	f3bf 8f4f 	dsb	sy
 800f9dc:	60bb      	str	r3, [r7, #8]
}
 800f9de:	bf00      	nop
 800f9e0:	bf00      	nop
 800f9e2:	e7fd      	b.n	800f9e0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f9ea:	69bb      	ldr	r3, [r7, #24]
 800f9ec:	69fa      	ldr	r2, [r7, #28]
 800f9ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f9f0:	69bb      	ldr	r3, [r7, #24]
 800f9f2:	699b      	ldr	r3, [r3, #24]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	db04      	blt.n	800fa02 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f9fe:	69bb      	ldr	r3, [r7, #24]
 800fa00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa02:	69bb      	ldr	r3, [r7, #24]
 800fa04:	6959      	ldr	r1, [r3, #20]
 800fa06:	693a      	ldr	r2, [r7, #16]
 800fa08:	4613      	mov	r3, r2
 800fa0a:	009b      	lsls	r3, r3, #2
 800fa0c:	4413      	add	r3, r2
 800fa0e:	009b      	lsls	r3, r3, #2
 800fa10:	4a13      	ldr	r2, [pc, #76]	@ (800fa60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fa12:	4413      	add	r3, r2
 800fa14:	4299      	cmp	r1, r3
 800fa16:	d11c      	bne.n	800fa52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	3304      	adds	r3, #4
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fe f8d5 	bl	800dbcc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa26:	4b0f      	ldr	r3, [pc, #60]	@ (800fa64 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d903      	bls.n	800fa36 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800fa2e:	69bb      	ldr	r3, [r7, #24]
 800fa30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa32:	4a0c      	ldr	r2, [pc, #48]	@ (800fa64 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fa34:	6013      	str	r3, [r2, #0]
 800fa36:	69bb      	ldr	r3, [r7, #24]
 800fa38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa3a:	4613      	mov	r3, r2
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	4413      	add	r3, r2
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	4a07      	ldr	r2, [pc, #28]	@ (800fa60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fa44:	441a      	add	r2, r3
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	3304      	adds	r3, #4
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	4610      	mov	r0, r2
 800fa4e:	f7fe f860 	bl	800db12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa52:	bf00      	nop
 800fa54:	3720      	adds	r7, #32
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	20002cf0 	.word	0x20002cf0
 800fa60:	20002cf4 	.word	0x20002cf4
 800fa64:	200031cc 	.word	0x200031cc

0800fa68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fa68:	b480      	push	{r7}
 800fa6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fa6c:	4b07      	ldr	r3, [pc, #28]	@ (800fa8c <pvTaskIncrementMutexHeldCount+0x24>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d004      	beq.n	800fa7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fa74:	4b05      	ldr	r3, [pc, #20]	@ (800fa8c <pvTaskIncrementMutexHeldCount+0x24>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fa7a:	3201      	adds	r2, #1
 800fa7c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800fa7e:	4b03      	ldr	r3, [pc, #12]	@ (800fa8c <pvTaskIncrementMutexHeldCount+0x24>)
 800fa80:	681b      	ldr	r3, [r3, #0]
	}
 800fa82:	4618      	mov	r0, r3
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr
 800fa8c:	20002cf0 	.word	0x20002cf0

0800fa90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b084      	sub	sp, #16
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fa9a:	4b21      	ldr	r3, [pc, #132]	@ (800fb20 <prvAddCurrentTaskToDelayedList+0x90>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800faa0:	4b20      	ldr	r3, [pc, #128]	@ (800fb24 <prvAddCurrentTaskToDelayedList+0x94>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	3304      	adds	r3, #4
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fe f890 	bl	800dbcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fab2:	d10a      	bne.n	800faca <prvAddCurrentTaskToDelayedList+0x3a>
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d007      	beq.n	800faca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800faba:	4b1a      	ldr	r3, [pc, #104]	@ (800fb24 <prvAddCurrentTaskToDelayedList+0x94>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	3304      	adds	r3, #4
 800fac0:	4619      	mov	r1, r3
 800fac2:	4819      	ldr	r0, [pc, #100]	@ (800fb28 <prvAddCurrentTaskToDelayedList+0x98>)
 800fac4:	f7fe f825 	bl	800db12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fac8:	e026      	b.n	800fb18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800faca:	68fa      	ldr	r2, [r7, #12]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	4413      	add	r3, r2
 800fad0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fad2:	4b14      	ldr	r3, [pc, #80]	@ (800fb24 <prvAddCurrentTaskToDelayedList+0x94>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	68ba      	ldr	r2, [r7, #8]
 800fad8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fada:	68ba      	ldr	r2, [r7, #8]
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d209      	bcs.n	800faf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fae2:	4b12      	ldr	r3, [pc, #72]	@ (800fb2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	4b0f      	ldr	r3, [pc, #60]	@ (800fb24 <prvAddCurrentTaskToDelayedList+0x94>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	3304      	adds	r3, #4
 800faec:	4619      	mov	r1, r3
 800faee:	4610      	mov	r0, r2
 800faf0:	f7fe f833 	bl	800db5a <vListInsert>
}
 800faf4:	e010      	b.n	800fb18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800faf6:	4b0e      	ldr	r3, [pc, #56]	@ (800fb30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	4b0a      	ldr	r3, [pc, #40]	@ (800fb24 <prvAddCurrentTaskToDelayedList+0x94>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	3304      	adds	r3, #4
 800fb00:	4619      	mov	r1, r3
 800fb02:	4610      	mov	r0, r2
 800fb04:	f7fe f829 	bl	800db5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fb08:	4b0a      	ldr	r3, [pc, #40]	@ (800fb34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	68ba      	ldr	r2, [r7, #8]
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d202      	bcs.n	800fb18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fb12:	4a08      	ldr	r2, [pc, #32]	@ (800fb34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	6013      	str	r3, [r2, #0]
}
 800fb18:	bf00      	nop
 800fb1a:	3710      	adds	r7, #16
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	200031c8 	.word	0x200031c8
 800fb24:	20002cf0 	.word	0x20002cf0
 800fb28:	200031b0 	.word	0x200031b0
 800fb2c:	20003180 	.word	0x20003180
 800fb30:	2000317c 	.word	0x2000317c
 800fb34:	200031e4 	.word	0x200031e4

0800fb38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b08a      	sub	sp, #40	@ 0x28
 800fb3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fb42:	f000 fb13 	bl	801016c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fb46:	4b1d      	ldr	r3, [pc, #116]	@ (800fbbc <xTimerCreateTimerTask+0x84>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d021      	beq.n	800fb92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fb52:	2300      	movs	r3, #0
 800fb54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fb56:	1d3a      	adds	r2, r7, #4
 800fb58:	f107 0108 	add.w	r1, r7, #8
 800fb5c:	f107 030c 	add.w	r3, r7, #12
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7fd ff8f 	bl	800da84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fb66:	6879      	ldr	r1, [r7, #4]
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	68fa      	ldr	r2, [r7, #12]
 800fb6c:	9202      	str	r2, [sp, #8]
 800fb6e:	9301      	str	r3, [sp, #4]
 800fb70:	2302      	movs	r3, #2
 800fb72:	9300      	str	r3, [sp, #0]
 800fb74:	2300      	movs	r3, #0
 800fb76:	460a      	mov	r2, r1
 800fb78:	4911      	ldr	r1, [pc, #68]	@ (800fbc0 <xTimerCreateTimerTask+0x88>)
 800fb7a:	4812      	ldr	r0, [pc, #72]	@ (800fbc4 <xTimerCreateTimerTask+0x8c>)
 800fb7c:	f7fe feae 	bl	800e8dc <xTaskCreateStatic>
 800fb80:	4603      	mov	r3, r0
 800fb82:	4a11      	ldr	r2, [pc, #68]	@ (800fbc8 <xTimerCreateTimerTask+0x90>)
 800fb84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fb86:	4b10      	ldr	r3, [pc, #64]	@ (800fbc8 <xTimerCreateTimerTask+0x90>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d001      	beq.n	800fb92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d10b      	bne.n	800fbb0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800fb98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb9c:	f383 8811 	msr	BASEPRI, r3
 800fba0:	f3bf 8f6f 	isb	sy
 800fba4:	f3bf 8f4f 	dsb	sy
 800fba8:	613b      	str	r3, [r7, #16]
}
 800fbaa:	bf00      	nop
 800fbac:	bf00      	nop
 800fbae:	e7fd      	b.n	800fbac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fbb0:	697b      	ldr	r3, [r7, #20]
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3718      	adds	r7, #24
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	bf00      	nop
 800fbbc:	20003220 	.word	0x20003220
 800fbc0:	08012c44 	.word	0x08012c44
 800fbc4:	0800fd05 	.word	0x0800fd05
 800fbc8:	20003224 	.word	0x20003224

0800fbcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b08a      	sub	sp, #40	@ 0x28
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]
 800fbd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d10b      	bne.n	800fbfc <xTimerGenericCommand+0x30>
	__asm volatile
 800fbe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbe8:	f383 8811 	msr	BASEPRI, r3
 800fbec:	f3bf 8f6f 	isb	sy
 800fbf0:	f3bf 8f4f 	dsb	sy
 800fbf4:	623b      	str	r3, [r7, #32]
}
 800fbf6:	bf00      	nop
 800fbf8:	bf00      	nop
 800fbfa:	e7fd      	b.n	800fbf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fbfc:	4b19      	ldr	r3, [pc, #100]	@ (800fc64 <xTimerGenericCommand+0x98>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d02a      	beq.n	800fc5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	2b05      	cmp	r3, #5
 800fc14:	dc18      	bgt.n	800fc48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fc16:	f7ff fdad 	bl	800f774 <xTaskGetSchedulerState>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b02      	cmp	r3, #2
 800fc1e:	d109      	bne.n	800fc34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fc20:	4b10      	ldr	r3, [pc, #64]	@ (800fc64 <xTimerGenericCommand+0x98>)
 800fc22:	6818      	ldr	r0, [r3, #0]
 800fc24:	f107 0110 	add.w	r1, r7, #16
 800fc28:	2300      	movs	r3, #0
 800fc2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc2c:	f7fe f93e 	bl	800deac <xQueueGenericSend>
 800fc30:	6278      	str	r0, [r7, #36]	@ 0x24
 800fc32:	e012      	b.n	800fc5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fc34:	4b0b      	ldr	r3, [pc, #44]	@ (800fc64 <xTimerGenericCommand+0x98>)
 800fc36:	6818      	ldr	r0, [r3, #0]
 800fc38:	f107 0110 	add.w	r1, r7, #16
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	2200      	movs	r2, #0
 800fc40:	f7fe f934 	bl	800deac <xQueueGenericSend>
 800fc44:	6278      	str	r0, [r7, #36]	@ 0x24
 800fc46:	e008      	b.n	800fc5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fc48:	4b06      	ldr	r3, [pc, #24]	@ (800fc64 <xTimerGenericCommand+0x98>)
 800fc4a:	6818      	ldr	r0, [r3, #0]
 800fc4c:	f107 0110 	add.w	r1, r7, #16
 800fc50:	2300      	movs	r3, #0
 800fc52:	683a      	ldr	r2, [r7, #0]
 800fc54:	f7fe fa2c 	bl	800e0b0 <xQueueGenericSendFromISR>
 800fc58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3728      	adds	r7, #40	@ 0x28
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	20003220 	.word	0x20003220

0800fc68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b088      	sub	sp, #32
 800fc6c:	af02      	add	r7, sp, #8
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc72:	4b23      	ldr	r3, [pc, #140]	@ (800fd00 <prvProcessExpiredTimer+0x98>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	68db      	ldr	r3, [r3, #12]
 800fc7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	3304      	adds	r3, #4
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7fd ffa3 	bl	800dbcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fc8c:	f003 0304 	and.w	r3, r3, #4
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d023      	beq.n	800fcdc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	699a      	ldr	r2, [r3, #24]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	18d1      	adds	r1, r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	683a      	ldr	r2, [r7, #0]
 800fca0:	6978      	ldr	r0, [r7, #20]
 800fca2:	f000 f8d5 	bl	800fe50 <prvInsertTimerInActiveList>
 800fca6:	4603      	mov	r3, r0
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d020      	beq.n	800fcee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fcac:	2300      	movs	r3, #0
 800fcae:	9300      	str	r3, [sp, #0]
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	6978      	ldr	r0, [r7, #20]
 800fcb8:	f7ff ff88 	bl	800fbcc <xTimerGenericCommand>
 800fcbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d114      	bne.n	800fcee <prvProcessExpiredTimer+0x86>
	__asm volatile
 800fcc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcc8:	f383 8811 	msr	BASEPRI, r3
 800fccc:	f3bf 8f6f 	isb	sy
 800fcd0:	f3bf 8f4f 	dsb	sy
 800fcd4:	60fb      	str	r3, [r7, #12]
}
 800fcd6:	bf00      	nop
 800fcd8:	bf00      	nop
 800fcda:	e7fd      	b.n	800fcd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fce2:	f023 0301 	bic.w	r3, r3, #1
 800fce6:	b2da      	uxtb	r2, r3
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	6a1b      	ldr	r3, [r3, #32]
 800fcf2:	6978      	ldr	r0, [r7, #20]
 800fcf4:	4798      	blx	r3
}
 800fcf6:	bf00      	nop
 800fcf8:	3718      	adds	r7, #24
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	20003218 	.word	0x20003218

0800fd04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fd0c:	f107 0308 	add.w	r3, r7, #8
 800fd10:	4618      	mov	r0, r3
 800fd12:	f000 f859 	bl	800fdc8 <prvGetNextExpireTime>
 800fd16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	68f8      	ldr	r0, [r7, #12]
 800fd1e:	f000 f805 	bl	800fd2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fd22:	f000 f8d7 	bl	800fed4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fd26:	bf00      	nop
 800fd28:	e7f0      	b.n	800fd0c <prvTimerTask+0x8>
	...

0800fd2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b084      	sub	sp, #16
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fd36:	f7ff f929 	bl	800ef8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd3a:	f107 0308 	add.w	r3, r7, #8
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f000 f866 	bl	800fe10 <prvSampleTimeNow>
 800fd44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d130      	bne.n	800fdae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d10a      	bne.n	800fd68 <prvProcessTimerOrBlockTask+0x3c>
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d806      	bhi.n	800fd68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fd5a:	f7ff f925 	bl	800efa8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fd5e:	68f9      	ldr	r1, [r7, #12]
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f7ff ff81 	bl	800fc68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fd66:	e024      	b.n	800fdb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d008      	beq.n	800fd80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fd6e:	4b13      	ldr	r3, [pc, #76]	@ (800fdbc <prvProcessTimerOrBlockTask+0x90>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d101      	bne.n	800fd7c <prvProcessTimerOrBlockTask+0x50>
 800fd78:	2301      	movs	r3, #1
 800fd7a:	e000      	b.n	800fd7e <prvProcessTimerOrBlockTask+0x52>
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fd80:	4b0f      	ldr	r3, [pc, #60]	@ (800fdc0 <prvProcessTimerOrBlockTask+0x94>)
 800fd82:	6818      	ldr	r0, [r3, #0]
 800fd84:	687a      	ldr	r2, [r7, #4]
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	1ad3      	subs	r3, r2, r3
 800fd8a:	683a      	ldr	r2, [r7, #0]
 800fd8c:	4619      	mov	r1, r3
 800fd8e:	f7fe fd71 	bl	800e874 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fd92:	f7ff f909 	bl	800efa8 <xTaskResumeAll>
 800fd96:	4603      	mov	r3, r0
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d10a      	bne.n	800fdb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fd9c:	4b09      	ldr	r3, [pc, #36]	@ (800fdc4 <prvProcessTimerOrBlockTask+0x98>)
 800fd9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fda2:	601a      	str	r2, [r3, #0]
 800fda4:	f3bf 8f4f 	dsb	sy
 800fda8:	f3bf 8f6f 	isb	sy
}
 800fdac:	e001      	b.n	800fdb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fdae:	f7ff f8fb 	bl	800efa8 <xTaskResumeAll>
}
 800fdb2:	bf00      	nop
 800fdb4:	3710      	adds	r7, #16
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
 800fdba:	bf00      	nop
 800fdbc:	2000321c 	.word	0x2000321c
 800fdc0:	20003220 	.word	0x20003220
 800fdc4:	e000ed04 	.word	0xe000ed04

0800fdc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b085      	sub	sp, #20
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fdd0:	4b0e      	ldr	r3, [pc, #56]	@ (800fe0c <prvGetNextExpireTime+0x44>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d101      	bne.n	800fdde <prvGetNextExpireTime+0x16>
 800fdda:	2201      	movs	r2, #1
 800fddc:	e000      	b.n	800fde0 <prvGetNextExpireTime+0x18>
 800fdde:	2200      	movs	r2, #0
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d105      	bne.n	800fdf8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fdec:	4b07      	ldr	r3, [pc, #28]	@ (800fe0c <prvGetNextExpireTime+0x44>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	60fb      	str	r3, [r7, #12]
 800fdf6:	e001      	b.n	800fdfc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3714      	adds	r7, #20
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr
 800fe0a:	bf00      	nop
 800fe0c:	20003218 	.word	0x20003218

0800fe10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fe18:	f7ff f964 	bl	800f0e4 <xTaskGetTickCount>
 800fe1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fe1e:	4b0b      	ldr	r3, [pc, #44]	@ (800fe4c <prvSampleTimeNow+0x3c>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	68fa      	ldr	r2, [r7, #12]
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d205      	bcs.n	800fe34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fe28:	f000 f93a 	bl	80100a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2201      	movs	r2, #1
 800fe30:	601a      	str	r2, [r3, #0]
 800fe32:	e002      	b.n	800fe3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2200      	movs	r2, #0
 800fe38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fe3a:	4a04      	ldr	r2, [pc, #16]	@ (800fe4c <prvSampleTimeNow+0x3c>)
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fe40:	68fb      	ldr	r3, [r7, #12]
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3710      	adds	r7, #16
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
 800fe4a:	bf00      	nop
 800fe4c:	20003228 	.word	0x20003228

0800fe50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b086      	sub	sp, #24
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	60f8      	str	r0, [r7, #12]
 800fe58:	60b9      	str	r1, [r7, #8]
 800fe5a:	607a      	str	r2, [r7, #4]
 800fe5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	68ba      	ldr	r2, [r7, #8]
 800fe66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	68fa      	ldr	r2, [r7, #12]
 800fe6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fe6e:	68ba      	ldr	r2, [r7, #8]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d812      	bhi.n	800fe9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	1ad2      	subs	r2, r2, r3
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	699b      	ldr	r3, [r3, #24]
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d302      	bcc.n	800fe8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fe84:	2301      	movs	r3, #1
 800fe86:	617b      	str	r3, [r7, #20]
 800fe88:	e01b      	b.n	800fec2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fe8a:	4b10      	ldr	r3, [pc, #64]	@ (800fecc <prvInsertTimerInActiveList+0x7c>)
 800fe8c:	681a      	ldr	r2, [r3, #0]
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	3304      	adds	r3, #4
 800fe92:	4619      	mov	r1, r3
 800fe94:	4610      	mov	r0, r2
 800fe96:	f7fd fe60 	bl	800db5a <vListInsert>
 800fe9a:	e012      	b.n	800fec2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fe9c:	687a      	ldr	r2, [r7, #4]
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d206      	bcs.n	800feb2 <prvInsertTimerInActiveList+0x62>
 800fea4:	68ba      	ldr	r2, [r7, #8]
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d302      	bcc.n	800feb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800feac:	2301      	movs	r3, #1
 800feae:	617b      	str	r3, [r7, #20]
 800feb0:	e007      	b.n	800fec2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800feb2:	4b07      	ldr	r3, [pc, #28]	@ (800fed0 <prvInsertTimerInActiveList+0x80>)
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	3304      	adds	r3, #4
 800feba:	4619      	mov	r1, r3
 800febc:	4610      	mov	r0, r2
 800febe:	f7fd fe4c 	bl	800db5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fec2:	697b      	ldr	r3, [r7, #20]
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	3718      	adds	r7, #24
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	2000321c 	.word	0x2000321c
 800fed0:	20003218 	.word	0x20003218

0800fed4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b08e      	sub	sp, #56	@ 0x38
 800fed8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800feda:	e0ce      	b.n	801007a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	da19      	bge.n	800ff16 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fee2:	1d3b      	adds	r3, r7, #4
 800fee4:	3304      	adds	r3, #4
 800fee6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feea:	2b00      	cmp	r3, #0
 800feec:	d10b      	bne.n	800ff06 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800feee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fef2:	f383 8811 	msr	BASEPRI, r3
 800fef6:	f3bf 8f6f 	isb	sy
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	61fb      	str	r3, [r7, #28]
}
 800ff00:	bf00      	nop
 800ff02:	bf00      	nop
 800ff04:	e7fd      	b.n	800ff02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ff06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff0c:	6850      	ldr	r0, [r2, #4]
 800ff0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff10:	6892      	ldr	r2, [r2, #8]
 800ff12:	4611      	mov	r1, r2
 800ff14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f2c0 80ae 	blt.w	801007a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ff22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff24:	695b      	ldr	r3, [r3, #20]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d004      	beq.n	800ff34 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff2c:	3304      	adds	r3, #4
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7fd fe4c 	bl	800dbcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff34:	463b      	mov	r3, r7
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7ff ff6a 	bl	800fe10 <prvSampleTimeNow>
 800ff3c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2b09      	cmp	r3, #9
 800ff42:	f200 8097 	bhi.w	8010074 <prvProcessReceivedCommands+0x1a0>
 800ff46:	a201      	add	r2, pc, #4	@ (adr r2, 800ff4c <prvProcessReceivedCommands+0x78>)
 800ff48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff4c:	0800ff75 	.word	0x0800ff75
 800ff50:	0800ff75 	.word	0x0800ff75
 800ff54:	0800ff75 	.word	0x0800ff75
 800ff58:	0800ffeb 	.word	0x0800ffeb
 800ff5c:	0800ffff 	.word	0x0800ffff
 800ff60:	0801004b 	.word	0x0801004b
 800ff64:	0800ff75 	.word	0x0800ff75
 800ff68:	0800ff75 	.word	0x0800ff75
 800ff6c:	0800ffeb 	.word	0x0800ffeb
 800ff70:	0800ffff 	.word	0x0800ffff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ff74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ff7a:	f043 0301 	orr.w	r3, r3, #1
 800ff7e:	b2da      	uxtb	r2, r3
 800ff80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ff86:	68ba      	ldr	r2, [r7, #8]
 800ff88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff8a:	699b      	ldr	r3, [r3, #24]
 800ff8c:	18d1      	adds	r1, r2, r3
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff94:	f7ff ff5c 	bl	800fe50 <prvInsertTimerInActiveList>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d06c      	beq.n	8010078 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffa0:	6a1b      	ldr	r3, [r3, #32]
 800ffa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ffa4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ffa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ffac:	f003 0304 	and.w	r3, r3, #4
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d061      	beq.n	8010078 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ffb4:	68ba      	ldr	r2, [r7, #8]
 800ffb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffb8:	699b      	ldr	r3, [r3, #24]
 800ffba:	441a      	add	r2, r3
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	9300      	str	r3, [sp, #0]
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	2100      	movs	r1, #0
 800ffc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ffc6:	f7ff fe01 	bl	800fbcc <xTimerGenericCommand>
 800ffca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ffcc:	6a3b      	ldr	r3, [r7, #32]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d152      	bne.n	8010078 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ffd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffd6:	f383 8811 	msr	BASEPRI, r3
 800ffda:	f3bf 8f6f 	isb	sy
 800ffde:	f3bf 8f4f 	dsb	sy
 800ffe2:	61bb      	str	r3, [r7, #24]
}
 800ffe4:	bf00      	nop
 800ffe6:	bf00      	nop
 800ffe8:	e7fd      	b.n	800ffe6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ffea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fff0:	f023 0301 	bic.w	r3, r3, #1
 800fff4:	b2da      	uxtb	r2, r3
 800fff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fff8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fffc:	e03d      	b.n	801007a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010000:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010004:	f043 0301 	orr.w	r3, r3, #1
 8010008:	b2da      	uxtb	r2, r3
 801000a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801000c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010010:	68ba      	ldr	r2, [r7, #8]
 8010012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010014:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010018:	699b      	ldr	r3, [r3, #24]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d10b      	bne.n	8010036 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801001e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010022:	f383 8811 	msr	BASEPRI, r3
 8010026:	f3bf 8f6f 	isb	sy
 801002a:	f3bf 8f4f 	dsb	sy
 801002e:	617b      	str	r3, [r7, #20]
}
 8010030:	bf00      	nop
 8010032:	bf00      	nop
 8010034:	e7fd      	b.n	8010032 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010038:	699a      	ldr	r2, [r3, #24]
 801003a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801003c:	18d1      	adds	r1, r2, r3
 801003e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010044:	f7ff ff04 	bl	800fe50 <prvInsertTimerInActiveList>
					break;
 8010048:	e017      	b.n	801007a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801004a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801004c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010050:	f003 0302 	and.w	r3, r3, #2
 8010054:	2b00      	cmp	r3, #0
 8010056:	d103      	bne.n	8010060 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010058:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801005a:	f000 fbe5 	bl	8010828 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801005e:	e00c      	b.n	801007a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010062:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010066:	f023 0301 	bic.w	r3, r3, #1
 801006a:	b2da      	uxtb	r2, r3
 801006c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801006e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010072:	e002      	b.n	801007a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010074:	bf00      	nop
 8010076:	e000      	b.n	801007a <prvProcessReceivedCommands+0x1a6>
					break;
 8010078:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801007a:	4b08      	ldr	r3, [pc, #32]	@ (801009c <prvProcessReceivedCommands+0x1c8>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	1d39      	adds	r1, r7, #4
 8010080:	2200      	movs	r2, #0
 8010082:	4618      	mov	r0, r3
 8010084:	f7fe f8b2 	bl	800e1ec <xQueueReceive>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	f47f af26 	bne.w	800fedc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010090:	bf00      	nop
 8010092:	bf00      	nop
 8010094:	3730      	adds	r7, #48	@ 0x30
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	20003220 	.word	0x20003220

080100a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b088      	sub	sp, #32
 80100a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80100a6:	e049      	b.n	801013c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80100a8:	4b2e      	ldr	r3, [pc, #184]	@ (8010164 <prvSwitchTimerLists+0xc4>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68db      	ldr	r3, [r3, #12]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100b2:	4b2c      	ldr	r3, [pc, #176]	@ (8010164 <prvSwitchTimerLists+0xc4>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	68db      	ldr	r3, [r3, #12]
 80100b8:	68db      	ldr	r3, [r3, #12]
 80100ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	3304      	adds	r3, #4
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7fd fd83 	bl	800dbcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	6a1b      	ldr	r3, [r3, #32]
 80100ca:	68f8      	ldr	r0, [r7, #12]
 80100cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80100d4:	f003 0304 	and.w	r3, r3, #4
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d02f      	beq.n	801013c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	699b      	ldr	r3, [r3, #24]
 80100e0:	693a      	ldr	r2, [r7, #16]
 80100e2:	4413      	add	r3, r2
 80100e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80100e6:	68ba      	ldr	r2, [r7, #8]
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d90e      	bls.n	801010c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	68ba      	ldr	r2, [r7, #8]
 80100f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	68fa      	ldr	r2, [r7, #12]
 80100f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80100fa:	4b1a      	ldr	r3, [pc, #104]	@ (8010164 <prvSwitchTimerLists+0xc4>)
 80100fc:	681a      	ldr	r2, [r3, #0]
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	3304      	adds	r3, #4
 8010102:	4619      	mov	r1, r3
 8010104:	4610      	mov	r0, r2
 8010106:	f7fd fd28 	bl	800db5a <vListInsert>
 801010a:	e017      	b.n	801013c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801010c:	2300      	movs	r3, #0
 801010e:	9300      	str	r3, [sp, #0]
 8010110:	2300      	movs	r3, #0
 8010112:	693a      	ldr	r2, [r7, #16]
 8010114:	2100      	movs	r1, #0
 8010116:	68f8      	ldr	r0, [r7, #12]
 8010118:	f7ff fd58 	bl	800fbcc <xTimerGenericCommand>
 801011c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d10b      	bne.n	801013c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010128:	f383 8811 	msr	BASEPRI, r3
 801012c:	f3bf 8f6f 	isb	sy
 8010130:	f3bf 8f4f 	dsb	sy
 8010134:	603b      	str	r3, [r7, #0]
}
 8010136:	bf00      	nop
 8010138:	bf00      	nop
 801013a:	e7fd      	b.n	8010138 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801013c:	4b09      	ldr	r3, [pc, #36]	@ (8010164 <prvSwitchTimerLists+0xc4>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d1b0      	bne.n	80100a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010146:	4b07      	ldr	r3, [pc, #28]	@ (8010164 <prvSwitchTimerLists+0xc4>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801014c:	4b06      	ldr	r3, [pc, #24]	@ (8010168 <prvSwitchTimerLists+0xc8>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	4a04      	ldr	r2, [pc, #16]	@ (8010164 <prvSwitchTimerLists+0xc4>)
 8010152:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010154:	4a04      	ldr	r2, [pc, #16]	@ (8010168 <prvSwitchTimerLists+0xc8>)
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	6013      	str	r3, [r2, #0]
}
 801015a:	bf00      	nop
 801015c:	3718      	adds	r7, #24
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	20003218 	.word	0x20003218
 8010168:	2000321c 	.word	0x2000321c

0801016c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010172:	f000 f969 	bl	8010448 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010176:	4b15      	ldr	r3, [pc, #84]	@ (80101cc <prvCheckForValidListAndQueue+0x60>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d120      	bne.n	80101c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801017e:	4814      	ldr	r0, [pc, #80]	@ (80101d0 <prvCheckForValidListAndQueue+0x64>)
 8010180:	f7fd fc9a 	bl	800dab8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010184:	4813      	ldr	r0, [pc, #76]	@ (80101d4 <prvCheckForValidListAndQueue+0x68>)
 8010186:	f7fd fc97 	bl	800dab8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801018a:	4b13      	ldr	r3, [pc, #76]	@ (80101d8 <prvCheckForValidListAndQueue+0x6c>)
 801018c:	4a10      	ldr	r2, [pc, #64]	@ (80101d0 <prvCheckForValidListAndQueue+0x64>)
 801018e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010190:	4b12      	ldr	r3, [pc, #72]	@ (80101dc <prvCheckForValidListAndQueue+0x70>)
 8010192:	4a10      	ldr	r2, [pc, #64]	@ (80101d4 <prvCheckForValidListAndQueue+0x68>)
 8010194:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010196:	2300      	movs	r3, #0
 8010198:	9300      	str	r3, [sp, #0]
 801019a:	4b11      	ldr	r3, [pc, #68]	@ (80101e0 <prvCheckForValidListAndQueue+0x74>)
 801019c:	4a11      	ldr	r2, [pc, #68]	@ (80101e4 <prvCheckForValidListAndQueue+0x78>)
 801019e:	2110      	movs	r1, #16
 80101a0:	200a      	movs	r0, #10
 80101a2:	f7fd fda7 	bl	800dcf4 <xQueueGenericCreateStatic>
 80101a6:	4603      	mov	r3, r0
 80101a8:	4a08      	ldr	r2, [pc, #32]	@ (80101cc <prvCheckForValidListAndQueue+0x60>)
 80101aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80101ac:	4b07      	ldr	r3, [pc, #28]	@ (80101cc <prvCheckForValidListAndQueue+0x60>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d005      	beq.n	80101c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80101b4:	4b05      	ldr	r3, [pc, #20]	@ (80101cc <prvCheckForValidListAndQueue+0x60>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	490b      	ldr	r1, [pc, #44]	@ (80101e8 <prvCheckForValidListAndQueue+0x7c>)
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fe fb30 	bl	800e820 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80101c0:	f000 f974 	bl	80104ac <vPortExitCritical>
}
 80101c4:	bf00      	nop
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	20003220 	.word	0x20003220
 80101d0:	200031f0 	.word	0x200031f0
 80101d4:	20003204 	.word	0x20003204
 80101d8:	20003218 	.word	0x20003218
 80101dc:	2000321c 	.word	0x2000321c
 80101e0:	200032cc 	.word	0x200032cc
 80101e4:	2000322c 	.word	0x2000322c
 80101e8:	08012c4c 	.word	0x08012c4c

080101ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80101ec:	b480      	push	{r7}
 80101ee:	b085      	sub	sp, #20
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	3b04      	subs	r3, #4
 80101fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	3b04      	subs	r3, #4
 801020a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	f023 0201 	bic.w	r2, r3, #1
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	3b04      	subs	r3, #4
 801021a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801021c:	4a0c      	ldr	r2, [pc, #48]	@ (8010250 <pxPortInitialiseStack+0x64>)
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	3b14      	subs	r3, #20
 8010226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	3b04      	subs	r3, #4
 8010232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f06f 0202 	mvn.w	r2, #2
 801023a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	3b20      	subs	r3, #32
 8010240:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010242:	68fb      	ldr	r3, [r7, #12]
}
 8010244:	4618      	mov	r0, r3
 8010246:	3714      	adds	r7, #20
 8010248:	46bd      	mov	sp, r7
 801024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024e:	4770      	bx	lr
 8010250:	08010255 	.word	0x08010255

08010254 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010254:	b480      	push	{r7}
 8010256:	b085      	sub	sp, #20
 8010258:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801025a:	2300      	movs	r3, #0
 801025c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801025e:	4b13      	ldr	r3, [pc, #76]	@ (80102ac <prvTaskExitError+0x58>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010266:	d00b      	beq.n	8010280 <prvTaskExitError+0x2c>
	__asm volatile
 8010268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801026c:	f383 8811 	msr	BASEPRI, r3
 8010270:	f3bf 8f6f 	isb	sy
 8010274:	f3bf 8f4f 	dsb	sy
 8010278:	60fb      	str	r3, [r7, #12]
}
 801027a:	bf00      	nop
 801027c:	bf00      	nop
 801027e:	e7fd      	b.n	801027c <prvTaskExitError+0x28>
	__asm volatile
 8010280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010284:	f383 8811 	msr	BASEPRI, r3
 8010288:	f3bf 8f6f 	isb	sy
 801028c:	f3bf 8f4f 	dsb	sy
 8010290:	60bb      	str	r3, [r7, #8]
}
 8010292:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010294:	bf00      	nop
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d0fc      	beq.n	8010296 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801029c:	bf00      	nop
 801029e:	bf00      	nop
 80102a0:	3714      	adds	r7, #20
 80102a2:	46bd      	mov	sp, r7
 80102a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a8:	4770      	bx	lr
 80102aa:	bf00      	nop
 80102ac:	200000b0 	.word	0x200000b0

080102b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80102b0:	4b07      	ldr	r3, [pc, #28]	@ (80102d0 <pxCurrentTCBConst2>)
 80102b2:	6819      	ldr	r1, [r3, #0]
 80102b4:	6808      	ldr	r0, [r1, #0]
 80102b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ba:	f380 8809 	msr	PSP, r0
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	f04f 0000 	mov.w	r0, #0
 80102c6:	f380 8811 	msr	BASEPRI, r0
 80102ca:	4770      	bx	lr
 80102cc:	f3af 8000 	nop.w

080102d0 <pxCurrentTCBConst2>:
 80102d0:	20002cf0 	.word	0x20002cf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80102d4:	bf00      	nop
 80102d6:	bf00      	nop

080102d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80102d8:	4808      	ldr	r0, [pc, #32]	@ (80102fc <prvPortStartFirstTask+0x24>)
 80102da:	6800      	ldr	r0, [r0, #0]
 80102dc:	6800      	ldr	r0, [r0, #0]
 80102de:	f380 8808 	msr	MSP, r0
 80102e2:	f04f 0000 	mov.w	r0, #0
 80102e6:	f380 8814 	msr	CONTROL, r0
 80102ea:	b662      	cpsie	i
 80102ec:	b661      	cpsie	f
 80102ee:	f3bf 8f4f 	dsb	sy
 80102f2:	f3bf 8f6f 	isb	sy
 80102f6:	df00      	svc	0
 80102f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80102fa:	bf00      	nop
 80102fc:	e000ed08 	.word	0xe000ed08

08010300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b086      	sub	sp, #24
 8010304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010306:	4b47      	ldr	r3, [pc, #284]	@ (8010424 <xPortStartScheduler+0x124>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	4a47      	ldr	r2, [pc, #284]	@ (8010428 <xPortStartScheduler+0x128>)
 801030c:	4293      	cmp	r3, r2
 801030e:	d10b      	bne.n	8010328 <xPortStartScheduler+0x28>
	__asm volatile
 8010310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010314:	f383 8811 	msr	BASEPRI, r3
 8010318:	f3bf 8f6f 	isb	sy
 801031c:	f3bf 8f4f 	dsb	sy
 8010320:	613b      	str	r3, [r7, #16]
}
 8010322:	bf00      	nop
 8010324:	bf00      	nop
 8010326:	e7fd      	b.n	8010324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010328:	4b3e      	ldr	r3, [pc, #248]	@ (8010424 <xPortStartScheduler+0x124>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4a3f      	ldr	r2, [pc, #252]	@ (801042c <xPortStartScheduler+0x12c>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d10b      	bne.n	801034a <xPortStartScheduler+0x4a>
	__asm volatile
 8010332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010336:	f383 8811 	msr	BASEPRI, r3
 801033a:	f3bf 8f6f 	isb	sy
 801033e:	f3bf 8f4f 	dsb	sy
 8010342:	60fb      	str	r3, [r7, #12]
}
 8010344:	bf00      	nop
 8010346:	bf00      	nop
 8010348:	e7fd      	b.n	8010346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801034a:	4b39      	ldr	r3, [pc, #228]	@ (8010430 <xPortStartScheduler+0x130>)
 801034c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	b2db      	uxtb	r3, r3
 8010354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	22ff      	movs	r2, #255	@ 0xff
 801035a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	b2db      	uxtb	r3, r3
 8010362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010364:	78fb      	ldrb	r3, [r7, #3]
 8010366:	b2db      	uxtb	r3, r3
 8010368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801036c:	b2da      	uxtb	r2, r3
 801036e:	4b31      	ldr	r3, [pc, #196]	@ (8010434 <xPortStartScheduler+0x134>)
 8010370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010372:	4b31      	ldr	r3, [pc, #196]	@ (8010438 <xPortStartScheduler+0x138>)
 8010374:	2207      	movs	r2, #7
 8010376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010378:	e009      	b.n	801038e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801037a:	4b2f      	ldr	r3, [pc, #188]	@ (8010438 <xPortStartScheduler+0x138>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	3b01      	subs	r3, #1
 8010380:	4a2d      	ldr	r2, [pc, #180]	@ (8010438 <xPortStartScheduler+0x138>)
 8010382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010384:	78fb      	ldrb	r3, [r7, #3]
 8010386:	b2db      	uxtb	r3, r3
 8010388:	005b      	lsls	r3, r3, #1
 801038a:	b2db      	uxtb	r3, r3
 801038c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801038e:	78fb      	ldrb	r3, [r7, #3]
 8010390:	b2db      	uxtb	r3, r3
 8010392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010396:	2b80      	cmp	r3, #128	@ 0x80
 8010398:	d0ef      	beq.n	801037a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801039a:	4b27      	ldr	r3, [pc, #156]	@ (8010438 <xPortStartScheduler+0x138>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	f1c3 0307 	rsb	r3, r3, #7
 80103a2:	2b04      	cmp	r3, #4
 80103a4:	d00b      	beq.n	80103be <xPortStartScheduler+0xbe>
	__asm volatile
 80103a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103aa:	f383 8811 	msr	BASEPRI, r3
 80103ae:	f3bf 8f6f 	isb	sy
 80103b2:	f3bf 8f4f 	dsb	sy
 80103b6:	60bb      	str	r3, [r7, #8]
}
 80103b8:	bf00      	nop
 80103ba:	bf00      	nop
 80103bc:	e7fd      	b.n	80103ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80103be:	4b1e      	ldr	r3, [pc, #120]	@ (8010438 <xPortStartScheduler+0x138>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	021b      	lsls	r3, r3, #8
 80103c4:	4a1c      	ldr	r2, [pc, #112]	@ (8010438 <xPortStartScheduler+0x138>)
 80103c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80103c8:	4b1b      	ldr	r3, [pc, #108]	@ (8010438 <xPortStartScheduler+0x138>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80103d0:	4a19      	ldr	r2, [pc, #100]	@ (8010438 <xPortStartScheduler+0x138>)
 80103d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	b2da      	uxtb	r2, r3
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80103dc:	4b17      	ldr	r3, [pc, #92]	@ (801043c <xPortStartScheduler+0x13c>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	4a16      	ldr	r2, [pc, #88]	@ (801043c <xPortStartScheduler+0x13c>)
 80103e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80103e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80103e8:	4b14      	ldr	r3, [pc, #80]	@ (801043c <xPortStartScheduler+0x13c>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4a13      	ldr	r2, [pc, #76]	@ (801043c <xPortStartScheduler+0x13c>)
 80103ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80103f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80103f4:	f000 f8da 	bl	80105ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80103f8:	4b11      	ldr	r3, [pc, #68]	@ (8010440 <xPortStartScheduler+0x140>)
 80103fa:	2200      	movs	r2, #0
 80103fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80103fe:	f000 f8f9 	bl	80105f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010402:	4b10      	ldr	r3, [pc, #64]	@ (8010444 <xPortStartScheduler+0x144>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	4a0f      	ldr	r2, [pc, #60]	@ (8010444 <xPortStartScheduler+0x144>)
 8010408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801040c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801040e:	f7ff ff63 	bl	80102d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010412:	f7fe ff31 	bl	800f278 <vTaskSwitchContext>
	prvTaskExitError();
 8010416:	f7ff ff1d 	bl	8010254 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801041a:	2300      	movs	r3, #0
}
 801041c:	4618      	mov	r0, r3
 801041e:	3718      	adds	r7, #24
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}
 8010424:	e000ed00 	.word	0xe000ed00
 8010428:	410fc271 	.word	0x410fc271
 801042c:	410fc270 	.word	0x410fc270
 8010430:	e000e400 	.word	0xe000e400
 8010434:	2000331c 	.word	0x2000331c
 8010438:	20003320 	.word	0x20003320
 801043c:	e000ed20 	.word	0xe000ed20
 8010440:	200000b0 	.word	0x200000b0
 8010444:	e000ef34 	.word	0xe000ef34

08010448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010448:	b480      	push	{r7}
 801044a:	b083      	sub	sp, #12
 801044c:	af00      	add	r7, sp, #0
	__asm volatile
 801044e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010452:	f383 8811 	msr	BASEPRI, r3
 8010456:	f3bf 8f6f 	isb	sy
 801045a:	f3bf 8f4f 	dsb	sy
 801045e:	607b      	str	r3, [r7, #4]
}
 8010460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010462:	4b10      	ldr	r3, [pc, #64]	@ (80104a4 <vPortEnterCritical+0x5c>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	3301      	adds	r3, #1
 8010468:	4a0e      	ldr	r2, [pc, #56]	@ (80104a4 <vPortEnterCritical+0x5c>)
 801046a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801046c:	4b0d      	ldr	r3, [pc, #52]	@ (80104a4 <vPortEnterCritical+0x5c>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2b01      	cmp	r3, #1
 8010472:	d110      	bne.n	8010496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010474:	4b0c      	ldr	r3, [pc, #48]	@ (80104a8 <vPortEnterCritical+0x60>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	b2db      	uxtb	r3, r3
 801047a:	2b00      	cmp	r3, #0
 801047c:	d00b      	beq.n	8010496 <vPortEnterCritical+0x4e>
	__asm volatile
 801047e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010482:	f383 8811 	msr	BASEPRI, r3
 8010486:	f3bf 8f6f 	isb	sy
 801048a:	f3bf 8f4f 	dsb	sy
 801048e:	603b      	str	r3, [r7, #0]
}
 8010490:	bf00      	nop
 8010492:	bf00      	nop
 8010494:	e7fd      	b.n	8010492 <vPortEnterCritical+0x4a>
	}
}
 8010496:	bf00      	nop
 8010498:	370c      	adds	r7, #12
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop
 80104a4:	200000b0 	.word	0x200000b0
 80104a8:	e000ed04 	.word	0xe000ed04

080104ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80104b2:	4b12      	ldr	r3, [pc, #72]	@ (80104fc <vPortExitCritical+0x50>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d10b      	bne.n	80104d2 <vPortExitCritical+0x26>
	__asm volatile
 80104ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104be:	f383 8811 	msr	BASEPRI, r3
 80104c2:	f3bf 8f6f 	isb	sy
 80104c6:	f3bf 8f4f 	dsb	sy
 80104ca:	607b      	str	r3, [r7, #4]
}
 80104cc:	bf00      	nop
 80104ce:	bf00      	nop
 80104d0:	e7fd      	b.n	80104ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80104d2:	4b0a      	ldr	r3, [pc, #40]	@ (80104fc <vPortExitCritical+0x50>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	3b01      	subs	r3, #1
 80104d8:	4a08      	ldr	r2, [pc, #32]	@ (80104fc <vPortExitCritical+0x50>)
 80104da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80104dc:	4b07      	ldr	r3, [pc, #28]	@ (80104fc <vPortExitCritical+0x50>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d105      	bne.n	80104f0 <vPortExitCritical+0x44>
 80104e4:	2300      	movs	r3, #0
 80104e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	f383 8811 	msr	BASEPRI, r3
}
 80104ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80104f0:	bf00      	nop
 80104f2:	370c      	adds	r7, #12
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr
 80104fc:	200000b0 	.word	0x200000b0

08010500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010500:	f3ef 8009 	mrs	r0, PSP
 8010504:	f3bf 8f6f 	isb	sy
 8010508:	4b15      	ldr	r3, [pc, #84]	@ (8010560 <pxCurrentTCBConst>)
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	f01e 0f10 	tst.w	lr, #16
 8010510:	bf08      	it	eq
 8010512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801051a:	6010      	str	r0, [r2, #0]
 801051c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010524:	f380 8811 	msr	BASEPRI, r0
 8010528:	f3bf 8f4f 	dsb	sy
 801052c:	f3bf 8f6f 	isb	sy
 8010530:	f7fe fea2 	bl	800f278 <vTaskSwitchContext>
 8010534:	f04f 0000 	mov.w	r0, #0
 8010538:	f380 8811 	msr	BASEPRI, r0
 801053c:	bc09      	pop	{r0, r3}
 801053e:	6819      	ldr	r1, [r3, #0]
 8010540:	6808      	ldr	r0, [r1, #0]
 8010542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010546:	f01e 0f10 	tst.w	lr, #16
 801054a:	bf08      	it	eq
 801054c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010550:	f380 8809 	msr	PSP, r0
 8010554:	f3bf 8f6f 	isb	sy
 8010558:	4770      	bx	lr
 801055a:	bf00      	nop
 801055c:	f3af 8000 	nop.w

08010560 <pxCurrentTCBConst>:
 8010560:	20002cf0 	.word	0x20002cf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010564:	bf00      	nop
 8010566:	bf00      	nop

08010568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
	__asm volatile
 801056e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010572:	f383 8811 	msr	BASEPRI, r3
 8010576:	f3bf 8f6f 	isb	sy
 801057a:	f3bf 8f4f 	dsb	sy
 801057e:	607b      	str	r3, [r7, #4]
}
 8010580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010582:	f7fe fdbf 	bl	800f104 <xTaskIncrementTick>
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	d003      	beq.n	8010594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801058c:	4b06      	ldr	r3, [pc, #24]	@ (80105a8 <xPortSysTickHandler+0x40>)
 801058e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010592:	601a      	str	r2, [r3, #0]
 8010594:	2300      	movs	r3, #0
 8010596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	f383 8811 	msr	BASEPRI, r3
}
 801059e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80105a0:	bf00      	nop
 80105a2:	3708      	adds	r7, #8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}
 80105a8:	e000ed04 	.word	0xe000ed04

080105ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80105ac:	b480      	push	{r7}
 80105ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80105b0:	4b0b      	ldr	r3, [pc, #44]	@ (80105e0 <vPortSetupTimerInterrupt+0x34>)
 80105b2:	2200      	movs	r2, #0
 80105b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80105b6:	4b0b      	ldr	r3, [pc, #44]	@ (80105e4 <vPortSetupTimerInterrupt+0x38>)
 80105b8:	2200      	movs	r2, #0
 80105ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80105bc:	4b0a      	ldr	r3, [pc, #40]	@ (80105e8 <vPortSetupTimerInterrupt+0x3c>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4a0a      	ldr	r2, [pc, #40]	@ (80105ec <vPortSetupTimerInterrupt+0x40>)
 80105c2:	fba2 2303 	umull	r2, r3, r2, r3
 80105c6:	099b      	lsrs	r3, r3, #6
 80105c8:	4a09      	ldr	r2, [pc, #36]	@ (80105f0 <vPortSetupTimerInterrupt+0x44>)
 80105ca:	3b01      	subs	r3, #1
 80105cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80105ce:	4b04      	ldr	r3, [pc, #16]	@ (80105e0 <vPortSetupTimerInterrupt+0x34>)
 80105d0:	2207      	movs	r2, #7
 80105d2:	601a      	str	r2, [r3, #0]
}
 80105d4:	bf00      	nop
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr
 80105de:	bf00      	nop
 80105e0:	e000e010 	.word	0xe000e010
 80105e4:	e000e018 	.word	0xe000e018
 80105e8:	20000004 	.word	0x20000004
 80105ec:	10624dd3 	.word	0x10624dd3
 80105f0:	e000e014 	.word	0xe000e014

080105f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80105f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010604 <vPortEnableVFP+0x10>
 80105f8:	6801      	ldr	r1, [r0, #0]
 80105fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80105fe:	6001      	str	r1, [r0, #0]
 8010600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010602:	bf00      	nop
 8010604:	e000ed88 	.word	0xe000ed88

08010608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010608:	b480      	push	{r7}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801060e:	f3ef 8305 	mrs	r3, IPSR
 8010612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2b0f      	cmp	r3, #15
 8010618:	d915      	bls.n	8010646 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801061a:	4a18      	ldr	r2, [pc, #96]	@ (801067c <vPortValidateInterruptPriority+0x74>)
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	4413      	add	r3, r2
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010624:	4b16      	ldr	r3, [pc, #88]	@ (8010680 <vPortValidateInterruptPriority+0x78>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	7afa      	ldrb	r2, [r7, #11]
 801062a:	429a      	cmp	r2, r3
 801062c:	d20b      	bcs.n	8010646 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801062e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010632:	f383 8811 	msr	BASEPRI, r3
 8010636:	f3bf 8f6f 	isb	sy
 801063a:	f3bf 8f4f 	dsb	sy
 801063e:	607b      	str	r3, [r7, #4]
}
 8010640:	bf00      	nop
 8010642:	bf00      	nop
 8010644:	e7fd      	b.n	8010642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010646:	4b0f      	ldr	r3, [pc, #60]	@ (8010684 <vPortValidateInterruptPriority+0x7c>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801064e:	4b0e      	ldr	r3, [pc, #56]	@ (8010688 <vPortValidateInterruptPriority+0x80>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	429a      	cmp	r2, r3
 8010654:	d90b      	bls.n	801066e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801065a:	f383 8811 	msr	BASEPRI, r3
 801065e:	f3bf 8f6f 	isb	sy
 8010662:	f3bf 8f4f 	dsb	sy
 8010666:	603b      	str	r3, [r7, #0]
}
 8010668:	bf00      	nop
 801066a:	bf00      	nop
 801066c:	e7fd      	b.n	801066a <vPortValidateInterruptPriority+0x62>
	}
 801066e:	bf00      	nop
 8010670:	3714      	adds	r7, #20
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop
 801067c:	e000e3f0 	.word	0xe000e3f0
 8010680:	2000331c 	.word	0x2000331c
 8010684:	e000ed0c 	.word	0xe000ed0c
 8010688:	20003320 	.word	0x20003320

0801068c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b08a      	sub	sp, #40	@ 0x28
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010694:	2300      	movs	r3, #0
 8010696:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010698:	f7fe fc78 	bl	800ef8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801069c:	4b5c      	ldr	r3, [pc, #368]	@ (8010810 <pvPortMalloc+0x184>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d101      	bne.n	80106a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80106a4:	f000 f924 	bl	80108f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80106a8:	4b5a      	ldr	r3, [pc, #360]	@ (8010814 <pvPortMalloc+0x188>)
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	4013      	ands	r3, r2
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	f040 8095 	bne.w	80107e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d01e      	beq.n	80106fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80106bc:	2208      	movs	r2, #8
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4413      	add	r3, r2
 80106c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f003 0307 	and.w	r3, r3, #7
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d015      	beq.n	80106fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	f023 0307 	bic.w	r3, r3, #7
 80106d4:	3308      	adds	r3, #8
 80106d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f003 0307 	and.w	r3, r3, #7
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d00b      	beq.n	80106fa <pvPortMalloc+0x6e>
	__asm volatile
 80106e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106e6:	f383 8811 	msr	BASEPRI, r3
 80106ea:	f3bf 8f6f 	isb	sy
 80106ee:	f3bf 8f4f 	dsb	sy
 80106f2:	617b      	str	r3, [r7, #20]
}
 80106f4:	bf00      	nop
 80106f6:	bf00      	nop
 80106f8:	e7fd      	b.n	80106f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d06f      	beq.n	80107e0 <pvPortMalloc+0x154>
 8010700:	4b45      	ldr	r3, [pc, #276]	@ (8010818 <pvPortMalloc+0x18c>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	429a      	cmp	r2, r3
 8010708:	d86a      	bhi.n	80107e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801070a:	4b44      	ldr	r3, [pc, #272]	@ (801081c <pvPortMalloc+0x190>)
 801070c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801070e:	4b43      	ldr	r3, [pc, #268]	@ (801081c <pvPortMalloc+0x190>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010714:	e004      	b.n	8010720 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010718:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801071a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	429a      	cmp	r2, r3
 8010728:	d903      	bls.n	8010732 <pvPortMalloc+0xa6>
 801072a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d1f1      	bne.n	8010716 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010732:	4b37      	ldr	r3, [pc, #220]	@ (8010810 <pvPortMalloc+0x184>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010738:	429a      	cmp	r2, r3
 801073a:	d051      	beq.n	80107e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801073c:	6a3b      	ldr	r3, [r7, #32]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	2208      	movs	r2, #8
 8010742:	4413      	add	r3, r2
 8010744:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	6a3b      	ldr	r3, [r7, #32]
 801074c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801074e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010750:	685a      	ldr	r2, [r3, #4]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	1ad2      	subs	r2, r2, r3
 8010756:	2308      	movs	r3, #8
 8010758:	005b      	lsls	r3, r3, #1
 801075a:	429a      	cmp	r2, r3
 801075c:	d920      	bls.n	80107a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801075e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	4413      	add	r3, r2
 8010764:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	f003 0307 	and.w	r3, r3, #7
 801076c:	2b00      	cmp	r3, #0
 801076e:	d00b      	beq.n	8010788 <pvPortMalloc+0xfc>
	__asm volatile
 8010770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010774:	f383 8811 	msr	BASEPRI, r3
 8010778:	f3bf 8f6f 	isb	sy
 801077c:	f3bf 8f4f 	dsb	sy
 8010780:	613b      	str	r3, [r7, #16]
}
 8010782:	bf00      	nop
 8010784:	bf00      	nop
 8010786:	e7fd      	b.n	8010784 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801078a:	685a      	ldr	r2, [r3, #4]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	1ad2      	subs	r2, r2, r3
 8010790:	69bb      	ldr	r3, [r7, #24]
 8010792:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801079a:	69b8      	ldr	r0, [r7, #24]
 801079c:	f000 f90a 	bl	80109b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80107a0:	4b1d      	ldr	r3, [pc, #116]	@ (8010818 <pvPortMalloc+0x18c>)
 80107a2:	681a      	ldr	r2, [r3, #0]
 80107a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	1ad3      	subs	r3, r2, r3
 80107aa:	4a1b      	ldr	r2, [pc, #108]	@ (8010818 <pvPortMalloc+0x18c>)
 80107ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80107ae:	4b1a      	ldr	r3, [pc, #104]	@ (8010818 <pvPortMalloc+0x18c>)
 80107b0:	681a      	ldr	r2, [r3, #0]
 80107b2:	4b1b      	ldr	r3, [pc, #108]	@ (8010820 <pvPortMalloc+0x194>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d203      	bcs.n	80107c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80107ba:	4b17      	ldr	r3, [pc, #92]	@ (8010818 <pvPortMalloc+0x18c>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	4a18      	ldr	r2, [pc, #96]	@ (8010820 <pvPortMalloc+0x194>)
 80107c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80107c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107c4:	685a      	ldr	r2, [r3, #4]
 80107c6:	4b13      	ldr	r3, [pc, #76]	@ (8010814 <pvPortMalloc+0x188>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	431a      	orrs	r2, r3
 80107cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80107d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107d2:	2200      	movs	r2, #0
 80107d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80107d6:	4b13      	ldr	r3, [pc, #76]	@ (8010824 <pvPortMalloc+0x198>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	3301      	adds	r3, #1
 80107dc:	4a11      	ldr	r2, [pc, #68]	@ (8010824 <pvPortMalloc+0x198>)
 80107de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80107e0:	f7fe fbe2 	bl	800efa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80107e4:	69fb      	ldr	r3, [r7, #28]
 80107e6:	f003 0307 	and.w	r3, r3, #7
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00b      	beq.n	8010806 <pvPortMalloc+0x17a>
	__asm volatile
 80107ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107f2:	f383 8811 	msr	BASEPRI, r3
 80107f6:	f3bf 8f6f 	isb	sy
 80107fa:	f3bf 8f4f 	dsb	sy
 80107fe:	60fb      	str	r3, [r7, #12]
}
 8010800:	bf00      	nop
 8010802:	bf00      	nop
 8010804:	e7fd      	b.n	8010802 <pvPortMalloc+0x176>
	return pvReturn;
 8010806:	69fb      	ldr	r3, [r7, #28]
}
 8010808:	4618      	mov	r0, r3
 801080a:	3728      	adds	r7, #40	@ 0x28
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	20006f2c 	.word	0x20006f2c
 8010814:	20006f40 	.word	0x20006f40
 8010818:	20006f30 	.word	0x20006f30
 801081c:	20006f24 	.word	0x20006f24
 8010820:	20006f34 	.word	0x20006f34
 8010824:	20006f38 	.word	0x20006f38

08010828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b086      	sub	sp, #24
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d04f      	beq.n	80108da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801083a:	2308      	movs	r3, #8
 801083c:	425b      	negs	r3, r3
 801083e:	697a      	ldr	r2, [r7, #20]
 8010840:	4413      	add	r3, r2
 8010842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	685a      	ldr	r2, [r3, #4]
 801084c:	4b25      	ldr	r3, [pc, #148]	@ (80108e4 <vPortFree+0xbc>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	4013      	ands	r3, r2
 8010852:	2b00      	cmp	r3, #0
 8010854:	d10b      	bne.n	801086e <vPortFree+0x46>
	__asm volatile
 8010856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801085a:	f383 8811 	msr	BASEPRI, r3
 801085e:	f3bf 8f6f 	isb	sy
 8010862:	f3bf 8f4f 	dsb	sy
 8010866:	60fb      	str	r3, [r7, #12]
}
 8010868:	bf00      	nop
 801086a:	bf00      	nop
 801086c:	e7fd      	b.n	801086a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d00b      	beq.n	801088e <vPortFree+0x66>
	__asm volatile
 8010876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801087a:	f383 8811 	msr	BASEPRI, r3
 801087e:	f3bf 8f6f 	isb	sy
 8010882:	f3bf 8f4f 	dsb	sy
 8010886:	60bb      	str	r3, [r7, #8]
}
 8010888:	bf00      	nop
 801088a:	bf00      	nop
 801088c:	e7fd      	b.n	801088a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	685a      	ldr	r2, [r3, #4]
 8010892:	4b14      	ldr	r3, [pc, #80]	@ (80108e4 <vPortFree+0xbc>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4013      	ands	r3, r2
 8010898:	2b00      	cmp	r3, #0
 801089a:	d01e      	beq.n	80108da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d11a      	bne.n	80108da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	685a      	ldr	r2, [r3, #4]
 80108a8:	4b0e      	ldr	r3, [pc, #56]	@ (80108e4 <vPortFree+0xbc>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	43db      	mvns	r3, r3
 80108ae:	401a      	ands	r2, r3
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80108b4:	f7fe fb6a 	bl	800ef8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	685a      	ldr	r2, [r3, #4]
 80108bc:	4b0a      	ldr	r3, [pc, #40]	@ (80108e8 <vPortFree+0xc0>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	4413      	add	r3, r2
 80108c2:	4a09      	ldr	r2, [pc, #36]	@ (80108e8 <vPortFree+0xc0>)
 80108c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80108c6:	6938      	ldr	r0, [r7, #16]
 80108c8:	f000 f874 	bl	80109b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80108cc:	4b07      	ldr	r3, [pc, #28]	@ (80108ec <vPortFree+0xc4>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	3301      	adds	r3, #1
 80108d2:	4a06      	ldr	r2, [pc, #24]	@ (80108ec <vPortFree+0xc4>)
 80108d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80108d6:	f7fe fb67 	bl	800efa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80108da:	bf00      	nop
 80108dc:	3718      	adds	r7, #24
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}
 80108e2:	bf00      	nop
 80108e4:	20006f40 	.word	0x20006f40
 80108e8:	20006f30 	.word	0x20006f30
 80108ec:	20006f3c 	.word	0x20006f3c

080108f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80108f0:	b480      	push	{r7}
 80108f2:	b085      	sub	sp, #20
 80108f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80108f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80108fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80108fc:	4b27      	ldr	r3, [pc, #156]	@ (801099c <prvHeapInit+0xac>)
 80108fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	f003 0307 	and.w	r3, r3, #7
 8010906:	2b00      	cmp	r3, #0
 8010908:	d00c      	beq.n	8010924 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	3307      	adds	r3, #7
 801090e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f023 0307 	bic.w	r3, r3, #7
 8010916:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010918:	68ba      	ldr	r2, [r7, #8]
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	1ad3      	subs	r3, r2, r3
 801091e:	4a1f      	ldr	r2, [pc, #124]	@ (801099c <prvHeapInit+0xac>)
 8010920:	4413      	add	r3, r2
 8010922:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010928:	4a1d      	ldr	r2, [pc, #116]	@ (80109a0 <prvHeapInit+0xb0>)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801092e:	4b1c      	ldr	r3, [pc, #112]	@ (80109a0 <prvHeapInit+0xb0>)
 8010930:	2200      	movs	r2, #0
 8010932:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	68ba      	ldr	r2, [r7, #8]
 8010938:	4413      	add	r3, r2
 801093a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801093c:	2208      	movs	r2, #8
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	1a9b      	subs	r3, r3, r2
 8010942:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f023 0307 	bic.w	r3, r3, #7
 801094a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	4a15      	ldr	r2, [pc, #84]	@ (80109a4 <prvHeapInit+0xb4>)
 8010950:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010952:	4b14      	ldr	r3, [pc, #80]	@ (80109a4 <prvHeapInit+0xb4>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	2200      	movs	r2, #0
 8010958:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801095a:	4b12      	ldr	r3, [pc, #72]	@ (80109a4 <prvHeapInit+0xb4>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	2200      	movs	r2, #0
 8010960:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	68fa      	ldr	r2, [r7, #12]
 801096a:	1ad2      	subs	r2, r2, r3
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010970:	4b0c      	ldr	r3, [pc, #48]	@ (80109a4 <prvHeapInit+0xb4>)
 8010972:	681a      	ldr	r2, [r3, #0]
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	4a0a      	ldr	r2, [pc, #40]	@ (80109a8 <prvHeapInit+0xb8>)
 801097e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	4a09      	ldr	r2, [pc, #36]	@ (80109ac <prvHeapInit+0xbc>)
 8010986:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010988:	4b09      	ldr	r3, [pc, #36]	@ (80109b0 <prvHeapInit+0xc0>)
 801098a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801098e:	601a      	str	r2, [r3, #0]
}
 8010990:	bf00      	nop
 8010992:	3714      	adds	r7, #20
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr
 801099c:	20003324 	.word	0x20003324
 80109a0:	20006f24 	.word	0x20006f24
 80109a4:	20006f2c 	.word	0x20006f2c
 80109a8:	20006f34 	.word	0x20006f34
 80109ac:	20006f30 	.word	0x20006f30
 80109b0:	20006f40 	.word	0x20006f40

080109b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80109b4:	b480      	push	{r7}
 80109b6:	b085      	sub	sp, #20
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80109bc:	4b28      	ldr	r3, [pc, #160]	@ (8010a60 <prvInsertBlockIntoFreeList+0xac>)
 80109be:	60fb      	str	r3, [r7, #12]
 80109c0:	e002      	b.n	80109c8 <prvInsertBlockIntoFreeList+0x14>
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	60fb      	str	r3, [r7, #12]
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	687a      	ldr	r2, [r7, #4]
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d8f7      	bhi.n	80109c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	685b      	ldr	r3, [r3, #4]
 80109da:	68ba      	ldr	r2, [r7, #8]
 80109dc:	4413      	add	r3, r2
 80109de:	687a      	ldr	r2, [r7, #4]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d108      	bne.n	80109f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	685a      	ldr	r2, [r3, #4]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	685b      	ldr	r3, [r3, #4]
 80109ec:	441a      	add	r2, r3
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	68ba      	ldr	r2, [r7, #8]
 8010a00:	441a      	add	r2, r3
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d118      	bne.n	8010a3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	681a      	ldr	r2, [r3, #0]
 8010a0e:	4b15      	ldr	r3, [pc, #84]	@ (8010a64 <prvInsertBlockIntoFreeList+0xb0>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d00d      	beq.n	8010a32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	685a      	ldr	r2, [r3, #4]
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	441a      	add	r2, r3
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	681a      	ldr	r2, [r3, #0]
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	601a      	str	r2, [r3, #0]
 8010a30:	e008      	b.n	8010a44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010a32:	4b0c      	ldr	r3, [pc, #48]	@ (8010a64 <prvInsertBlockIntoFreeList+0xb0>)
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	601a      	str	r2, [r3, #0]
 8010a3a:	e003      	b.n	8010a44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	681a      	ldr	r2, [r3, #0]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010a44:	68fa      	ldr	r2, [r7, #12]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d002      	beq.n	8010a52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a52:	bf00      	nop
 8010a54:	3714      	adds	r7, #20
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr
 8010a5e:	bf00      	nop
 8010a60:	20006f24 	.word	0x20006f24
 8010a64:	20006f2c 	.word	0x20006f2c

08010a68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	4912      	ldr	r1, [pc, #72]	@ (8010ab8 <MX_USB_DEVICE_Init+0x50>)
 8010a70:	4812      	ldr	r0, [pc, #72]	@ (8010abc <MX_USB_DEVICE_Init+0x54>)
 8010a72:	f7f7 fb03 	bl	800807c <USBD_Init>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d001      	beq.n	8010a80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010a7c:	f7f1 f9aa 	bl	8001dd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010a80:	490f      	ldr	r1, [pc, #60]	@ (8010ac0 <MX_USB_DEVICE_Init+0x58>)
 8010a82:	480e      	ldr	r0, [pc, #56]	@ (8010abc <MX_USB_DEVICE_Init+0x54>)
 8010a84:	f7f7 fb2a 	bl	80080dc <USBD_RegisterClass>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d001      	beq.n	8010a92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010a8e:	f7f1 f9a1 	bl	8001dd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010a92:	490c      	ldr	r1, [pc, #48]	@ (8010ac4 <MX_USB_DEVICE_Init+0x5c>)
 8010a94:	4809      	ldr	r0, [pc, #36]	@ (8010abc <MX_USB_DEVICE_Init+0x54>)
 8010a96:	f7f7 fa21 	bl	8007edc <USBD_CDC_RegisterInterface>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d001      	beq.n	8010aa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010aa0:	f7f1 f998 	bl	8001dd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010aa4:	4805      	ldr	r0, [pc, #20]	@ (8010abc <MX_USB_DEVICE_Init+0x54>)
 8010aa6:	f7f7 fb4f 	bl	8008148 <USBD_Start>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d001      	beq.n	8010ab4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010ab0:	f7f1 f990 	bl	8001dd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010ab4:	bf00      	nop
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	200000c8 	.word	0x200000c8
 8010abc:	20006f44 	.word	0x20006f44
 8010ac0:	20000030 	.word	0x20000030
 8010ac4:	200000b4 	.word	0x200000b4

08010ac8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010acc:	2200      	movs	r2, #0
 8010ace:	4905      	ldr	r1, [pc, #20]	@ (8010ae4 <CDC_Init_FS+0x1c>)
 8010ad0:	4805      	ldr	r0, [pc, #20]	@ (8010ae8 <CDC_Init_FS+0x20>)
 8010ad2:	f7f7 fa1d 	bl	8007f10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010ad6:	4905      	ldr	r1, [pc, #20]	@ (8010aec <CDC_Init_FS+0x24>)
 8010ad8:	4803      	ldr	r0, [pc, #12]	@ (8010ae8 <CDC_Init_FS+0x20>)
 8010ada:	f7f7 fa3b 	bl	8007f54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010ade:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	20007620 	.word	0x20007620
 8010ae8:	20006f44 	.word	0x20006f44
 8010aec:	20007220 	.word	0x20007220

08010af0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010af0:	b480      	push	{r7}
 8010af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010af4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b083      	sub	sp, #12
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	4603      	mov	r3, r0
 8010b08:	6039      	str	r1, [r7, #0]
 8010b0a:	71fb      	strb	r3, [r7, #7]
 8010b0c:	4613      	mov	r3, r2
 8010b0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010b10:	79fb      	ldrb	r3, [r7, #7]
 8010b12:	2b23      	cmp	r3, #35	@ 0x23
 8010b14:	d84a      	bhi.n	8010bac <CDC_Control_FS+0xac>
 8010b16:	a201      	add	r2, pc, #4	@ (adr r2, 8010b1c <CDC_Control_FS+0x1c>)
 8010b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b1c:	08010bad 	.word	0x08010bad
 8010b20:	08010bad 	.word	0x08010bad
 8010b24:	08010bad 	.word	0x08010bad
 8010b28:	08010bad 	.word	0x08010bad
 8010b2c:	08010bad 	.word	0x08010bad
 8010b30:	08010bad 	.word	0x08010bad
 8010b34:	08010bad 	.word	0x08010bad
 8010b38:	08010bad 	.word	0x08010bad
 8010b3c:	08010bad 	.word	0x08010bad
 8010b40:	08010bad 	.word	0x08010bad
 8010b44:	08010bad 	.word	0x08010bad
 8010b48:	08010bad 	.word	0x08010bad
 8010b4c:	08010bad 	.word	0x08010bad
 8010b50:	08010bad 	.word	0x08010bad
 8010b54:	08010bad 	.word	0x08010bad
 8010b58:	08010bad 	.word	0x08010bad
 8010b5c:	08010bad 	.word	0x08010bad
 8010b60:	08010bad 	.word	0x08010bad
 8010b64:	08010bad 	.word	0x08010bad
 8010b68:	08010bad 	.word	0x08010bad
 8010b6c:	08010bad 	.word	0x08010bad
 8010b70:	08010bad 	.word	0x08010bad
 8010b74:	08010bad 	.word	0x08010bad
 8010b78:	08010bad 	.word	0x08010bad
 8010b7c:	08010bad 	.word	0x08010bad
 8010b80:	08010bad 	.word	0x08010bad
 8010b84:	08010bad 	.word	0x08010bad
 8010b88:	08010bad 	.word	0x08010bad
 8010b8c:	08010bad 	.word	0x08010bad
 8010b90:	08010bad 	.word	0x08010bad
 8010b94:	08010bad 	.word	0x08010bad
 8010b98:	08010bad 	.word	0x08010bad
 8010b9c:	08010bad 	.word	0x08010bad
 8010ba0:	08010bad 	.word	0x08010bad
 8010ba4:	08010bad 	.word	0x08010bad
 8010ba8:	08010bad 	.word	0x08010bad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010bac:	bf00      	nop
  }

  return (USBD_OK);
 8010bae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	370c      	adds	r7, #12
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bba:	4770      	bx	lr

08010bbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b082      	sub	sp, #8
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010bc6:	6879      	ldr	r1, [r7, #4]
 8010bc8:	4805      	ldr	r0, [pc, #20]	@ (8010be0 <CDC_Receive_FS+0x24>)
 8010bca:	f7f7 f9c3 	bl	8007f54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010bce:	4804      	ldr	r0, [pc, #16]	@ (8010be0 <CDC_Receive_FS+0x24>)
 8010bd0:	f7f7 fa1e 	bl	8008010 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010bd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3708      	adds	r7, #8
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	bf00      	nop
 8010be0:	20006f44 	.word	0x20006f44

08010be4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b084      	sub	sp, #16
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	460b      	mov	r3, r1
 8010bee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8010c2c <CDC_Transmit_FS+0x48>)
 8010bf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010bfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d001      	beq.n	8010c0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010c06:	2301      	movs	r3, #1
 8010c08:	e00b      	b.n	8010c22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010c0a:	887b      	ldrh	r3, [r7, #2]
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	6879      	ldr	r1, [r7, #4]
 8010c10:	4806      	ldr	r0, [pc, #24]	@ (8010c2c <CDC_Transmit_FS+0x48>)
 8010c12:	f7f7 f97d 	bl	8007f10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010c16:	4805      	ldr	r0, [pc, #20]	@ (8010c2c <CDC_Transmit_FS+0x48>)
 8010c18:	f7f7 f9ba 	bl	8007f90 <USBD_CDC_TransmitPacket>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c22:	4618      	mov	r0, r3
 8010c24:	3710      	adds	r7, #16
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}
 8010c2a:	bf00      	nop
 8010c2c:	20006f44 	.word	0x20006f44

08010c30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010c30:	b480      	push	{r7}
 8010c32:	b087      	sub	sp, #28
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60f8      	str	r0, [r7, #12]
 8010c38:	60b9      	str	r1, [r7, #8]
 8010c3a:	4613      	mov	r3, r2
 8010c3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	371c      	adds	r7, #28
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
	...

08010c54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c54:	b480      	push	{r7}
 8010c56:	b083      	sub	sp, #12
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	6039      	str	r1, [r7, #0]
 8010c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	2212      	movs	r2, #18
 8010c64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010c66:	4b03      	ldr	r3, [pc, #12]	@ (8010c74 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	370c      	adds	r7, #12
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr
 8010c74:	200000e4 	.word	0x200000e4

08010c78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	4603      	mov	r3, r0
 8010c80:	6039      	str	r1, [r7, #0]
 8010c82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	2204      	movs	r2, #4
 8010c88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010c8a:	4b03      	ldr	r3, [pc, #12]	@ (8010c98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	370c      	adds	r7, #12
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr
 8010c98:	200000f8 	.word	0x200000f8

08010c9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	6039      	str	r1, [r7, #0]
 8010ca6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ca8:	79fb      	ldrb	r3, [r7, #7]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d105      	bne.n	8010cba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010cae:	683a      	ldr	r2, [r7, #0]
 8010cb0:	4907      	ldr	r1, [pc, #28]	@ (8010cd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8010cb2:	4808      	ldr	r0, [pc, #32]	@ (8010cd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8010cb4:	f7f8 fbf8 	bl	80094a8 <USBD_GetString>
 8010cb8:	e004      	b.n	8010cc4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010cba:	683a      	ldr	r2, [r7, #0]
 8010cbc:	4904      	ldr	r1, [pc, #16]	@ (8010cd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8010cbe:	4805      	ldr	r0, [pc, #20]	@ (8010cd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8010cc0:	f7f8 fbf2 	bl	80094a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010cc4:	4b02      	ldr	r3, [pc, #8]	@ (8010cd0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3708      	adds	r7, #8
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	20007a20 	.word	0x20007a20
 8010cd4:	08012c54 	.word	0x08012c54

08010cd8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	4603      	mov	r3, r0
 8010ce0:	6039      	str	r1, [r7, #0]
 8010ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010ce4:	683a      	ldr	r2, [r7, #0]
 8010ce6:	4904      	ldr	r1, [pc, #16]	@ (8010cf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010ce8:	4804      	ldr	r0, [pc, #16]	@ (8010cfc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010cea:	f7f8 fbdd 	bl	80094a8 <USBD_GetString>
  return USBD_StrDesc;
 8010cee:	4b02      	ldr	r3, [pc, #8]	@ (8010cf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3708      	adds	r7, #8
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	20007a20 	.word	0x20007a20
 8010cfc:	08012c6c 	.word	0x08012c6c

08010d00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	4603      	mov	r3, r0
 8010d08:	6039      	str	r1, [r7, #0]
 8010d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	221a      	movs	r2, #26
 8010d10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010d12:	f000 f843 	bl	8010d9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010d16:	4b02      	ldr	r3, [pc, #8]	@ (8010d20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	200000fc 	.word	0x200000fc

08010d24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	6039      	str	r1, [r7, #0]
 8010d2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010d30:	79fb      	ldrb	r3, [r7, #7]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d105      	bne.n	8010d42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010d36:	683a      	ldr	r2, [r7, #0]
 8010d38:	4907      	ldr	r1, [pc, #28]	@ (8010d58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010d3a:	4808      	ldr	r0, [pc, #32]	@ (8010d5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010d3c:	f7f8 fbb4 	bl	80094a8 <USBD_GetString>
 8010d40:	e004      	b.n	8010d4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010d42:	683a      	ldr	r2, [r7, #0]
 8010d44:	4904      	ldr	r1, [pc, #16]	@ (8010d58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010d46:	4805      	ldr	r0, [pc, #20]	@ (8010d5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010d48:	f7f8 fbae 	bl	80094a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d4c:	4b02      	ldr	r3, [pc, #8]	@ (8010d58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	bf00      	nop
 8010d58:	20007a20 	.word	0x20007a20
 8010d5c:	08012c80 	.word	0x08012c80

08010d60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	4603      	mov	r3, r0
 8010d68:	6039      	str	r1, [r7, #0]
 8010d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d6c:	79fb      	ldrb	r3, [r7, #7]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d105      	bne.n	8010d7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010d72:	683a      	ldr	r2, [r7, #0]
 8010d74:	4907      	ldr	r1, [pc, #28]	@ (8010d94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010d76:	4808      	ldr	r0, [pc, #32]	@ (8010d98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d78:	f7f8 fb96 	bl	80094a8 <USBD_GetString>
 8010d7c:	e004      	b.n	8010d88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010d7e:	683a      	ldr	r2, [r7, #0]
 8010d80:	4904      	ldr	r1, [pc, #16]	@ (8010d94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010d82:	4805      	ldr	r0, [pc, #20]	@ (8010d98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d84:	f7f8 fb90 	bl	80094a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d88:	4b02      	ldr	r3, [pc, #8]	@ (8010d94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	3708      	adds	r7, #8
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	bf00      	nop
 8010d94:	20007a20 	.word	0x20007a20
 8010d98:	08012c8c 	.word	0x08012c8c

08010d9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b084      	sub	sp, #16
 8010da0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010da2:	4b0f      	ldr	r3, [pc, #60]	@ (8010de0 <Get_SerialNum+0x44>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010da8:	4b0e      	ldr	r3, [pc, #56]	@ (8010de4 <Get_SerialNum+0x48>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010dae:	4b0e      	ldr	r3, [pc, #56]	@ (8010de8 <Get_SerialNum+0x4c>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010db4:	68fa      	ldr	r2, [r7, #12]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	4413      	add	r3, r2
 8010dba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d009      	beq.n	8010dd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010dc2:	2208      	movs	r2, #8
 8010dc4:	4909      	ldr	r1, [pc, #36]	@ (8010dec <Get_SerialNum+0x50>)
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	f000 f814 	bl	8010df4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010dcc:	2204      	movs	r2, #4
 8010dce:	4908      	ldr	r1, [pc, #32]	@ (8010df0 <Get_SerialNum+0x54>)
 8010dd0:	68b8      	ldr	r0, [r7, #8]
 8010dd2:	f000 f80f 	bl	8010df4 <IntToUnicode>
  }
}
 8010dd6:	bf00      	nop
 8010dd8:	3710      	adds	r7, #16
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	1fff7a10 	.word	0x1fff7a10
 8010de4:	1fff7a14 	.word	0x1fff7a14
 8010de8:	1fff7a18 	.word	0x1fff7a18
 8010dec:	200000fe 	.word	0x200000fe
 8010df0:	2000010e 	.word	0x2000010e

08010df4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b087      	sub	sp, #28
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	60b9      	str	r1, [r7, #8]
 8010dfe:	4613      	mov	r3, r2
 8010e00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010e02:	2300      	movs	r3, #0
 8010e04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010e06:	2300      	movs	r3, #0
 8010e08:	75fb      	strb	r3, [r7, #23]
 8010e0a:	e027      	b.n	8010e5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	0f1b      	lsrs	r3, r3, #28
 8010e10:	2b09      	cmp	r3, #9
 8010e12:	d80b      	bhi.n	8010e2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	0f1b      	lsrs	r3, r3, #28
 8010e18:	b2da      	uxtb	r2, r3
 8010e1a:	7dfb      	ldrb	r3, [r7, #23]
 8010e1c:	005b      	lsls	r3, r3, #1
 8010e1e:	4619      	mov	r1, r3
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	440b      	add	r3, r1
 8010e24:	3230      	adds	r2, #48	@ 0x30
 8010e26:	b2d2      	uxtb	r2, r2
 8010e28:	701a      	strb	r2, [r3, #0]
 8010e2a:	e00a      	b.n	8010e42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	0f1b      	lsrs	r3, r3, #28
 8010e30:	b2da      	uxtb	r2, r3
 8010e32:	7dfb      	ldrb	r3, [r7, #23]
 8010e34:	005b      	lsls	r3, r3, #1
 8010e36:	4619      	mov	r1, r3
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	440b      	add	r3, r1
 8010e3c:	3237      	adds	r2, #55	@ 0x37
 8010e3e:	b2d2      	uxtb	r2, r2
 8010e40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	011b      	lsls	r3, r3, #4
 8010e46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010e48:	7dfb      	ldrb	r3, [r7, #23]
 8010e4a:	005b      	lsls	r3, r3, #1
 8010e4c:	3301      	adds	r3, #1
 8010e4e:	68ba      	ldr	r2, [r7, #8]
 8010e50:	4413      	add	r3, r2
 8010e52:	2200      	movs	r2, #0
 8010e54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010e56:	7dfb      	ldrb	r3, [r7, #23]
 8010e58:	3301      	adds	r3, #1
 8010e5a:	75fb      	strb	r3, [r7, #23]
 8010e5c:	7dfa      	ldrb	r2, [r7, #23]
 8010e5e:	79fb      	ldrb	r3, [r7, #7]
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d3d3      	bcc.n	8010e0c <IntToUnicode+0x18>
  }
}
 8010e64:	bf00      	nop
 8010e66:	bf00      	nop
 8010e68:	371c      	adds	r7, #28
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr
	...

08010e74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b08a      	sub	sp, #40	@ 0x28
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e7c:	f107 0314 	add.w	r3, r7, #20
 8010e80:	2200      	movs	r2, #0
 8010e82:	601a      	str	r2, [r3, #0]
 8010e84:	605a      	str	r2, [r3, #4]
 8010e86:	609a      	str	r2, [r3, #8]
 8010e88:	60da      	str	r2, [r3, #12]
 8010e8a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010e94:	d13a      	bne.n	8010f0c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e96:	2300      	movs	r3, #0
 8010e98:	613b      	str	r3, [r7, #16]
 8010e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8010f14 <HAL_PCD_MspInit+0xa0>)
 8010e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8010f14 <HAL_PCD_MspInit+0xa0>)
 8010ea0:	f043 0301 	orr.w	r3, r3, #1
 8010ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8010ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8010f14 <HAL_PCD_MspInit+0xa0>)
 8010ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010eaa:	f003 0301 	and.w	r3, r3, #1
 8010eae:	613b      	str	r3, [r7, #16]
 8010eb0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010eb2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010eb8:	2302      	movs	r3, #2
 8010eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ec0:	2303      	movs	r3, #3
 8010ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010ec4:	230a      	movs	r3, #10
 8010ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ec8:	f107 0314 	add.w	r3, r7, #20
 8010ecc:	4619      	mov	r1, r3
 8010ece:	4812      	ldr	r0, [pc, #72]	@ (8010f18 <HAL_PCD_MspInit+0xa4>)
 8010ed0:	f7f1 fc26 	bl	8002720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8010f14 <HAL_PCD_MspInit+0xa0>)
 8010ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8010f14 <HAL_PCD_MspInit+0xa0>)
 8010eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ede:	6353      	str	r3, [r2, #52]	@ 0x34
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	60fb      	str	r3, [r7, #12]
 8010ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8010f14 <HAL_PCD_MspInit+0xa0>)
 8010ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8010f14 <HAL_PCD_MspInit+0xa0>)
 8010eea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010eee:	6453      	str	r3, [r2, #68]	@ 0x44
 8010ef0:	4b08      	ldr	r3, [pc, #32]	@ (8010f14 <HAL_PCD_MspInit+0xa0>)
 8010ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010ef8:	60fb      	str	r3, [r7, #12]
 8010efa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010efc:	2200      	movs	r2, #0
 8010efe:	2105      	movs	r1, #5
 8010f00:	2043      	movs	r0, #67	@ 0x43
 8010f02:	f7f1 fbe3 	bl	80026cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010f06:	2043      	movs	r0, #67	@ 0x43
 8010f08:	f7f1 fbfc 	bl	8002704 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010f0c:	bf00      	nop
 8010f0e:	3728      	adds	r7, #40	@ 0x28
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	40023800 	.word	0x40023800
 8010f18:	40020000 	.word	0x40020000

08010f1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010f30:	4619      	mov	r1, r3
 8010f32:	4610      	mov	r0, r2
 8010f34:	f7f7 f955 	bl	80081e2 <USBD_LL_SetupStage>
}
 8010f38:	bf00      	nop
 8010f3a:	3708      	adds	r7, #8
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}

08010f40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b082      	sub	sp, #8
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	460b      	mov	r3, r1
 8010f4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010f52:	78fa      	ldrb	r2, [r7, #3]
 8010f54:	6879      	ldr	r1, [r7, #4]
 8010f56:	4613      	mov	r3, r2
 8010f58:	00db      	lsls	r3, r3, #3
 8010f5a:	4413      	add	r3, r2
 8010f5c:	009b      	lsls	r3, r3, #2
 8010f5e:	440b      	add	r3, r1
 8010f60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010f64:	681a      	ldr	r2, [r3, #0]
 8010f66:	78fb      	ldrb	r3, [r7, #3]
 8010f68:	4619      	mov	r1, r3
 8010f6a:	f7f7 f98f 	bl	800828c <USBD_LL_DataOutStage>
}
 8010f6e:	bf00      	nop
 8010f70:	3708      	adds	r7, #8
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}

08010f76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b082      	sub	sp, #8
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	6078      	str	r0, [r7, #4]
 8010f7e:	460b      	mov	r3, r1
 8010f80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010f88:	78fa      	ldrb	r2, [r7, #3]
 8010f8a:	6879      	ldr	r1, [r7, #4]
 8010f8c:	4613      	mov	r3, r2
 8010f8e:	00db      	lsls	r3, r3, #3
 8010f90:	4413      	add	r3, r2
 8010f92:	009b      	lsls	r3, r3, #2
 8010f94:	440b      	add	r3, r1
 8010f96:	3320      	adds	r3, #32
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	78fb      	ldrb	r3, [r7, #3]
 8010f9c:	4619      	mov	r1, r3
 8010f9e:	f7f7 fa28 	bl	80083f2 <USBD_LL_DataInStage>
}
 8010fa2:	bf00      	nop
 8010fa4:	3708      	adds	r7, #8
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}

08010faa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010faa:	b580      	push	{r7, lr}
 8010fac:	b082      	sub	sp, #8
 8010fae:	af00      	add	r7, sp, #0
 8010fb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7f7 fb62 	bl	8008682 <USBD_LL_SOF>
}
 8010fbe:	bf00      	nop
 8010fc0:	3708      	adds	r7, #8
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}

08010fc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fc6:	b580      	push	{r7, lr}
 8010fc8:	b084      	sub	sp, #16
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010fce:	2301      	movs	r3, #1
 8010fd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	79db      	ldrb	r3, [r3, #7]
 8010fd6:	2b02      	cmp	r3, #2
 8010fd8:	d001      	beq.n	8010fde <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010fda:	f7f0 fefb 	bl	8001dd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010fe4:	7bfa      	ldrb	r2, [r7, #15]
 8010fe6:	4611      	mov	r1, r2
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7f7 fb06 	bl	80085fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7f7 faae 	bl	8008556 <USBD_LL_Reset>
}
 8010ffa:	bf00      	nop
 8010ffc:	3710      	adds	r7, #16
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
	...

08011004 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b082      	sub	sp, #8
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011012:	4618      	mov	r0, r3
 8011014:	f7f7 fb01 	bl	800861a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	687a      	ldr	r2, [r7, #4]
 8011024:	6812      	ldr	r2, [r2, #0]
 8011026:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801102a:	f043 0301 	orr.w	r3, r3, #1
 801102e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	7adb      	ldrb	r3, [r3, #11]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d005      	beq.n	8011044 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011038:	4b04      	ldr	r3, [pc, #16]	@ (801104c <HAL_PCD_SuspendCallback+0x48>)
 801103a:	691b      	ldr	r3, [r3, #16]
 801103c:	4a03      	ldr	r2, [pc, #12]	@ (801104c <HAL_PCD_SuspendCallback+0x48>)
 801103e:	f043 0306 	orr.w	r3, r3, #6
 8011042:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011044:	bf00      	nop
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	e000ed00 	.word	0xe000ed00

08011050 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801105e:	4618      	mov	r0, r3
 8011060:	f7f7 faf7 	bl	8008652 <USBD_LL_Resume>
}
 8011064:	bf00      	nop
 8011066:	3708      	adds	r7, #8
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}

0801106c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	460b      	mov	r3, r1
 8011076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801107e:	78fa      	ldrb	r2, [r7, #3]
 8011080:	4611      	mov	r1, r2
 8011082:	4618      	mov	r0, r3
 8011084:	f7f7 fb4f 	bl	8008726 <USBD_LL_IsoOUTIncomplete>
}
 8011088:	bf00      	nop
 801108a:	3708      	adds	r7, #8
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b082      	sub	sp, #8
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	460b      	mov	r3, r1
 801109a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80110a2:	78fa      	ldrb	r2, [r7, #3]
 80110a4:	4611      	mov	r1, r2
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7f7 fb0b 	bl	80086c2 <USBD_LL_IsoINIncomplete>
}
 80110ac:	bf00      	nop
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}

080110b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b082      	sub	sp, #8
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7f7 fb61 	bl	800878a <USBD_LL_DevConnected>
}
 80110c8:	bf00      	nop
 80110ca:	3708      	adds	r7, #8
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}

080110d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80110de:	4618      	mov	r0, r3
 80110e0:	f7f7 fb5e 	bl	80087a0 <USBD_LL_DevDisconnected>
}
 80110e4:	bf00      	nop
 80110e6:	3708      	adds	r7, #8
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d13c      	bne.n	8011176 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80110fc:	4a20      	ldr	r2, [pc, #128]	@ (8011180 <USBD_LL_Init+0x94>)
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	4a1e      	ldr	r2, [pc, #120]	@ (8011180 <USBD_LL_Init+0x94>)
 8011108:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801110c:	4b1c      	ldr	r3, [pc, #112]	@ (8011180 <USBD_LL_Init+0x94>)
 801110e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8011112:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011114:	4b1a      	ldr	r3, [pc, #104]	@ (8011180 <USBD_LL_Init+0x94>)
 8011116:	2204      	movs	r2, #4
 8011118:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801111a:	4b19      	ldr	r3, [pc, #100]	@ (8011180 <USBD_LL_Init+0x94>)
 801111c:	2202      	movs	r2, #2
 801111e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011120:	4b17      	ldr	r3, [pc, #92]	@ (8011180 <USBD_LL_Init+0x94>)
 8011122:	2200      	movs	r2, #0
 8011124:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011126:	4b16      	ldr	r3, [pc, #88]	@ (8011180 <USBD_LL_Init+0x94>)
 8011128:	2202      	movs	r2, #2
 801112a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801112c:	4b14      	ldr	r3, [pc, #80]	@ (8011180 <USBD_LL_Init+0x94>)
 801112e:	2200      	movs	r2, #0
 8011130:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011132:	4b13      	ldr	r3, [pc, #76]	@ (8011180 <USBD_LL_Init+0x94>)
 8011134:	2200      	movs	r2, #0
 8011136:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011138:	4b11      	ldr	r3, [pc, #68]	@ (8011180 <USBD_LL_Init+0x94>)
 801113a:	2200      	movs	r2, #0
 801113c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801113e:	4b10      	ldr	r3, [pc, #64]	@ (8011180 <USBD_LL_Init+0x94>)
 8011140:	2200      	movs	r2, #0
 8011142:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011144:	4b0e      	ldr	r3, [pc, #56]	@ (8011180 <USBD_LL_Init+0x94>)
 8011146:	2200      	movs	r2, #0
 8011148:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801114a:	480d      	ldr	r0, [pc, #52]	@ (8011180 <USBD_LL_Init+0x94>)
 801114c:	f7f1 fc85 	bl	8002a5a <HAL_PCD_Init>
 8011150:	4603      	mov	r3, r0
 8011152:	2b00      	cmp	r3, #0
 8011154:	d001      	beq.n	801115a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011156:	f7f0 fe3d 	bl	8001dd4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801115a:	2180      	movs	r1, #128	@ 0x80
 801115c:	4808      	ldr	r0, [pc, #32]	@ (8011180 <USBD_LL_Init+0x94>)
 801115e:	f7f2 feb0 	bl	8003ec2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011162:	2240      	movs	r2, #64	@ 0x40
 8011164:	2100      	movs	r1, #0
 8011166:	4806      	ldr	r0, [pc, #24]	@ (8011180 <USBD_LL_Init+0x94>)
 8011168:	f7f2 fe64 	bl	8003e34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801116c:	2280      	movs	r2, #128	@ 0x80
 801116e:	2101      	movs	r1, #1
 8011170:	4803      	ldr	r0, [pc, #12]	@ (8011180 <USBD_LL_Init+0x94>)
 8011172:	f7f2 fe5f 	bl	8003e34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011176:	2300      	movs	r3, #0
}
 8011178:	4618      	mov	r0, r3
 801117a:	3708      	adds	r7, #8
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}
 8011180:	20007c20 	.word	0x20007c20

08011184 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b084      	sub	sp, #16
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801118c:	2300      	movs	r3, #0
 801118e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011190:	2300      	movs	r3, #0
 8011192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801119a:	4618      	mov	r0, r3
 801119c:	f7f1 fd6c 	bl	8002c78 <HAL_PCD_Start>
 80111a0:	4603      	mov	r3, r0
 80111a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111a4:	7bfb      	ldrb	r3, [r7, #15]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f000 f942 	bl	8011430 <USBD_Get_USB_Status>
 80111ac:	4603      	mov	r3, r0
 80111ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3710      	adds	r7, #16
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80111ba:	b580      	push	{r7, lr}
 80111bc:	b084      	sub	sp, #16
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
 80111c2:	4608      	mov	r0, r1
 80111c4:	4611      	mov	r1, r2
 80111c6:	461a      	mov	r2, r3
 80111c8:	4603      	mov	r3, r0
 80111ca:	70fb      	strb	r3, [r7, #3]
 80111cc:	460b      	mov	r3, r1
 80111ce:	70bb      	strb	r3, [r7, #2]
 80111d0:	4613      	mov	r3, r2
 80111d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111d4:	2300      	movs	r3, #0
 80111d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111d8:	2300      	movs	r3, #0
 80111da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80111e2:	78bb      	ldrb	r3, [r7, #2]
 80111e4:	883a      	ldrh	r2, [r7, #0]
 80111e6:	78f9      	ldrb	r1, [r7, #3]
 80111e8:	f7f2 fa40 	bl	800366c <HAL_PCD_EP_Open>
 80111ec:	4603      	mov	r3, r0
 80111ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111f0:	7bfb      	ldrb	r3, [r7, #15]
 80111f2:	4618      	mov	r0, r3
 80111f4:	f000 f91c 	bl	8011430 <USBD_Get_USB_Status>
 80111f8:	4603      	mov	r3, r0
 80111fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3710      	adds	r7, #16
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}

08011206 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011206:	b580      	push	{r7, lr}
 8011208:	b084      	sub	sp, #16
 801120a:	af00      	add	r7, sp, #0
 801120c:	6078      	str	r0, [r7, #4]
 801120e:	460b      	mov	r3, r1
 8011210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011212:	2300      	movs	r3, #0
 8011214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011216:	2300      	movs	r3, #0
 8011218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011220:	78fa      	ldrb	r2, [r7, #3]
 8011222:	4611      	mov	r1, r2
 8011224:	4618      	mov	r0, r3
 8011226:	f7f2 fa89 	bl	800373c <HAL_PCD_EP_Close>
 801122a:	4603      	mov	r3, r0
 801122c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801122e:	7bfb      	ldrb	r3, [r7, #15]
 8011230:	4618      	mov	r0, r3
 8011232:	f000 f8fd 	bl	8011430 <USBD_Get_USB_Status>
 8011236:	4603      	mov	r3, r0
 8011238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801123a:	7bbb      	ldrb	r3, [r7, #14]
}
 801123c:	4618      	mov	r0, r3
 801123e:	3710      	adds	r7, #16
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}

08011244 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b084      	sub	sp, #16
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	460b      	mov	r3, r1
 801124e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011250:	2300      	movs	r3, #0
 8011252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011254:	2300      	movs	r3, #0
 8011256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801125e:	78fa      	ldrb	r2, [r7, #3]
 8011260:	4611      	mov	r1, r2
 8011262:	4618      	mov	r0, r3
 8011264:	f7f2 fb41 	bl	80038ea <HAL_PCD_EP_SetStall>
 8011268:	4603      	mov	r3, r0
 801126a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801126c:	7bfb      	ldrb	r3, [r7, #15]
 801126e:	4618      	mov	r0, r3
 8011270:	f000 f8de 	bl	8011430 <USBD_Get_USB_Status>
 8011274:	4603      	mov	r3, r0
 8011276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011278:	7bbb      	ldrb	r3, [r7, #14]
}
 801127a:	4618      	mov	r0, r3
 801127c:	3710      	adds	r7, #16
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}

08011282 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011282:	b580      	push	{r7, lr}
 8011284:	b084      	sub	sp, #16
 8011286:	af00      	add	r7, sp, #0
 8011288:	6078      	str	r0, [r7, #4]
 801128a:	460b      	mov	r3, r1
 801128c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801128e:	2300      	movs	r3, #0
 8011290:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011292:	2300      	movs	r3, #0
 8011294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801129c:	78fa      	ldrb	r2, [r7, #3]
 801129e:	4611      	mov	r1, r2
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7f2 fb85 	bl	80039b0 <HAL_PCD_EP_ClrStall>
 80112a6:	4603      	mov	r3, r0
 80112a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112aa:	7bfb      	ldrb	r3, [r7, #15]
 80112ac:	4618      	mov	r0, r3
 80112ae:	f000 f8bf 	bl	8011430 <USBD_Get_USB_Status>
 80112b2:	4603      	mov	r3, r0
 80112b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3710      	adds	r7, #16
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}

080112c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112c0:	b480      	push	{r7}
 80112c2:	b085      	sub	sp, #20
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
 80112c8:	460b      	mov	r3, r1
 80112ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80112d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80112d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	da0b      	bge.n	80112f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80112dc:	78fb      	ldrb	r3, [r7, #3]
 80112de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80112e2:	68f9      	ldr	r1, [r7, #12]
 80112e4:	4613      	mov	r3, r2
 80112e6:	00db      	lsls	r3, r3, #3
 80112e8:	4413      	add	r3, r2
 80112ea:	009b      	lsls	r3, r3, #2
 80112ec:	440b      	add	r3, r1
 80112ee:	3316      	adds	r3, #22
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	e00b      	b.n	801130c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80112f4:	78fb      	ldrb	r3, [r7, #3]
 80112f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80112fa:	68f9      	ldr	r1, [r7, #12]
 80112fc:	4613      	mov	r3, r2
 80112fe:	00db      	lsls	r3, r3, #3
 8011300:	4413      	add	r3, r2
 8011302:	009b      	lsls	r3, r3, #2
 8011304:	440b      	add	r3, r1
 8011306:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801130a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801130c:	4618      	mov	r0, r3
 801130e:	3714      	adds	r7, #20
 8011310:	46bd      	mov	sp, r7
 8011312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011316:	4770      	bx	lr

08011318 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	460b      	mov	r3, r1
 8011322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011324:	2300      	movs	r3, #0
 8011326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011328:	2300      	movs	r3, #0
 801132a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011332:	78fa      	ldrb	r2, [r7, #3]
 8011334:	4611      	mov	r1, r2
 8011336:	4618      	mov	r0, r3
 8011338:	f7f2 f974 	bl	8003624 <HAL_PCD_SetAddress>
 801133c:	4603      	mov	r3, r0
 801133e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011340:	7bfb      	ldrb	r3, [r7, #15]
 8011342:	4618      	mov	r0, r3
 8011344:	f000 f874 	bl	8011430 <USBD_Get_USB_Status>
 8011348:	4603      	mov	r3, r0
 801134a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801134c:	7bbb      	ldrb	r3, [r7, #14]
}
 801134e:	4618      	mov	r0, r3
 8011350:	3710      	adds	r7, #16
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}

08011356 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011356:	b580      	push	{r7, lr}
 8011358:	b086      	sub	sp, #24
 801135a:	af00      	add	r7, sp, #0
 801135c:	60f8      	str	r0, [r7, #12]
 801135e:	607a      	str	r2, [r7, #4]
 8011360:	603b      	str	r3, [r7, #0]
 8011362:	460b      	mov	r3, r1
 8011364:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011366:	2300      	movs	r3, #0
 8011368:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801136a:	2300      	movs	r3, #0
 801136c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011374:	7af9      	ldrb	r1, [r7, #11]
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	687a      	ldr	r2, [r7, #4]
 801137a:	f7f2 fa7c 	bl	8003876 <HAL_PCD_EP_Transmit>
 801137e:	4603      	mov	r3, r0
 8011380:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011382:	7dfb      	ldrb	r3, [r7, #23]
 8011384:	4618      	mov	r0, r3
 8011386:	f000 f853 	bl	8011430 <USBD_Get_USB_Status>
 801138a:	4603      	mov	r3, r0
 801138c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801138e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011390:	4618      	mov	r0, r3
 8011392:	3718      	adds	r7, #24
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b086      	sub	sp, #24
 801139c:	af00      	add	r7, sp, #0
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	607a      	str	r2, [r7, #4]
 80113a2:	603b      	str	r3, [r7, #0]
 80113a4:	460b      	mov	r3, r1
 80113a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113a8:	2300      	movs	r3, #0
 80113aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113ac:	2300      	movs	r3, #0
 80113ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80113b6:	7af9      	ldrb	r1, [r7, #11]
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	f7f2 fa08 	bl	80037d0 <HAL_PCD_EP_Receive>
 80113c0:	4603      	mov	r3, r0
 80113c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113c4:	7dfb      	ldrb	r3, [r7, #23]
 80113c6:	4618      	mov	r0, r3
 80113c8:	f000 f832 	bl	8011430 <USBD_Get_USB_Status>
 80113cc:	4603      	mov	r3, r0
 80113ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80113d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	3718      	adds	r7, #24
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}

080113da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113da:	b580      	push	{r7, lr}
 80113dc:	b082      	sub	sp, #8
 80113de:	af00      	add	r7, sp, #0
 80113e0:	6078      	str	r0, [r7, #4]
 80113e2:	460b      	mov	r3, r1
 80113e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80113ec:	78fa      	ldrb	r2, [r7, #3]
 80113ee:	4611      	mov	r1, r2
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7f2 fa28 	bl	8003846 <HAL_PCD_EP_GetRxCount>
 80113f6:	4603      	mov	r3, r0
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3708      	adds	r7, #8
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011400:	b480      	push	{r7}
 8011402:	b083      	sub	sp, #12
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011408:	4b03      	ldr	r3, [pc, #12]	@ (8011418 <USBD_static_malloc+0x18>)
}
 801140a:	4618      	mov	r0, r3
 801140c:	370c      	adds	r7, #12
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr
 8011416:	bf00      	nop
 8011418:	20008104 	.word	0x20008104

0801141c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]

}
 8011424:	bf00      	nop
 8011426:	370c      	adds	r7, #12
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr

08011430 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011430:	b480      	push	{r7}
 8011432:	b085      	sub	sp, #20
 8011434:	af00      	add	r7, sp, #0
 8011436:	4603      	mov	r3, r0
 8011438:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801143a:	2300      	movs	r3, #0
 801143c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801143e:	79fb      	ldrb	r3, [r7, #7]
 8011440:	2b03      	cmp	r3, #3
 8011442:	d817      	bhi.n	8011474 <USBD_Get_USB_Status+0x44>
 8011444:	a201      	add	r2, pc, #4	@ (adr r2, 801144c <USBD_Get_USB_Status+0x1c>)
 8011446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801144a:	bf00      	nop
 801144c:	0801145d 	.word	0x0801145d
 8011450:	08011463 	.word	0x08011463
 8011454:	08011469 	.word	0x08011469
 8011458:	0801146f 	.word	0x0801146f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801145c:	2300      	movs	r3, #0
 801145e:	73fb      	strb	r3, [r7, #15]
    break;
 8011460:	e00b      	b.n	801147a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011462:	2303      	movs	r3, #3
 8011464:	73fb      	strb	r3, [r7, #15]
    break;
 8011466:	e008      	b.n	801147a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011468:	2301      	movs	r3, #1
 801146a:	73fb      	strb	r3, [r7, #15]
    break;
 801146c:	e005      	b.n	801147a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801146e:	2303      	movs	r3, #3
 8011470:	73fb      	strb	r3, [r7, #15]
    break;
 8011472:	e002      	b.n	801147a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011474:	2303      	movs	r3, #3
 8011476:	73fb      	strb	r3, [r7, #15]
    break;
 8011478:	bf00      	nop
  }
  return usb_status;
 801147a:	7bfb      	ldrb	r3, [r7, #15]
}
 801147c:	4618      	mov	r0, r3
 801147e:	3714      	adds	r7, #20
 8011480:	46bd      	mov	sp, r7
 8011482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011486:	4770      	bx	lr

08011488 <srand>:
 8011488:	b538      	push	{r3, r4, r5, lr}
 801148a:	4b10      	ldr	r3, [pc, #64]	@ (80114cc <srand+0x44>)
 801148c:	681d      	ldr	r5, [r3, #0]
 801148e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011490:	4604      	mov	r4, r0
 8011492:	b9b3      	cbnz	r3, 80114c2 <srand+0x3a>
 8011494:	2018      	movs	r0, #24
 8011496:	f000 fad1 	bl	8011a3c <malloc>
 801149a:	4602      	mov	r2, r0
 801149c:	6328      	str	r0, [r5, #48]	@ 0x30
 801149e:	b920      	cbnz	r0, 80114aa <srand+0x22>
 80114a0:	4b0b      	ldr	r3, [pc, #44]	@ (80114d0 <srand+0x48>)
 80114a2:	480c      	ldr	r0, [pc, #48]	@ (80114d4 <srand+0x4c>)
 80114a4:	2146      	movs	r1, #70	@ 0x46
 80114a6:	f000 fa61 	bl	801196c <__assert_func>
 80114aa:	490b      	ldr	r1, [pc, #44]	@ (80114d8 <srand+0x50>)
 80114ac:	4b0b      	ldr	r3, [pc, #44]	@ (80114dc <srand+0x54>)
 80114ae:	e9c0 1300 	strd	r1, r3, [r0]
 80114b2:	4b0b      	ldr	r3, [pc, #44]	@ (80114e0 <srand+0x58>)
 80114b4:	6083      	str	r3, [r0, #8]
 80114b6:	230b      	movs	r3, #11
 80114b8:	8183      	strh	r3, [r0, #12]
 80114ba:	2100      	movs	r1, #0
 80114bc:	2001      	movs	r0, #1
 80114be:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80114c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80114c4:	2200      	movs	r2, #0
 80114c6:	611c      	str	r4, [r3, #16]
 80114c8:	615a      	str	r2, [r3, #20]
 80114ca:	bd38      	pop	{r3, r4, r5, pc}
 80114cc:	20000124 	.word	0x20000124
 80114d0:	08013130 	.word	0x08013130
 80114d4:	08013147 	.word	0x08013147
 80114d8:	abcd330e 	.word	0xabcd330e
 80114dc:	e66d1234 	.word	0xe66d1234
 80114e0:	0005deec 	.word	0x0005deec

080114e4 <rand>:
 80114e4:	4b16      	ldr	r3, [pc, #88]	@ (8011540 <rand+0x5c>)
 80114e6:	b510      	push	{r4, lr}
 80114e8:	681c      	ldr	r4, [r3, #0]
 80114ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114ec:	b9b3      	cbnz	r3, 801151c <rand+0x38>
 80114ee:	2018      	movs	r0, #24
 80114f0:	f000 faa4 	bl	8011a3c <malloc>
 80114f4:	4602      	mov	r2, r0
 80114f6:	6320      	str	r0, [r4, #48]	@ 0x30
 80114f8:	b920      	cbnz	r0, 8011504 <rand+0x20>
 80114fa:	4b12      	ldr	r3, [pc, #72]	@ (8011544 <rand+0x60>)
 80114fc:	4812      	ldr	r0, [pc, #72]	@ (8011548 <rand+0x64>)
 80114fe:	2152      	movs	r1, #82	@ 0x52
 8011500:	f000 fa34 	bl	801196c <__assert_func>
 8011504:	4911      	ldr	r1, [pc, #68]	@ (801154c <rand+0x68>)
 8011506:	4b12      	ldr	r3, [pc, #72]	@ (8011550 <rand+0x6c>)
 8011508:	e9c0 1300 	strd	r1, r3, [r0]
 801150c:	4b11      	ldr	r3, [pc, #68]	@ (8011554 <rand+0x70>)
 801150e:	6083      	str	r3, [r0, #8]
 8011510:	230b      	movs	r3, #11
 8011512:	8183      	strh	r3, [r0, #12]
 8011514:	2100      	movs	r1, #0
 8011516:	2001      	movs	r0, #1
 8011518:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801151c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801151e:	480e      	ldr	r0, [pc, #56]	@ (8011558 <rand+0x74>)
 8011520:	690b      	ldr	r3, [r1, #16]
 8011522:	694c      	ldr	r4, [r1, #20]
 8011524:	4a0d      	ldr	r2, [pc, #52]	@ (801155c <rand+0x78>)
 8011526:	4358      	muls	r0, r3
 8011528:	fb02 0004 	mla	r0, r2, r4, r0
 801152c:	fba3 3202 	umull	r3, r2, r3, r2
 8011530:	3301      	adds	r3, #1
 8011532:	eb40 0002 	adc.w	r0, r0, r2
 8011536:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801153a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801153e:	bd10      	pop	{r4, pc}
 8011540:	20000124 	.word	0x20000124
 8011544:	08013130 	.word	0x08013130
 8011548:	08013147 	.word	0x08013147
 801154c:	abcd330e 	.word	0xabcd330e
 8011550:	e66d1234 	.word	0xe66d1234
 8011554:	0005deec 	.word	0x0005deec
 8011558:	5851f42d 	.word	0x5851f42d
 801155c:	4c957f2d 	.word	0x4c957f2d

08011560 <std>:
 8011560:	2300      	movs	r3, #0
 8011562:	b510      	push	{r4, lr}
 8011564:	4604      	mov	r4, r0
 8011566:	e9c0 3300 	strd	r3, r3, [r0]
 801156a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801156e:	6083      	str	r3, [r0, #8]
 8011570:	8181      	strh	r1, [r0, #12]
 8011572:	6643      	str	r3, [r0, #100]	@ 0x64
 8011574:	81c2      	strh	r2, [r0, #14]
 8011576:	6183      	str	r3, [r0, #24]
 8011578:	4619      	mov	r1, r3
 801157a:	2208      	movs	r2, #8
 801157c:	305c      	adds	r0, #92	@ 0x5c
 801157e:	f000 f914 	bl	80117aa <memset>
 8011582:	4b0d      	ldr	r3, [pc, #52]	@ (80115b8 <std+0x58>)
 8011584:	6263      	str	r3, [r4, #36]	@ 0x24
 8011586:	4b0d      	ldr	r3, [pc, #52]	@ (80115bc <std+0x5c>)
 8011588:	62a3      	str	r3, [r4, #40]	@ 0x28
 801158a:	4b0d      	ldr	r3, [pc, #52]	@ (80115c0 <std+0x60>)
 801158c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801158e:	4b0d      	ldr	r3, [pc, #52]	@ (80115c4 <std+0x64>)
 8011590:	6323      	str	r3, [r4, #48]	@ 0x30
 8011592:	4b0d      	ldr	r3, [pc, #52]	@ (80115c8 <std+0x68>)
 8011594:	6224      	str	r4, [r4, #32]
 8011596:	429c      	cmp	r4, r3
 8011598:	d006      	beq.n	80115a8 <std+0x48>
 801159a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801159e:	4294      	cmp	r4, r2
 80115a0:	d002      	beq.n	80115a8 <std+0x48>
 80115a2:	33d0      	adds	r3, #208	@ 0xd0
 80115a4:	429c      	cmp	r4, r3
 80115a6:	d105      	bne.n	80115b4 <std+0x54>
 80115a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80115ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115b0:	f000 b9ca 	b.w	8011948 <__retarget_lock_init_recursive>
 80115b4:	bd10      	pop	{r4, pc}
 80115b6:	bf00      	nop
 80115b8:	08011725 	.word	0x08011725
 80115bc:	08011747 	.word	0x08011747
 80115c0:	0801177f 	.word	0x0801177f
 80115c4:	080117a3 	.word	0x080117a3
 80115c8:	20008324 	.word	0x20008324

080115cc <stdio_exit_handler>:
 80115cc:	4a02      	ldr	r2, [pc, #8]	@ (80115d8 <stdio_exit_handler+0xc>)
 80115ce:	4903      	ldr	r1, [pc, #12]	@ (80115dc <stdio_exit_handler+0x10>)
 80115d0:	4803      	ldr	r0, [pc, #12]	@ (80115e0 <stdio_exit_handler+0x14>)
 80115d2:	f000 b869 	b.w	80116a8 <_fwalk_sglue>
 80115d6:	bf00      	nop
 80115d8:	20000118 	.word	0x20000118
 80115dc:	0801227d 	.word	0x0801227d
 80115e0:	20000128 	.word	0x20000128

080115e4 <cleanup_stdio>:
 80115e4:	6841      	ldr	r1, [r0, #4]
 80115e6:	4b0c      	ldr	r3, [pc, #48]	@ (8011618 <cleanup_stdio+0x34>)
 80115e8:	4299      	cmp	r1, r3
 80115ea:	b510      	push	{r4, lr}
 80115ec:	4604      	mov	r4, r0
 80115ee:	d001      	beq.n	80115f4 <cleanup_stdio+0x10>
 80115f0:	f000 fe44 	bl	801227c <_fflush_r>
 80115f4:	68a1      	ldr	r1, [r4, #8]
 80115f6:	4b09      	ldr	r3, [pc, #36]	@ (801161c <cleanup_stdio+0x38>)
 80115f8:	4299      	cmp	r1, r3
 80115fa:	d002      	beq.n	8011602 <cleanup_stdio+0x1e>
 80115fc:	4620      	mov	r0, r4
 80115fe:	f000 fe3d 	bl	801227c <_fflush_r>
 8011602:	68e1      	ldr	r1, [r4, #12]
 8011604:	4b06      	ldr	r3, [pc, #24]	@ (8011620 <cleanup_stdio+0x3c>)
 8011606:	4299      	cmp	r1, r3
 8011608:	d004      	beq.n	8011614 <cleanup_stdio+0x30>
 801160a:	4620      	mov	r0, r4
 801160c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011610:	f000 be34 	b.w	801227c <_fflush_r>
 8011614:	bd10      	pop	{r4, pc}
 8011616:	bf00      	nop
 8011618:	20008324 	.word	0x20008324
 801161c:	2000838c 	.word	0x2000838c
 8011620:	200083f4 	.word	0x200083f4

08011624 <global_stdio_init.part.0>:
 8011624:	b510      	push	{r4, lr}
 8011626:	4b0b      	ldr	r3, [pc, #44]	@ (8011654 <global_stdio_init.part.0+0x30>)
 8011628:	4c0b      	ldr	r4, [pc, #44]	@ (8011658 <global_stdio_init.part.0+0x34>)
 801162a:	4a0c      	ldr	r2, [pc, #48]	@ (801165c <global_stdio_init.part.0+0x38>)
 801162c:	601a      	str	r2, [r3, #0]
 801162e:	4620      	mov	r0, r4
 8011630:	2200      	movs	r2, #0
 8011632:	2104      	movs	r1, #4
 8011634:	f7ff ff94 	bl	8011560 <std>
 8011638:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801163c:	2201      	movs	r2, #1
 801163e:	2109      	movs	r1, #9
 8011640:	f7ff ff8e 	bl	8011560 <std>
 8011644:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011648:	2202      	movs	r2, #2
 801164a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801164e:	2112      	movs	r1, #18
 8011650:	f7ff bf86 	b.w	8011560 <std>
 8011654:	2000845c 	.word	0x2000845c
 8011658:	20008324 	.word	0x20008324
 801165c:	080115cd 	.word	0x080115cd

08011660 <__sfp_lock_acquire>:
 8011660:	4801      	ldr	r0, [pc, #4]	@ (8011668 <__sfp_lock_acquire+0x8>)
 8011662:	f000 b972 	b.w	801194a <__retarget_lock_acquire_recursive>
 8011666:	bf00      	nop
 8011668:	20008465 	.word	0x20008465

0801166c <__sfp_lock_release>:
 801166c:	4801      	ldr	r0, [pc, #4]	@ (8011674 <__sfp_lock_release+0x8>)
 801166e:	f000 b96d 	b.w	801194c <__retarget_lock_release_recursive>
 8011672:	bf00      	nop
 8011674:	20008465 	.word	0x20008465

08011678 <__sinit>:
 8011678:	b510      	push	{r4, lr}
 801167a:	4604      	mov	r4, r0
 801167c:	f7ff fff0 	bl	8011660 <__sfp_lock_acquire>
 8011680:	6a23      	ldr	r3, [r4, #32]
 8011682:	b11b      	cbz	r3, 801168c <__sinit+0x14>
 8011684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011688:	f7ff bff0 	b.w	801166c <__sfp_lock_release>
 801168c:	4b04      	ldr	r3, [pc, #16]	@ (80116a0 <__sinit+0x28>)
 801168e:	6223      	str	r3, [r4, #32]
 8011690:	4b04      	ldr	r3, [pc, #16]	@ (80116a4 <__sinit+0x2c>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d1f5      	bne.n	8011684 <__sinit+0xc>
 8011698:	f7ff ffc4 	bl	8011624 <global_stdio_init.part.0>
 801169c:	e7f2      	b.n	8011684 <__sinit+0xc>
 801169e:	bf00      	nop
 80116a0:	080115e5 	.word	0x080115e5
 80116a4:	2000845c 	.word	0x2000845c

080116a8 <_fwalk_sglue>:
 80116a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116ac:	4607      	mov	r7, r0
 80116ae:	4688      	mov	r8, r1
 80116b0:	4614      	mov	r4, r2
 80116b2:	2600      	movs	r6, #0
 80116b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80116b8:	f1b9 0901 	subs.w	r9, r9, #1
 80116bc:	d505      	bpl.n	80116ca <_fwalk_sglue+0x22>
 80116be:	6824      	ldr	r4, [r4, #0]
 80116c0:	2c00      	cmp	r4, #0
 80116c2:	d1f7      	bne.n	80116b4 <_fwalk_sglue+0xc>
 80116c4:	4630      	mov	r0, r6
 80116c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ca:	89ab      	ldrh	r3, [r5, #12]
 80116cc:	2b01      	cmp	r3, #1
 80116ce:	d907      	bls.n	80116e0 <_fwalk_sglue+0x38>
 80116d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116d4:	3301      	adds	r3, #1
 80116d6:	d003      	beq.n	80116e0 <_fwalk_sglue+0x38>
 80116d8:	4629      	mov	r1, r5
 80116da:	4638      	mov	r0, r7
 80116dc:	47c0      	blx	r8
 80116de:	4306      	orrs	r6, r0
 80116e0:	3568      	adds	r5, #104	@ 0x68
 80116e2:	e7e9      	b.n	80116b8 <_fwalk_sglue+0x10>

080116e4 <siprintf>:
 80116e4:	b40e      	push	{r1, r2, r3}
 80116e6:	b500      	push	{lr}
 80116e8:	b09c      	sub	sp, #112	@ 0x70
 80116ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80116ec:	9002      	str	r0, [sp, #8]
 80116ee:	9006      	str	r0, [sp, #24]
 80116f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80116f4:	4809      	ldr	r0, [pc, #36]	@ (801171c <siprintf+0x38>)
 80116f6:	9107      	str	r1, [sp, #28]
 80116f8:	9104      	str	r1, [sp, #16]
 80116fa:	4909      	ldr	r1, [pc, #36]	@ (8011720 <siprintf+0x3c>)
 80116fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011700:	9105      	str	r1, [sp, #20]
 8011702:	6800      	ldr	r0, [r0, #0]
 8011704:	9301      	str	r3, [sp, #4]
 8011706:	a902      	add	r1, sp, #8
 8011708:	f000 faaa 	bl	8011c60 <_svfiprintf_r>
 801170c:	9b02      	ldr	r3, [sp, #8]
 801170e:	2200      	movs	r2, #0
 8011710:	701a      	strb	r2, [r3, #0]
 8011712:	b01c      	add	sp, #112	@ 0x70
 8011714:	f85d eb04 	ldr.w	lr, [sp], #4
 8011718:	b003      	add	sp, #12
 801171a:	4770      	bx	lr
 801171c:	20000124 	.word	0x20000124
 8011720:	ffff0208 	.word	0xffff0208

08011724 <__sread>:
 8011724:	b510      	push	{r4, lr}
 8011726:	460c      	mov	r4, r1
 8011728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801172c:	f000 f8be 	bl	80118ac <_read_r>
 8011730:	2800      	cmp	r0, #0
 8011732:	bfab      	itete	ge
 8011734:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011736:	89a3      	ldrhlt	r3, [r4, #12]
 8011738:	181b      	addge	r3, r3, r0
 801173a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801173e:	bfac      	ite	ge
 8011740:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011742:	81a3      	strhlt	r3, [r4, #12]
 8011744:	bd10      	pop	{r4, pc}

08011746 <__swrite>:
 8011746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801174a:	461f      	mov	r7, r3
 801174c:	898b      	ldrh	r3, [r1, #12]
 801174e:	05db      	lsls	r3, r3, #23
 8011750:	4605      	mov	r5, r0
 8011752:	460c      	mov	r4, r1
 8011754:	4616      	mov	r6, r2
 8011756:	d505      	bpl.n	8011764 <__swrite+0x1e>
 8011758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801175c:	2302      	movs	r3, #2
 801175e:	2200      	movs	r2, #0
 8011760:	f000 f892 	bl	8011888 <_lseek_r>
 8011764:	89a3      	ldrh	r3, [r4, #12]
 8011766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801176a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801176e:	81a3      	strh	r3, [r4, #12]
 8011770:	4632      	mov	r2, r6
 8011772:	463b      	mov	r3, r7
 8011774:	4628      	mov	r0, r5
 8011776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801177a:	f000 b8a9 	b.w	80118d0 <_write_r>

0801177e <__sseek>:
 801177e:	b510      	push	{r4, lr}
 8011780:	460c      	mov	r4, r1
 8011782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011786:	f000 f87f 	bl	8011888 <_lseek_r>
 801178a:	1c43      	adds	r3, r0, #1
 801178c:	89a3      	ldrh	r3, [r4, #12]
 801178e:	bf15      	itete	ne
 8011790:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011792:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011796:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801179a:	81a3      	strheq	r3, [r4, #12]
 801179c:	bf18      	it	ne
 801179e:	81a3      	strhne	r3, [r4, #12]
 80117a0:	bd10      	pop	{r4, pc}

080117a2 <__sclose>:
 80117a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117a6:	f000 b809 	b.w	80117bc <_close_r>

080117aa <memset>:
 80117aa:	4402      	add	r2, r0
 80117ac:	4603      	mov	r3, r0
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d100      	bne.n	80117b4 <memset+0xa>
 80117b2:	4770      	bx	lr
 80117b4:	f803 1b01 	strb.w	r1, [r3], #1
 80117b8:	e7f9      	b.n	80117ae <memset+0x4>
	...

080117bc <_close_r>:
 80117bc:	b538      	push	{r3, r4, r5, lr}
 80117be:	4d06      	ldr	r5, [pc, #24]	@ (80117d8 <_close_r+0x1c>)
 80117c0:	2300      	movs	r3, #0
 80117c2:	4604      	mov	r4, r0
 80117c4:	4608      	mov	r0, r1
 80117c6:	602b      	str	r3, [r5, #0]
 80117c8:	f7f0 fd50 	bl	800226c <_close>
 80117cc:	1c43      	adds	r3, r0, #1
 80117ce:	d102      	bne.n	80117d6 <_close_r+0x1a>
 80117d0:	682b      	ldr	r3, [r5, #0]
 80117d2:	b103      	cbz	r3, 80117d6 <_close_r+0x1a>
 80117d4:	6023      	str	r3, [r4, #0]
 80117d6:	bd38      	pop	{r3, r4, r5, pc}
 80117d8:	20008460 	.word	0x20008460

080117dc <_reclaim_reent>:
 80117dc:	4b29      	ldr	r3, [pc, #164]	@ (8011884 <_reclaim_reent+0xa8>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	4283      	cmp	r3, r0
 80117e2:	b570      	push	{r4, r5, r6, lr}
 80117e4:	4604      	mov	r4, r0
 80117e6:	d04b      	beq.n	8011880 <_reclaim_reent+0xa4>
 80117e8:	69c3      	ldr	r3, [r0, #28]
 80117ea:	b1ab      	cbz	r3, 8011818 <_reclaim_reent+0x3c>
 80117ec:	68db      	ldr	r3, [r3, #12]
 80117ee:	b16b      	cbz	r3, 801180c <_reclaim_reent+0x30>
 80117f0:	2500      	movs	r5, #0
 80117f2:	69e3      	ldr	r3, [r4, #28]
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	5959      	ldr	r1, [r3, r5]
 80117f8:	2900      	cmp	r1, #0
 80117fa:	d13b      	bne.n	8011874 <_reclaim_reent+0x98>
 80117fc:	3504      	adds	r5, #4
 80117fe:	2d80      	cmp	r5, #128	@ 0x80
 8011800:	d1f7      	bne.n	80117f2 <_reclaim_reent+0x16>
 8011802:	69e3      	ldr	r3, [r4, #28]
 8011804:	4620      	mov	r0, r4
 8011806:	68d9      	ldr	r1, [r3, #12]
 8011808:	f000 f8ce 	bl	80119a8 <_free_r>
 801180c:	69e3      	ldr	r3, [r4, #28]
 801180e:	6819      	ldr	r1, [r3, #0]
 8011810:	b111      	cbz	r1, 8011818 <_reclaim_reent+0x3c>
 8011812:	4620      	mov	r0, r4
 8011814:	f000 f8c8 	bl	80119a8 <_free_r>
 8011818:	6961      	ldr	r1, [r4, #20]
 801181a:	b111      	cbz	r1, 8011822 <_reclaim_reent+0x46>
 801181c:	4620      	mov	r0, r4
 801181e:	f000 f8c3 	bl	80119a8 <_free_r>
 8011822:	69e1      	ldr	r1, [r4, #28]
 8011824:	b111      	cbz	r1, 801182c <_reclaim_reent+0x50>
 8011826:	4620      	mov	r0, r4
 8011828:	f000 f8be 	bl	80119a8 <_free_r>
 801182c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801182e:	b111      	cbz	r1, 8011836 <_reclaim_reent+0x5a>
 8011830:	4620      	mov	r0, r4
 8011832:	f000 f8b9 	bl	80119a8 <_free_r>
 8011836:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011838:	b111      	cbz	r1, 8011840 <_reclaim_reent+0x64>
 801183a:	4620      	mov	r0, r4
 801183c:	f000 f8b4 	bl	80119a8 <_free_r>
 8011840:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011842:	b111      	cbz	r1, 801184a <_reclaim_reent+0x6e>
 8011844:	4620      	mov	r0, r4
 8011846:	f000 f8af 	bl	80119a8 <_free_r>
 801184a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801184c:	b111      	cbz	r1, 8011854 <_reclaim_reent+0x78>
 801184e:	4620      	mov	r0, r4
 8011850:	f000 f8aa 	bl	80119a8 <_free_r>
 8011854:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011856:	b111      	cbz	r1, 801185e <_reclaim_reent+0x82>
 8011858:	4620      	mov	r0, r4
 801185a:	f000 f8a5 	bl	80119a8 <_free_r>
 801185e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011860:	b111      	cbz	r1, 8011868 <_reclaim_reent+0x8c>
 8011862:	4620      	mov	r0, r4
 8011864:	f000 f8a0 	bl	80119a8 <_free_r>
 8011868:	6a23      	ldr	r3, [r4, #32]
 801186a:	b14b      	cbz	r3, 8011880 <_reclaim_reent+0xa4>
 801186c:	4620      	mov	r0, r4
 801186e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011872:	4718      	bx	r3
 8011874:	680e      	ldr	r6, [r1, #0]
 8011876:	4620      	mov	r0, r4
 8011878:	f000 f896 	bl	80119a8 <_free_r>
 801187c:	4631      	mov	r1, r6
 801187e:	e7bb      	b.n	80117f8 <_reclaim_reent+0x1c>
 8011880:	bd70      	pop	{r4, r5, r6, pc}
 8011882:	bf00      	nop
 8011884:	20000124 	.word	0x20000124

08011888 <_lseek_r>:
 8011888:	b538      	push	{r3, r4, r5, lr}
 801188a:	4d07      	ldr	r5, [pc, #28]	@ (80118a8 <_lseek_r+0x20>)
 801188c:	4604      	mov	r4, r0
 801188e:	4608      	mov	r0, r1
 8011890:	4611      	mov	r1, r2
 8011892:	2200      	movs	r2, #0
 8011894:	602a      	str	r2, [r5, #0]
 8011896:	461a      	mov	r2, r3
 8011898:	f7f0 fd0f 	bl	80022ba <_lseek>
 801189c:	1c43      	adds	r3, r0, #1
 801189e:	d102      	bne.n	80118a6 <_lseek_r+0x1e>
 80118a0:	682b      	ldr	r3, [r5, #0]
 80118a2:	b103      	cbz	r3, 80118a6 <_lseek_r+0x1e>
 80118a4:	6023      	str	r3, [r4, #0]
 80118a6:	bd38      	pop	{r3, r4, r5, pc}
 80118a8:	20008460 	.word	0x20008460

080118ac <_read_r>:
 80118ac:	b538      	push	{r3, r4, r5, lr}
 80118ae:	4d07      	ldr	r5, [pc, #28]	@ (80118cc <_read_r+0x20>)
 80118b0:	4604      	mov	r4, r0
 80118b2:	4608      	mov	r0, r1
 80118b4:	4611      	mov	r1, r2
 80118b6:	2200      	movs	r2, #0
 80118b8:	602a      	str	r2, [r5, #0]
 80118ba:	461a      	mov	r2, r3
 80118bc:	f7f0 fc9d 	bl	80021fa <_read>
 80118c0:	1c43      	adds	r3, r0, #1
 80118c2:	d102      	bne.n	80118ca <_read_r+0x1e>
 80118c4:	682b      	ldr	r3, [r5, #0]
 80118c6:	b103      	cbz	r3, 80118ca <_read_r+0x1e>
 80118c8:	6023      	str	r3, [r4, #0]
 80118ca:	bd38      	pop	{r3, r4, r5, pc}
 80118cc:	20008460 	.word	0x20008460

080118d0 <_write_r>:
 80118d0:	b538      	push	{r3, r4, r5, lr}
 80118d2:	4d07      	ldr	r5, [pc, #28]	@ (80118f0 <_write_r+0x20>)
 80118d4:	4604      	mov	r4, r0
 80118d6:	4608      	mov	r0, r1
 80118d8:	4611      	mov	r1, r2
 80118da:	2200      	movs	r2, #0
 80118dc:	602a      	str	r2, [r5, #0]
 80118de:	461a      	mov	r2, r3
 80118e0:	f7f0 fca8 	bl	8002234 <_write>
 80118e4:	1c43      	adds	r3, r0, #1
 80118e6:	d102      	bne.n	80118ee <_write_r+0x1e>
 80118e8:	682b      	ldr	r3, [r5, #0]
 80118ea:	b103      	cbz	r3, 80118ee <_write_r+0x1e>
 80118ec:	6023      	str	r3, [r4, #0]
 80118ee:	bd38      	pop	{r3, r4, r5, pc}
 80118f0:	20008460 	.word	0x20008460

080118f4 <__errno>:
 80118f4:	4b01      	ldr	r3, [pc, #4]	@ (80118fc <__errno+0x8>)
 80118f6:	6818      	ldr	r0, [r3, #0]
 80118f8:	4770      	bx	lr
 80118fa:	bf00      	nop
 80118fc:	20000124 	.word	0x20000124

08011900 <__libc_init_array>:
 8011900:	b570      	push	{r4, r5, r6, lr}
 8011902:	4d0d      	ldr	r5, [pc, #52]	@ (8011938 <__libc_init_array+0x38>)
 8011904:	4c0d      	ldr	r4, [pc, #52]	@ (801193c <__libc_init_array+0x3c>)
 8011906:	1b64      	subs	r4, r4, r5
 8011908:	10a4      	asrs	r4, r4, #2
 801190a:	2600      	movs	r6, #0
 801190c:	42a6      	cmp	r6, r4
 801190e:	d109      	bne.n	8011924 <__libc_init_array+0x24>
 8011910:	4d0b      	ldr	r5, [pc, #44]	@ (8011940 <__libc_init_array+0x40>)
 8011912:	4c0c      	ldr	r4, [pc, #48]	@ (8011944 <__libc_init_array+0x44>)
 8011914:	f000 fff0 	bl	80128f8 <_init>
 8011918:	1b64      	subs	r4, r4, r5
 801191a:	10a4      	asrs	r4, r4, #2
 801191c:	2600      	movs	r6, #0
 801191e:	42a6      	cmp	r6, r4
 8011920:	d105      	bne.n	801192e <__libc_init_array+0x2e>
 8011922:	bd70      	pop	{r4, r5, r6, pc}
 8011924:	f855 3b04 	ldr.w	r3, [r5], #4
 8011928:	4798      	blx	r3
 801192a:	3601      	adds	r6, #1
 801192c:	e7ee      	b.n	801190c <__libc_init_array+0xc>
 801192e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011932:	4798      	blx	r3
 8011934:	3601      	adds	r6, #1
 8011936:	e7f2      	b.n	801191e <__libc_init_array+0x1e>
 8011938:	08013218 	.word	0x08013218
 801193c:	08013218 	.word	0x08013218
 8011940:	08013218 	.word	0x08013218
 8011944:	0801321c 	.word	0x0801321c

08011948 <__retarget_lock_init_recursive>:
 8011948:	4770      	bx	lr

0801194a <__retarget_lock_acquire_recursive>:
 801194a:	4770      	bx	lr

0801194c <__retarget_lock_release_recursive>:
 801194c:	4770      	bx	lr

0801194e <memcpy>:
 801194e:	440a      	add	r2, r1
 8011950:	4291      	cmp	r1, r2
 8011952:	f100 33ff 	add.w	r3, r0, #4294967295
 8011956:	d100      	bne.n	801195a <memcpy+0xc>
 8011958:	4770      	bx	lr
 801195a:	b510      	push	{r4, lr}
 801195c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011960:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011964:	4291      	cmp	r1, r2
 8011966:	d1f9      	bne.n	801195c <memcpy+0xe>
 8011968:	bd10      	pop	{r4, pc}
	...

0801196c <__assert_func>:
 801196c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801196e:	4614      	mov	r4, r2
 8011970:	461a      	mov	r2, r3
 8011972:	4b09      	ldr	r3, [pc, #36]	@ (8011998 <__assert_func+0x2c>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	4605      	mov	r5, r0
 8011978:	68d8      	ldr	r0, [r3, #12]
 801197a:	b954      	cbnz	r4, 8011992 <__assert_func+0x26>
 801197c:	4b07      	ldr	r3, [pc, #28]	@ (801199c <__assert_func+0x30>)
 801197e:	461c      	mov	r4, r3
 8011980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011984:	9100      	str	r1, [sp, #0]
 8011986:	462b      	mov	r3, r5
 8011988:	4905      	ldr	r1, [pc, #20]	@ (80119a0 <__assert_func+0x34>)
 801198a:	f000 fc9f 	bl	80122cc <fiprintf>
 801198e:	f000 fcd9 	bl	8012344 <abort>
 8011992:	4b04      	ldr	r3, [pc, #16]	@ (80119a4 <__assert_func+0x38>)
 8011994:	e7f4      	b.n	8011980 <__assert_func+0x14>
 8011996:	bf00      	nop
 8011998:	20000124 	.word	0x20000124
 801199c:	080131da 	.word	0x080131da
 80119a0:	080131ac 	.word	0x080131ac
 80119a4:	0801319f 	.word	0x0801319f

080119a8 <_free_r>:
 80119a8:	b538      	push	{r3, r4, r5, lr}
 80119aa:	4605      	mov	r5, r0
 80119ac:	2900      	cmp	r1, #0
 80119ae:	d041      	beq.n	8011a34 <_free_r+0x8c>
 80119b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119b4:	1f0c      	subs	r4, r1, #4
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	bfb8      	it	lt
 80119ba:	18e4      	addlt	r4, r4, r3
 80119bc:	f000 f8e8 	bl	8011b90 <__malloc_lock>
 80119c0:	4a1d      	ldr	r2, [pc, #116]	@ (8011a38 <_free_r+0x90>)
 80119c2:	6813      	ldr	r3, [r2, #0]
 80119c4:	b933      	cbnz	r3, 80119d4 <_free_r+0x2c>
 80119c6:	6063      	str	r3, [r4, #4]
 80119c8:	6014      	str	r4, [r2, #0]
 80119ca:	4628      	mov	r0, r5
 80119cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119d0:	f000 b8e4 	b.w	8011b9c <__malloc_unlock>
 80119d4:	42a3      	cmp	r3, r4
 80119d6:	d908      	bls.n	80119ea <_free_r+0x42>
 80119d8:	6820      	ldr	r0, [r4, #0]
 80119da:	1821      	adds	r1, r4, r0
 80119dc:	428b      	cmp	r3, r1
 80119de:	bf01      	itttt	eq
 80119e0:	6819      	ldreq	r1, [r3, #0]
 80119e2:	685b      	ldreq	r3, [r3, #4]
 80119e4:	1809      	addeq	r1, r1, r0
 80119e6:	6021      	streq	r1, [r4, #0]
 80119e8:	e7ed      	b.n	80119c6 <_free_r+0x1e>
 80119ea:	461a      	mov	r2, r3
 80119ec:	685b      	ldr	r3, [r3, #4]
 80119ee:	b10b      	cbz	r3, 80119f4 <_free_r+0x4c>
 80119f0:	42a3      	cmp	r3, r4
 80119f2:	d9fa      	bls.n	80119ea <_free_r+0x42>
 80119f4:	6811      	ldr	r1, [r2, #0]
 80119f6:	1850      	adds	r0, r2, r1
 80119f8:	42a0      	cmp	r0, r4
 80119fa:	d10b      	bne.n	8011a14 <_free_r+0x6c>
 80119fc:	6820      	ldr	r0, [r4, #0]
 80119fe:	4401      	add	r1, r0
 8011a00:	1850      	adds	r0, r2, r1
 8011a02:	4283      	cmp	r3, r0
 8011a04:	6011      	str	r1, [r2, #0]
 8011a06:	d1e0      	bne.n	80119ca <_free_r+0x22>
 8011a08:	6818      	ldr	r0, [r3, #0]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	6053      	str	r3, [r2, #4]
 8011a0e:	4408      	add	r0, r1
 8011a10:	6010      	str	r0, [r2, #0]
 8011a12:	e7da      	b.n	80119ca <_free_r+0x22>
 8011a14:	d902      	bls.n	8011a1c <_free_r+0x74>
 8011a16:	230c      	movs	r3, #12
 8011a18:	602b      	str	r3, [r5, #0]
 8011a1a:	e7d6      	b.n	80119ca <_free_r+0x22>
 8011a1c:	6820      	ldr	r0, [r4, #0]
 8011a1e:	1821      	adds	r1, r4, r0
 8011a20:	428b      	cmp	r3, r1
 8011a22:	bf04      	itt	eq
 8011a24:	6819      	ldreq	r1, [r3, #0]
 8011a26:	685b      	ldreq	r3, [r3, #4]
 8011a28:	6063      	str	r3, [r4, #4]
 8011a2a:	bf04      	itt	eq
 8011a2c:	1809      	addeq	r1, r1, r0
 8011a2e:	6021      	streq	r1, [r4, #0]
 8011a30:	6054      	str	r4, [r2, #4]
 8011a32:	e7ca      	b.n	80119ca <_free_r+0x22>
 8011a34:	bd38      	pop	{r3, r4, r5, pc}
 8011a36:	bf00      	nop
 8011a38:	2000846c 	.word	0x2000846c

08011a3c <malloc>:
 8011a3c:	4b02      	ldr	r3, [pc, #8]	@ (8011a48 <malloc+0xc>)
 8011a3e:	4601      	mov	r1, r0
 8011a40:	6818      	ldr	r0, [r3, #0]
 8011a42:	f000 b825 	b.w	8011a90 <_malloc_r>
 8011a46:	bf00      	nop
 8011a48:	20000124 	.word	0x20000124

08011a4c <sbrk_aligned>:
 8011a4c:	b570      	push	{r4, r5, r6, lr}
 8011a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8011a8c <sbrk_aligned+0x40>)
 8011a50:	460c      	mov	r4, r1
 8011a52:	6831      	ldr	r1, [r6, #0]
 8011a54:	4605      	mov	r5, r0
 8011a56:	b911      	cbnz	r1, 8011a5e <sbrk_aligned+0x12>
 8011a58:	f000 fc64 	bl	8012324 <_sbrk_r>
 8011a5c:	6030      	str	r0, [r6, #0]
 8011a5e:	4621      	mov	r1, r4
 8011a60:	4628      	mov	r0, r5
 8011a62:	f000 fc5f 	bl	8012324 <_sbrk_r>
 8011a66:	1c43      	adds	r3, r0, #1
 8011a68:	d103      	bne.n	8011a72 <sbrk_aligned+0x26>
 8011a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8011a6e:	4620      	mov	r0, r4
 8011a70:	bd70      	pop	{r4, r5, r6, pc}
 8011a72:	1cc4      	adds	r4, r0, #3
 8011a74:	f024 0403 	bic.w	r4, r4, #3
 8011a78:	42a0      	cmp	r0, r4
 8011a7a:	d0f8      	beq.n	8011a6e <sbrk_aligned+0x22>
 8011a7c:	1a21      	subs	r1, r4, r0
 8011a7e:	4628      	mov	r0, r5
 8011a80:	f000 fc50 	bl	8012324 <_sbrk_r>
 8011a84:	3001      	adds	r0, #1
 8011a86:	d1f2      	bne.n	8011a6e <sbrk_aligned+0x22>
 8011a88:	e7ef      	b.n	8011a6a <sbrk_aligned+0x1e>
 8011a8a:	bf00      	nop
 8011a8c:	20008468 	.word	0x20008468

08011a90 <_malloc_r>:
 8011a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a94:	1ccd      	adds	r5, r1, #3
 8011a96:	f025 0503 	bic.w	r5, r5, #3
 8011a9a:	3508      	adds	r5, #8
 8011a9c:	2d0c      	cmp	r5, #12
 8011a9e:	bf38      	it	cc
 8011aa0:	250c      	movcc	r5, #12
 8011aa2:	2d00      	cmp	r5, #0
 8011aa4:	4606      	mov	r6, r0
 8011aa6:	db01      	blt.n	8011aac <_malloc_r+0x1c>
 8011aa8:	42a9      	cmp	r1, r5
 8011aaa:	d904      	bls.n	8011ab6 <_malloc_r+0x26>
 8011aac:	230c      	movs	r3, #12
 8011aae:	6033      	str	r3, [r6, #0]
 8011ab0:	2000      	movs	r0, #0
 8011ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011b8c <_malloc_r+0xfc>
 8011aba:	f000 f869 	bl	8011b90 <__malloc_lock>
 8011abe:	f8d8 3000 	ldr.w	r3, [r8]
 8011ac2:	461c      	mov	r4, r3
 8011ac4:	bb44      	cbnz	r4, 8011b18 <_malloc_r+0x88>
 8011ac6:	4629      	mov	r1, r5
 8011ac8:	4630      	mov	r0, r6
 8011aca:	f7ff ffbf 	bl	8011a4c <sbrk_aligned>
 8011ace:	1c43      	adds	r3, r0, #1
 8011ad0:	4604      	mov	r4, r0
 8011ad2:	d158      	bne.n	8011b86 <_malloc_r+0xf6>
 8011ad4:	f8d8 4000 	ldr.w	r4, [r8]
 8011ad8:	4627      	mov	r7, r4
 8011ada:	2f00      	cmp	r7, #0
 8011adc:	d143      	bne.n	8011b66 <_malloc_r+0xd6>
 8011ade:	2c00      	cmp	r4, #0
 8011ae0:	d04b      	beq.n	8011b7a <_malloc_r+0xea>
 8011ae2:	6823      	ldr	r3, [r4, #0]
 8011ae4:	4639      	mov	r1, r7
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	eb04 0903 	add.w	r9, r4, r3
 8011aec:	f000 fc1a 	bl	8012324 <_sbrk_r>
 8011af0:	4581      	cmp	r9, r0
 8011af2:	d142      	bne.n	8011b7a <_malloc_r+0xea>
 8011af4:	6821      	ldr	r1, [r4, #0]
 8011af6:	1a6d      	subs	r5, r5, r1
 8011af8:	4629      	mov	r1, r5
 8011afa:	4630      	mov	r0, r6
 8011afc:	f7ff ffa6 	bl	8011a4c <sbrk_aligned>
 8011b00:	3001      	adds	r0, #1
 8011b02:	d03a      	beq.n	8011b7a <_malloc_r+0xea>
 8011b04:	6823      	ldr	r3, [r4, #0]
 8011b06:	442b      	add	r3, r5
 8011b08:	6023      	str	r3, [r4, #0]
 8011b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8011b0e:	685a      	ldr	r2, [r3, #4]
 8011b10:	bb62      	cbnz	r2, 8011b6c <_malloc_r+0xdc>
 8011b12:	f8c8 7000 	str.w	r7, [r8]
 8011b16:	e00f      	b.n	8011b38 <_malloc_r+0xa8>
 8011b18:	6822      	ldr	r2, [r4, #0]
 8011b1a:	1b52      	subs	r2, r2, r5
 8011b1c:	d420      	bmi.n	8011b60 <_malloc_r+0xd0>
 8011b1e:	2a0b      	cmp	r2, #11
 8011b20:	d917      	bls.n	8011b52 <_malloc_r+0xc2>
 8011b22:	1961      	adds	r1, r4, r5
 8011b24:	42a3      	cmp	r3, r4
 8011b26:	6025      	str	r5, [r4, #0]
 8011b28:	bf18      	it	ne
 8011b2a:	6059      	strne	r1, [r3, #4]
 8011b2c:	6863      	ldr	r3, [r4, #4]
 8011b2e:	bf08      	it	eq
 8011b30:	f8c8 1000 	streq.w	r1, [r8]
 8011b34:	5162      	str	r2, [r4, r5]
 8011b36:	604b      	str	r3, [r1, #4]
 8011b38:	4630      	mov	r0, r6
 8011b3a:	f000 f82f 	bl	8011b9c <__malloc_unlock>
 8011b3e:	f104 000b 	add.w	r0, r4, #11
 8011b42:	1d23      	adds	r3, r4, #4
 8011b44:	f020 0007 	bic.w	r0, r0, #7
 8011b48:	1ac2      	subs	r2, r0, r3
 8011b4a:	bf1c      	itt	ne
 8011b4c:	1a1b      	subne	r3, r3, r0
 8011b4e:	50a3      	strne	r3, [r4, r2]
 8011b50:	e7af      	b.n	8011ab2 <_malloc_r+0x22>
 8011b52:	6862      	ldr	r2, [r4, #4]
 8011b54:	42a3      	cmp	r3, r4
 8011b56:	bf0c      	ite	eq
 8011b58:	f8c8 2000 	streq.w	r2, [r8]
 8011b5c:	605a      	strne	r2, [r3, #4]
 8011b5e:	e7eb      	b.n	8011b38 <_malloc_r+0xa8>
 8011b60:	4623      	mov	r3, r4
 8011b62:	6864      	ldr	r4, [r4, #4]
 8011b64:	e7ae      	b.n	8011ac4 <_malloc_r+0x34>
 8011b66:	463c      	mov	r4, r7
 8011b68:	687f      	ldr	r7, [r7, #4]
 8011b6a:	e7b6      	b.n	8011ada <_malloc_r+0x4a>
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	685b      	ldr	r3, [r3, #4]
 8011b70:	42a3      	cmp	r3, r4
 8011b72:	d1fb      	bne.n	8011b6c <_malloc_r+0xdc>
 8011b74:	2300      	movs	r3, #0
 8011b76:	6053      	str	r3, [r2, #4]
 8011b78:	e7de      	b.n	8011b38 <_malloc_r+0xa8>
 8011b7a:	230c      	movs	r3, #12
 8011b7c:	6033      	str	r3, [r6, #0]
 8011b7e:	4630      	mov	r0, r6
 8011b80:	f000 f80c 	bl	8011b9c <__malloc_unlock>
 8011b84:	e794      	b.n	8011ab0 <_malloc_r+0x20>
 8011b86:	6005      	str	r5, [r0, #0]
 8011b88:	e7d6      	b.n	8011b38 <_malloc_r+0xa8>
 8011b8a:	bf00      	nop
 8011b8c:	2000846c 	.word	0x2000846c

08011b90 <__malloc_lock>:
 8011b90:	4801      	ldr	r0, [pc, #4]	@ (8011b98 <__malloc_lock+0x8>)
 8011b92:	f7ff beda 	b.w	801194a <__retarget_lock_acquire_recursive>
 8011b96:	bf00      	nop
 8011b98:	20008464 	.word	0x20008464

08011b9c <__malloc_unlock>:
 8011b9c:	4801      	ldr	r0, [pc, #4]	@ (8011ba4 <__malloc_unlock+0x8>)
 8011b9e:	f7ff bed5 	b.w	801194c <__retarget_lock_release_recursive>
 8011ba2:	bf00      	nop
 8011ba4:	20008464 	.word	0x20008464

08011ba8 <__ssputs_r>:
 8011ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bac:	688e      	ldr	r6, [r1, #8]
 8011bae:	461f      	mov	r7, r3
 8011bb0:	42be      	cmp	r6, r7
 8011bb2:	680b      	ldr	r3, [r1, #0]
 8011bb4:	4682      	mov	sl, r0
 8011bb6:	460c      	mov	r4, r1
 8011bb8:	4690      	mov	r8, r2
 8011bba:	d82d      	bhi.n	8011c18 <__ssputs_r+0x70>
 8011bbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011bc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011bc4:	d026      	beq.n	8011c14 <__ssputs_r+0x6c>
 8011bc6:	6965      	ldr	r5, [r4, #20]
 8011bc8:	6909      	ldr	r1, [r1, #16]
 8011bca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011bce:	eba3 0901 	sub.w	r9, r3, r1
 8011bd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011bd6:	1c7b      	adds	r3, r7, #1
 8011bd8:	444b      	add	r3, r9
 8011bda:	106d      	asrs	r5, r5, #1
 8011bdc:	429d      	cmp	r5, r3
 8011bde:	bf38      	it	cc
 8011be0:	461d      	movcc	r5, r3
 8011be2:	0553      	lsls	r3, r2, #21
 8011be4:	d527      	bpl.n	8011c36 <__ssputs_r+0x8e>
 8011be6:	4629      	mov	r1, r5
 8011be8:	f7ff ff52 	bl	8011a90 <_malloc_r>
 8011bec:	4606      	mov	r6, r0
 8011bee:	b360      	cbz	r0, 8011c4a <__ssputs_r+0xa2>
 8011bf0:	6921      	ldr	r1, [r4, #16]
 8011bf2:	464a      	mov	r2, r9
 8011bf4:	f7ff feab 	bl	801194e <memcpy>
 8011bf8:	89a3      	ldrh	r3, [r4, #12]
 8011bfa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c02:	81a3      	strh	r3, [r4, #12]
 8011c04:	6126      	str	r6, [r4, #16]
 8011c06:	6165      	str	r5, [r4, #20]
 8011c08:	444e      	add	r6, r9
 8011c0a:	eba5 0509 	sub.w	r5, r5, r9
 8011c0e:	6026      	str	r6, [r4, #0]
 8011c10:	60a5      	str	r5, [r4, #8]
 8011c12:	463e      	mov	r6, r7
 8011c14:	42be      	cmp	r6, r7
 8011c16:	d900      	bls.n	8011c1a <__ssputs_r+0x72>
 8011c18:	463e      	mov	r6, r7
 8011c1a:	6820      	ldr	r0, [r4, #0]
 8011c1c:	4632      	mov	r2, r6
 8011c1e:	4641      	mov	r1, r8
 8011c20:	f000 fb66 	bl	80122f0 <memmove>
 8011c24:	68a3      	ldr	r3, [r4, #8]
 8011c26:	1b9b      	subs	r3, r3, r6
 8011c28:	60a3      	str	r3, [r4, #8]
 8011c2a:	6823      	ldr	r3, [r4, #0]
 8011c2c:	4433      	add	r3, r6
 8011c2e:	6023      	str	r3, [r4, #0]
 8011c30:	2000      	movs	r0, #0
 8011c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c36:	462a      	mov	r2, r5
 8011c38:	f000 fb8b 	bl	8012352 <_realloc_r>
 8011c3c:	4606      	mov	r6, r0
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	d1e0      	bne.n	8011c04 <__ssputs_r+0x5c>
 8011c42:	6921      	ldr	r1, [r4, #16]
 8011c44:	4650      	mov	r0, sl
 8011c46:	f7ff feaf 	bl	80119a8 <_free_r>
 8011c4a:	230c      	movs	r3, #12
 8011c4c:	f8ca 3000 	str.w	r3, [sl]
 8011c50:	89a3      	ldrh	r3, [r4, #12]
 8011c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c56:	81a3      	strh	r3, [r4, #12]
 8011c58:	f04f 30ff 	mov.w	r0, #4294967295
 8011c5c:	e7e9      	b.n	8011c32 <__ssputs_r+0x8a>
	...

08011c60 <_svfiprintf_r>:
 8011c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c64:	4698      	mov	r8, r3
 8011c66:	898b      	ldrh	r3, [r1, #12]
 8011c68:	061b      	lsls	r3, r3, #24
 8011c6a:	b09d      	sub	sp, #116	@ 0x74
 8011c6c:	4607      	mov	r7, r0
 8011c6e:	460d      	mov	r5, r1
 8011c70:	4614      	mov	r4, r2
 8011c72:	d510      	bpl.n	8011c96 <_svfiprintf_r+0x36>
 8011c74:	690b      	ldr	r3, [r1, #16]
 8011c76:	b973      	cbnz	r3, 8011c96 <_svfiprintf_r+0x36>
 8011c78:	2140      	movs	r1, #64	@ 0x40
 8011c7a:	f7ff ff09 	bl	8011a90 <_malloc_r>
 8011c7e:	6028      	str	r0, [r5, #0]
 8011c80:	6128      	str	r0, [r5, #16]
 8011c82:	b930      	cbnz	r0, 8011c92 <_svfiprintf_r+0x32>
 8011c84:	230c      	movs	r3, #12
 8011c86:	603b      	str	r3, [r7, #0]
 8011c88:	f04f 30ff 	mov.w	r0, #4294967295
 8011c8c:	b01d      	add	sp, #116	@ 0x74
 8011c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c92:	2340      	movs	r3, #64	@ 0x40
 8011c94:	616b      	str	r3, [r5, #20]
 8011c96:	2300      	movs	r3, #0
 8011c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c9a:	2320      	movs	r3, #32
 8011c9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ca0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ca4:	2330      	movs	r3, #48	@ 0x30
 8011ca6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011e44 <_svfiprintf_r+0x1e4>
 8011caa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011cae:	f04f 0901 	mov.w	r9, #1
 8011cb2:	4623      	mov	r3, r4
 8011cb4:	469a      	mov	sl, r3
 8011cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cba:	b10a      	cbz	r2, 8011cc0 <_svfiprintf_r+0x60>
 8011cbc:	2a25      	cmp	r2, #37	@ 0x25
 8011cbe:	d1f9      	bne.n	8011cb4 <_svfiprintf_r+0x54>
 8011cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8011cc4:	d00b      	beq.n	8011cde <_svfiprintf_r+0x7e>
 8011cc6:	465b      	mov	r3, fp
 8011cc8:	4622      	mov	r2, r4
 8011cca:	4629      	mov	r1, r5
 8011ccc:	4638      	mov	r0, r7
 8011cce:	f7ff ff6b 	bl	8011ba8 <__ssputs_r>
 8011cd2:	3001      	adds	r0, #1
 8011cd4:	f000 80a7 	beq.w	8011e26 <_svfiprintf_r+0x1c6>
 8011cd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cda:	445a      	add	r2, fp
 8011cdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cde:	f89a 3000 	ldrb.w	r3, [sl]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	f000 809f 	beq.w	8011e26 <_svfiprintf_r+0x1c6>
 8011ce8:	2300      	movs	r3, #0
 8011cea:	f04f 32ff 	mov.w	r2, #4294967295
 8011cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cf2:	f10a 0a01 	add.w	sl, sl, #1
 8011cf6:	9304      	str	r3, [sp, #16]
 8011cf8:	9307      	str	r3, [sp, #28]
 8011cfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011cfe:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d00:	4654      	mov	r4, sl
 8011d02:	2205      	movs	r2, #5
 8011d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d08:	484e      	ldr	r0, [pc, #312]	@ (8011e44 <_svfiprintf_r+0x1e4>)
 8011d0a:	f7ee fa71 	bl	80001f0 <memchr>
 8011d0e:	9a04      	ldr	r2, [sp, #16]
 8011d10:	b9d8      	cbnz	r0, 8011d4a <_svfiprintf_r+0xea>
 8011d12:	06d0      	lsls	r0, r2, #27
 8011d14:	bf44      	itt	mi
 8011d16:	2320      	movmi	r3, #32
 8011d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d1c:	0711      	lsls	r1, r2, #28
 8011d1e:	bf44      	itt	mi
 8011d20:	232b      	movmi	r3, #43	@ 0x2b
 8011d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d26:	f89a 3000 	ldrb.w	r3, [sl]
 8011d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d2c:	d015      	beq.n	8011d5a <_svfiprintf_r+0xfa>
 8011d2e:	9a07      	ldr	r2, [sp, #28]
 8011d30:	4654      	mov	r4, sl
 8011d32:	2000      	movs	r0, #0
 8011d34:	f04f 0c0a 	mov.w	ip, #10
 8011d38:	4621      	mov	r1, r4
 8011d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d3e:	3b30      	subs	r3, #48	@ 0x30
 8011d40:	2b09      	cmp	r3, #9
 8011d42:	d94b      	bls.n	8011ddc <_svfiprintf_r+0x17c>
 8011d44:	b1b0      	cbz	r0, 8011d74 <_svfiprintf_r+0x114>
 8011d46:	9207      	str	r2, [sp, #28]
 8011d48:	e014      	b.n	8011d74 <_svfiprintf_r+0x114>
 8011d4a:	eba0 0308 	sub.w	r3, r0, r8
 8011d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8011d52:	4313      	orrs	r3, r2
 8011d54:	9304      	str	r3, [sp, #16]
 8011d56:	46a2      	mov	sl, r4
 8011d58:	e7d2      	b.n	8011d00 <_svfiprintf_r+0xa0>
 8011d5a:	9b03      	ldr	r3, [sp, #12]
 8011d5c:	1d19      	adds	r1, r3, #4
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	9103      	str	r1, [sp, #12]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	bfbb      	ittet	lt
 8011d66:	425b      	neglt	r3, r3
 8011d68:	f042 0202 	orrlt.w	r2, r2, #2
 8011d6c:	9307      	strge	r3, [sp, #28]
 8011d6e:	9307      	strlt	r3, [sp, #28]
 8011d70:	bfb8      	it	lt
 8011d72:	9204      	strlt	r2, [sp, #16]
 8011d74:	7823      	ldrb	r3, [r4, #0]
 8011d76:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d78:	d10a      	bne.n	8011d90 <_svfiprintf_r+0x130>
 8011d7a:	7863      	ldrb	r3, [r4, #1]
 8011d7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d7e:	d132      	bne.n	8011de6 <_svfiprintf_r+0x186>
 8011d80:	9b03      	ldr	r3, [sp, #12]
 8011d82:	1d1a      	adds	r2, r3, #4
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	9203      	str	r2, [sp, #12]
 8011d88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d8c:	3402      	adds	r4, #2
 8011d8e:	9305      	str	r3, [sp, #20]
 8011d90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011e54 <_svfiprintf_r+0x1f4>
 8011d94:	7821      	ldrb	r1, [r4, #0]
 8011d96:	2203      	movs	r2, #3
 8011d98:	4650      	mov	r0, sl
 8011d9a:	f7ee fa29 	bl	80001f0 <memchr>
 8011d9e:	b138      	cbz	r0, 8011db0 <_svfiprintf_r+0x150>
 8011da0:	9b04      	ldr	r3, [sp, #16]
 8011da2:	eba0 000a 	sub.w	r0, r0, sl
 8011da6:	2240      	movs	r2, #64	@ 0x40
 8011da8:	4082      	lsls	r2, r0
 8011daa:	4313      	orrs	r3, r2
 8011dac:	3401      	adds	r4, #1
 8011dae:	9304      	str	r3, [sp, #16]
 8011db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011db4:	4824      	ldr	r0, [pc, #144]	@ (8011e48 <_svfiprintf_r+0x1e8>)
 8011db6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011dba:	2206      	movs	r2, #6
 8011dbc:	f7ee fa18 	bl	80001f0 <memchr>
 8011dc0:	2800      	cmp	r0, #0
 8011dc2:	d036      	beq.n	8011e32 <_svfiprintf_r+0x1d2>
 8011dc4:	4b21      	ldr	r3, [pc, #132]	@ (8011e4c <_svfiprintf_r+0x1ec>)
 8011dc6:	bb1b      	cbnz	r3, 8011e10 <_svfiprintf_r+0x1b0>
 8011dc8:	9b03      	ldr	r3, [sp, #12]
 8011dca:	3307      	adds	r3, #7
 8011dcc:	f023 0307 	bic.w	r3, r3, #7
 8011dd0:	3308      	adds	r3, #8
 8011dd2:	9303      	str	r3, [sp, #12]
 8011dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dd6:	4433      	add	r3, r6
 8011dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8011dda:	e76a      	b.n	8011cb2 <_svfiprintf_r+0x52>
 8011ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011de0:	460c      	mov	r4, r1
 8011de2:	2001      	movs	r0, #1
 8011de4:	e7a8      	b.n	8011d38 <_svfiprintf_r+0xd8>
 8011de6:	2300      	movs	r3, #0
 8011de8:	3401      	adds	r4, #1
 8011dea:	9305      	str	r3, [sp, #20]
 8011dec:	4619      	mov	r1, r3
 8011dee:	f04f 0c0a 	mov.w	ip, #10
 8011df2:	4620      	mov	r0, r4
 8011df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011df8:	3a30      	subs	r2, #48	@ 0x30
 8011dfa:	2a09      	cmp	r2, #9
 8011dfc:	d903      	bls.n	8011e06 <_svfiprintf_r+0x1a6>
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d0c6      	beq.n	8011d90 <_svfiprintf_r+0x130>
 8011e02:	9105      	str	r1, [sp, #20]
 8011e04:	e7c4      	b.n	8011d90 <_svfiprintf_r+0x130>
 8011e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	e7f0      	b.n	8011df2 <_svfiprintf_r+0x192>
 8011e10:	ab03      	add	r3, sp, #12
 8011e12:	9300      	str	r3, [sp, #0]
 8011e14:	462a      	mov	r2, r5
 8011e16:	4b0e      	ldr	r3, [pc, #56]	@ (8011e50 <_svfiprintf_r+0x1f0>)
 8011e18:	a904      	add	r1, sp, #16
 8011e1a:	4638      	mov	r0, r7
 8011e1c:	f3af 8000 	nop.w
 8011e20:	1c42      	adds	r2, r0, #1
 8011e22:	4606      	mov	r6, r0
 8011e24:	d1d6      	bne.n	8011dd4 <_svfiprintf_r+0x174>
 8011e26:	89ab      	ldrh	r3, [r5, #12]
 8011e28:	065b      	lsls	r3, r3, #25
 8011e2a:	f53f af2d 	bmi.w	8011c88 <_svfiprintf_r+0x28>
 8011e2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e30:	e72c      	b.n	8011c8c <_svfiprintf_r+0x2c>
 8011e32:	ab03      	add	r3, sp, #12
 8011e34:	9300      	str	r3, [sp, #0]
 8011e36:	462a      	mov	r2, r5
 8011e38:	4b05      	ldr	r3, [pc, #20]	@ (8011e50 <_svfiprintf_r+0x1f0>)
 8011e3a:	a904      	add	r1, sp, #16
 8011e3c:	4638      	mov	r0, r7
 8011e3e:	f000 f879 	bl	8011f34 <_printf_i>
 8011e42:	e7ed      	b.n	8011e20 <_svfiprintf_r+0x1c0>
 8011e44:	080131db 	.word	0x080131db
 8011e48:	080131e5 	.word	0x080131e5
 8011e4c:	00000000 	.word	0x00000000
 8011e50:	08011ba9 	.word	0x08011ba9
 8011e54:	080131e1 	.word	0x080131e1

08011e58 <_printf_common>:
 8011e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e5c:	4616      	mov	r6, r2
 8011e5e:	4698      	mov	r8, r3
 8011e60:	688a      	ldr	r2, [r1, #8]
 8011e62:	690b      	ldr	r3, [r1, #16]
 8011e64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011e68:	4293      	cmp	r3, r2
 8011e6a:	bfb8      	it	lt
 8011e6c:	4613      	movlt	r3, r2
 8011e6e:	6033      	str	r3, [r6, #0]
 8011e70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011e74:	4607      	mov	r7, r0
 8011e76:	460c      	mov	r4, r1
 8011e78:	b10a      	cbz	r2, 8011e7e <_printf_common+0x26>
 8011e7a:	3301      	adds	r3, #1
 8011e7c:	6033      	str	r3, [r6, #0]
 8011e7e:	6823      	ldr	r3, [r4, #0]
 8011e80:	0699      	lsls	r1, r3, #26
 8011e82:	bf42      	ittt	mi
 8011e84:	6833      	ldrmi	r3, [r6, #0]
 8011e86:	3302      	addmi	r3, #2
 8011e88:	6033      	strmi	r3, [r6, #0]
 8011e8a:	6825      	ldr	r5, [r4, #0]
 8011e8c:	f015 0506 	ands.w	r5, r5, #6
 8011e90:	d106      	bne.n	8011ea0 <_printf_common+0x48>
 8011e92:	f104 0a19 	add.w	sl, r4, #25
 8011e96:	68e3      	ldr	r3, [r4, #12]
 8011e98:	6832      	ldr	r2, [r6, #0]
 8011e9a:	1a9b      	subs	r3, r3, r2
 8011e9c:	42ab      	cmp	r3, r5
 8011e9e:	dc26      	bgt.n	8011eee <_printf_common+0x96>
 8011ea0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011ea4:	6822      	ldr	r2, [r4, #0]
 8011ea6:	3b00      	subs	r3, #0
 8011ea8:	bf18      	it	ne
 8011eaa:	2301      	movne	r3, #1
 8011eac:	0692      	lsls	r2, r2, #26
 8011eae:	d42b      	bmi.n	8011f08 <_printf_common+0xb0>
 8011eb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011eb4:	4641      	mov	r1, r8
 8011eb6:	4638      	mov	r0, r7
 8011eb8:	47c8      	blx	r9
 8011eba:	3001      	adds	r0, #1
 8011ebc:	d01e      	beq.n	8011efc <_printf_common+0xa4>
 8011ebe:	6823      	ldr	r3, [r4, #0]
 8011ec0:	6922      	ldr	r2, [r4, #16]
 8011ec2:	f003 0306 	and.w	r3, r3, #6
 8011ec6:	2b04      	cmp	r3, #4
 8011ec8:	bf02      	ittt	eq
 8011eca:	68e5      	ldreq	r5, [r4, #12]
 8011ecc:	6833      	ldreq	r3, [r6, #0]
 8011ece:	1aed      	subeq	r5, r5, r3
 8011ed0:	68a3      	ldr	r3, [r4, #8]
 8011ed2:	bf0c      	ite	eq
 8011ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ed8:	2500      	movne	r5, #0
 8011eda:	4293      	cmp	r3, r2
 8011edc:	bfc4      	itt	gt
 8011ede:	1a9b      	subgt	r3, r3, r2
 8011ee0:	18ed      	addgt	r5, r5, r3
 8011ee2:	2600      	movs	r6, #0
 8011ee4:	341a      	adds	r4, #26
 8011ee6:	42b5      	cmp	r5, r6
 8011ee8:	d11a      	bne.n	8011f20 <_printf_common+0xc8>
 8011eea:	2000      	movs	r0, #0
 8011eec:	e008      	b.n	8011f00 <_printf_common+0xa8>
 8011eee:	2301      	movs	r3, #1
 8011ef0:	4652      	mov	r2, sl
 8011ef2:	4641      	mov	r1, r8
 8011ef4:	4638      	mov	r0, r7
 8011ef6:	47c8      	blx	r9
 8011ef8:	3001      	adds	r0, #1
 8011efa:	d103      	bne.n	8011f04 <_printf_common+0xac>
 8011efc:	f04f 30ff 	mov.w	r0, #4294967295
 8011f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f04:	3501      	adds	r5, #1
 8011f06:	e7c6      	b.n	8011e96 <_printf_common+0x3e>
 8011f08:	18e1      	adds	r1, r4, r3
 8011f0a:	1c5a      	adds	r2, r3, #1
 8011f0c:	2030      	movs	r0, #48	@ 0x30
 8011f0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011f12:	4422      	add	r2, r4
 8011f14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011f18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011f1c:	3302      	adds	r3, #2
 8011f1e:	e7c7      	b.n	8011eb0 <_printf_common+0x58>
 8011f20:	2301      	movs	r3, #1
 8011f22:	4622      	mov	r2, r4
 8011f24:	4641      	mov	r1, r8
 8011f26:	4638      	mov	r0, r7
 8011f28:	47c8      	blx	r9
 8011f2a:	3001      	adds	r0, #1
 8011f2c:	d0e6      	beq.n	8011efc <_printf_common+0xa4>
 8011f2e:	3601      	adds	r6, #1
 8011f30:	e7d9      	b.n	8011ee6 <_printf_common+0x8e>
	...

08011f34 <_printf_i>:
 8011f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f38:	7e0f      	ldrb	r7, [r1, #24]
 8011f3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011f3c:	2f78      	cmp	r7, #120	@ 0x78
 8011f3e:	4691      	mov	r9, r2
 8011f40:	4680      	mov	r8, r0
 8011f42:	460c      	mov	r4, r1
 8011f44:	469a      	mov	sl, r3
 8011f46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011f4a:	d807      	bhi.n	8011f5c <_printf_i+0x28>
 8011f4c:	2f62      	cmp	r7, #98	@ 0x62
 8011f4e:	d80a      	bhi.n	8011f66 <_printf_i+0x32>
 8011f50:	2f00      	cmp	r7, #0
 8011f52:	f000 80d2 	beq.w	80120fa <_printf_i+0x1c6>
 8011f56:	2f58      	cmp	r7, #88	@ 0x58
 8011f58:	f000 80b9 	beq.w	80120ce <_printf_i+0x19a>
 8011f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011f64:	e03a      	b.n	8011fdc <_printf_i+0xa8>
 8011f66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011f6a:	2b15      	cmp	r3, #21
 8011f6c:	d8f6      	bhi.n	8011f5c <_printf_i+0x28>
 8011f6e:	a101      	add	r1, pc, #4	@ (adr r1, 8011f74 <_printf_i+0x40>)
 8011f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f74:	08011fcd 	.word	0x08011fcd
 8011f78:	08011fe1 	.word	0x08011fe1
 8011f7c:	08011f5d 	.word	0x08011f5d
 8011f80:	08011f5d 	.word	0x08011f5d
 8011f84:	08011f5d 	.word	0x08011f5d
 8011f88:	08011f5d 	.word	0x08011f5d
 8011f8c:	08011fe1 	.word	0x08011fe1
 8011f90:	08011f5d 	.word	0x08011f5d
 8011f94:	08011f5d 	.word	0x08011f5d
 8011f98:	08011f5d 	.word	0x08011f5d
 8011f9c:	08011f5d 	.word	0x08011f5d
 8011fa0:	080120e1 	.word	0x080120e1
 8011fa4:	0801200b 	.word	0x0801200b
 8011fa8:	0801209b 	.word	0x0801209b
 8011fac:	08011f5d 	.word	0x08011f5d
 8011fb0:	08011f5d 	.word	0x08011f5d
 8011fb4:	08012103 	.word	0x08012103
 8011fb8:	08011f5d 	.word	0x08011f5d
 8011fbc:	0801200b 	.word	0x0801200b
 8011fc0:	08011f5d 	.word	0x08011f5d
 8011fc4:	08011f5d 	.word	0x08011f5d
 8011fc8:	080120a3 	.word	0x080120a3
 8011fcc:	6833      	ldr	r3, [r6, #0]
 8011fce:	1d1a      	adds	r2, r3, #4
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	6032      	str	r2, [r6, #0]
 8011fd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011fd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011fdc:	2301      	movs	r3, #1
 8011fde:	e09d      	b.n	801211c <_printf_i+0x1e8>
 8011fe0:	6833      	ldr	r3, [r6, #0]
 8011fe2:	6820      	ldr	r0, [r4, #0]
 8011fe4:	1d19      	adds	r1, r3, #4
 8011fe6:	6031      	str	r1, [r6, #0]
 8011fe8:	0606      	lsls	r6, r0, #24
 8011fea:	d501      	bpl.n	8011ff0 <_printf_i+0xbc>
 8011fec:	681d      	ldr	r5, [r3, #0]
 8011fee:	e003      	b.n	8011ff8 <_printf_i+0xc4>
 8011ff0:	0645      	lsls	r5, r0, #25
 8011ff2:	d5fb      	bpl.n	8011fec <_printf_i+0xb8>
 8011ff4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011ff8:	2d00      	cmp	r5, #0
 8011ffa:	da03      	bge.n	8012004 <_printf_i+0xd0>
 8011ffc:	232d      	movs	r3, #45	@ 0x2d
 8011ffe:	426d      	negs	r5, r5
 8012000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012004:	4859      	ldr	r0, [pc, #356]	@ (801216c <_printf_i+0x238>)
 8012006:	230a      	movs	r3, #10
 8012008:	e011      	b.n	801202e <_printf_i+0xfa>
 801200a:	6821      	ldr	r1, [r4, #0]
 801200c:	6833      	ldr	r3, [r6, #0]
 801200e:	0608      	lsls	r0, r1, #24
 8012010:	f853 5b04 	ldr.w	r5, [r3], #4
 8012014:	d402      	bmi.n	801201c <_printf_i+0xe8>
 8012016:	0649      	lsls	r1, r1, #25
 8012018:	bf48      	it	mi
 801201a:	b2ad      	uxthmi	r5, r5
 801201c:	2f6f      	cmp	r7, #111	@ 0x6f
 801201e:	4853      	ldr	r0, [pc, #332]	@ (801216c <_printf_i+0x238>)
 8012020:	6033      	str	r3, [r6, #0]
 8012022:	bf14      	ite	ne
 8012024:	230a      	movne	r3, #10
 8012026:	2308      	moveq	r3, #8
 8012028:	2100      	movs	r1, #0
 801202a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801202e:	6866      	ldr	r6, [r4, #4]
 8012030:	60a6      	str	r6, [r4, #8]
 8012032:	2e00      	cmp	r6, #0
 8012034:	bfa2      	ittt	ge
 8012036:	6821      	ldrge	r1, [r4, #0]
 8012038:	f021 0104 	bicge.w	r1, r1, #4
 801203c:	6021      	strge	r1, [r4, #0]
 801203e:	b90d      	cbnz	r5, 8012044 <_printf_i+0x110>
 8012040:	2e00      	cmp	r6, #0
 8012042:	d04b      	beq.n	80120dc <_printf_i+0x1a8>
 8012044:	4616      	mov	r6, r2
 8012046:	fbb5 f1f3 	udiv	r1, r5, r3
 801204a:	fb03 5711 	mls	r7, r3, r1, r5
 801204e:	5dc7      	ldrb	r7, [r0, r7]
 8012050:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012054:	462f      	mov	r7, r5
 8012056:	42bb      	cmp	r3, r7
 8012058:	460d      	mov	r5, r1
 801205a:	d9f4      	bls.n	8012046 <_printf_i+0x112>
 801205c:	2b08      	cmp	r3, #8
 801205e:	d10b      	bne.n	8012078 <_printf_i+0x144>
 8012060:	6823      	ldr	r3, [r4, #0]
 8012062:	07df      	lsls	r7, r3, #31
 8012064:	d508      	bpl.n	8012078 <_printf_i+0x144>
 8012066:	6923      	ldr	r3, [r4, #16]
 8012068:	6861      	ldr	r1, [r4, #4]
 801206a:	4299      	cmp	r1, r3
 801206c:	bfde      	ittt	le
 801206e:	2330      	movle	r3, #48	@ 0x30
 8012070:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012074:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012078:	1b92      	subs	r2, r2, r6
 801207a:	6122      	str	r2, [r4, #16]
 801207c:	f8cd a000 	str.w	sl, [sp]
 8012080:	464b      	mov	r3, r9
 8012082:	aa03      	add	r2, sp, #12
 8012084:	4621      	mov	r1, r4
 8012086:	4640      	mov	r0, r8
 8012088:	f7ff fee6 	bl	8011e58 <_printf_common>
 801208c:	3001      	adds	r0, #1
 801208e:	d14a      	bne.n	8012126 <_printf_i+0x1f2>
 8012090:	f04f 30ff 	mov.w	r0, #4294967295
 8012094:	b004      	add	sp, #16
 8012096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801209a:	6823      	ldr	r3, [r4, #0]
 801209c:	f043 0320 	orr.w	r3, r3, #32
 80120a0:	6023      	str	r3, [r4, #0]
 80120a2:	4833      	ldr	r0, [pc, #204]	@ (8012170 <_printf_i+0x23c>)
 80120a4:	2778      	movs	r7, #120	@ 0x78
 80120a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80120aa:	6823      	ldr	r3, [r4, #0]
 80120ac:	6831      	ldr	r1, [r6, #0]
 80120ae:	061f      	lsls	r7, r3, #24
 80120b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80120b4:	d402      	bmi.n	80120bc <_printf_i+0x188>
 80120b6:	065f      	lsls	r7, r3, #25
 80120b8:	bf48      	it	mi
 80120ba:	b2ad      	uxthmi	r5, r5
 80120bc:	6031      	str	r1, [r6, #0]
 80120be:	07d9      	lsls	r1, r3, #31
 80120c0:	bf44      	itt	mi
 80120c2:	f043 0320 	orrmi.w	r3, r3, #32
 80120c6:	6023      	strmi	r3, [r4, #0]
 80120c8:	b11d      	cbz	r5, 80120d2 <_printf_i+0x19e>
 80120ca:	2310      	movs	r3, #16
 80120cc:	e7ac      	b.n	8012028 <_printf_i+0xf4>
 80120ce:	4827      	ldr	r0, [pc, #156]	@ (801216c <_printf_i+0x238>)
 80120d0:	e7e9      	b.n	80120a6 <_printf_i+0x172>
 80120d2:	6823      	ldr	r3, [r4, #0]
 80120d4:	f023 0320 	bic.w	r3, r3, #32
 80120d8:	6023      	str	r3, [r4, #0]
 80120da:	e7f6      	b.n	80120ca <_printf_i+0x196>
 80120dc:	4616      	mov	r6, r2
 80120de:	e7bd      	b.n	801205c <_printf_i+0x128>
 80120e0:	6833      	ldr	r3, [r6, #0]
 80120e2:	6825      	ldr	r5, [r4, #0]
 80120e4:	6961      	ldr	r1, [r4, #20]
 80120e6:	1d18      	adds	r0, r3, #4
 80120e8:	6030      	str	r0, [r6, #0]
 80120ea:	062e      	lsls	r6, r5, #24
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	d501      	bpl.n	80120f4 <_printf_i+0x1c0>
 80120f0:	6019      	str	r1, [r3, #0]
 80120f2:	e002      	b.n	80120fa <_printf_i+0x1c6>
 80120f4:	0668      	lsls	r0, r5, #25
 80120f6:	d5fb      	bpl.n	80120f0 <_printf_i+0x1bc>
 80120f8:	8019      	strh	r1, [r3, #0]
 80120fa:	2300      	movs	r3, #0
 80120fc:	6123      	str	r3, [r4, #16]
 80120fe:	4616      	mov	r6, r2
 8012100:	e7bc      	b.n	801207c <_printf_i+0x148>
 8012102:	6833      	ldr	r3, [r6, #0]
 8012104:	1d1a      	adds	r2, r3, #4
 8012106:	6032      	str	r2, [r6, #0]
 8012108:	681e      	ldr	r6, [r3, #0]
 801210a:	6862      	ldr	r2, [r4, #4]
 801210c:	2100      	movs	r1, #0
 801210e:	4630      	mov	r0, r6
 8012110:	f7ee f86e 	bl	80001f0 <memchr>
 8012114:	b108      	cbz	r0, 801211a <_printf_i+0x1e6>
 8012116:	1b80      	subs	r0, r0, r6
 8012118:	6060      	str	r0, [r4, #4]
 801211a:	6863      	ldr	r3, [r4, #4]
 801211c:	6123      	str	r3, [r4, #16]
 801211e:	2300      	movs	r3, #0
 8012120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012124:	e7aa      	b.n	801207c <_printf_i+0x148>
 8012126:	6923      	ldr	r3, [r4, #16]
 8012128:	4632      	mov	r2, r6
 801212a:	4649      	mov	r1, r9
 801212c:	4640      	mov	r0, r8
 801212e:	47d0      	blx	sl
 8012130:	3001      	adds	r0, #1
 8012132:	d0ad      	beq.n	8012090 <_printf_i+0x15c>
 8012134:	6823      	ldr	r3, [r4, #0]
 8012136:	079b      	lsls	r3, r3, #30
 8012138:	d413      	bmi.n	8012162 <_printf_i+0x22e>
 801213a:	68e0      	ldr	r0, [r4, #12]
 801213c:	9b03      	ldr	r3, [sp, #12]
 801213e:	4298      	cmp	r0, r3
 8012140:	bfb8      	it	lt
 8012142:	4618      	movlt	r0, r3
 8012144:	e7a6      	b.n	8012094 <_printf_i+0x160>
 8012146:	2301      	movs	r3, #1
 8012148:	4632      	mov	r2, r6
 801214a:	4649      	mov	r1, r9
 801214c:	4640      	mov	r0, r8
 801214e:	47d0      	blx	sl
 8012150:	3001      	adds	r0, #1
 8012152:	d09d      	beq.n	8012090 <_printf_i+0x15c>
 8012154:	3501      	adds	r5, #1
 8012156:	68e3      	ldr	r3, [r4, #12]
 8012158:	9903      	ldr	r1, [sp, #12]
 801215a:	1a5b      	subs	r3, r3, r1
 801215c:	42ab      	cmp	r3, r5
 801215e:	dcf2      	bgt.n	8012146 <_printf_i+0x212>
 8012160:	e7eb      	b.n	801213a <_printf_i+0x206>
 8012162:	2500      	movs	r5, #0
 8012164:	f104 0619 	add.w	r6, r4, #25
 8012168:	e7f5      	b.n	8012156 <_printf_i+0x222>
 801216a:	bf00      	nop
 801216c:	080131ec 	.word	0x080131ec
 8012170:	080131fd 	.word	0x080131fd

08012174 <__sflush_r>:
 8012174:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801217c:	0716      	lsls	r6, r2, #28
 801217e:	4605      	mov	r5, r0
 8012180:	460c      	mov	r4, r1
 8012182:	d454      	bmi.n	801222e <__sflush_r+0xba>
 8012184:	684b      	ldr	r3, [r1, #4]
 8012186:	2b00      	cmp	r3, #0
 8012188:	dc02      	bgt.n	8012190 <__sflush_r+0x1c>
 801218a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801218c:	2b00      	cmp	r3, #0
 801218e:	dd48      	ble.n	8012222 <__sflush_r+0xae>
 8012190:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012192:	2e00      	cmp	r6, #0
 8012194:	d045      	beq.n	8012222 <__sflush_r+0xae>
 8012196:	2300      	movs	r3, #0
 8012198:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801219c:	682f      	ldr	r7, [r5, #0]
 801219e:	6a21      	ldr	r1, [r4, #32]
 80121a0:	602b      	str	r3, [r5, #0]
 80121a2:	d030      	beq.n	8012206 <__sflush_r+0x92>
 80121a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80121a6:	89a3      	ldrh	r3, [r4, #12]
 80121a8:	0759      	lsls	r1, r3, #29
 80121aa:	d505      	bpl.n	80121b8 <__sflush_r+0x44>
 80121ac:	6863      	ldr	r3, [r4, #4]
 80121ae:	1ad2      	subs	r2, r2, r3
 80121b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80121b2:	b10b      	cbz	r3, 80121b8 <__sflush_r+0x44>
 80121b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80121b6:	1ad2      	subs	r2, r2, r3
 80121b8:	2300      	movs	r3, #0
 80121ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80121bc:	6a21      	ldr	r1, [r4, #32]
 80121be:	4628      	mov	r0, r5
 80121c0:	47b0      	blx	r6
 80121c2:	1c43      	adds	r3, r0, #1
 80121c4:	89a3      	ldrh	r3, [r4, #12]
 80121c6:	d106      	bne.n	80121d6 <__sflush_r+0x62>
 80121c8:	6829      	ldr	r1, [r5, #0]
 80121ca:	291d      	cmp	r1, #29
 80121cc:	d82b      	bhi.n	8012226 <__sflush_r+0xb2>
 80121ce:	4a2a      	ldr	r2, [pc, #168]	@ (8012278 <__sflush_r+0x104>)
 80121d0:	410a      	asrs	r2, r1
 80121d2:	07d6      	lsls	r6, r2, #31
 80121d4:	d427      	bmi.n	8012226 <__sflush_r+0xb2>
 80121d6:	2200      	movs	r2, #0
 80121d8:	6062      	str	r2, [r4, #4]
 80121da:	04d9      	lsls	r1, r3, #19
 80121dc:	6922      	ldr	r2, [r4, #16]
 80121de:	6022      	str	r2, [r4, #0]
 80121e0:	d504      	bpl.n	80121ec <__sflush_r+0x78>
 80121e2:	1c42      	adds	r2, r0, #1
 80121e4:	d101      	bne.n	80121ea <__sflush_r+0x76>
 80121e6:	682b      	ldr	r3, [r5, #0]
 80121e8:	b903      	cbnz	r3, 80121ec <__sflush_r+0x78>
 80121ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80121ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80121ee:	602f      	str	r7, [r5, #0]
 80121f0:	b1b9      	cbz	r1, 8012222 <__sflush_r+0xae>
 80121f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80121f6:	4299      	cmp	r1, r3
 80121f8:	d002      	beq.n	8012200 <__sflush_r+0x8c>
 80121fa:	4628      	mov	r0, r5
 80121fc:	f7ff fbd4 	bl	80119a8 <_free_r>
 8012200:	2300      	movs	r3, #0
 8012202:	6363      	str	r3, [r4, #52]	@ 0x34
 8012204:	e00d      	b.n	8012222 <__sflush_r+0xae>
 8012206:	2301      	movs	r3, #1
 8012208:	4628      	mov	r0, r5
 801220a:	47b0      	blx	r6
 801220c:	4602      	mov	r2, r0
 801220e:	1c50      	adds	r0, r2, #1
 8012210:	d1c9      	bne.n	80121a6 <__sflush_r+0x32>
 8012212:	682b      	ldr	r3, [r5, #0]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d0c6      	beq.n	80121a6 <__sflush_r+0x32>
 8012218:	2b1d      	cmp	r3, #29
 801221a:	d001      	beq.n	8012220 <__sflush_r+0xac>
 801221c:	2b16      	cmp	r3, #22
 801221e:	d11e      	bne.n	801225e <__sflush_r+0xea>
 8012220:	602f      	str	r7, [r5, #0]
 8012222:	2000      	movs	r0, #0
 8012224:	e022      	b.n	801226c <__sflush_r+0xf8>
 8012226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801222a:	b21b      	sxth	r3, r3
 801222c:	e01b      	b.n	8012266 <__sflush_r+0xf2>
 801222e:	690f      	ldr	r7, [r1, #16]
 8012230:	2f00      	cmp	r7, #0
 8012232:	d0f6      	beq.n	8012222 <__sflush_r+0xae>
 8012234:	0793      	lsls	r3, r2, #30
 8012236:	680e      	ldr	r6, [r1, #0]
 8012238:	bf08      	it	eq
 801223a:	694b      	ldreq	r3, [r1, #20]
 801223c:	600f      	str	r7, [r1, #0]
 801223e:	bf18      	it	ne
 8012240:	2300      	movne	r3, #0
 8012242:	eba6 0807 	sub.w	r8, r6, r7
 8012246:	608b      	str	r3, [r1, #8]
 8012248:	f1b8 0f00 	cmp.w	r8, #0
 801224c:	dde9      	ble.n	8012222 <__sflush_r+0xae>
 801224e:	6a21      	ldr	r1, [r4, #32]
 8012250:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012252:	4643      	mov	r3, r8
 8012254:	463a      	mov	r2, r7
 8012256:	4628      	mov	r0, r5
 8012258:	47b0      	blx	r6
 801225a:	2800      	cmp	r0, #0
 801225c:	dc08      	bgt.n	8012270 <__sflush_r+0xfc>
 801225e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012266:	81a3      	strh	r3, [r4, #12]
 8012268:	f04f 30ff 	mov.w	r0, #4294967295
 801226c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012270:	4407      	add	r7, r0
 8012272:	eba8 0800 	sub.w	r8, r8, r0
 8012276:	e7e7      	b.n	8012248 <__sflush_r+0xd4>
 8012278:	dfbffffe 	.word	0xdfbffffe

0801227c <_fflush_r>:
 801227c:	b538      	push	{r3, r4, r5, lr}
 801227e:	690b      	ldr	r3, [r1, #16]
 8012280:	4605      	mov	r5, r0
 8012282:	460c      	mov	r4, r1
 8012284:	b913      	cbnz	r3, 801228c <_fflush_r+0x10>
 8012286:	2500      	movs	r5, #0
 8012288:	4628      	mov	r0, r5
 801228a:	bd38      	pop	{r3, r4, r5, pc}
 801228c:	b118      	cbz	r0, 8012296 <_fflush_r+0x1a>
 801228e:	6a03      	ldr	r3, [r0, #32]
 8012290:	b90b      	cbnz	r3, 8012296 <_fflush_r+0x1a>
 8012292:	f7ff f9f1 	bl	8011678 <__sinit>
 8012296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d0f3      	beq.n	8012286 <_fflush_r+0xa>
 801229e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80122a0:	07d0      	lsls	r0, r2, #31
 80122a2:	d404      	bmi.n	80122ae <_fflush_r+0x32>
 80122a4:	0599      	lsls	r1, r3, #22
 80122a6:	d402      	bmi.n	80122ae <_fflush_r+0x32>
 80122a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122aa:	f7ff fb4e 	bl	801194a <__retarget_lock_acquire_recursive>
 80122ae:	4628      	mov	r0, r5
 80122b0:	4621      	mov	r1, r4
 80122b2:	f7ff ff5f 	bl	8012174 <__sflush_r>
 80122b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80122b8:	07da      	lsls	r2, r3, #31
 80122ba:	4605      	mov	r5, r0
 80122bc:	d4e4      	bmi.n	8012288 <_fflush_r+0xc>
 80122be:	89a3      	ldrh	r3, [r4, #12]
 80122c0:	059b      	lsls	r3, r3, #22
 80122c2:	d4e1      	bmi.n	8012288 <_fflush_r+0xc>
 80122c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122c6:	f7ff fb41 	bl	801194c <__retarget_lock_release_recursive>
 80122ca:	e7dd      	b.n	8012288 <_fflush_r+0xc>

080122cc <fiprintf>:
 80122cc:	b40e      	push	{r1, r2, r3}
 80122ce:	b503      	push	{r0, r1, lr}
 80122d0:	4601      	mov	r1, r0
 80122d2:	ab03      	add	r3, sp, #12
 80122d4:	4805      	ldr	r0, [pc, #20]	@ (80122ec <fiprintf+0x20>)
 80122d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80122da:	6800      	ldr	r0, [r0, #0]
 80122dc:	9301      	str	r3, [sp, #4]
 80122de:	f000 f88f 	bl	8012400 <_vfiprintf_r>
 80122e2:	b002      	add	sp, #8
 80122e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80122e8:	b003      	add	sp, #12
 80122ea:	4770      	bx	lr
 80122ec:	20000124 	.word	0x20000124

080122f0 <memmove>:
 80122f0:	4288      	cmp	r0, r1
 80122f2:	b510      	push	{r4, lr}
 80122f4:	eb01 0402 	add.w	r4, r1, r2
 80122f8:	d902      	bls.n	8012300 <memmove+0x10>
 80122fa:	4284      	cmp	r4, r0
 80122fc:	4623      	mov	r3, r4
 80122fe:	d807      	bhi.n	8012310 <memmove+0x20>
 8012300:	1e43      	subs	r3, r0, #1
 8012302:	42a1      	cmp	r1, r4
 8012304:	d008      	beq.n	8012318 <memmove+0x28>
 8012306:	f811 2b01 	ldrb.w	r2, [r1], #1
 801230a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801230e:	e7f8      	b.n	8012302 <memmove+0x12>
 8012310:	4402      	add	r2, r0
 8012312:	4601      	mov	r1, r0
 8012314:	428a      	cmp	r2, r1
 8012316:	d100      	bne.n	801231a <memmove+0x2a>
 8012318:	bd10      	pop	{r4, pc}
 801231a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801231e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012322:	e7f7      	b.n	8012314 <memmove+0x24>

08012324 <_sbrk_r>:
 8012324:	b538      	push	{r3, r4, r5, lr}
 8012326:	4d06      	ldr	r5, [pc, #24]	@ (8012340 <_sbrk_r+0x1c>)
 8012328:	2300      	movs	r3, #0
 801232a:	4604      	mov	r4, r0
 801232c:	4608      	mov	r0, r1
 801232e:	602b      	str	r3, [r5, #0]
 8012330:	f7ef ffd0 	bl	80022d4 <_sbrk>
 8012334:	1c43      	adds	r3, r0, #1
 8012336:	d102      	bne.n	801233e <_sbrk_r+0x1a>
 8012338:	682b      	ldr	r3, [r5, #0]
 801233a:	b103      	cbz	r3, 801233e <_sbrk_r+0x1a>
 801233c:	6023      	str	r3, [r4, #0]
 801233e:	bd38      	pop	{r3, r4, r5, pc}
 8012340:	20008460 	.word	0x20008460

08012344 <abort>:
 8012344:	b508      	push	{r3, lr}
 8012346:	2006      	movs	r0, #6
 8012348:	f000 fa2e 	bl	80127a8 <raise>
 801234c:	2001      	movs	r0, #1
 801234e:	f7ef ff49 	bl	80021e4 <_exit>

08012352 <_realloc_r>:
 8012352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012356:	4680      	mov	r8, r0
 8012358:	4615      	mov	r5, r2
 801235a:	460c      	mov	r4, r1
 801235c:	b921      	cbnz	r1, 8012368 <_realloc_r+0x16>
 801235e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012362:	4611      	mov	r1, r2
 8012364:	f7ff bb94 	b.w	8011a90 <_malloc_r>
 8012368:	b92a      	cbnz	r2, 8012376 <_realloc_r+0x24>
 801236a:	f7ff fb1d 	bl	80119a8 <_free_r>
 801236e:	2400      	movs	r4, #0
 8012370:	4620      	mov	r0, r4
 8012372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012376:	f000 fa33 	bl	80127e0 <_malloc_usable_size_r>
 801237a:	4285      	cmp	r5, r0
 801237c:	4606      	mov	r6, r0
 801237e:	d802      	bhi.n	8012386 <_realloc_r+0x34>
 8012380:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012384:	d8f4      	bhi.n	8012370 <_realloc_r+0x1e>
 8012386:	4629      	mov	r1, r5
 8012388:	4640      	mov	r0, r8
 801238a:	f7ff fb81 	bl	8011a90 <_malloc_r>
 801238e:	4607      	mov	r7, r0
 8012390:	2800      	cmp	r0, #0
 8012392:	d0ec      	beq.n	801236e <_realloc_r+0x1c>
 8012394:	42b5      	cmp	r5, r6
 8012396:	462a      	mov	r2, r5
 8012398:	4621      	mov	r1, r4
 801239a:	bf28      	it	cs
 801239c:	4632      	movcs	r2, r6
 801239e:	f7ff fad6 	bl	801194e <memcpy>
 80123a2:	4621      	mov	r1, r4
 80123a4:	4640      	mov	r0, r8
 80123a6:	f7ff faff 	bl	80119a8 <_free_r>
 80123aa:	463c      	mov	r4, r7
 80123ac:	e7e0      	b.n	8012370 <_realloc_r+0x1e>

080123ae <__sfputc_r>:
 80123ae:	6893      	ldr	r3, [r2, #8]
 80123b0:	3b01      	subs	r3, #1
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	b410      	push	{r4}
 80123b6:	6093      	str	r3, [r2, #8]
 80123b8:	da08      	bge.n	80123cc <__sfputc_r+0x1e>
 80123ba:	6994      	ldr	r4, [r2, #24]
 80123bc:	42a3      	cmp	r3, r4
 80123be:	db01      	blt.n	80123c4 <__sfputc_r+0x16>
 80123c0:	290a      	cmp	r1, #10
 80123c2:	d103      	bne.n	80123cc <__sfputc_r+0x1e>
 80123c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123c8:	f000 b932 	b.w	8012630 <__swbuf_r>
 80123cc:	6813      	ldr	r3, [r2, #0]
 80123ce:	1c58      	adds	r0, r3, #1
 80123d0:	6010      	str	r0, [r2, #0]
 80123d2:	7019      	strb	r1, [r3, #0]
 80123d4:	4608      	mov	r0, r1
 80123d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123da:	4770      	bx	lr

080123dc <__sfputs_r>:
 80123dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123de:	4606      	mov	r6, r0
 80123e0:	460f      	mov	r7, r1
 80123e2:	4614      	mov	r4, r2
 80123e4:	18d5      	adds	r5, r2, r3
 80123e6:	42ac      	cmp	r4, r5
 80123e8:	d101      	bne.n	80123ee <__sfputs_r+0x12>
 80123ea:	2000      	movs	r0, #0
 80123ec:	e007      	b.n	80123fe <__sfputs_r+0x22>
 80123ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123f2:	463a      	mov	r2, r7
 80123f4:	4630      	mov	r0, r6
 80123f6:	f7ff ffda 	bl	80123ae <__sfputc_r>
 80123fa:	1c43      	adds	r3, r0, #1
 80123fc:	d1f3      	bne.n	80123e6 <__sfputs_r+0xa>
 80123fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012400 <_vfiprintf_r>:
 8012400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012404:	460d      	mov	r5, r1
 8012406:	b09d      	sub	sp, #116	@ 0x74
 8012408:	4614      	mov	r4, r2
 801240a:	4698      	mov	r8, r3
 801240c:	4606      	mov	r6, r0
 801240e:	b118      	cbz	r0, 8012418 <_vfiprintf_r+0x18>
 8012410:	6a03      	ldr	r3, [r0, #32]
 8012412:	b90b      	cbnz	r3, 8012418 <_vfiprintf_r+0x18>
 8012414:	f7ff f930 	bl	8011678 <__sinit>
 8012418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801241a:	07d9      	lsls	r1, r3, #31
 801241c:	d405      	bmi.n	801242a <_vfiprintf_r+0x2a>
 801241e:	89ab      	ldrh	r3, [r5, #12]
 8012420:	059a      	lsls	r2, r3, #22
 8012422:	d402      	bmi.n	801242a <_vfiprintf_r+0x2a>
 8012424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012426:	f7ff fa90 	bl	801194a <__retarget_lock_acquire_recursive>
 801242a:	89ab      	ldrh	r3, [r5, #12]
 801242c:	071b      	lsls	r3, r3, #28
 801242e:	d501      	bpl.n	8012434 <_vfiprintf_r+0x34>
 8012430:	692b      	ldr	r3, [r5, #16]
 8012432:	b99b      	cbnz	r3, 801245c <_vfiprintf_r+0x5c>
 8012434:	4629      	mov	r1, r5
 8012436:	4630      	mov	r0, r6
 8012438:	f000 f938 	bl	80126ac <__swsetup_r>
 801243c:	b170      	cbz	r0, 801245c <_vfiprintf_r+0x5c>
 801243e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012440:	07dc      	lsls	r4, r3, #31
 8012442:	d504      	bpl.n	801244e <_vfiprintf_r+0x4e>
 8012444:	f04f 30ff 	mov.w	r0, #4294967295
 8012448:	b01d      	add	sp, #116	@ 0x74
 801244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801244e:	89ab      	ldrh	r3, [r5, #12]
 8012450:	0598      	lsls	r0, r3, #22
 8012452:	d4f7      	bmi.n	8012444 <_vfiprintf_r+0x44>
 8012454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012456:	f7ff fa79 	bl	801194c <__retarget_lock_release_recursive>
 801245a:	e7f3      	b.n	8012444 <_vfiprintf_r+0x44>
 801245c:	2300      	movs	r3, #0
 801245e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012460:	2320      	movs	r3, #32
 8012462:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012466:	f8cd 800c 	str.w	r8, [sp, #12]
 801246a:	2330      	movs	r3, #48	@ 0x30
 801246c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801261c <_vfiprintf_r+0x21c>
 8012470:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012474:	f04f 0901 	mov.w	r9, #1
 8012478:	4623      	mov	r3, r4
 801247a:	469a      	mov	sl, r3
 801247c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012480:	b10a      	cbz	r2, 8012486 <_vfiprintf_r+0x86>
 8012482:	2a25      	cmp	r2, #37	@ 0x25
 8012484:	d1f9      	bne.n	801247a <_vfiprintf_r+0x7a>
 8012486:	ebba 0b04 	subs.w	fp, sl, r4
 801248a:	d00b      	beq.n	80124a4 <_vfiprintf_r+0xa4>
 801248c:	465b      	mov	r3, fp
 801248e:	4622      	mov	r2, r4
 8012490:	4629      	mov	r1, r5
 8012492:	4630      	mov	r0, r6
 8012494:	f7ff ffa2 	bl	80123dc <__sfputs_r>
 8012498:	3001      	adds	r0, #1
 801249a:	f000 80a7 	beq.w	80125ec <_vfiprintf_r+0x1ec>
 801249e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80124a0:	445a      	add	r2, fp
 80124a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80124a4:	f89a 3000 	ldrb.w	r3, [sl]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	f000 809f 	beq.w	80125ec <_vfiprintf_r+0x1ec>
 80124ae:	2300      	movs	r3, #0
 80124b0:	f04f 32ff 	mov.w	r2, #4294967295
 80124b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124b8:	f10a 0a01 	add.w	sl, sl, #1
 80124bc:	9304      	str	r3, [sp, #16]
 80124be:	9307      	str	r3, [sp, #28]
 80124c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80124c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80124c6:	4654      	mov	r4, sl
 80124c8:	2205      	movs	r2, #5
 80124ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124ce:	4853      	ldr	r0, [pc, #332]	@ (801261c <_vfiprintf_r+0x21c>)
 80124d0:	f7ed fe8e 	bl	80001f0 <memchr>
 80124d4:	9a04      	ldr	r2, [sp, #16]
 80124d6:	b9d8      	cbnz	r0, 8012510 <_vfiprintf_r+0x110>
 80124d8:	06d1      	lsls	r1, r2, #27
 80124da:	bf44      	itt	mi
 80124dc:	2320      	movmi	r3, #32
 80124de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124e2:	0713      	lsls	r3, r2, #28
 80124e4:	bf44      	itt	mi
 80124e6:	232b      	movmi	r3, #43	@ 0x2b
 80124e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124ec:	f89a 3000 	ldrb.w	r3, [sl]
 80124f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80124f2:	d015      	beq.n	8012520 <_vfiprintf_r+0x120>
 80124f4:	9a07      	ldr	r2, [sp, #28]
 80124f6:	4654      	mov	r4, sl
 80124f8:	2000      	movs	r0, #0
 80124fa:	f04f 0c0a 	mov.w	ip, #10
 80124fe:	4621      	mov	r1, r4
 8012500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012504:	3b30      	subs	r3, #48	@ 0x30
 8012506:	2b09      	cmp	r3, #9
 8012508:	d94b      	bls.n	80125a2 <_vfiprintf_r+0x1a2>
 801250a:	b1b0      	cbz	r0, 801253a <_vfiprintf_r+0x13a>
 801250c:	9207      	str	r2, [sp, #28]
 801250e:	e014      	b.n	801253a <_vfiprintf_r+0x13a>
 8012510:	eba0 0308 	sub.w	r3, r0, r8
 8012514:	fa09 f303 	lsl.w	r3, r9, r3
 8012518:	4313      	orrs	r3, r2
 801251a:	9304      	str	r3, [sp, #16]
 801251c:	46a2      	mov	sl, r4
 801251e:	e7d2      	b.n	80124c6 <_vfiprintf_r+0xc6>
 8012520:	9b03      	ldr	r3, [sp, #12]
 8012522:	1d19      	adds	r1, r3, #4
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	9103      	str	r1, [sp, #12]
 8012528:	2b00      	cmp	r3, #0
 801252a:	bfbb      	ittet	lt
 801252c:	425b      	neglt	r3, r3
 801252e:	f042 0202 	orrlt.w	r2, r2, #2
 8012532:	9307      	strge	r3, [sp, #28]
 8012534:	9307      	strlt	r3, [sp, #28]
 8012536:	bfb8      	it	lt
 8012538:	9204      	strlt	r2, [sp, #16]
 801253a:	7823      	ldrb	r3, [r4, #0]
 801253c:	2b2e      	cmp	r3, #46	@ 0x2e
 801253e:	d10a      	bne.n	8012556 <_vfiprintf_r+0x156>
 8012540:	7863      	ldrb	r3, [r4, #1]
 8012542:	2b2a      	cmp	r3, #42	@ 0x2a
 8012544:	d132      	bne.n	80125ac <_vfiprintf_r+0x1ac>
 8012546:	9b03      	ldr	r3, [sp, #12]
 8012548:	1d1a      	adds	r2, r3, #4
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	9203      	str	r2, [sp, #12]
 801254e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012552:	3402      	adds	r4, #2
 8012554:	9305      	str	r3, [sp, #20]
 8012556:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801262c <_vfiprintf_r+0x22c>
 801255a:	7821      	ldrb	r1, [r4, #0]
 801255c:	2203      	movs	r2, #3
 801255e:	4650      	mov	r0, sl
 8012560:	f7ed fe46 	bl	80001f0 <memchr>
 8012564:	b138      	cbz	r0, 8012576 <_vfiprintf_r+0x176>
 8012566:	9b04      	ldr	r3, [sp, #16]
 8012568:	eba0 000a 	sub.w	r0, r0, sl
 801256c:	2240      	movs	r2, #64	@ 0x40
 801256e:	4082      	lsls	r2, r0
 8012570:	4313      	orrs	r3, r2
 8012572:	3401      	adds	r4, #1
 8012574:	9304      	str	r3, [sp, #16]
 8012576:	f814 1b01 	ldrb.w	r1, [r4], #1
 801257a:	4829      	ldr	r0, [pc, #164]	@ (8012620 <_vfiprintf_r+0x220>)
 801257c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012580:	2206      	movs	r2, #6
 8012582:	f7ed fe35 	bl	80001f0 <memchr>
 8012586:	2800      	cmp	r0, #0
 8012588:	d03f      	beq.n	801260a <_vfiprintf_r+0x20a>
 801258a:	4b26      	ldr	r3, [pc, #152]	@ (8012624 <_vfiprintf_r+0x224>)
 801258c:	bb1b      	cbnz	r3, 80125d6 <_vfiprintf_r+0x1d6>
 801258e:	9b03      	ldr	r3, [sp, #12]
 8012590:	3307      	adds	r3, #7
 8012592:	f023 0307 	bic.w	r3, r3, #7
 8012596:	3308      	adds	r3, #8
 8012598:	9303      	str	r3, [sp, #12]
 801259a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801259c:	443b      	add	r3, r7
 801259e:	9309      	str	r3, [sp, #36]	@ 0x24
 80125a0:	e76a      	b.n	8012478 <_vfiprintf_r+0x78>
 80125a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80125a6:	460c      	mov	r4, r1
 80125a8:	2001      	movs	r0, #1
 80125aa:	e7a8      	b.n	80124fe <_vfiprintf_r+0xfe>
 80125ac:	2300      	movs	r3, #0
 80125ae:	3401      	adds	r4, #1
 80125b0:	9305      	str	r3, [sp, #20]
 80125b2:	4619      	mov	r1, r3
 80125b4:	f04f 0c0a 	mov.w	ip, #10
 80125b8:	4620      	mov	r0, r4
 80125ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125be:	3a30      	subs	r2, #48	@ 0x30
 80125c0:	2a09      	cmp	r2, #9
 80125c2:	d903      	bls.n	80125cc <_vfiprintf_r+0x1cc>
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d0c6      	beq.n	8012556 <_vfiprintf_r+0x156>
 80125c8:	9105      	str	r1, [sp, #20]
 80125ca:	e7c4      	b.n	8012556 <_vfiprintf_r+0x156>
 80125cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80125d0:	4604      	mov	r4, r0
 80125d2:	2301      	movs	r3, #1
 80125d4:	e7f0      	b.n	80125b8 <_vfiprintf_r+0x1b8>
 80125d6:	ab03      	add	r3, sp, #12
 80125d8:	9300      	str	r3, [sp, #0]
 80125da:	462a      	mov	r2, r5
 80125dc:	4b12      	ldr	r3, [pc, #72]	@ (8012628 <_vfiprintf_r+0x228>)
 80125de:	a904      	add	r1, sp, #16
 80125e0:	4630      	mov	r0, r6
 80125e2:	f3af 8000 	nop.w
 80125e6:	4607      	mov	r7, r0
 80125e8:	1c78      	adds	r0, r7, #1
 80125ea:	d1d6      	bne.n	801259a <_vfiprintf_r+0x19a>
 80125ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80125ee:	07d9      	lsls	r1, r3, #31
 80125f0:	d405      	bmi.n	80125fe <_vfiprintf_r+0x1fe>
 80125f2:	89ab      	ldrh	r3, [r5, #12]
 80125f4:	059a      	lsls	r2, r3, #22
 80125f6:	d402      	bmi.n	80125fe <_vfiprintf_r+0x1fe>
 80125f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80125fa:	f7ff f9a7 	bl	801194c <__retarget_lock_release_recursive>
 80125fe:	89ab      	ldrh	r3, [r5, #12]
 8012600:	065b      	lsls	r3, r3, #25
 8012602:	f53f af1f 	bmi.w	8012444 <_vfiprintf_r+0x44>
 8012606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012608:	e71e      	b.n	8012448 <_vfiprintf_r+0x48>
 801260a:	ab03      	add	r3, sp, #12
 801260c:	9300      	str	r3, [sp, #0]
 801260e:	462a      	mov	r2, r5
 8012610:	4b05      	ldr	r3, [pc, #20]	@ (8012628 <_vfiprintf_r+0x228>)
 8012612:	a904      	add	r1, sp, #16
 8012614:	4630      	mov	r0, r6
 8012616:	f7ff fc8d 	bl	8011f34 <_printf_i>
 801261a:	e7e4      	b.n	80125e6 <_vfiprintf_r+0x1e6>
 801261c:	080131db 	.word	0x080131db
 8012620:	080131e5 	.word	0x080131e5
 8012624:	00000000 	.word	0x00000000
 8012628:	080123dd 	.word	0x080123dd
 801262c:	080131e1 	.word	0x080131e1

08012630 <__swbuf_r>:
 8012630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012632:	460e      	mov	r6, r1
 8012634:	4614      	mov	r4, r2
 8012636:	4605      	mov	r5, r0
 8012638:	b118      	cbz	r0, 8012642 <__swbuf_r+0x12>
 801263a:	6a03      	ldr	r3, [r0, #32]
 801263c:	b90b      	cbnz	r3, 8012642 <__swbuf_r+0x12>
 801263e:	f7ff f81b 	bl	8011678 <__sinit>
 8012642:	69a3      	ldr	r3, [r4, #24]
 8012644:	60a3      	str	r3, [r4, #8]
 8012646:	89a3      	ldrh	r3, [r4, #12]
 8012648:	071a      	lsls	r2, r3, #28
 801264a:	d501      	bpl.n	8012650 <__swbuf_r+0x20>
 801264c:	6923      	ldr	r3, [r4, #16]
 801264e:	b943      	cbnz	r3, 8012662 <__swbuf_r+0x32>
 8012650:	4621      	mov	r1, r4
 8012652:	4628      	mov	r0, r5
 8012654:	f000 f82a 	bl	80126ac <__swsetup_r>
 8012658:	b118      	cbz	r0, 8012662 <__swbuf_r+0x32>
 801265a:	f04f 37ff 	mov.w	r7, #4294967295
 801265e:	4638      	mov	r0, r7
 8012660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012662:	6823      	ldr	r3, [r4, #0]
 8012664:	6922      	ldr	r2, [r4, #16]
 8012666:	1a98      	subs	r0, r3, r2
 8012668:	6963      	ldr	r3, [r4, #20]
 801266a:	b2f6      	uxtb	r6, r6
 801266c:	4283      	cmp	r3, r0
 801266e:	4637      	mov	r7, r6
 8012670:	dc05      	bgt.n	801267e <__swbuf_r+0x4e>
 8012672:	4621      	mov	r1, r4
 8012674:	4628      	mov	r0, r5
 8012676:	f7ff fe01 	bl	801227c <_fflush_r>
 801267a:	2800      	cmp	r0, #0
 801267c:	d1ed      	bne.n	801265a <__swbuf_r+0x2a>
 801267e:	68a3      	ldr	r3, [r4, #8]
 8012680:	3b01      	subs	r3, #1
 8012682:	60a3      	str	r3, [r4, #8]
 8012684:	6823      	ldr	r3, [r4, #0]
 8012686:	1c5a      	adds	r2, r3, #1
 8012688:	6022      	str	r2, [r4, #0]
 801268a:	701e      	strb	r6, [r3, #0]
 801268c:	6962      	ldr	r2, [r4, #20]
 801268e:	1c43      	adds	r3, r0, #1
 8012690:	429a      	cmp	r2, r3
 8012692:	d004      	beq.n	801269e <__swbuf_r+0x6e>
 8012694:	89a3      	ldrh	r3, [r4, #12]
 8012696:	07db      	lsls	r3, r3, #31
 8012698:	d5e1      	bpl.n	801265e <__swbuf_r+0x2e>
 801269a:	2e0a      	cmp	r6, #10
 801269c:	d1df      	bne.n	801265e <__swbuf_r+0x2e>
 801269e:	4621      	mov	r1, r4
 80126a0:	4628      	mov	r0, r5
 80126a2:	f7ff fdeb 	bl	801227c <_fflush_r>
 80126a6:	2800      	cmp	r0, #0
 80126a8:	d0d9      	beq.n	801265e <__swbuf_r+0x2e>
 80126aa:	e7d6      	b.n	801265a <__swbuf_r+0x2a>

080126ac <__swsetup_r>:
 80126ac:	b538      	push	{r3, r4, r5, lr}
 80126ae:	4b29      	ldr	r3, [pc, #164]	@ (8012754 <__swsetup_r+0xa8>)
 80126b0:	4605      	mov	r5, r0
 80126b2:	6818      	ldr	r0, [r3, #0]
 80126b4:	460c      	mov	r4, r1
 80126b6:	b118      	cbz	r0, 80126c0 <__swsetup_r+0x14>
 80126b8:	6a03      	ldr	r3, [r0, #32]
 80126ba:	b90b      	cbnz	r3, 80126c0 <__swsetup_r+0x14>
 80126bc:	f7fe ffdc 	bl	8011678 <__sinit>
 80126c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126c4:	0719      	lsls	r1, r3, #28
 80126c6:	d422      	bmi.n	801270e <__swsetup_r+0x62>
 80126c8:	06da      	lsls	r2, r3, #27
 80126ca:	d407      	bmi.n	80126dc <__swsetup_r+0x30>
 80126cc:	2209      	movs	r2, #9
 80126ce:	602a      	str	r2, [r5, #0]
 80126d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126d4:	81a3      	strh	r3, [r4, #12]
 80126d6:	f04f 30ff 	mov.w	r0, #4294967295
 80126da:	e033      	b.n	8012744 <__swsetup_r+0x98>
 80126dc:	0758      	lsls	r0, r3, #29
 80126de:	d512      	bpl.n	8012706 <__swsetup_r+0x5a>
 80126e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80126e2:	b141      	cbz	r1, 80126f6 <__swsetup_r+0x4a>
 80126e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80126e8:	4299      	cmp	r1, r3
 80126ea:	d002      	beq.n	80126f2 <__swsetup_r+0x46>
 80126ec:	4628      	mov	r0, r5
 80126ee:	f7ff f95b 	bl	80119a8 <_free_r>
 80126f2:	2300      	movs	r3, #0
 80126f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80126f6:	89a3      	ldrh	r3, [r4, #12]
 80126f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80126fc:	81a3      	strh	r3, [r4, #12]
 80126fe:	2300      	movs	r3, #0
 8012700:	6063      	str	r3, [r4, #4]
 8012702:	6923      	ldr	r3, [r4, #16]
 8012704:	6023      	str	r3, [r4, #0]
 8012706:	89a3      	ldrh	r3, [r4, #12]
 8012708:	f043 0308 	orr.w	r3, r3, #8
 801270c:	81a3      	strh	r3, [r4, #12]
 801270e:	6923      	ldr	r3, [r4, #16]
 8012710:	b94b      	cbnz	r3, 8012726 <__swsetup_r+0x7a>
 8012712:	89a3      	ldrh	r3, [r4, #12]
 8012714:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801271c:	d003      	beq.n	8012726 <__swsetup_r+0x7a>
 801271e:	4621      	mov	r1, r4
 8012720:	4628      	mov	r0, r5
 8012722:	f000 f88b 	bl	801283c <__smakebuf_r>
 8012726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801272a:	f013 0201 	ands.w	r2, r3, #1
 801272e:	d00a      	beq.n	8012746 <__swsetup_r+0x9a>
 8012730:	2200      	movs	r2, #0
 8012732:	60a2      	str	r2, [r4, #8]
 8012734:	6962      	ldr	r2, [r4, #20]
 8012736:	4252      	negs	r2, r2
 8012738:	61a2      	str	r2, [r4, #24]
 801273a:	6922      	ldr	r2, [r4, #16]
 801273c:	b942      	cbnz	r2, 8012750 <__swsetup_r+0xa4>
 801273e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012742:	d1c5      	bne.n	80126d0 <__swsetup_r+0x24>
 8012744:	bd38      	pop	{r3, r4, r5, pc}
 8012746:	0799      	lsls	r1, r3, #30
 8012748:	bf58      	it	pl
 801274a:	6962      	ldrpl	r2, [r4, #20]
 801274c:	60a2      	str	r2, [r4, #8]
 801274e:	e7f4      	b.n	801273a <__swsetup_r+0x8e>
 8012750:	2000      	movs	r0, #0
 8012752:	e7f7      	b.n	8012744 <__swsetup_r+0x98>
 8012754:	20000124 	.word	0x20000124

08012758 <_raise_r>:
 8012758:	291f      	cmp	r1, #31
 801275a:	b538      	push	{r3, r4, r5, lr}
 801275c:	4605      	mov	r5, r0
 801275e:	460c      	mov	r4, r1
 8012760:	d904      	bls.n	801276c <_raise_r+0x14>
 8012762:	2316      	movs	r3, #22
 8012764:	6003      	str	r3, [r0, #0]
 8012766:	f04f 30ff 	mov.w	r0, #4294967295
 801276a:	bd38      	pop	{r3, r4, r5, pc}
 801276c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801276e:	b112      	cbz	r2, 8012776 <_raise_r+0x1e>
 8012770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012774:	b94b      	cbnz	r3, 801278a <_raise_r+0x32>
 8012776:	4628      	mov	r0, r5
 8012778:	f000 f830 	bl	80127dc <_getpid_r>
 801277c:	4622      	mov	r2, r4
 801277e:	4601      	mov	r1, r0
 8012780:	4628      	mov	r0, r5
 8012782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012786:	f000 b817 	b.w	80127b8 <_kill_r>
 801278a:	2b01      	cmp	r3, #1
 801278c:	d00a      	beq.n	80127a4 <_raise_r+0x4c>
 801278e:	1c59      	adds	r1, r3, #1
 8012790:	d103      	bne.n	801279a <_raise_r+0x42>
 8012792:	2316      	movs	r3, #22
 8012794:	6003      	str	r3, [r0, #0]
 8012796:	2001      	movs	r0, #1
 8012798:	e7e7      	b.n	801276a <_raise_r+0x12>
 801279a:	2100      	movs	r1, #0
 801279c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80127a0:	4620      	mov	r0, r4
 80127a2:	4798      	blx	r3
 80127a4:	2000      	movs	r0, #0
 80127a6:	e7e0      	b.n	801276a <_raise_r+0x12>

080127a8 <raise>:
 80127a8:	4b02      	ldr	r3, [pc, #8]	@ (80127b4 <raise+0xc>)
 80127aa:	4601      	mov	r1, r0
 80127ac:	6818      	ldr	r0, [r3, #0]
 80127ae:	f7ff bfd3 	b.w	8012758 <_raise_r>
 80127b2:	bf00      	nop
 80127b4:	20000124 	.word	0x20000124

080127b8 <_kill_r>:
 80127b8:	b538      	push	{r3, r4, r5, lr}
 80127ba:	4d07      	ldr	r5, [pc, #28]	@ (80127d8 <_kill_r+0x20>)
 80127bc:	2300      	movs	r3, #0
 80127be:	4604      	mov	r4, r0
 80127c0:	4608      	mov	r0, r1
 80127c2:	4611      	mov	r1, r2
 80127c4:	602b      	str	r3, [r5, #0]
 80127c6:	f7ef fcfd 	bl	80021c4 <_kill>
 80127ca:	1c43      	adds	r3, r0, #1
 80127cc:	d102      	bne.n	80127d4 <_kill_r+0x1c>
 80127ce:	682b      	ldr	r3, [r5, #0]
 80127d0:	b103      	cbz	r3, 80127d4 <_kill_r+0x1c>
 80127d2:	6023      	str	r3, [r4, #0]
 80127d4:	bd38      	pop	{r3, r4, r5, pc}
 80127d6:	bf00      	nop
 80127d8:	20008460 	.word	0x20008460

080127dc <_getpid_r>:
 80127dc:	f7ef bcea 	b.w	80021b4 <_getpid>

080127e0 <_malloc_usable_size_r>:
 80127e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127e4:	1f18      	subs	r0, r3, #4
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	bfbc      	itt	lt
 80127ea:	580b      	ldrlt	r3, [r1, r0]
 80127ec:	18c0      	addlt	r0, r0, r3
 80127ee:	4770      	bx	lr

080127f0 <__swhatbuf_r>:
 80127f0:	b570      	push	{r4, r5, r6, lr}
 80127f2:	460c      	mov	r4, r1
 80127f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127f8:	2900      	cmp	r1, #0
 80127fa:	b096      	sub	sp, #88	@ 0x58
 80127fc:	4615      	mov	r5, r2
 80127fe:	461e      	mov	r6, r3
 8012800:	da0d      	bge.n	801281e <__swhatbuf_r+0x2e>
 8012802:	89a3      	ldrh	r3, [r4, #12]
 8012804:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012808:	f04f 0100 	mov.w	r1, #0
 801280c:	bf14      	ite	ne
 801280e:	2340      	movne	r3, #64	@ 0x40
 8012810:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012814:	2000      	movs	r0, #0
 8012816:	6031      	str	r1, [r6, #0]
 8012818:	602b      	str	r3, [r5, #0]
 801281a:	b016      	add	sp, #88	@ 0x58
 801281c:	bd70      	pop	{r4, r5, r6, pc}
 801281e:	466a      	mov	r2, sp
 8012820:	f000 f848 	bl	80128b4 <_fstat_r>
 8012824:	2800      	cmp	r0, #0
 8012826:	dbec      	blt.n	8012802 <__swhatbuf_r+0x12>
 8012828:	9901      	ldr	r1, [sp, #4]
 801282a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801282e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012832:	4259      	negs	r1, r3
 8012834:	4159      	adcs	r1, r3
 8012836:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801283a:	e7eb      	b.n	8012814 <__swhatbuf_r+0x24>

0801283c <__smakebuf_r>:
 801283c:	898b      	ldrh	r3, [r1, #12]
 801283e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012840:	079d      	lsls	r5, r3, #30
 8012842:	4606      	mov	r6, r0
 8012844:	460c      	mov	r4, r1
 8012846:	d507      	bpl.n	8012858 <__smakebuf_r+0x1c>
 8012848:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801284c:	6023      	str	r3, [r4, #0]
 801284e:	6123      	str	r3, [r4, #16]
 8012850:	2301      	movs	r3, #1
 8012852:	6163      	str	r3, [r4, #20]
 8012854:	b003      	add	sp, #12
 8012856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012858:	ab01      	add	r3, sp, #4
 801285a:	466a      	mov	r2, sp
 801285c:	f7ff ffc8 	bl	80127f0 <__swhatbuf_r>
 8012860:	9f00      	ldr	r7, [sp, #0]
 8012862:	4605      	mov	r5, r0
 8012864:	4639      	mov	r1, r7
 8012866:	4630      	mov	r0, r6
 8012868:	f7ff f912 	bl	8011a90 <_malloc_r>
 801286c:	b948      	cbnz	r0, 8012882 <__smakebuf_r+0x46>
 801286e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012872:	059a      	lsls	r2, r3, #22
 8012874:	d4ee      	bmi.n	8012854 <__smakebuf_r+0x18>
 8012876:	f023 0303 	bic.w	r3, r3, #3
 801287a:	f043 0302 	orr.w	r3, r3, #2
 801287e:	81a3      	strh	r3, [r4, #12]
 8012880:	e7e2      	b.n	8012848 <__smakebuf_r+0xc>
 8012882:	89a3      	ldrh	r3, [r4, #12]
 8012884:	6020      	str	r0, [r4, #0]
 8012886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801288a:	81a3      	strh	r3, [r4, #12]
 801288c:	9b01      	ldr	r3, [sp, #4]
 801288e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012892:	b15b      	cbz	r3, 80128ac <__smakebuf_r+0x70>
 8012894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012898:	4630      	mov	r0, r6
 801289a:	f000 f81d 	bl	80128d8 <_isatty_r>
 801289e:	b128      	cbz	r0, 80128ac <__smakebuf_r+0x70>
 80128a0:	89a3      	ldrh	r3, [r4, #12]
 80128a2:	f023 0303 	bic.w	r3, r3, #3
 80128a6:	f043 0301 	orr.w	r3, r3, #1
 80128aa:	81a3      	strh	r3, [r4, #12]
 80128ac:	89a3      	ldrh	r3, [r4, #12]
 80128ae:	431d      	orrs	r5, r3
 80128b0:	81a5      	strh	r5, [r4, #12]
 80128b2:	e7cf      	b.n	8012854 <__smakebuf_r+0x18>

080128b4 <_fstat_r>:
 80128b4:	b538      	push	{r3, r4, r5, lr}
 80128b6:	4d07      	ldr	r5, [pc, #28]	@ (80128d4 <_fstat_r+0x20>)
 80128b8:	2300      	movs	r3, #0
 80128ba:	4604      	mov	r4, r0
 80128bc:	4608      	mov	r0, r1
 80128be:	4611      	mov	r1, r2
 80128c0:	602b      	str	r3, [r5, #0]
 80128c2:	f7ef fcdf 	bl	8002284 <_fstat>
 80128c6:	1c43      	adds	r3, r0, #1
 80128c8:	d102      	bne.n	80128d0 <_fstat_r+0x1c>
 80128ca:	682b      	ldr	r3, [r5, #0]
 80128cc:	b103      	cbz	r3, 80128d0 <_fstat_r+0x1c>
 80128ce:	6023      	str	r3, [r4, #0]
 80128d0:	bd38      	pop	{r3, r4, r5, pc}
 80128d2:	bf00      	nop
 80128d4:	20008460 	.word	0x20008460

080128d8 <_isatty_r>:
 80128d8:	b538      	push	{r3, r4, r5, lr}
 80128da:	4d06      	ldr	r5, [pc, #24]	@ (80128f4 <_isatty_r+0x1c>)
 80128dc:	2300      	movs	r3, #0
 80128de:	4604      	mov	r4, r0
 80128e0:	4608      	mov	r0, r1
 80128e2:	602b      	str	r3, [r5, #0]
 80128e4:	f7ef fcde 	bl	80022a4 <_isatty>
 80128e8:	1c43      	adds	r3, r0, #1
 80128ea:	d102      	bne.n	80128f2 <_isatty_r+0x1a>
 80128ec:	682b      	ldr	r3, [r5, #0]
 80128ee:	b103      	cbz	r3, 80128f2 <_isatty_r+0x1a>
 80128f0:	6023      	str	r3, [r4, #0]
 80128f2:	bd38      	pop	{r3, r4, r5, pc}
 80128f4:	20008460 	.word	0x20008460

080128f8 <_init>:
 80128f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128fa:	bf00      	nop
 80128fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128fe:	bc08      	pop	{r3}
 8012900:	469e      	mov	lr, r3
 8012902:	4770      	bx	lr

08012904 <_fini>:
 8012904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012906:	bf00      	nop
 8012908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801290a:	bc08      	pop	{r3}
 801290c:	469e      	mov	lr, r3
 801290e:	4770      	bx	lr
